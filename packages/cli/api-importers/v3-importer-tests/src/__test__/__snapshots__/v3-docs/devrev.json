{
  "auth": {
    "requirement": "ALL",
    "schemes": [
      {
        "key": "header",
        "name": {
          "name": "apiKey",
          "wireValue": "Authorization"
        },
        "valueType": {
          "container": {
            "optional": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "type": "optional"
          },
          "type": "container"
        },
        "docs": "All the DevRev APIs require a token to authenticate the user. Provide `Authorization: <token>` as a header to every API request.\n [How do I find my token?](https://devrev.ai/docs/apis/auth)",
        "type": "header"
      }
    ]
  },
  "selfHosted": false,
  "types": {
    "artifact-summary": {
      "name": {
        "typeId": "artifact-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "artifact-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifact-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "artifacts-locate-response": {
      "name": {
        "typeId": "artifacts-locate-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "artifacts-locate-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "expires_at",
              "wireValue": "expires_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expiration timestamp of the URL.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsLocateResponseExpiresAt_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The artifact's download URL.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsLocateResponseUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting an artifact's download URL.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-locate-response_example_autogenerated": {
            "url": "string"
          }
        }
      }
    },
    "artifacts-prepare-request": {
      "name": {
        "typeId": "artifacts-prepare-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "artifacts-prepare-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "file_name",
              "wireValue": "file_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the file that's being uploaded.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareRequestFileName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to prepare a URL to upload a file.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-request_example_autogenerated": {
            "file_name": "string"
          }
        }
      }
    },
    "artifacts-prepare-response": {
      "name": {
        "typeId": "artifacts-prepare-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "artifacts-prepare-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "form_data",
              "wireValue": "form_data"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifacts-prepare-response-form-data",
                  "typeId": "artifacts-prepare-response-form-data",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The POST policy form data.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormData_example_autogenerated": [
                  {
                    "key": "string",
                    "value": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The generated artifact's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "ArtifactsPrepareResponseId_example_0": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL that the file's data should be uploaded to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to preparing a URL to upload a file.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-response_example_autogenerated": {
            "form_data": [
              {
                "key": "string",
                "value": "string"
              }
            ],
            "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
            "url": "string"
          }
        }
      }
    },
    "artifacts-prepare-response-form-data": {
      "name": {
        "typeId": "artifacts-prepare-response-form-data",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "artifacts-prepare-response-form-data"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "key",
              "wireValue": "key"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Key of the form field.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormDataKey_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "value",
              "wireValue": "value"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Value corresponding to the key.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormDataValue_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-response-form-data_example_autogenerated": {
            "key": "string",
            "value": "string"
          }
        }
      }
    },
    "atom-base": {
      "name": {
        "typeId": "atom-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "atom-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "created_by",
              "wireValue": "created_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-summary",
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "created_date",
              "wireValue": "created_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the object was created.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseCreatedDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "display_id",
              "wireValue": "display_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Human-readable object ID unique to the Dev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseDisplayId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Globally unique object ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "modified_by",
              "wireValue": "modified_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-summary",
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "modified_date",
              "wireValue": "modified_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the object was last modified.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseModifiedDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "atom-base_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "atom-base-summary": {
      "name": {
        "typeId": "atom-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "atom-base-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_id",
              "wireValue": "display_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Human-readable object ID unique to the Dev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseSummaryDisplayId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Globally unique object ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseSummaryId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "atom-base-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "auth-connection": {
      "name": {
        "typeId": "auth-connection",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "enabled",
              "wireValue": "enabled"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionEnabled_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-connection-type",
              "typeId": "auth-connection-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "google_apps",
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": "auth-connection-options-google-apps",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "oidc",
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": "auth-connection-options-oidc",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "samlp",
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": "auth-connection-options-saml",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "social",
              "wireValue": "social"
            },
            "displayName": "social",
            "shape": {
              "typeId": "auth-connection-options-social",
              "name": "auth-connection-options-social",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "social",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "waad",
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": "auth-connection-options-azure-ad",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Connection object that specifies the configuration for an\nauthentication connection that is set up for a Dev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-azure-ad": {
      "name": {
        "typeId": "auth-connection-options-azure-ad",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-options-azure-ad"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "client_secret",
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdClientSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "domain",
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Domain URL of the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdDomain_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for an Azure AD\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-azure-ad_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-google-apps": {
      "name": {
        "typeId": "auth-connection-options-google-apps",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-options-google-apps"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the Google Apps authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "client_secret",
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the Google Apps authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsClientSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "tenant_domain",
              "wireValue": "tenant_domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tenant domain URL of the Google Apps authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsTenantDomain_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for a Google Apps\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-google-apps_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-oidc": {
      "name": {
        "typeId": "auth-connection-options-oidc",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-options-oidc"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "client_secret",
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcClientSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "issuer",
              "wireValue": "issuer"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Issuer URL of the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcIssuer_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for an OIDC\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-oidc_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-saml": {
      "name": {
        "typeId": "auth-connection-options-saml",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-options-saml"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "sign_in_endpoint",
              "wireValue": "sign_in_endpoint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sign In endpoint for the SAML authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsSamlSignInEndpoint_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "signing_cert",
              "wireValue": "signing_cert"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Signing certificate for the SAML authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsSamlSigningCert_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for a SAML\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-saml_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-social": {
      "name": {
        "typeId": "auth-connection-options-social",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-options-social"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-social_example_autogenerated": {}
        }
      }
    },
    "auth-connection-toggle": {
      "name": {
        "typeId": "auth-connection-toggle",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-toggle"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "disable",
              "wireValue": "disable"
            }
          },
          {
            "name": {
              "name": "enable",
              "wireValue": "enable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-toggle_example_autogenerated": "disable"
        }
      }
    },
    "auth-connection-type": {
      "name": {
        "typeId": "auth-connection-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "google_apps",
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": "oidc",
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": "samlp",
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": "social",
              "wireValue": "social"
            }
          },
          {
            "name": {
              "name": "waad",
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Defines the type for the authentication connection. The configuration\nfor each authentication connection will depend on the type value.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-type_example_autogenerated": "google_apps"
        }
      }
    },
    "auth-token": {
      "name": {
        "typeId": "auth-token",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application that requested the\ntoken. Only applicable for application access tokens.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "expires_at",
              "wireValue": "expires_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The time at which the token expires.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenExpiresAt_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "issued_at",
              "wireValue": "issued_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The time at which the token was issued.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenIssuedAt_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "requested_token_type",
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-requested-token-type",
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "scopes",
              "wireValue": "scopes"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The scopes associated with the issued token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenScopes_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-status",
                  "typeId": "auth-token-status",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "subject",
              "wireValue": "subject"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The subject of the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenSubject_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "token_hint",
              "wireValue": "token_hint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenTokenHint_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "auth-token-grant-type": {
      "name": {
        "typeId": "auth-token-grant-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token-grant-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "urn:devrev:params:oauth:grant-type:token-issue",
              "wireValue": "urn:devrev:params:oauth:grant-type:token-issue"
            }
          },
          {
            "name": {
              "name": "urn:ietf:params:oauth:grant-type:token-exchange",
              "wireValue": "urn:ietf:params:oauth:grant-type:token-exchange"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies the process of obtaining a token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-grant-type_example_autogenerated": "urn:devrev:params:oauth:grant-type:token-issue"
        }
      }
    },
    "auth-token-requested-token-type": {
      "name": {
        "typeId": "auth-token-requested-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token-requested-token-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:aat",
              "wireValue": "urn:devrev:params:oauth:token-type:aat"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:aat:public",
              "wireValue": "urn:devrev:params:oauth:token-type:aat:public"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:dev",
              "wireValue": "urn:devrev:params:oauth:token-type:dev"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:pat",
              "wireValue": "urn:devrev:params:oauth:token-type:pat"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:rev",
              "wireValue": "urn:devrev:params:oauth:token-type:rev"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:session",
              "wireValue": "urn:devrev:params:oauth:token-type:session"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:session:dev0",
              "wireValue": "urn:devrev:params:oauth:token-type:session:dev0"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:sys",
              "wireValue": "urn:devrev:params:oauth:token-type:sys"
            }
          },
          {
            "name": {
              "name": "urn:ietf:params:oauth:token-type:jwt",
              "wireValue": "urn:ietf:params:oauth:token-type:jwt"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the requested token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-requested-token-type_example_autogenerated": "urn:devrev:params:oauth:token-type:aat"
        }
      }
    },
    "auth-token-status": {
      "name": {
        "typeId": "auth-token-status",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token-status"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "active",
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": "expired",
              "wireValue": "expired"
            }
          },
          {
            "name": {
              "name": "revoked",
              "wireValue": "revoked"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of the token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-status_example_autogenerated": "active"
        }
      }
    },
    "auth-token-subject-token-type": {
      "name": {
        "typeId": "auth-token-subject-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token-subject-token-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:jwt:auth0",
              "wireValue": "urn:devrev:params:oauth:token-type:jwt:auth0"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:jwt:dev",
              "wireValue": "urn:devrev:params:oauth:token-type:jwt:dev"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:revinfo",
              "wireValue": "urn:devrev:params:oauth:token-type:revinfo"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:sysu",
              "wireValue": "urn:devrev:params:oauth:token-type:sysu"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:userinfo",
              "wireValue": "urn:devrev:params:oauth:token-type:userinfo"
            }
          },
          {
            "name": {
              "name": "urn:devrev:params:oauth:token-type:userinfo:profile",
              "wireValue": "urn:devrev:params:oauth:token-type:userinfo:profile"
            }
          },
          {
            "name": {
              "name": "urn:ietf:params:oauth:token-type:jwt",
              "wireValue": "urn:ietf:params:oauth:token-type:jwt"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the subject token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-subject-token-type_example_autogenerated": "urn:devrev:params:oauth:token-type:jwt:auth0"
        }
      }
    },
    "auth-token-token-type": {
      "name": {
        "typeId": "auth-token-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-token-token-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "bearer",
              "wireValue": "bearer"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the issued token. Bearer is the only supported token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-token-type_example_autogenerated": "bearer"
        }
      }
    },
    "auth-tokens-create-request": {
      "name": {
        "typeId": "auth-tokens-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-create-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "aud",
              "wireValue": "aud"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expected audience values with respect to the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestAud_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application which is requesting\nthe token. If no client_id is present in the request to generate an\napplication access token (AAT), DevRev will generate a client_id.\nThis client_id is only associated with an AAT.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "expires_in",
              "wireValue": "expires_in"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "LONG",
                    "v2": {
                      "type": "long"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expected validity lifetime of the token in number of days.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestExpiresIn_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "grant_type",
              "wireValue": "grant_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-grant-type",
                  "typeId": "auth-token-grant-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "requested_token_type",
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-requested-token-type",
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_info",
              "wireValue": "rev_info"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-rev-info",
                  "typeId": "auth-tokens-rev-info",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "scope",
              "wireValue": "scope"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The requested set of scopes associated with the issued token. A\nspace-delimited list of values in which the order of values does\nnot matter.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestScope_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "subject_token",
              "wireValue": "subject_token"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Represents the entity that requests the token. Not required when\nrequesting an application access token (AAT).\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestSubjectToken_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "subject_token_type",
              "wireValue": "subject_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-subject-token-type",
                  "typeId": "auth-token-subject-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "token_hint",
              "wireValue": "token_hint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestTokenHint_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A request to create a new token corresponding to the requested token\ntype.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-create-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-create-response": {
      "name": {
        "typeId": "auth-tokens-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "access_token",
              "wireValue": "access_token"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The issued JSON Web Token (JWT) corresponding to the requested\ntoken type.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseAccessToken_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "client_id",
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application which is requesting\nthe token. Only present in a response corresponding to an\napplication access token (AAT).\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseClientId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "expires_in",
              "wireValue": "expires_in"
            },
            "valueType": {
              "primitive": {
                "v1": "LONG",
                "v2": {
                  "type": "long"
                }
              },
              "type": "primitive"
            },
            "docs": "The validity lifetime of the token specified in seconds since Unix\nepoch.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseExpiresIn_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "refresh_token",
              "wireValue": "refresh_token"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A token to refresh the issued token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseRefreshToken_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "scope",
              "wireValue": "scope"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The scopes associated with the issued token. A space-delimited list\nof values in which the order of values does not matter.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseScope_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "token_type",
              "wireValue": "token_type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-token-token-type",
              "typeId": "auth-token-token-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to create a new token corresponding to the\nrequested token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-create-response_example_autogenerated": {
            "access_token": "string",
            "expires_in": 1,
            "token_type": "bearer"
          }
        }
      }
    },
    "auth-tokens-delete-request": {
      "name": {
        "typeId": "auth-tokens-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "token_id",
              "wireValue": "token_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The unique identifier for the token under a given Dev organization.\nIf no token ID is provided, then the token ID will be set from the\nJTI claim of the token in the authorization header.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensDeleteRequestTokenId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to revoke the token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-delete-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-get-response": {
      "name": {
        "typeId": "auth-tokens-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "token",
              "wireValue": "token"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-token",
              "typeId": "auth-token",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to get the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-get-response_example_autogenerated": {
            "token": {
              "id": "string"
            }
          }
        }
      }
    },
    "auth-tokens-list-response": {
      "name": {
        "typeId": "auth-tokens-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tokens",
              "wireValue": "tokens"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token",
                  "typeId": "auth-token",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of token metadata.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensListResponseTokens_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to list the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-list-response_example_autogenerated": {
            "tokens": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "auth-tokens-org-traits": {
      "name": {
        "typeId": "auth-tokens-org-traits",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-org-traits"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The display name of the Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensOrgTraitsDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "domain",
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The domain of the Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensOrgTraitsDomain_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries Rev org info.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-org-traits_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-rev-info": {
      "name": {
        "typeId": "auth-tokens-rev-info",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-rev-info"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "org_ref",
              "wireValue": "org_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier which uniquely identifies a Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoOrgRef_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "org_traits",
              "wireValue": "org_traits"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-org-traits",
                  "typeId": "auth-tokens-org-traits",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_user_id",
              "wireValue": "rev_user_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The unique ID of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoRevUserId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "user_ref",
              "wireValue": "user_ref"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "An identifier which uniquely identifies a Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoUserRef_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "user_traits",
              "wireValue": "user_traits"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-user-traits",
                  "typeId": "auth-tokens-user-traits",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries info corresponding to the Rev user to be provisioned and/or\nissue a Rev session token.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-rev-info_example_autogenerated": {
            "user_ref": "string"
          }
        }
      }
    },
    "auth-tokens-self-delete-request": {
      "name": {
        "typeId": "auth-tokens-self-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-self-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "requested_token_type",
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-token-requested-token-type",
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete all the tokens created by the authenticated user,\nthat match with the provided token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-self-delete-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-update-request": {
      "name": {
        "typeId": "auth-tokens-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-update-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "token_hint",
              "wireValue": "token_hint"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUpdateRequestTokenHint_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "token_id",
              "wireValue": "token_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The unique identifier of the token under a given Dev organization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUpdateRequestTokenId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A request to update the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-update-request_example_autogenerated": {
            "token_hint": "string",
            "token_id": "string"
          }
        }
      }
    },
    "auth-tokens-update-response": {
      "name": {
        "typeId": "auth-tokens-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "token",
              "wireValue": "token"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-token",
              "typeId": "auth-token",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to update the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-update-response_example_autogenerated": {
            "token": {
              "id": "string"
            }
          }
        }
      }
    },
    "auth-tokens-user-traits": {
      "name": {
        "typeId": "auth-tokens-user-traits",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens-user-traits"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The display name of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "email",
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The email address of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsEmail_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "full_name",
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The full name of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsFullName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries Rev user info.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-user-traits_example_autogenerated": {}
        }
      }
    },
    "capability": {
      "name": {
        "typeId": "capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "capability"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "capability_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "capability-summary": {
      "name": {
        "typeId": "capability-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "capability-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "capability-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "dev-org-auth-connections-create-request": {
      "name": {
        "typeId": "dev-org-auth-connections-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-create-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsCreateRequestDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-create-request-type",
              "typeId": "dev-org-auth-connections-create-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "google_apps",
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": "auth-connection-options-google-apps",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "oidc",
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": "auth-connection-options-oidc",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "samlp",
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": "auth-connection-options-saml",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "waad",
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": "auth-connection-options-azure-ad",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to create a new enterprise authentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-request_example_autogenerated": {}
        }
      }
    },
    "dev-org-auth-connections-create-request-type": {
      "name": {
        "typeId": "dev-org-auth-connections-create-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-create-request-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "google_apps",
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": "oidc",
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": "samlp",
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": "waad",
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Defines the type for the authentication connection. Different types of\nauthentication connections have different configuration parameters.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-request-type_example_autogenerated": "google_apps"
        }
      }
    },
    "dev-org-auth-connections-create-response": {
      "name": {
        "typeId": "dev-org-auth-connections-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "auth_connection",
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-connection",
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to create a new enterprise authentication\nconnection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-org-auth-connections-delete-request": {
      "name": {
        "typeId": "dev-org-auth-connections-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection to be deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsDeleteRequestId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to delete an enterprise authentication connection for a Dev\norganization. A default connection and a connection which is currently\nenabled cannot be deleted.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-delete-request_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "dev-org-auth-connections-get-response": {
      "name": {
        "typeId": "dev-org-auth-connections-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "auth_connection",
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-connection",
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object encapsulating the configuration details of an\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-get-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-org-auth-connections-list-response": {
      "name": {
        "typeId": "dev-org-auth-connections-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "auth_connections",
              "wireValue": "auth_connections"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-connection",
                  "typeId": "auth-connection",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "List of all the authentication connections currently configured for\na Dev organization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsListResponseAuthConnections_example_autogenerated": [
                  {}
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object for the request to list all the social and enterprise\nauthentication connections configured for a Dev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-list-response_example_autogenerated": {
            "auth_connections": [
              {}
            ]
          }
        }
      }
    },
    "dev-org-auth-connections-toggle-request": {
      "name": {
        "typeId": "dev-org-auth-connections-toggle-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-toggle-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection to be toggled.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsToggleRequestId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "toggle",
              "wireValue": "toggle"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-connection-toggle",
                  "typeId": "auth-connection-toggle",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to enable or disable an authentication connection for a Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-toggle-request_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "dev-org-auth-connections-update-request": {
      "name": {
        "typeId": "dev-org-auth-connections-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-update-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsUpdateRequestDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection which is to be updated.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsUpdateRequestId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-update-request-type",
              "typeId": "dev-org-auth-connections-update-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "google_apps",
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": "auth-connection-options-google-apps",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "none",
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": "empty",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "oidc",
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": "auth-connection-options-oidc",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "samlp",
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": "auth-connection-options-saml",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "waad",
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": "auth-connection-options-azure-ad",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to update an enterprise authentication connection for a Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-request_example_autogenerated": {}
        }
      }
    },
    "dev-org-auth-connections-update-request-type": {
      "name": {
        "typeId": "dev-org-auth-connections-update-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-update-request-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "google_apps",
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": "none",
              "wireValue": "none"
            }
          },
          {
            "name": {
              "name": "oidc",
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": "samlp",
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": "waad",
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies the type for the authentication connection. Different types\nof authentication connections have different configuration parameters\nthat can be updated.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-request-type_example_autogenerated": "google_apps"
        }
      }
    },
    "dev-org-auth-connections-update-response": {
      "name": {
        "typeId": "dev-org-auth-connections-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-org-auth-connections-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "auth_connection",
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-connection",
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to update an enterprise authentication\nconnection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-user": {
      "name": {
        "typeId": "dev-user",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-user"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "external_identities",
              "wireValue": "external_identities"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "external-identity",
                      "typeId": "external-identity",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "IDs of the Dev User outside the DevRev SOR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUserExternalIdentities_example_autogenerated": [
                  {}
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "user-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "user-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-user_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "dev-user-summary": {
      "name": {
        "typeId": "dev-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-user-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "user-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-user-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "dev-users-list-response": {
      "name": {
        "typeId": "dev-users-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-users-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "dev_users",
              "wireValue": "dev_users"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-user",
                  "typeId": "dev-user",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of Dev users.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponseDevUsers_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the Dev users.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-users-list-response_example_autogenerated": {
            "dev_users": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "dev-users-self-response": {
      "name": {
        "typeId": "dev-users-self-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "dev-users-self-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "dev_user",
              "wireValue": "dev_user"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-user",
              "typeId": "dev-user",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting the information for the authenticated user.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-users-self-response_example_autogenerated": {
            "dev_user": {
              "id": "string"
            }
          }
        }
      }
    },
    "empty": {
      "name": {
        "typeId": "empty",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "empty"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "empty_example_autogenerated": {}
        }
      }
    },
    "enhancement": {
      "name": {
        "typeId": "enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "enhancement"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the enhancement is expected to be closed.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EnhancementTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "enhancement_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "enhancement-summary": {
      "name": {
        "typeId": "enhancement-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "enhancement-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "enhancement-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "error-bad-request": {
      "name": {
        "typeId": "error-bad-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-bad-request-type",
              "typeId": "error-bad-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-bad-request": {
      "name": {
        "typeId": "error-bad-request-bad-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-bad-request"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-bad-request_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-invalid-enum-value": {
      "name": {
        "typeId": "error-bad-request-invalid-enum-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-invalid-enum-value"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "allowed_values",
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The allowed values for the field.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueAllowedValues_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "field_name",
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The field whose enum value is invalid.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueFieldName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "value",
              "wireValue": "value"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The value that was received.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueValue_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-invalid-enum-value_example_autogenerated": {
            "allowed_values": [
              "string"
            ],
            "field_name": "string",
            "value": "string"
          }
        }
      }
    },
    "error-bad-request-missing-required-field": {
      "name": {
        "typeId": "error-bad-request-missing-required-field",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-missing-required-field"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "field_name",
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The missing field's name.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestMissingRequiredFieldFieldName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-missing-required-field_example_autogenerated": {
            "field_name": "string"
          }
        }
      }
    },
    "error-bad-request-parse-error": {
      "name": {
        "typeId": "error-bad-request-parse-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-parse-error"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-parse-error_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-type": {
      "name": {
        "typeId": "error-bad-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "bad_request",
              "wireValue": "bad_request"
            }
          },
          {
            "name": {
              "name": "invalid_enum_value",
              "wireValue": "invalid_enum_value"
            }
          },
          {
            "name": {
              "name": "missing_required_field",
              "wireValue": "missing_required_field"
            }
          },
          {
            "name": {
              "name": "parse_error",
              "wireValue": "parse_error"
            }
          },
          {
            "name": {
              "name": "value_not_permitted",
              "wireValue": "value_not_permitted"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-type_example_autogenerated": "bad_request"
        }
      }
    },
    "error-bad-request-value-not-permitted": {
      "name": {
        "typeId": "error-bad-request-value-not-permitted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request-value-not-permitted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "field_name",
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The field whose value is not permitted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestValueNotPermittedFieldName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "reason",
              "wireValue": "reason"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The reason the value isn't permitted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestValueNotPermittedReason_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-value-not-permitted_example_autogenerated": {
            "field_name": "string"
          }
        }
      }
    },
    "error-base": {
      "name": {
        "typeId": "error-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message",
              "wireValue": "message"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The message associated with the error.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBaseMessage_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-base_example_autogenerated": {}
        }
      }
    },
    "error-forbidden": {
      "name": {
        "typeId": "error-forbidden",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-forbidden-type",
              "typeId": "error-forbidden-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden_example_autogenerated": {}
        }
      }
    },
    "error-forbidden-forbidden": {
      "name": {
        "typeId": "error-forbidden-forbidden",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden-forbidden"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden-forbidden_example_autogenerated": {}
        }
      }
    },
    "error-forbidden-type": {
      "name": {
        "typeId": "error-forbidden-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "forbidden",
              "wireValue": "forbidden"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden-type_example_autogenerated": "forbidden"
        }
      }
    },
    "error-internal-server-error": {
      "name": {
        "typeId": "error-internal-server-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "reference_id",
              "wireValue": "reference_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A unique ID that's generated for the error that can be used for\ninquiry.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorInternalServerErrorReferenceId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-internal-server-error-type",
              "typeId": "error-internal-server-error-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error_example_autogenerated": {}
        }
      }
    },
    "error-internal-server-error-internal-error": {
      "name": {
        "typeId": "error-internal-server-error-internal-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error-internal-error"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error-internal-error_example_autogenerated": {}
        }
      }
    },
    "error-internal-server-error-type": {
      "name": {
        "typeId": "error-internal-server-error-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "internal_error",
              "wireValue": "internal_error"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error-type_example_autogenerated": "internal_error"
        }
      }
    },
    "error-not-found": {
      "name": {
        "typeId": "error-not-found",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-not-found-type",
              "typeId": "error-not-found-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found_example_autogenerated": {}
        }
      }
    },
    "error-not-found-not-found": {
      "name": {
        "typeId": "error-not-found-not-found",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found-not-found"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found-not-found_example_autogenerated": {}
        }
      }
    },
    "error-not-found-type": {
      "name": {
        "typeId": "error-not-found-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "not_found",
              "wireValue": "not_found"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found-type_example_autogenerated": "not_found"
        }
      }
    },
    "error-service-unavailable": {
      "name": {
        "typeId": "error-service-unavailable",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-service-unavailable-type",
              "typeId": "error-service-unavailable-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable_example_autogenerated": {}
        }
      }
    },
    "error-service-unavailable-service-unavailable": {
      "name": {
        "typeId": "error-service-unavailable-service-unavailable",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable-service-unavailable"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable-service-unavailable_example_autogenerated": {}
        }
      }
    },
    "error-service-unavailable-type": {
      "name": {
        "typeId": "error-service-unavailable-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "service_unavailable",
              "wireValue": "service_unavailable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable-type_example_autogenerated": "service_unavailable"
        }
      }
    },
    "error-too-many-requests": {
      "name": {
        "typeId": "error-too-many-requests",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "retry_after",
              "wireValue": "retry_after"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "LONG",
                    "v2": {
                      "type": "long"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The number of seconds after which the client should retry.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorTooManyRequestsRetryAfter_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-too-many-requests-type",
              "typeId": "error-too-many-requests-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests_example_autogenerated": {}
        }
      }
    },
    "error-too-many-requests-too-many-requests": {
      "name": {
        "typeId": "error-too-many-requests-too-many-requests",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests-too-many-requests"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests-too-many-requests_example_autogenerated": {}
        }
      }
    },
    "error-too-many-requests-type": {
      "name": {
        "typeId": "error-too-many-requests-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "too_many_requests",
              "wireValue": "too_many_requests"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests-type_example_autogenerated": "too_many_requests"
        }
      }
    },
    "error-unauthorized": {
      "name": {
        "typeId": "error-unauthorized",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "error-unauthorized-type",
              "typeId": "error-unauthorized-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "error-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized_example_autogenerated": {}
        }
      }
    },
    "error-unauthorized-type": {
      "name": {
        "typeId": "error-unauthorized-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "unauthenticated",
              "wireValue": "unauthenticated"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized-type_example_autogenerated": "unauthenticated"
        }
      }
    },
    "error-unauthorized-unauthenticated": {
      "name": {
        "typeId": "error-unauthorized-unauthenticated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized-unauthenticated"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized-unauthenticated_example_autogenerated": {}
        }
      }
    },
    "event-part-created": {
      "name": {
        "typeId": "event-part-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-part-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "part",
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part",
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-created_example_autogenerated": {
            "part": {
              "id": "string",
              "name": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ]
            }
          }
        }
      }
    },
    "event-part-deleted": {
      "name": {
        "typeId": "event-part-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-part-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventPartDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
          }
        }
      }
    },
    "event-part-updated": {
      "name": {
        "typeId": "event-part-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-part-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "part",
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part",
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-updated_example_autogenerated": {
            "part": {
              "id": "string",
              "name": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ]
            }
          }
        }
      }
    },
    "event-rev-org-created": {
      "name": {
        "typeId": "event-rev-org-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-rev-org-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-org",
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-created_example_autogenerated": {
            "rev_org": {
              "id": "string"
            }
          }
        }
      }
    },
    "event-rev-org-deleted": {
      "name": {
        "typeId": "event-rev-org-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-rev-org-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the Rev organization that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventRevOrgDeletedId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-deleted_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "event-rev-org-updated": {
      "name": {
        "typeId": "event-rev-org-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-rev-org-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-org",
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-updated_example_autogenerated": {
            "rev_org": {
              "id": "string"
            }
          }
        }
      }
    },
    "event-tag-created": {
      "name": {
        "typeId": "event-tag-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-tag-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag",
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-created_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "event-tag-deleted": {
      "name": {
        "typeId": "event-tag-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-tag-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventTagDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "event-tag-updated": {
      "name": {
        "typeId": "event-tag-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-tag-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag",
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-updated_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "event-timeline-entry-created": {
      "name": {
        "typeId": "event-timeline-entry-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-timeline-entry-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "entry",
              "wireValue": "entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry",
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-created_example_autogenerated": {
            "entry": {
              "id": "string"
            }
          }
        }
      }
    },
    "event-timeline-entry-deleted": {
      "name": {
        "typeId": "event-timeline-entry-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-timeline-entry-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the timeline entry that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EventTimelineEntryDeletedId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-deleted_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "event-timeline-entry-updated": {
      "name": {
        "typeId": "event-timeline-entry-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-timeline-entry-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "entry",
              "wireValue": "entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry",
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-updated_example_autogenerated": {
            "entry": {
              "id": "string"
            }
          }
        }
      }
    },
    "event-webhook-created": {
      "name": {
        "typeId": "event-webhook-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-webhook-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhook",
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook",
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-created_example_autogenerated": {
            "webhook": {
              "id": "string",
              "secret": "string",
              "status": "active",
              "url": "string"
            }
          }
        }
      }
    },
    "event-webhook-deleted": {
      "name": {
        "typeId": "event-webhook-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-webhook-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the webhook that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventWebhookDeletedId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-deleted_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "event-webhook-updated": {
      "name": {
        "typeId": "event-webhook-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-webhook-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhook",
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook",
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-updated_example_autogenerated": {
            "webhook": {
              "id": "string",
              "secret": "string",
              "status": "active",
              "url": "string"
            }
          }
        }
      }
    },
    "event-work-created": {
      "name": {
        "typeId": "event-work-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-work-created"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "work",
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work",
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-created_example_autogenerated": {
            "work": {
              "id": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ],
              "title": "string"
            }
          }
        }
      }
    },
    "event-work-deleted": {
      "name": {
        "typeId": "event-work-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-work-deleted"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the work that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventWorkDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
          }
        }
      }
    },
    "event-work-updated": {
      "name": {
        "typeId": "event-work-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "event-work-updated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "work",
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work",
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-updated_example_autogenerated": {
            "work": {
              "id": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ],
              "title": "string"
            }
          }
        }
      }
    },
    "external-identity": {
      "name": {
        "typeId": "external-identity",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "external-identity"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "External identity of a user.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "external-identity_example_autogenerated": {}
        }
      }
    },
    "feature": {
      "name": {
        "typeId": "feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "feature"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "feature_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "feature-summary": {
      "name": {
        "typeId": "feature-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "feature-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "feature-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "group-summary": {
      "name": {
        "typeId": "group-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "group-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "group-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "issue": {
      "name": {
        "typeId": "issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "issue"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "priority",
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "issue-priority",
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "work-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "work-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "issue_example_autogenerated": {
            "id": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ],
            "title": "string"
          }
        }
      }
    },
    "issue-priority": {
      "name": {
        "typeId": "issue-priority",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "issue-priority"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "p0",
              "wireValue": "p0"
            }
          },
          {
            "name": {
              "name": "p1",
              "wireValue": "p1"
            }
          },
          {
            "name": {
              "name": "p2",
              "wireValue": "p2"
            }
          },
          {
            "name": {
              "name": "p3",
              "wireValue": "p3"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Priority of the work based upon impact and criticality.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "issue-priority_example_autogenerated": "p0"
        }
      }
    },
    "list-mode": {
      "name": {
        "typeId": "list-mode",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "list-mode"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "after",
              "wireValue": "after"
            }
          },
          {
            "name": {
              "name": "before",
              "wireValue": "before"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The iteration mode to use. If \"after\", then entries after the provided\ncursor will be returned, or if no cursor is provided, then from the\nbeginning. If \"before\", then entries before the provided cursor will be\nreturned, or if no cursor is provided, then from the end. Entries will\nalways be returned in the specified sort-by order.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "list-mode_example_autogenerated": "after"
        }
      }
    },
    "org-base": {
      "name": {
        "typeId": "org-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "org-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Name of the Organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "OrgBaseDisplayName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-base_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "org-base-summary": {
      "name": {
        "typeId": "org-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "org-base-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Name of the Organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "OrgBaseSummaryDisplayName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-base-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "org-environment": {
      "name": {
        "typeId": "org-environment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "org-environment"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "production",
              "wireValue": "production"
            }
          },
          {
            "name": {
              "name": "staging",
              "wireValue": "staging"
            }
          },
          {
            "name": {
              "name": "test",
              "wireValue": "test"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The environment of the Org. Defaults to 'production' if not specified.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-environment_example_autogenerated": "production"
        }
      }
    },
    "org-summary": {
      "name": {
        "typeId": "org-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "org-summary"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "org-type",
              "typeId": "org-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "displayName": "rev_org",
            "shape": {
              "typeId": "rev-org-summary",
              "name": "rev-org-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "rev_org",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "org-type": {
      "name": {
        "typeId": "org-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "org-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-type_example_autogenerated": "rev_org"
        }
      }
    },
    "part": {
      "name": {
        "typeId": "part",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "part"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part-type",
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "capability",
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "capability",
              "name": "capability",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "enhancement",
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "enhancement",
              "name": "enhancement",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "feature",
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "feature",
              "name": "feature",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "product",
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "product",
              "name": "product",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "part-base": {
      "name": {
        "typeId": "part-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "part-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "artifact-summary",
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The attached artifacts.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseArtifacts_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-summary",
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseOwnedBy_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "tags",
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tag-with-value",
                      "typeId": "tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseTags_example_autogenerated": [
                  {
                    "tag": {
                      "id": "string",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-base_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "part-base-summary": {
      "name": {
        "typeId": "part-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "part-base-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseSummaryName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-base-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "part-summary": {
      "name": {
        "typeId": "part-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "part-summary"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part-type",
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "capability",
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "capability-summary",
              "name": "capability-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "enhancement",
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "enhancement-summary",
              "name": "enhancement-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "feature",
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "feature-summary",
              "name": "feature-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "product",
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "product-summary",
              "name": "product-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "part-type": {
      "name": {
        "typeId": "part-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "part-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "capability",
              "wireValue": "capability"
            }
          },
          {
            "name": {
              "name": "enhancement",
              "wireValue": "enhancement"
            }
          },
          {
            "name": {
              "name": "feature",
              "wireValue": "feature"
            }
          },
          {
            "name": {
              "name": "product",
              "wireValue": "product"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-type_example_autogenerated": "capability"
        }
      }
    },
    "parts-create-request": {
      "name": {
        "typeId": "parts-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the part.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestOwnedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part-type",
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "capability",
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "parts-create-request-capability",
              "name": "parts-create-request-capability",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "enhancement",
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "parts-create-request-enhancement",
              "name": "parts-create-request-enhancement",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "feature",
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "parts-create-request-feature",
              "name": "parts-create-request-feature",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "product",
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "parts-create-request-product",
              "name": "parts-create-request-product",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request_example_autogenerated": {}
        }
      }
    },
    "parts-create-request-capability": {
      "name": {
        "typeId": "parts-create-request-capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-request-capability"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "parent_part",
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent product for the capability.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestCapabilityParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-capability_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-enhancement": {
      "name": {
        "typeId": "parts-create-request-enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-request-enhancement"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "parent_part",
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent part on which the enhancement is to be created.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestEnhancementParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Target close date by which enhancement is expected to be closed.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestEnhancementTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-enhancement_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-feature": {
      "name": {
        "typeId": "parts-create-request-feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-request-feature"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "parent_part",
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent capability/feature for the feature.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestFeatureParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-feature_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-product": {
      "name": {
        "typeId": "parts-create-request-product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-request-product"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-product_example_autogenerated": {}
        }
      }
    },
    "parts-create-response": {
      "name": {
        "typeId": "parts-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "part",
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part",
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-response_example_autogenerated": {
            "part": {
              "id": "string",
              "name": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ]
            }
          }
        }
      }
    },
    "parts-delete-request": {
      "name": {
        "typeId": "parts-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
          }
        }
      }
    },
    "parts-delete-response": {
      "name": {
        "typeId": "parts-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-delete-response"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-delete-response_example_autogenerated": {}
        }
      }
    },
    "parts-get-response": {
      "name": {
        "typeId": "parts-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "part",
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part",
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-get-response_example_autogenerated": {
            "part": {
              "id": "string",
              "name": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ]
            }
          }
        }
      }
    },
    "parts-list-response": {
      "name": {
        "typeId": "parts-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "parts",
              "wireValue": "parts"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "part",
                  "typeId": "part",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of parts.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponseParts_example_autogenerated": [
                  {
                    "id": "string",
                    "name": "string",
                    "owned_by": [
                      {
                        "id": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-list-response_example_autogenerated": {
            "parts": [
              {
                "id": "string",
                "name": "string",
                "owned_by": [
                  {
                    "id": "string"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "parts-update-request": {
      "name": {
        "typeId": "parts-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-update-request-owned-by",
                  "typeId": "parts-update-request-owned-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part-type",
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "capability",
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "parts-update-request-capability",
              "name": "parts-update-request-capability",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "enhancement",
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "parts-update-request-enhancement",
              "name": "parts-update-request-enhancement",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "feature",
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "parts-update-request-feature",
              "name": "parts-update-request-feature",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "none",
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": "empty",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "product",
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "parts-update-request-product",
              "name": "parts-update-request-product",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-capability": {
      "name": {
        "typeId": "parts-update-request-capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request-capability"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-capability_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-enhancement": {
      "name": {
        "typeId": "parts-update-request-enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request-enhancement"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the target close date of the enhancement.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestEnhancementTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-enhancement_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-feature": {
      "name": {
        "typeId": "parts-update-request-feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request-feature"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-feature_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-owned-by": {
      "name": {
        "typeId": "parts-update-request-owned-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request-owned-by"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsUpdateRequestOwnedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-owned-by_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-product": {
      "name": {
        "typeId": "parts-update-request-product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-request-product"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-product_example_autogenerated": {}
        }
      }
    },
    "parts-update-response": {
      "name": {
        "typeId": "parts-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "parts-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "part",
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "part",
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-response_example_autogenerated": {
            "part": {
              "id": "string",
              "name": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ]
            }
          }
        }
      }
    },
    "product": {
      "name": {
        "typeId": "product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "product"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "product_example_autogenerated": {
            "id": "string",
            "name": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "product-summary": {
      "name": {
        "typeId": "product-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "product-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "part-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "product-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "rev-org": {
      "name": {
        "typeId": "rev-org",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-org"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "domain",
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgDomain_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "external_ref",
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a unique identifier for the Rev (customer)\norganization from your primary customer system of records. If none\nis specified, a system-generated identifier will be assigned to the\norganization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgExternalRef_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "org-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "org-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-org_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "rev-org-summary": {
      "name": {
        "typeId": "rev-org-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-org-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "org-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "org-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-org-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "rev-orgs-create-request": {
      "name": {
        "typeId": "rev-orgs-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-create-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "domain",
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDomain_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "environment",
              "wireValue": "environment"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "org-environment",
                  "typeId": "org-environment",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "external_ref",
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestExternalRef_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "tier",
              "wireValue": "tier"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The tier of the RevOrg.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestTier_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to create a new Rev organization in the Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-create-request_example_autogenerated": {
            "display_name": "string"
          }
        }
      }
    },
    "rev-orgs-create-response": {
      "name": {
        "typeId": "rev-orgs-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-org",
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object for request to create a new Rev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-create-response_example_autogenerated": {
            "rev_org": {
              "id": "string"
            }
          }
        }
      }
    },
    "rev-orgs-delete-request": {
      "name": {
        "typeId": "rev-orgs-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of Rev organization to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "RevOrgsDeleteRequestId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to delete a Rev organization.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-delete-request_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "rev-orgs-delete-response": {
      "name": {
        "typeId": "rev-orgs-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-delete-response"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to deleting a Rev organization.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-delete-response_example_autogenerated": {}
        }
      }
    },
    "rev-orgs-get-response": {
      "name": {
        "typeId": "rev-orgs-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-org",
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a Rev organization's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-get-response_example_autogenerated": {
            "rev_org": {
              "id": "string"
            }
          }
        }
      }
    },
    "rev-orgs-list-response": {
      "name": {
        "typeId": "rev-orgs-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "rev_orgs",
              "wireValue": "rev_orgs"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-org",
                  "typeId": "rev-org",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "List with all of the Rev organizations' information.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponseRevOrgs_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a list of Rev organizations' information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-list-response_example_autogenerated": {
            "rev_orgs": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "rev-orgs-update-request": {
      "name": {
        "typeId": "rev-orgs-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-update-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Customer chosen name for the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "domain",
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDomain_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "environment",
              "wireValue": "environment"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "org-environment",
                  "typeId": "org-environment",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "external_ref",
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestExternalRef_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of Rev organization to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "RevOrgsUpdateRequestId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tier",
              "wireValue": "tier"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The tier of the RevOrg.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestTier_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to update information of the Rev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-update-request_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "rev-orgs-update-response": {
      "name": {
        "typeId": "rev-orgs-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-orgs-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-org",
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object to updating Rev organization's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-update-response_example_autogenerated": {
            "rev_org": {
              "id": "string"
            }
          }
        }
      }
    },
    "rev-user-summary": {
      "name": {
        "typeId": "rev-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "rev-user-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "external_ref",
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a mutable unique identifier for a user within the\nRev organization from your primary customer record. If none is\navailable, a good alternative is the email address/phone number\nwhich could uniquely identify the user. If none is specified, a\nsystem-generated identifier will be assigned to the user.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevUserSummaryExternalRef_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "org-summary",
                  "typeId": "org-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "user-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-user-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "set-tag-with-value": {
      "name": {
        "typeId": "set-tag-with-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "set-tag-with-value"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "SetTagWithValueId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "value",
              "wireValue": "value"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The value for the object's association with the tag. If specified,\nthe value must be one that's specified in the tag's allowed values.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SetTagWithValueValue_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "set-tag-with-value_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "stage": {
      "name": {
        "typeId": "stage",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "stage"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Current stage name of the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes the current stage of a work item.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage_example_autogenerated": {
            "name": "string"
          }
        }
      }
    },
    "stage-init": {
      "name": {
        "typeId": "stage-init",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "stage-init"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The name of the stage.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageInitName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Sets an object's initial stage.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage-init_example_autogenerated": {}
        }
      }
    },
    "stage-update": {
      "name": {
        "typeId": "stage-update",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "stage-update"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the stage, otherwise unchanged if not set.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageUpdateName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Updates an object's stage.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage-update_example_autogenerated": {}
        }
      }
    },
    "sys-user-summary": {
      "name": {
        "typeId": "sys-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "sys-user-summary"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "user-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "sys-user-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "tag": {
      "name": {
        "typeId": "tag",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tag"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "allowed_values",
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The allowed values for the tag, where a value is provided when a\ntag is associated with an object. If empty, then no value should be\nprovided when the association is made.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagAllowedValues_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An informative description for the tag that should provide context\non the tag's purpose and usage.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "tag-summary": {
      "name": {
        "typeId": "tag-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tag-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagSummaryName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag-summary_example_autogenerated": {
            "id": "string",
            "name": "string"
          }
        }
      }
    },
    "tag-with-value": {
      "name": {
        "typeId": "tag-with-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tag-with-value"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag-summary",
              "typeId": "tag-summary",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "value",
              "wireValue": "value"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The value for the object's association with the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagWithValueValue_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag-with-value_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "tags-create-request": {
      "name": {
        "typeId": "tags-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-create-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "allowed_values",
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The allowed values for the tag, or empty if no values are\npermitted.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestAllowedValues_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The description for the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name for the tag, which must be unique across all tags.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a new tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-create-request_example_autogenerated": {
            "name": "string"
          }
        }
      }
    },
    "tags-create-response": {
      "name": {
        "typeId": "tags-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag",
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a new tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-create-response_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "tags-delete-request": {
      "name": {
        "typeId": "tags-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TagsDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "tags-delete-response": {
      "name": {
        "typeId": "tags-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-delete-response"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response for deleting a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-delete-response_example_autogenerated": {}
        }
      }
    },
    "tags-get-response": {
      "name": {
        "typeId": "tags-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag",
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a tag's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-get-response_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "tags-list-response": {
      "name": {
        "typeId": "tags-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "tags",
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tag",
                  "typeId": "tag",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of tags.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponseTags_example_autogenerated": [
                  {
                    "id": "string",
                    "name": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the tags.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-list-response_example_autogenerated": {
            "tags": [
              {
                "id": "string",
                "name": "string"
              }
            ]
          }
        }
      }
    },
    "tags-update-allowed-values": {
      "name": {
        "typeId": "tags-update-allowed-values",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-update-allowed-values"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the allowed values for the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateAllowedValuesSet_example_autogenerated": [
                  "string"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies an update to a tag's allowed values.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-allowed-values_example_autogenerated": {}
        }
      }
    },
    "tags-update-request": {
      "name": {
        "typeId": "tags-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-update-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "allowed_values",
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-update-allowed-values",
                  "typeId": "tags-update-allowed-values",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "description",
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated description of the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateRequestDescription_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TagsUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "name",
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the tag. The name must be unique across all\ntags.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateRequestName_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "tags-update-response": {
      "name": {
        "typeId": "tags-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "tags-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "tag",
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tag",
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response for updating a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-response_example_autogenerated": {
            "tag": {
              "id": "string",
              "name": "string"
            }
          }
        }
      }
    },
    "ticket": {
      "name": {
        "typeId": "ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "ticket"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "group",
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "group-summary",
                  "typeId": "group-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "org-summary",
                  "typeId": "org-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "severity",
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ticket-severity",
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "work-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "work-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ticket_example_autogenerated": {
            "id": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ],
            "title": "string"
          }
        }
      }
    },
    "ticket-severity": {
      "name": {
        "typeId": "ticket-severity",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "ticket-severity"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "blocker",
              "wireValue": "blocker"
            }
          },
          {
            "name": {
              "name": "high",
              "wireValue": "high"
            }
          },
          {
            "name": {
              "name": "low",
              "wireValue": "low"
            }
          },
          {
            "name": {
              "name": "medium",
              "wireValue": "medium"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Severity of the ticket.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ticket-severity_example_autogenerated": "blocker"
        }
      }
    },
    "TimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TimelineCommentSnapKitBody"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit Body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-comment": {
      "name": {
        "typeId": "timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-comment"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "artifact-summary",
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The artifacts for the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentArtifacts_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The comment's body. If the comment has been deleted, then no body\nwill appear in the response.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "body_type",
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-comment-body-type",
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "snap_kit_body",
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TimelineCommentSnapKitBody",
                  "typeId": "TimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit Body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "timeline-entry-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "timeline-entry-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-comment_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "timeline-comment-body-type": {
      "name": {
        "typeId": "timeline-comment-body-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-comment-body-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "snap_kit",
              "wireValue": "snap_kit"
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the body to use for the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-comment-body-type_example_autogenerated": "snap_kit"
        }
      }
    },
    "timeline-entries-create-request": {
      "name": {
        "typeId": "timeline-entries-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-create-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "object",
                "pascalCase": {
                  "unsafeName": "Object",
                  "safeName": "Object_"
                }
              },
              "wireValue": "object"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the object to create the timeline entry for.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesCreateRequestObject_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entries-create-request-type",
              "typeId": "timeline-entries-create-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "visibility",
              "wireValue": "visibility"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entry-visibility",
                  "typeId": "timeline-entry-visibility",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-entries-create-request-timeline-comment",
              "name": "timeline-entries-create-request-timeline-comment",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a timeline entry for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request_example_autogenerated": {}
        }
      }
    },
    "TimelineEntriesCreateRequestTimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineEntriesCreateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-create-request-timeline-comment": {
      "name": {
        "typeId": "timeline-entries-create-request-timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-create-request-timeline-comment"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The IDs of the artifacts attached to the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentArtifacts_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The comment's body.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "body_type",
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-comment-body-type",
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "snap_kit_body",
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
                  "typeId": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request-timeline-comment_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-create-request-type": {
      "name": {
        "typeId": "timeline-entries-create-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-create-request-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entries-create-response": {
      "name": {
        "typeId": "timeline-entries-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "timeline_entry",
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry",
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a timeline entry for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-response_example_autogenerated": {
            "timeline_entry": {
              "id": "string"
            }
          }
        }
      }
    },
    "timeline-entries-get-response": {
      "name": {
        "typeId": "timeline-entries-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "timeline_entry",
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry",
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to getting a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-get-response_example_autogenerated": {
            "timeline_entry": {
              "id": "string"
            }
          }
        }
      }
    },
    "timeline-entries-list-response": {
      "name": {
        "typeId": "timeline-entries-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "timeline_entries",
              "wireValue": "timeline_entries"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entry",
                  "typeId": "timeline-entry",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The timeline entries for the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponseTimelineEntries_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing timeline entries for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-list-response_example_autogenerated": {
            "timeline_entries": [
              {
                "id": "string"
              }
            ]
          }
        }
      }
    },
    "timeline-entries-update-request": {
      "name": {
        "typeId": "timeline-entries-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-update-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the timeline entry to update.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entries-update-request-type",
              "typeId": "timeline-entries-update-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-entries-update-request-timeline-comment",
              "name": "timeline-entries-update-request-timeline-comment",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request_example_autogenerated": {}
        }
      }
    },
    "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-timeline-comment": {
      "name": {
        "typeId": "timeline-entries-update-request-timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-update-request-timeline-comment"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-update-request-timeline-comment-artifacts",
                  "typeId": "timeline-entries-update-request-timeline-comment-artifacts",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated comment's body.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "body_type",
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-comment-body-type",
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "snap_kit_body",
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                  "typeId": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-timeline-comment_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-timeline-comment-artifacts": {
      "name": {
        "typeId": "timeline-entries-update-request-timeline-comment-artifacts",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-update-request-timeline-comment-artifacts"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "add",
              "wireValue": "add"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Adds the provided artifacts to the comment. An artifact cannot be\nadded more than once, i.e. nothing is done if the artifact is\nalready attached. Mutually exclusive with `set`.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsAdd_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "remove",
              "wireValue": "remove"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Removes the provided artifacts from the comment. If an artifact is\nnot present, then it's ignored. Mututally exclusive with `set`.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsRemove_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the field to the provided artifacts.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsSet_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-timeline-comment-artifacts_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-type": {
      "name": {
        "typeId": "timeline-entries-update-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-update-request-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entries-update-response": {
      "name": {
        "typeId": "timeline-entries-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entries-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "timeline_entry",
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry",
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to updating a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-response_example_autogenerated": {
            "timeline_entry": {
              "id": "string"
            }
          }
        }
      }
    },
    "timeline-entry": {
      "name": {
        "typeId": "timeline-entry",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entry"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entry-type",
              "typeId": "timeline-entry-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-comment",
              "name": "timeline-comment",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "timeline-entry-base": {
      "name": {
        "typeId": "timeline-entry-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entry-base"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-base_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "timeline-entry-type": {
      "name": {
        "typeId": "timeline-entry-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entry-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "timeline_comment",
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entry-visibility": {
      "name": {
        "typeId": "timeline-entry-visibility",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "timeline-entry-visibility"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "private",
                "camelCase": {
                  "unsafeName": "private",
                  "safeName": "private_"
                },
                "snakeCase": {
                  "unsafeName": "private",
                  "safeName": "private_"
                }
              },
              "wireValue": "private"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The visibility of the entry. If 'private', then the entry is only\nvisible to the creator, otherwise if not set, then the entry has\ndefault visibility.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-visibility_example_autogenerated": "private"
        }
      }
    },
    "user-base": {
      "name": {
        "typeId": "user-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "user-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The user's display name. The name is non-unique and mutable.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "display_picture",
              "wireValue": "display_picture"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifact-summary",
                  "typeId": "artifact-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "email",
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Email address of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseEmail_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "full_name",
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Full name of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseFullName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "phone_numbers",
              "wireValue": "phone_numbers"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Phone numbers of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBasePhoneNumbers_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "state",
              "wireValue": "state"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-state",
                  "typeId": "user-state",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-base_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "user-base-summary": {
      "name": {
        "typeId": "user-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "user-base-summary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "display_name",
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The user's display name. The name is non-unique and mutable.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryDisplayName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "display_picture",
              "wireValue": "display_picture"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifact-summary",
                  "typeId": "artifact-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "email",
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Email address of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryEmail_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "full_name",
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Full name of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryFullName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "state",
              "wireValue": "state"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-state",
                  "typeId": "user-state",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base-summary"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-base-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "user-state": {
      "name": {
        "typeId": "user-state",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "user-state"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "active",
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": "deactivated",
              "wireValue": "deactivated"
            }
          },
          {
            "name": {
              "name": "locked",
              "wireValue": "locked"
            }
          },
          {
            "name": {
              "name": "shadow",
              "wireValue": "shadow"
            }
          },
          {
            "name": {
              "name": "unassigned",
              "wireValue": "unassigned"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "State of the user.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-state_example_autogenerated": "active"
        }
      }
    },
    "user-summary": {
      "name": {
        "typeId": "user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "user-summary"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "user-type",
              "typeId": "user-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "dev_user",
              "wireValue": "dev_user"
            },
            "displayName": "dev_user",
            "shape": {
              "typeId": "dev-user-summary",
              "name": "dev-user-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "dev_user",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "rev_user",
              "wireValue": "rev_user"
            },
            "displayName": "rev_user",
            "shape": {
              "typeId": "rev-user-summary",
              "name": "rev-user-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "rev_user",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "sys_user",
              "wireValue": "sys_user"
            },
            "displayName": "sys_user",
            "shape": {
              "typeId": "sys-user-summary",
              "name": "sys-user-summary",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "sys_user",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-summary_example_autogenerated": {
            "id": "string"
          }
        }
      }
    },
    "user-type": {
      "name": {
        "typeId": "user-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "user-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "dev_user",
              "wireValue": "dev_user"
            }
          },
          {
            "name": {
              "name": "rev_user",
              "wireValue": "rev_user"
            }
          },
          {
            "name": {
              "name": "sys_user",
              "wireValue": "sys_user"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-type_example_autogenerated": "dev_user"
        }
      }
    },
    "webhook": {
      "name": {
        "typeId": "webhook",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "event_types",
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhook-event-type",
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types that the webhook will receive.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventTypes_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": "secret",
              "wireValue": "secret"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "byte"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The secret to use for verifying webhook events.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook-status",
              "typeId": "webhook-status",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the webhook endpoint.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook_example_autogenerated": {
            "id": "string",
            "secret": "string",
            "status": "active",
            "url": "string"
          }
        }
      }
    },
    "webhook-event-request": {
      "name": {
        "typeId": "webhook-event-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook-event-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The event's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventRequestId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "part_created",
              "wireValue": "part_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-part-created",
                  "typeId": "event-part-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "part_deleted",
              "wireValue": "part_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-part-deleted",
                  "typeId": "event-part-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "part_updated",
              "wireValue": "part_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-part-updated",
                  "typeId": "event-part-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_org_created",
              "wireValue": "rev_org_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-rev-org-created",
                  "typeId": "event-rev-org-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_org_deleted",
              "wireValue": "rev_org_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-rev-org-deleted",
                  "typeId": "event-rev-org-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "rev_org_updated",
              "wireValue": "rev_org_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-rev-org-updated",
                  "typeId": "event-rev-org-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tag_created",
              "wireValue": "tag_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-tag-created",
                  "typeId": "event-tag-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tag_deleted",
              "wireValue": "tag_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-tag-deleted",
                  "typeId": "event-tag-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tag_updated",
              "wireValue": "tag_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-tag-updated",
                  "typeId": "event-tag-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "timeline_entry_created",
              "wireValue": "timeline_entry_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-timeline-entry-created",
                  "typeId": "event-timeline-entry-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "timeline_entry_deleted",
              "wireValue": "timeline_entry_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-timeline-entry-deleted",
                  "typeId": "event-timeline-entry-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "timeline_entry_updated",
              "wireValue": "timeline_entry_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-timeline-entry-updated",
                  "typeId": "event-timeline-entry-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "timestamp",
              "wireValue": "timestamp"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp of the webhook's invocation for the event. Note this\nshould be used to protect against replay attacks, where the event\nshould only be processed if the timestamp isn't stale by several\nseconds.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventRequestTimestamp_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhook-event-type",
                  "typeId": "webhook-event-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "verify",
              "wireValue": "verify"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhook-event-verify",
                  "typeId": "webhook-event-verify",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "webhook_created",
              "wireValue": "webhook_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-webhook-created",
                  "typeId": "event-webhook-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "webhook_deleted",
              "wireValue": "webhook_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-webhook-deleted",
                  "typeId": "event-webhook-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "webhook_id",
              "wireValue": "webhook_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the webhook for the event.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhookEventRequestWebhookId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "webhook_updated",
              "wireValue": "webhook_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-webhook-updated",
                  "typeId": "event-webhook-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "work_created",
              "wireValue": "work_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-work-created",
                  "typeId": "event-work-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "work_deleted",
              "wireValue": "work_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-work-deleted",
                  "typeId": "event-work-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "work_updated",
              "wireValue": "work_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "event-work-updated",
                  "typeId": "event-work-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-request_example_autogenerated": {
            "id": "string",
            "webhook_id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhook-event-response": {
      "name": {
        "typeId": "webhook-event-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook-event-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "challenge",
              "wireValue": "challenge"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The challenge from the \"verify\" request, otherwise this should not\nbe set for other request types.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventResponseChallenge_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-response_example_autogenerated": {}
        }
      }
    },
    "webhook-event-type": {
      "name": {
        "typeId": "webhook-event-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook-event-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "part_created",
              "wireValue": "part_created"
            }
          },
          {
            "name": {
              "name": "part_deleted",
              "wireValue": "part_deleted"
            }
          },
          {
            "name": {
              "name": "part_updated",
              "wireValue": "part_updated"
            }
          },
          {
            "name": {
              "name": "rev_org_created",
              "wireValue": "rev_org_created"
            }
          },
          {
            "name": {
              "name": "rev_org_deleted",
              "wireValue": "rev_org_deleted"
            }
          },
          {
            "name": {
              "name": "rev_org_updated",
              "wireValue": "rev_org_updated"
            }
          },
          {
            "name": {
              "name": "tag_created",
              "wireValue": "tag_created"
            }
          },
          {
            "name": {
              "name": "tag_deleted",
              "wireValue": "tag_deleted"
            }
          },
          {
            "name": {
              "name": "tag_updated",
              "wireValue": "tag_updated"
            }
          },
          {
            "name": {
              "name": "timeline_entry_created",
              "wireValue": "timeline_entry_created"
            }
          },
          {
            "name": {
              "name": "timeline_entry_deleted",
              "wireValue": "timeline_entry_deleted"
            }
          },
          {
            "name": {
              "name": "timeline_entry_updated",
              "wireValue": "timeline_entry_updated"
            }
          },
          {
            "name": {
              "name": "verify",
              "wireValue": "verify"
            }
          },
          {
            "name": {
              "name": "webhook_created",
              "wireValue": "webhook_created"
            }
          },
          {
            "name": {
              "name": "webhook_deleted",
              "wireValue": "webhook_deleted"
            }
          },
          {
            "name": {
              "name": "webhook_updated",
              "wireValue": "webhook_updated"
            }
          },
          {
            "name": {
              "name": "work_created",
              "wireValue": "work_created"
            }
          },
          {
            "name": {
              "name": "work_deleted",
              "wireValue": "work_deleted"
            }
          },
          {
            "name": {
              "name": "work_updated",
              "wireValue": "work_updated"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The event types that the webhook will receive.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-type_example_autogenerated": "part_created"
        }
      }
    },
    "webhook-event-verify": {
      "name": {
        "typeId": "webhook-event-verify",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook-event-verify"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "challenge",
              "wireValue": "challenge"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "byte"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The challenge that must be echoed in the response.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventVerifyChallenge_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-verify_example_autogenerated": {
            "challenge": "string"
          }
        }
      }
    },
    "webhook-status": {
      "name": {
        "typeId": "webhook-status",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhook-status"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "active",
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": "inactive",
              "wireValue": "inactive"
            }
          },
          {
            "name": {
              "name": "unverified",
              "wireValue": "unverified"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-status_example_autogenerated": "active"
        }
      }
    },
    "webhooks-create-request": {
      "name": {
        "typeId": "webhooks-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-create-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "event_types",
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhook-event-type",
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types that the webhook endpoint will receive.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestEventTypes_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": "secret",
              "wireValue": "secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The secret to use when verifying webhook events. If provided, the\nsecret must be between 8 and 32 bytes (inclusive). If not set, a\nsecret will be automatically generated and provided in the\nresponse.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the webhook endpoint.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a new webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-create-request_example_autogenerated": {
            "url": "string"
          }
        }
      }
    },
    "webhooks-create-response": {
      "name": {
        "typeId": "webhooks-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhook",
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook",
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a new webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-create-response_example_autogenerated": {
            "webhook": {
              "id": "string",
              "secret": "string",
              "status": "active",
              "url": "string"
            }
          }
        }
      }
    },
    "webhooks-delete-request": {
      "name": {
        "typeId": "webhooks-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID for the webhook.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhooksDeleteRequestId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete a webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-delete-request_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhooks-delete-response": {
      "name": {
        "typeId": "webhooks-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-delete-response"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to deleting the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-delete-response_example_autogenerated": {}
        }
      }
    },
    "webhooks-get-response": {
      "name": {
        "typeId": "webhooks-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhook",
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook",
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting the information for the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-get-response_example_autogenerated": {
            "webhook": {
              "id": "string",
              "secret": "string",
              "status": "active",
              "url": "string"
            }
          }
        }
      }
    },
    "webhooks-list-response": {
      "name": {
        "typeId": "webhooks-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhooks",
              "wireValue": "webhooks"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhook",
                  "typeId": "webhook",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of webhooks.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksListResponseWebhooks_example_autogenerated": [
                  {
                    "id": "string",
                    "secret": "string",
                    "status": "active",
                    "url": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the webhooks.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-list-response_example_autogenerated": {
            "webhooks": [
              {
                "id": "string",
                "secret": "string",
                "status": "active",
                "url": "string"
              }
            ]
          }
        }
      }
    },
    "webhooks-update-action": {
      "name": {
        "typeId": "webhooks-update-action",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-update-action"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "activate",
              "wireValue": "activate"
            }
          },
          {
            "name": {
              "name": "deactivate",
              "wireValue": "deactivate"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The action to update the webhook's status.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-action_example_autogenerated": "activate"
        }
      }
    },
    "webhooks-update-request": {
      "name": {
        "typeId": "webhooks-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-update-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "action",
              "wireValue": "action"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-update-action",
                  "typeId": "webhooks-update-action",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "event_types",
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-update-request-event-types",
                  "typeId": "webhooks-update-request-event-types",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID for the webhook.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhooksUpdateRequestId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "secret",
              "wireValue": "secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "If provided, updates the secret that's used when verifying webhook\nevents, which must be between 8 and 32 bytes (inclusive). Otherwise\nif empty, then a new secret is generated. If the webhook is active,\nthen its status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestSecret_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The webhook's updated URL. If the webhook is active, then the\nwebhook's status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-request_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhooks-update-request-event-types": {
      "name": {
        "typeId": "webhooks-update-request-event-types",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-update-request-event-types"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "add",
              "wireValue": "add"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhook-event-type",
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types to add. If a provided event type is already set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesAdd_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": "remove",
              "wireValue": "remove"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhook-event-type",
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types to remove. If a provided event type isn't set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesRemove_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhook-event-type",
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated event types, which will replace the webhook's current\nevent types. Note this is mutually exclusive with 'add' and\n'remove'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesSet_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-request-event-types_example_autogenerated": {}
        }
      }
    },
    "webhooks-update-response": {
      "name": {
        "typeId": "webhooks-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "webhooks-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "webhook",
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhook",
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to updating the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-response_example_autogenerated": {
            "webhook": {
              "id": "string",
              "secret": "string",
              "status": "active",
              "url": "string"
            }
          }
        }
      }
    },
    "work": {
      "name": {
        "typeId": "work",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "work"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work-type",
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "issue",
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "issue",
              "name": "issue",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "ticket",
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "ticket",
              "name": "ticket",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work_example_autogenerated": {
            "id": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ],
            "title": "string"
          }
        }
      }
    },
    "work-base": {
      "name": {
        "typeId": "work-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "work-base"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "applies_to_part",
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "part-summary",
                  "typeId": "part-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "artifact-summary",
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The artifacts attached to the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseArtifacts_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Body of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "user-summary",
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the work.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseOwnedBy_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "reported_by",
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "user-summary",
                      "typeId": "user-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Users that reported the work.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseReportedBy_example_autogenerated": [
                  {
                    "id": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "stage",
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "stage",
                  "typeId": "stage",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tags",
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tag-with-value",
                      "typeId": "tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTags_example_autogenerated": [
                  {
                    "tag": {
                      "id": "string",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the work is expected to be complete.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "title",
              "wireValue": "title"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Title of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTitle_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "atom-base"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work-base_example_autogenerated": {
            "id": "string",
            "owned_by": [
              {
                "id": "string"
              }
            ],
            "title": "string"
          }
        }
      }
    },
    "work-type": {
      "name": {
        "typeId": "work-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "work-type"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "issue",
              "wireValue": "issue"
            }
          },
          {
            "name": {
              "name": "ticket",
              "wireValue": "ticket"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work-type_example_autogenerated": "issue"
        }
      }
    },
    "works-create-request": {
      "name": {
        "typeId": "works-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-create-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "applies_to_part",
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The [part](https://devrev.ai/docs/product/parts) that the work\napplies to. Specifying a part is required when creating tickets and\nissues.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestAppliesToPart_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The IDs of the artifacts to associate with the work item.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestArtifacts_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Body of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the work.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestOwnedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "reported_by",
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The users that reported the work.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestReportedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "stage",
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "stage-init",
                  "typeId": "stage-init",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tags",
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "set-tag-with-value",
                      "typeId": "set-tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTags_example_autogenerated": [
                  {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp for when the work is expected to be complete.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "title",
              "wireValue": "title"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Title of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTitle_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work-type",
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "issue",
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "works-create-request-issue",
              "name": "works-create-request-issue",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "ticket",
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "works-create-request-ticket",
              "name": "works-create-request-ticket",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request_example_autogenerated": {}
        }
      }
    },
    "works-create-request-issue": {
      "name": {
        "typeId": "works-create-request-issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-create-request-issue"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "priority",
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "issue-priority",
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "sprint",
              "wireValue": "sprint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The sprint that the issue belongs to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestIssueSprint_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request-issue_example_autogenerated": {}
        }
      }
    },
    "works-create-request-ticket": {
      "name": {
        "typeId": "works-create-request-ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-create-request-ticket"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "group",
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The group that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTicketGroup_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The Rev organization that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestTicketRevOrg_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "severity",
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ticket-severity",
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request-ticket_example_autogenerated": {}
        }
      }
    },
    "works-create-response": {
      "name": {
        "typeId": "works-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-create-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "work",
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work",
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-response_example_autogenerated": {
            "work": {
              "id": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ],
              "title": "string"
            }
          }
        }
      }
    },
    "works-delete-request": {
      "name": {
        "typeId": "works-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-delete-request"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The work's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
          }
        }
      }
    },
    "works-delete-response": {
      "name": {
        "typeId": "works-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-delete-response"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-delete-response_example_autogenerated": {}
        }
      }
    },
    "works-export-response": {
      "name": {
        "typeId": "works-export-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-export-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "works",
              "wireValue": "works"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "work",
                  "typeId": "work",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The resulting collection of work items.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksExportResponseWorks_example_autogenerated": [
                  {
                    "id": "string",
                    "owned_by": [
                      {
                        "id": "string"
                      }
                    ],
                    "title": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-export-response_example_autogenerated": {
            "works": [
              {
                "id": "string",
                "owned_by": [
                  {
                    "id": "string"
                  }
                ],
                "title": "string"
              }
            ]
          }
        }
      }
    },
    "works-get-response": {
      "name": {
        "typeId": "works-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-get-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "work",
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work",
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-get-response_example_autogenerated": {
            "work": {
              "id": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ],
              "title": "string"
            }
          }
        }
      }
    },
    "works-list-response": {
      "name": {
        "typeId": "works-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-list-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "next_cursor",
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponseNextCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_cursor",
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponsePrevCursor_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "works",
              "wireValue": "works"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "work",
                  "typeId": "work",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of works.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponseWorks_example_autogenerated": [
                  {
                    "id": "string",
                    "owned_by": [
                      {
                        "id": "string"
                      }
                    ],
                    "title": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-list-response_example_autogenerated": {
            "works": [
              {
                "id": "string",
                "owned_by": [
                  {
                    "id": "string"
                  }
                ],
                "title": "string"
              }
            ]
          }
        }
      }
    },
    "works-update-request": {
      "name": {
        "typeId": "works-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request"
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": "applies_to_part",
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the part that the work applies to.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestAppliesToPart_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "artifacts",
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-request-artifact-ids",
                  "typeId": "works-update-request-artifact-ids",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "body",
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updated body of the work object, or unchanged if not provided.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestBody_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The work's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "owned_by",
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-request-owned-by",
                  "typeId": "works-update-request-owned-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "reported_by",
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-request-reported-by",
                  "typeId": "works-update-request-reported-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "stage",
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "stage-update",
                  "typeId": "stage-update",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "tags",
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-request-tags",
                  "typeId": "works-update-request-tags",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "target_close_date",
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the timestamp for when the work is expected to be complete.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTargetCloseDate_example_autogenerated": "2024-01-15T09:30:00Z"
              }
            }
          },
          {
            "name": {
              "name": "title",
              "wireValue": "title"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updated title of the work object, or unchanged if not provided.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTitle_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work-type",
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": "issue",
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "works-update-request-issue",
              "name": "works-update-request-issue",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "none",
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": "empty",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": "ticket",
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "works-update-request-ticket",
              "name": "works-update-request-ticket",
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request_example_autogenerated": {}
        }
      }
    },
    "works-update-request-artifact-ids": {
      "name": {
        "typeId": "works-update-request-artifact-ids",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-artifact-ids"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the IDs to the provided artifact IDs.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestArtifactIdsSet_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-artifact-ids_example_autogenerated": {}
        }
      }
    },
    "works-update-request-issue": {
      "name": {
        "typeId": "works-update-request-issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-issue"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "priority",
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "issue-priority",
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "sprint",
              "wireValue": "sprint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the sprint that the issue belongs to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestIssueSprint_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-issue_example_autogenerated": {}
        }
      }
    },
    "works-update-request-owned-by": {
      "name": {
        "typeId": "works-update-request-owned-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-owned-by"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestOwnedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-owned-by_example_autogenerated": {}
        }
      }
    },
    "works-update-request-reported-by": {
      "name": {
        "typeId": "works-update-request-reported-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-reported-by"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the users that reported the work to the provided user IDs.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestReportedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-reported-by_example_autogenerated": {}
        }
      }
    },
    "works-update-request-tags": {
      "name": {
        "typeId": "works-update-request-tags",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-tags"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "set-tag-with-value",
                      "typeId": "set-tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the provided tags on the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTagsSet_example_autogenerated": [
                  {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-tags_example_autogenerated": {}
        }
      }
    },
    "works-update-request-ticket": {
      "name": {
        "typeId": "works-update-request-ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-request-ticket"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "group",
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The group that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTicketGroup_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "rev_org",
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the Rev organization that the ticket is associated with.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestTicketRevOrg_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "severity",
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ticket-severity",
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-ticket_example_autogenerated": {}
        }
      }
    },
    "works-update-response": {
      "name": {
        "typeId": "works-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "works-update-response"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "work",
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "work",
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-response_example_autogenerated": {
            "work": {
              "id": "string",
              "owned_by": [
                {
                  "id": "string"
                }
              ],
              "title": "string"
            }
          }
        }
      }
    },
    "auth-tokens_delete_Response_200": {
      "name": {
        "typeId": "auth-tokens_delete_Response_200",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens_delete_Response_200"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Empty response body",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens_delete_Response_200_example_autogenerated": {}
        }
      }
    },
    "auth-tokens_selfDelete_Response_200": {
      "name": {
        "typeId": "auth-tokens_selfDelete_Response_200",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-tokens_selfDelete_Response_200"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Empty response body",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens_selfDelete_Response_200_example_autogenerated": {}
        }
      }
    },
    "auth-connection_dev-org-auth-connections-delete_Response_200": {
      "name": {
        "typeId": "auth-connection_dev-org-auth-connections-delete_Response_200",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection_dev-org-auth-connections-delete_Response_200"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Empty response body",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection_dev-org-auth-connections-delete_Response_200_example_autogenerated": {}
        }
      }
    },
    "auth-connection_dev-org-auth-connections-toggle_Response_200": {
      "name": {
        "typeId": "auth-connection_dev-org-auth-connections-toggle_Response_200",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "auth-connection_dev-org-auth-connections-toggle_Response_200"
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Empty response body",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection_dev-org-auth-connections-toggle_Response_200_example_autogenerated": {}
        }
      }
    }
  },
  "services": {
    "service_artifacts": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "artifacts"
          ],
          "packagePath": [],
          "file": "artifacts"
        }
      },
      "displayName": "artifacts",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/artifacts.locate",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The ID of the artifact to get the URL for.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Artifacts-locateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Artifacts-locateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/artifacts.locate",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_artifacts.locate",
          "name": "locate",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifacts-locate-response",
                  "typeId": "artifacts-locate-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "artifactsLocateExample": {
                      "expires_at": "2024-01-15T09:30:00Z",
                      "url": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the download URL for the artifact.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_artifactsLocateExample_200": {
                "displayName": "locateExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/artifacts.locate"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "expires_at": "2024-01-15T09:30:00Z",
                      "url": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "artifacts-locate-response",
                      "typeId": "artifacts-locate-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "artifactsLocateExample": {
                          "expires_at": "2024-01-15T09:30:00Z",
                          "url": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/artifacts.prepare",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Artifacts-prepareRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Artifacts-prepareRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Artifacts-prepareRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Artifacts-prepareRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Artifacts-prepareRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Artifacts-prepareRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/artifacts.prepare",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_artifacts.prepare",
          "name": "prepare",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "artifacts-prepare-request",
              "typeId": "artifacts-prepare-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "artifactsPrepareExample": {
                  "file_name": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifacts-prepare-request",
                  "typeId": "artifacts-prepare-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "artifactsPrepareExample": {
                      "file_name": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "artifacts-prepare-response",
                  "typeId": "artifacts-prepare-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "artifactsPrepareExample": {
                      "form_data": [
                        {
                          "key": "string",
                          "value": "string"
                        }
                      ],
                      "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                      "url": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates an artifact and generates an upload URL for its data.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "artifactsPrepareExample_200": {
                "displayName": "artifactsPrepareExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/artifacts.prepare"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "file_name": "string"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "form_data": [
                        {
                          "key": "string",
                          "value": "string"
                        }
                      ],
                      "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                      "url": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "artifacts-prepare-response",
                      "typeId": "artifacts-prepare-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "artifactsPrepareExample": {
                          "form_data": [
                            {
                              "key": "string",
                              "value": "string"
                            }
                          ],
                          "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                          "url": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_authTokens": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "auth-tokens"
          ],
          "packagePath": [],
          "file": "auth-tokens"
        }
      },
      "displayName": "auth-tokens",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-tokens-create-request",
              "typeId": "auth-tokens-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensCreateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-create-request",
                  "typeId": "auth-tokens-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensCreateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-create-response",
                  "typeId": "auth-tokens-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensCreateExample": {
                      "access_token": "string",
                      "client_id": "string",
                      "expires_in": 1,
                      "refresh_token": "string",
                      "scope": "string",
                      "token_type": "bearer"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a JWT corresponding to the requested token type for the\nauthenticated user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensCreateExample_201": {
                "displayName": "authTokensCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "access_token": "string",
                      "client_id": "string",
                      "expires_in": 1,
                      "refresh_token": "string",
                      "scope": "string",
                      "token_type": "bearer"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens-create-response",
                      "typeId": "auth-tokens-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensCreateExample": {
                          "access_token": "string",
                          "client_id": "string",
                          "expires_in": 1,
                          "refresh_token": "string",
                          "scope": "string",
                          "token_type": "bearer"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-tokens-delete-request",
              "typeId": "auth-tokens-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensDeleteExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-delete-request",
                  "typeId": "auth-tokens-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensDeleteExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens_delete_Response_200",
                  "typeId": "auth-tokens_delete_Response_200",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Revokes the token that matches the given token ID issued under the\ngiven Dev organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensDeleteExample_200": {
                "displayName": "authTokensDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens_delete_Response_200",
                      "typeId": "auth-tokens_delete_Response_200",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "token_id",
                "wireValue": "token_id"
              },
              "docs": "The unique identifier of the token under a given Dev organization.\n",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "token_id_example": "token_id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-get-response",
                  "typeId": "auth-tokens-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensGetExample": {
                      "token": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "client_id": "string",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "string"
                        ],
                        "status": "active",
                        "subject": "string",
                        "token_hint": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the token metadata corresponding to the given token ID under the\ngiven Dev organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_authTokensGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/auth-tokens.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "token_id": "token_id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "token": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "client_id": "string",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "string"
                        ],
                        "status": "active",
                        "subject": "string",
                        "token_hint": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens-get-response",
                      "typeId": "auth-tokens-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensGetExample": {
                          "token": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "client_id": "string",
                            "expires_at": "2024-01-15T09:30:00Z",
                            "issued_at": "2024-01-15T09:30:00Z",
                            "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                            "scopes": [
                              "string"
                            ],
                            "status": "active",
                            "subject": "string",
                            "token_hint": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "client_id",
                "wireValue": "client_id"
              },
              "docs": "An identifier that represents the application, which requested the\ntoken. Only relevant for application access tokens.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "client_id_example": "client_id"
                }
              }
            },
            {
              "name": {
                "name": "requested_token_type",
                "wireValue": "requested_token_type"
              },
              "docs": "The type of the requested token. If no value is specified, the\nresponse will include tokens of all the types.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "auth-token-requested-token-type",
                    "typeId": "auth-token-requested-token-type",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "requested_token_type_example": "urn:devrev:params:oauth:token-type:aat"
                }
              }
            },
            {
              "name": {
                "name": "subject",
                "wireValue": "subject"
              },
              "docs": "The subject associated with the token. In the absence of this\nparameter, the ID of the authenticated entity is treated as the\nsubject.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "subject_example": "subject"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-list-response",
                  "typeId": "auth-tokens-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensListExample": {
                      "tokens": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "client_id": "string",
                          "expires_at": "2024-01-15T09:30:00Z",
                          "issued_at": "2024-01-15T09:30:00Z",
                          "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                          "scopes": [
                            "string"
                          ],
                          "status": "active",
                          "subject": "string",
                          "token_hint": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the token metadata for all the tokens corresponding to the given\ntoken type issued for a given subject.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_authTokensListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/auth-tokens.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tokens": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "client_id": "string",
                          "expires_at": "2024-01-15T09:30:00Z",
                          "issued_at": "2024-01-15T09:30:00Z",
                          "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                          "scopes": [
                            "string"
                          ],
                          "status": "active",
                          "subject": "string",
                          "token_hint": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens-list-response",
                      "typeId": "auth-tokens-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensListExample": {
                          "tokens": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "client_id": "string",
                              "expires_at": "2024-01-15T09:30:00Z",
                              "issued_at": "2024-01-15T09:30:00Z",
                              "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                              "scopes": [
                                "string"
                              ],
                              "status": "active",
                              "subject": "string",
                              "token_hint": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.self.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-self-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.self.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.selfDelete",
          "name": "selfDelete",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-tokens-self-delete-request",
              "typeId": "auth-tokens-self-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensSelfDeleteExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-self-delete-request",
                  "typeId": "auth-tokens-self-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensSelfDeleteExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens_selfDelete_Response_200",
                  "typeId": "auth-tokens_selfDelete_Response_200",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensSelfDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Revokes all the tokens that matches the given token type created by the\nauthenticated user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensSelfDeleteExample_200": {
                "displayName": "authTokensSelfDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.self.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens_selfDelete_Response_200",
                      "typeId": "auth-tokens_selfDelete_Response_200",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensSelfDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Auth-tokens-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Auth-tokens-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "auth-tokens-update-request",
              "typeId": "auth-tokens-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensUpdateExample": {
                  "token_hint": "string",
                  "token_id": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-update-request",
                  "typeId": "auth-tokens-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensUpdateExample": {
                      "token_hint": "string",
                      "token_id": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-tokens-update-response",
                  "typeId": "auth-tokens-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensUpdateExample": {
                      "token": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "client_id": "string",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "string"
                        ],
                        "status": "active",
                        "subject": "string",
                        "token_hint": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates token metadata of a token issued under a given Dev\norganization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensUpdateExample_200": {
                "displayName": "authTokensUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "token_hint": "string",
                    "token_id": "string"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "token": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "client_id": "string",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "string"
                        ],
                        "status": "active",
                        "subject": "string",
                        "token_hint": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-tokens-update-response",
                      "typeId": "auth-tokens-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authTokensUpdateExample": {
                          "token": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "client_id": "string",
                            "expires_at": "2024-01-15T09:30:00Z",
                            "issued_at": "2024-01-15T09:30:00Z",
                            "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                            "scopes": [
                              "string"
                            ],
                            "status": "active",
                            "subject": "string",
                            "token_hint": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_authConnection": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "auth-connection"
          ],
          "packagePath": [],
          "file": "auth-connection"
        }
      },
      "displayName": "auth-connection",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-create",
          "name": "dev-org-auth-connections-create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-create-request",
              "typeId": "dev-org-auth-connections-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsCreateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-create-request",
                  "typeId": "dev-org-auth-connections-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsCreateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-create-response",
                  "typeId": "dev-org-auth-connections-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsCreateExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new enterprise authentication connection for a Dev\norganization. This authentication connection will not be enabled by\ndefault for the organization and the user will need to explicitly\nenable this. Keep in mind that at a time, only one authentication\nconnection can be enabled for a Dev organization. At present, only 5\nenterprise connections can be created by an organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsCreateExample_201": {
                "displayName": "authConnectionDevOrgAuthConnectionsCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-org-auth-connections-create-response",
                      "typeId": "dev-org-auth-connections-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsCreateExample": {
                          "auth_connection": {}
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-delete",
          "name": "dev-org-auth-connections-delete",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-delete-request",
              "typeId": "dev-org-auth-connections-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsDeleteExample": {
                  "id": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-delete-request",
                  "typeId": "dev-org-auth-connections-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsDeleteExample": {
                      "id": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-connection_dev-org-auth-connections-delete_Response_200",
                  "typeId": "auth-connection_dev-org-auth-connections-delete_Response_200",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes an authentication connection. Only enterprise connections which\nare explicitly set up for a Dev organization can be deleted. Default\nconnections can not be deleted using this method.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsDeleteExample_200": {
                "displayName": "authConnectionDevOrgAuthConnectionsDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "string"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-connection_dev-org-auth-connections-delete_Response_200",
                      "typeId": "auth-connection_dev-org-auth-connections-delete_Response_200",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "ID of the authentication connection.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-get",
          "name": "dev-org-auth-connections-get",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-get-response",
                  "typeId": "dev-org-auth-connections-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsGetExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieves the details for an authentication connection.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_authConnectionDevOrgAuthConnectionsGetExample_200": {
                "displayName": "devOrgAuthConnectionsGetExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-orgs.auth-connections.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-org-auth-connections-get-response",
                      "typeId": "dev-org-auth-connections-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsGetExample": {
                          "auth_connection": {}
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-list",
          "name": "dev-org-auth-connections-list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-list-response",
                  "typeId": "dev-org-auth-connections-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsListExample": {
                      "auth_connections": [
                        {}
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists all the authentication connections available for a Dev\norganization. This list will include both social and enterprise\nconnections which are either available by default or are explicitly\ncreated by the user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_authConnectionDevOrgAuthConnectionsListExample_200": {
                "displayName": "devOrgAuthConnectionsListExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-orgs.auth-connections.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "auth_connections": [
                        {}
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-org-auth-connections-list-response",
                      "typeId": "dev-org-auth-connections-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsListExample": {
                          "auth_connections": [
                            {}
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.toggle",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.toggle",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-toggle",
          "name": "dev-org-auth-connections-toggle",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-toggle-request",
              "typeId": "dev-org-auth-connections-toggle-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsToggleExample": {
                  "id": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-toggle-request",
                  "typeId": "dev-org-auth-connections-toggle-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsToggleExample": {
                      "id": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "auth-connection_dev-org-auth-connections-toggle_Response_200",
                  "typeId": "auth-connection_dev-org-auth-connections-toggle_Response_200",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsToggleExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Enable or disable an authentication connection for a Dev organization.\nCurrently, only 1 authentication connection can be enabled at a time.\nWhen a new authentication connection is enabled, the connection which\nis currently enabled for the Dev organization is automatically\ndisabled.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsToggleExample_200": {
                "displayName": "authConnectionDevOrgAuthConnectionsToggleExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.toggle"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "string"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "auth-connection_dev-org-auth-connections-toggle_Response_200",
                      "typeId": "auth-connection_dev-org-auth-connections-toggle_Response_200",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsToggleExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-update",
          "name": "dev-org-auth-connections-update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "dev-org-auth-connections-update-request",
              "typeId": "dev-org-auth-connections-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-update-request",
                  "typeId": "dev-org-auth-connections-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsUpdateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-org-auth-connections-update-response",
                  "typeId": "dev-org-auth-connections-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsUpdateExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates an authentication connection.",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsUpdateExample_201": {
                "displayName": "authConnectionDevOrgAuthConnectionsUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-org-auth-connections-update-response",
                      "typeId": "dev-org-auth-connections-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "authConnectionDevOrgAuthConnectionsUpdateExample": {
                          "auth_connection": {}
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_devUsers": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "dev-users"
          ],
          "packagePath": [],
          "file": "dev-users"
        }
      },
      "displayName": "dev-users",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-users.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "email",
                "wireValue": "email"
              },
              "docs": "Filters Dev users based on email addresses.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "email_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of Dev users to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": "sort_by",
                "wireValue": "sort_by"
              },
              "docs": "Fields to sort the Dev users by and the direction to sort them.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "sort_by_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "state",
                "wireValue": "state"
              },
              "docs": "Filters Dev users based on state.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "user-state",
                        "typeId": "user-state",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "state_example": [
                    "active"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-users-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-users-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-users-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-users-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-users-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-users-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-users.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_devUsers.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-users-list-response",
                  "typeId": "dev-users-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "devUsersListExample": {
                      "dev_users": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "phone_numbers": [
                            "string"
                          ],
                          "state": "active",
                          "external_identities": [
                            {}
                          ]
                        }
                      ],
                      "next_cursor": "string",
                      "prev_cursor": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists users within your organization.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_devUsersListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-users.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "dev_users": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "phone_numbers": [
                            "string"
                          ],
                          "state": "active",
                          "external_identities": [
                            {}
                          ]
                        }
                      ],
                      "next_cursor": "string",
                      "prev_cursor": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-users-list-response",
                      "typeId": "dev-users-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "devUsersListExample": {
                          "dev_users": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "phone_numbers": [
                                "string"
                              ],
                              "state": "active",
                              "external_identities": [
                                {}
                              ]
                            }
                          ],
                          "next_cursor": "string",
                          "prev_cursor": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-users.self",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Dev-users-selfRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Dev-users-selfRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Dev-users-selfRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Dev-users-selfRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Dev-users-selfRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Dev-users-selfRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-users.self",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_devUsers.self",
          "name": "self",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "dev-users-self-response",
                  "typeId": "dev-users-self-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "devUsersSelfExample": {
                      "dev_user": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "display_picture": {
                          "display_id": "string",
                          "id": "string"
                        },
                        "email": "string",
                        "full_name": "string",
                        "phone_numbers": [
                          "string"
                        ],
                        "state": "active",
                        "external_identities": [
                          {}
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the authenticated user's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_devUsersSelfExample_200": {
                "displayName": "selfExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-users.self"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "dev_user": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "display_picture": {
                          "display_id": "string",
                          "id": "string"
                        },
                        "email": "string",
                        "full_name": "string",
                        "phone_numbers": [
                          "string"
                        ],
                        "state": "active",
                        "external_identities": [
                          {}
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "dev-users-self-response",
                      "typeId": "dev-users-self-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "devUsersSelfExample": {
                          "dev_user": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "phone_numbers": [
                              "string"
                            ],
                            "state": "active",
                            "external_identities": [
                              {}
                            ]
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_parts": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "parts"
          ],
          "packagePath": [],
          "file": "parts"
        }
      },
      "displayName": "parts",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Parts-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Parts-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Parts-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Parts-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Parts-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Parts-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "parts-create-request",
              "typeId": "parts-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsCreateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-create-request",
                  "typeId": "parts-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsCreateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-create-response",
                  "typeId": "parts-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsCreateExample": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsCreateExample_201": {
                "displayName": "partsCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "parts-create-response",
                      "typeId": "parts-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "partsCreateExample": {
                          "part": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "description": "string",
                            "name": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Parts-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Parts-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Parts-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Parts-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Parts-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Parts-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Parts-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "parts-delete-request",
              "typeId": "parts-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-delete-request",
                  "typeId": "parts-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsDeleteExample": {
                      "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-delete-response",
                  "typeId": "parts-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsDeleteExample_200": {
                "displayName": "partsDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "parts-delete-response",
                      "typeId": "parts-delete-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "partsDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The ID of the part to retrieve.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Parts-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Parts-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Parts-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Parts-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Parts-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Parts-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Parts-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-get-response",
                  "typeId": "parts-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsGetExample": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_partsGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/parts.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "parts-get-response",
                      "typeId": "parts-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "partsGetExample": {
                          "part": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "description": "string",
                            "name": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "created_by",
                "wireValue": "created_by"
              },
              "docs": "Filters for parts created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of parts to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": "name",
                "wireValue": "name"
              },
              "docs": "Filters for parts of the provided name(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "name_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "owned_by",
                "wireValue": "owned_by"
              },
              "docs": "Filters for parts owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for parts of the provided type(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "part-type",
                        "typeId": "part-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "capability"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Parts-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Parts-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Parts-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Parts-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Parts-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Parts-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-list-response",
                  "typeId": "parts-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsListExample": {
                      "next_cursor": "string",
                      "parts": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "description": "string",
                          "name": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ]
                        }
                      ],
                      "prev_cursor": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_partsListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/parts.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "string",
                      "parts": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "description": "string",
                          "name": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ]
                        }
                      ],
                      "prev_cursor": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "parts-list-response",
                      "typeId": "parts-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "partsListExample": {
                          "next_cursor": "string",
                          "parts": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "artifacts": [
                                {
                                  "display_id": "string",
                                  "id": "string"
                                }
                              ],
                              "description": "string",
                              "name": "string",
                              "owned_by": [
                                {
                                  "display_id": "string",
                                  "id": "string",
                                  "display_name": "string",
                                  "display_picture": {
                                    "display_id": "string",
                                    "id": "string"
                                  },
                                  "email": "string",
                                  "full_name": "string",
                                  "state": "active"
                                }
                              ],
                              "tags": [
                                {
                                  "tag": {
                                    "display_id": "string",
                                    "id": "string",
                                    "name": "string"
                                  },
                                  "value": "string"
                                }
                              ]
                            }
                          ],
                          "prev_cursor": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Parts-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Parts-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Parts-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Parts-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Parts-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Parts-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Parts-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "parts-update-request",
              "typeId": "parts-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-update-request",
                  "typeId": "parts-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsUpdateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "parts-update-response",
                  "typeId": "parts-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsUpdateExample": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsUpdateExample_200": {
                "displayName": "partsUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "description": "string",
                        "name": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "parts-update-response",
                      "typeId": "parts-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "partsUpdateExample": {
                          "part": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "description": "string",
                            "name": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_revOrgs": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "rev-orgs"
          ],
          "packagePath": [],
          "file": "rev-orgs"
        }
      },
      "displayName": "rev-orgs",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Rev-orgs-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Rev-orgs-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Rev-orgs-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Rev-orgs-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Rev-orgs-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Rev-orgs-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-orgs-create-request",
              "typeId": "rev-orgs-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsCreateExample": {
                  "display_name": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-create-request",
                  "typeId": "rev-orgs-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsCreateExample": {
                      "display_name": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-create-response",
                  "typeId": "rev-orgs-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsCreateExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a Rev organization in the authenticated user's Dev\norganization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsCreateExample_201": {
                "displayName": "revOrgsCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "display_name": "string"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "rev-orgs-create-response",
                      "typeId": "rev-orgs-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "revOrgsCreateExample": {
                          "rev_org": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "display_name": "string",
                            "description": "string",
                            "domain": "string",
                            "external_ref": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Rev-orgs-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Rev-orgs-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-orgs-delete-request",
              "typeId": "rev-orgs-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsDeleteExample": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-delete-request",
                  "typeId": "rev-orgs-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsDeleteExample": {
                      "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-delete-response",
                  "typeId": "rev-orgs-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes the Rev organization.",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsDeleteExample_200": {
                "displayName": "revOrgsDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "rev-orgs-delete-response",
                      "typeId": "rev-orgs-delete-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "revOrgsDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The ID of the required Rev organization.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Rev-orgs-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Rev-orgs-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-get-response",
                  "typeId": "rev-orgs-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsGetExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieves the Rev organization's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_revOrgsGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/rev-orgs.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "rev-orgs-get-response",
                      "typeId": "rev-orgs-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "revOrgsGetExample": {
                          "rev_org": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "display_name": "string",
                            "description": "string",
                            "domain": "string",
                            "external_ref": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "created_by",
                "wireValue": "created_by"
              },
              "docs": "Filters by creator.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "created_date.after",
                "wireValue": "created_date.after"
              },
              "docs": "Filters for objects created after the provided timestamp (inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_date.after_example": "created_date.after"
                }
              }
            },
            {
              "name": {
                "name": "created_date.before",
                "wireValue": "created_date.before"
              },
              "docs": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_date.before_example": "created_date.before"
                }
              }
            },
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "external_ref",
                "wireValue": "external_ref"
              },
              "docs": "List of external refs to filter Rev organizations for.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "external_ref_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of Rev organizations to be retrieved per page.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": "modified_date.after",
                "wireValue": "modified_date.after"
              },
              "docs": "Filters for objects created after the provided timestamp (inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "modified_date.after_example": "modified_date.after"
                }
              }
            },
            {
              "name": {
                "name": "modified_date.before",
                "wireValue": "modified_date.before"
              },
              "docs": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "modified_date.before_example": "modified_date.before"
                }
              }
            },
            {
              "name": {
                "name": "sort_by",
                "wireValue": "sort_by"
              },
              "docs": "Fields to sort the Rev organizations by and the direction to sort\nthem.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "sort_by_example": [
                    "string"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Rev-orgs-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Rev-orgs-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-list-response",
                  "typeId": "rev-orgs-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsListExample": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "rev_orgs": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "display_name": "string",
                          "description": "string",
                          "domain": "string",
                          "external_ref": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the list of Rev organizations' information belonging to the\nauthenticated user's Dev Organization which the user is also authorized\nto access.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_revOrgsListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/rev-orgs.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "rev_orgs": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "display_name": "string",
                          "description": "string",
                          "domain": "string",
                          "external_ref": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "rev-orgs-list-response",
                      "typeId": "rev-orgs-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "revOrgsListExample": {
                          "next_cursor": "string",
                          "prev_cursor": "string",
                          "rev_orgs": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "display_name": "string",
                              "description": "string",
                              "domain": "string",
                              "external_ref": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Rev-orgs-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Rev-orgs-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "rev-orgs-update-request",
              "typeId": "rev-orgs-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsUpdateExample": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-update-request",
                  "typeId": "rev-orgs-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsUpdateExample": {
                      "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "rev-orgs-update-response",
                  "typeId": "rev-orgs-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsUpdateExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates the Rev organization's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsUpdateExample_200": {
                "displayName": "revOrgsUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "display_name": "string",
                        "description": "string",
                        "domain": "string",
                        "external_ref": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "rev-orgs-update-response",
                      "typeId": "rev-orgs-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "revOrgsUpdateExample": {
                          "rev_org": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "display_name": "string",
                            "description": "string",
                            "domain": "string",
                            "external_ref": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_tags": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "tags"
          ],
          "packagePath": [],
          "file": "tags"
        }
      },
      "displayName": "tags",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Tags-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Tags-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Tags-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Tags-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Tags-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Tags-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tags-create-request",
              "typeId": "tags-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsCreateExample": {
                  "name": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-create-request",
                  "typeId": "tags-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsCreateExample": {
                      "name": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-create-response",
                  "typeId": "tags-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsCreateExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new tag, which is used to create associations between objects\nand a logical concept denoted by the tag's name.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsCreateExample_201": {
                "displayName": "tagsCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "name": "string"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tags-create-response",
                      "typeId": "tags-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "tagsCreateExample": {
                          "tag": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "allowed_values": [
                              "string"
                            ],
                            "description": "string",
                            "name": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Tags-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Tags-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Tags-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Tags-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Tags-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Tags-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Tags-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tags-delete-request",
              "typeId": "tags-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-delete-request",
                  "typeId": "tags-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsDeleteExample": {
                      "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-delete-response",
                  "typeId": "tags-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a tag.",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsDeleteExample_200": {
                "displayName": "tagsDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tags-delete-response",
                      "typeId": "tags-delete-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "tagsDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The requested tag's ID.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Tags-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Tags-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Tags-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Tags-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Tags-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Tags-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Tags-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-get-response",
                  "typeId": "tags-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsGetExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a tag's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_tagsGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/tags.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tags-get-response",
                      "typeId": "tags-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "tagsGetExample": {
                          "tag": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "allowed_values": [
                              "string"
                            ],
                            "description": "string",
                            "name": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of tags to return. The default is '50'.",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Tags-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Tags-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Tags-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Tags-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Tags-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Tags-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-list-response",
                  "typeId": "tags-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsListExample": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "tags": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "allowed_values": [
                            "string"
                          ],
                          "description": "string",
                          "name": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the available tags.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_tagsListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/tags.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "tags": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "allowed_values": [
                            "string"
                          ],
                          "description": "string",
                          "name": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tags-list-response",
                      "typeId": "tags-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "tagsListExample": {
                          "next_cursor": "string",
                          "prev_cursor": "string",
                          "tags": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "allowed_values": [
                                "string"
                              ],
                              "description": "string",
                              "name": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Tags-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Tags-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Tags-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Tags-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Tags-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Tags-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Tags-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "tags-update-request",
              "typeId": "tags-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsUpdateExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-update-request",
                  "typeId": "tags-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsUpdateExample": {
                      "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "tags-update-response",
                  "typeId": "tags-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsUpdateExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a tag's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsUpdateExample_200": {
                "displayName": "tagsUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "allowed_values": [
                          "string"
                        ],
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "tags-update-response",
                      "typeId": "tags-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "tagsUpdateExample": {
                          "tag": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "allowed_values": [
                              "string"
                            ],
                            "description": "string",
                            "name": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_timelineEntries": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "timeline-entries"
          ],
          "packagePath": [],
          "file": "timeline-entries"
        }
      },
      "displayName": "timeline-entries",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Timeline-entries-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Timeline-entries-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Timeline-entries-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Timeline-entries-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Timeline-entries-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Timeline-entries-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entries-create-request",
              "typeId": "timeline-entries-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "timelineEntriesCreateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-create-request",
                  "typeId": "timeline-entries-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesCreateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-create-response",
                  "typeId": "timeline-entries-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesCreateExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "timelineEntriesCreateExample_201": {
                "displayName": "timelineEntriesCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/timeline-entries.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "timeline-entries-create-response",
                      "typeId": "timeline-entries-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "timelineEntriesCreateExample": {
                          "timeline_entry": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "body_type": "snap_kit",
                            "snap_kit_body": {}
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The ID of the timeline entry to get.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Timeline-entries-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Timeline-entries-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-get-response",
                  "typeId": "timeline-entries-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesGetExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets an entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_timelineEntriesGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/timeline-entries.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "timeline-entries-get-response",
                      "typeId": "timeline-entries-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "timelineEntriesGetExample": {
                          "timeline_entry": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "body_type": "snap_kit",
                            "snap_kit_body": {}
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "object",
                  "pascalCase": {
                    "unsafeName": "Object",
                    "safeName": "Object_"
                  }
                },
                "wireValue": "object"
              },
              "docs": "The ID of the object to list timeline entries for.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "object_example": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            },
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of entries to return. If not set, then this\ndefaults to `50`.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Timeline-entries-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Timeline-entries-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-list-response",
                  "typeId": "timeline-entries-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesListExample": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "timeline_entries": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "body_type": "snap_kit",
                          "snap_kit_body": {}
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the timeline entries for an object.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_timelineEntriesListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/timeline-entries.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "timeline_entries": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "body_type": "snap_kit",
                          "snap_kit_body": {}
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "timeline-entries-list-response",
                      "typeId": "timeline-entries-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "timelineEntriesListExample": {
                          "next_cursor": "string",
                          "prev_cursor": "string",
                          "timeline_entries": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "artifacts": [
                                {
                                  "display_id": "string",
                                  "id": "string"
                                }
                              ],
                              "body": "string",
                              "body_type": "snap_kit",
                              "snap_kit_body": {}
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Timeline-entries-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Timeline-entries-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Timeline-entries-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Timeline-entries-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Timeline-entries-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Timeline-entries-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "timeline-entries-update-request",
              "typeId": "timeline-entries-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "timelineEntriesUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-update-request",
                  "typeId": "timeline-entries-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesUpdateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "timeline-entries-update-response",
                  "typeId": "timeline-entries-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesUpdateExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates an entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "timelineEntriesUpdateExample_200": {
                "displayName": "timelineEntriesUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/timeline-entries.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "timeline-entries-update-response",
                      "typeId": "timeline-entries-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "timelineEntriesUpdateExample": {
                          "timeline_entry": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "body_type": "snap_kit",
                            "snap_kit_body": {}
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_webhooks": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "webhooks"
          ],
          "packagePath": [],
          "file": "webhooks"
        }
      },
      "displayName": "webhooks",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Webhooks-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Webhooks-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Webhooks-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Webhooks-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Webhooks-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Webhooks-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhooks-create-request",
              "typeId": "webhooks-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksCreateExample": {
                  "url": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-create-request",
                  "typeId": "webhooks-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksCreateExample": {
                      "url": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-create-response",
                  "typeId": "webhooks-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksCreateExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new webhook target.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksCreateExample_201": {
                "displayName": "webhooksCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "url": "string"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhooks-create-response",
                      "typeId": "webhooks-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "webhooksCreateExample": {
                          "webhook": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "event_types": [
                              "part_created"
                            ],
                            "secret": "string",
                            "status": "active",
                            "url": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Webhooks-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Webhooks-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhooks-delete-request",
              "typeId": "webhooks-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksDeleteExample": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-delete-request",
                  "typeId": "webhooks-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksDeleteExample": {
                      "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-delete-response",
                  "typeId": "webhooks-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes the requested webhook.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksDeleteExample_200": {
                "displayName": "webhooksDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhooks-delete-response",
                      "typeId": "webhooks-delete-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "webhooksDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "ID for the webhook.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Webhooks-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Webhooks-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Webhooks-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Webhooks-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Webhooks-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Webhooks-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Webhooks-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-get-response",
                  "typeId": "webhooks-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksGetExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the requested webhook's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_webhooksGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/webhooks.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhooks-get-response",
                      "typeId": "webhooks-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "webhooksGetExample": {
                          "webhook": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "event_types": [
                              "part_created"
                            ],
                            "secret": "string",
                            "status": "active",
                            "url": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Webhooks-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Webhooks-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Webhooks-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Webhooks-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Webhooks-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Webhooks-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-list-response",
                  "typeId": "webhooks-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksListExample": {
                      "webhooks": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "event_types": [
                            "part_created"
                          ],
                          "secret": "string",
                          "status": "active",
                          "url": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the webhooks.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_webhooksListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/webhooks.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhooks": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "event_types": [
                            "part_created"
                          ],
                          "secret": "string",
                          "status": "active",
                          "url": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhooks-list-response",
                      "typeId": "webhooks-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "webhooksListExample": {
                          "webhooks": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "event_types": [
                                "part_created"
                              ],
                              "secret": "string",
                              "status": "active",
                              "url": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Webhooks-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Webhooks-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "webhooks-update-request",
              "typeId": "webhooks-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksUpdateExample": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-update-request",
                  "typeId": "webhooks-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksUpdateExample": {
                      "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "webhooks-update-response",
                  "typeId": "webhooks-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksUpdateExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates the requested webhook.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksUpdateExample_200": {
                "displayName": "webhooksUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "string",
                        "status": "active",
                        "url": "string"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "webhooks-update-response",
                      "typeId": "webhooks-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "webhooksUpdateExample": {
                          "webhook": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "event_types": [
                              "part_created"
                            ],
                            "secret": "string",
                            "status": "active",
                            "url": "string"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_works": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "works"
          ],
          "packagePath": [],
          "file": "works"
        }
      },
      "displayName": "works",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-createRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-createRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-createRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-createRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-createRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-createRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "works-create-request",
              "typeId": "works-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksCreateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-create-request",
                  "typeId": "works-create-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksCreateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-create-response",
                  "typeId": "works-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksCreateExample": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),\n[ticket](https://devrev.ai/docs/product/support)) item.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksCreateExample_201": {
                "displayName": "worksCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-create-response",
                      "typeId": "works-create-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksCreateExample": {
                          "work": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "applies_to_part": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "reported_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "stage": {
                              "name": "string"
                            },
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ],
                            "target_close_date": "2024-01-15T09:30:00Z",
                            "title": "string",
                            "priority": "p0"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-deleteRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-deleteRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-deleteRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-deleteRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Works-deleteRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-deleteRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-deleteRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "works-delete-request",
              "typeId": "works-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-delete-request",
                  "typeId": "works-delete-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksDeleteExample": {
                      "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-delete-response",
                  "typeId": "works-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a work item.",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksDeleteExample_200": {
                "displayName": "worksDeleteExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-delete-response",
                      "typeId": "works-delete-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksDeleteExample": {}
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.export",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "applies_to_part",
                "wireValue": "applies_to_part"
              },
              "docs": "Filters for work belonging to any of the provided parts.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "applies_to_part_example": [
                    "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "created_by",
                "wireValue": "created_by"
              },
              "docs": "Filters for work created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "first",
                "wireValue": "first"
              },
              "docs": "The number of work items to return. The default is '50', the maximum\nis '5000'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "first_example": 1
                }
              }
            },
            {
              "name": {
                "name": "issue.priority",
                "wireValue": "issue.priority"
              },
              "docs": "Filters for issues with any of the provided priorities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "issue-priority",
                        "typeId": "issue-priority",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.priority_example": [
                    "p0"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "issue.rev_orgs",
                "wireValue": "issue.rev_orgs"
              },
              "docs": "Filters for issues with any of the provided Rev organizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.rev_orgs_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "owned_by",
                "wireValue": "owned_by"
              },
              "docs": "Filters for work owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "stage.name",
                "wireValue": "stage.name"
              },
              "docs": "Filters for records in the provided stage(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "stage.name_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "ticket.rev_org",
                "wireValue": "ticket.rev_org"
              },
              "docs": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.rev_org_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "ticket.severity",
                "wireValue": "ticket.severity"
              },
              "docs": "Filters for tickets with any of the provided severities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "ticket-severity",
                        "typeId": "ticket-severity",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.severity_example": [
                    "blocker"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for work of the provided types.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "work-type",
                        "typeId": "work-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "issue"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-exportRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-exportRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-exportRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-exportRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-exportRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-exportRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.export",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.export",
          "name": {
            "originalName": "export",
            "camelCase": {
              "unsafeName": "export",
              "safeName": "export_"
            },
            "snakeCase": {
              "unsafeName": "export",
              "safeName": "export_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-export-response",
                  "typeId": "works-export-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksExportExample": {
                      "works": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "applies_to_part": {
                            "display_id": "string",
                            "id": "string",
                            "name": "string"
                          },
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "string"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "string",
                          "priority": "p0"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Exports a collection of work items.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_worksExportExample_200": {
                "displayName": "exportExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.export"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "works": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "applies_to_part": {
                            "display_id": "string",
                            "id": "string",
                            "name": "string"
                          },
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "string"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "string",
                          "priority": "p0"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-export-response",
                      "typeId": "works-export-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksExportExample": {
                          "works": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "applies_to_part": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "artifacts": [
                                {
                                  "display_id": "string",
                                  "id": "string"
                                }
                              ],
                              "body": "string",
                              "owned_by": [
                                {
                                  "display_id": "string",
                                  "id": "string",
                                  "display_name": "string",
                                  "display_picture": {
                                    "display_id": "string",
                                    "id": "string"
                                  },
                                  "email": "string",
                                  "full_name": "string",
                                  "state": "active"
                                }
                              ],
                              "reported_by": [
                                {
                                  "display_id": "string",
                                  "id": "string",
                                  "display_name": "string",
                                  "display_picture": {
                                    "display_id": "string",
                                    "id": "string"
                                  },
                                  "email": "string",
                                  "full_name": "string",
                                  "state": "active"
                                }
                              ],
                              "stage": {
                                "name": "string"
                              },
                              "tags": [
                                {
                                  "tag": {
                                    "display_id": "string",
                                    "id": "string",
                                    "name": "string"
                                  },
                                  "value": "string"
                                }
                              ],
                              "target_close_date": "2024-01-15T09:30:00Z",
                              "title": "string",
                              "priority": "p0"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "id",
                "wireValue": "id"
              },
              "docs": "The work's ID.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-getRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-getRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-getRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-getRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Works-getRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-getRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-getRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-get-response",
                  "typeId": "works-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksGetExample": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a work item's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_worksGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-get-response",
                      "typeId": "works-get-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksGetExample": {
                          "work": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "applies_to_part": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "reported_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "stage": {
                              "name": "string"
                            },
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ],
                            "target_close_date": "2024-01-15T09:30:00Z",
                            "title": "string",
                            "priority": "p0"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "applies_to_part",
                "wireValue": "applies_to_part"
              },
              "docs": "Filters for work belonging to any of the provided parts.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "applies_to_part_example": [
                    "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "created_by",
                "wireValue": "created_by"
              },
              "docs": "Filters for work created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "cursor",
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": "issue.priority",
                "wireValue": "issue.priority"
              },
              "docs": "Filters for issues with any of the provided priorities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "issue-priority",
                        "typeId": "issue-priority",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.priority_example": [
                    "p0"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "issue.rev_orgs",
                "wireValue": "issue.rev_orgs"
              },
              "docs": "Filters for issues with any of the provided Rev organizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.rev_orgs_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "The maximum number of works to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 1
                }
              }
            },
            {
              "name": {
                "name": "mode",
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "list-mode",
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": "owned_by",
                "wireValue": "owned_by"
              },
              "docs": "Filters for work owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "stage.name",
                "wireValue": "stage.name"
              },
              "docs": "Filters for records in the provided stage(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "stage.name_example": [
                    "string"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "ticket.rev_org",
                "wireValue": "ticket.rev_org"
              },
              "docs": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.rev_org_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": "ticket.severity",
                "wireValue": "ticket.severity"
              },
              "docs": "Filters for tickets with any of the provided severities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "ticket-severity",
                        "typeId": "ticket-severity",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.severity_example": [
                    "blocker"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for work of the provided types.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": "work-type",
                        "typeId": "work-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "issue"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-listRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-listRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-listRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-listRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-listRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-listRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-list-response",
                  "typeId": "works-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksListExample": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "works": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "applies_to_part": {
                            "display_id": "string",
                            "id": "string",
                            "name": "string"
                          },
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "string"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "string",
                          "priority": "p0"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists a collection of work items.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_worksListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "string",
                      "prev_cursor": "string",
                      "works": [
                        {
                          "created_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "string",
                          "id": "string",
                          "modified_by": {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "applies_to_part": {
                            "display_id": "string",
                            "id": "string",
                            "name": "string"
                          },
                          "artifacts": [
                            {
                              "display_id": "string",
                              "id": "string"
                            }
                          ],
                          "body": "string",
                          "owned_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "string"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "value": "string"
                            }
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "string",
                          "priority": "p0"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-list-response",
                      "typeId": "works-list-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksListExample": {
                          "next_cursor": "string",
                          "prev_cursor": "string",
                          "works": [
                            {
                              "created_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "created_date": "2024-01-15T09:30:00Z",
                              "display_id": "string",
                              "id": "string",
                              "modified_by": {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              },
                              "modified_date": "2024-01-15T09:30:00Z",
                              "applies_to_part": {
                                "display_id": "string",
                                "id": "string",
                                "name": "string"
                              },
                              "artifacts": [
                                {
                                  "display_id": "string",
                                  "id": "string"
                                }
                              ],
                              "body": "string",
                              "owned_by": [
                                {
                                  "display_id": "string",
                                  "id": "string",
                                  "display_name": "string",
                                  "display_picture": {
                                    "display_id": "string",
                                    "id": "string"
                                  },
                                  "email": "string",
                                  "full_name": "string",
                                  "state": "active"
                                }
                              ],
                              "reported_by": [
                                {
                                  "display_id": "string",
                                  "id": "string",
                                  "display_name": "string",
                                  "display_picture": {
                                    "display_id": "string",
                                    "id": "string"
                                  },
                                  "email": "string",
                                  "full_name": "string",
                                  "state": "active"
                                }
                              ],
                              "stage": {
                                "name": "string"
                              },
                              "tags": [
                                {
                                  "tag": {
                                    "display_id": "string",
                                    "id": "string",
                                    "name": "string"
                                  },
                                  "value": "string"
                                }
                              ],
                              "target_close_date": "2024-01-15T09:30:00Z",
                              "title": "string",
                              "priority": "p0"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "Works-updateRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": "Works-updateRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": "Works-updateRequestForbiddenError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": "Works-updateRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": "Works-updateRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": "Works-updateRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": "Works-updateRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.update",
          "name": "update",
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "works-update-request",
              "typeId": "works-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-request",
                  "typeId": "works-update-request",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksUpdateExample": {}
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "works-update-response",
                  "typeId": "works-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksUpdateExample": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a work item's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksUpdateExample_200": {
                "displayName": "worksUpdateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "string",
                        "id": "string",
                        "modified_by": {
                          "display_id": "string",
                          "id": "string",
                          "display_name": "string",
                          "display_picture": {
                            "display_id": "string",
                            "id": "string"
                          },
                          "email": "string",
                          "full_name": "string",
                          "state": "active"
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "applies_to_part": {
                          "display_id": "string",
                          "id": "string",
                          "name": "string"
                        },
                        "artifacts": [
                          {
                            "display_id": "string",
                            "id": "string"
                          }
                        ],
                        "body": "string",
                        "owned_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "string",
                            "id": "string",
                            "display_name": "string",
                            "display_picture": {
                              "display_id": "string",
                              "id": "string"
                            },
                            "email": "string",
                            "full_name": "string",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "string"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "value": "string"
                          }
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "string",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "works-update-response",
                      "typeId": "works-update-response",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Success.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "worksUpdateExample": {
                          "work": {
                            "created_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "created_date": "2024-01-15T09:30:00Z",
                            "display_id": "string",
                            "id": "string",
                            "modified_by": {
                              "display_id": "string",
                              "id": "string",
                              "display_name": "string",
                              "display_picture": {
                                "display_id": "string",
                                "id": "string"
                              },
                              "email": "string",
                              "full_name": "string",
                              "state": "active"
                            },
                            "modified_date": "2024-01-15T09:30:00Z",
                            "applies_to_part": {
                              "display_id": "string",
                              "id": "string",
                              "name": "string"
                            },
                            "artifacts": [
                              {
                                "display_id": "string",
                                "id": "string"
                              }
                            ],
                            "body": "string",
                            "owned_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "reported_by": [
                              {
                                "display_id": "string",
                                "id": "string",
                                "display_name": "string",
                                "display_picture": {
                                  "display_id": "string",
                                  "id": "string"
                                },
                                "email": "string",
                                "full_name": "string",
                                "state": "active"
                              }
                            ],
                            "stage": {
                              "name": "string"
                            },
                            "tags": [
                              {
                                "tag": {
                                  "display_id": "string",
                                  "id": "string",
                                  "name": "string"
                                },
                                "value": "string"
                              }
                            ],
                            "target_close_date": "2024-01-15T09:30:00Z",
                            "title": "string",
                            "priority": "p0"
                          }
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "errors": {
    "Artifacts-locateRequestBadRequestError": {
      "name": {
        "name": "Artifacts-locateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestBadRequestError",
        "wireValue": "Artifacts-locateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestUnauthorizedError": {
      "name": {
        "name": "Artifacts-locateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestUnauthorizedError",
        "wireValue": "Artifacts-locateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestForbiddenError": {
      "name": {
        "name": "Artifacts-locateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestForbiddenError",
        "wireValue": "Artifacts-locateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestNotFoundError": {
      "name": {
        "name": "Artifacts-locateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestNotFoundError",
        "wireValue": "Artifacts-locateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestTooManyRequestsError": {
      "name": {
        "name": "Artifacts-locateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestTooManyRequestsError",
        "wireValue": "Artifacts-locateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestInternalServerError": {
      "name": {
        "name": "Artifacts-locateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestInternalServerError",
        "wireValue": "Artifacts-locateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-locateRequestServiceUnavailableError": {
      "name": {
        "name": "Artifacts-locateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Artifacts-locateRequestServiceUnavailableError",
        "wireValue": "Artifacts-locateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestBadRequestError": {
      "name": {
        "name": "Artifacts-prepareRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestBadRequestError",
        "wireValue": "Artifacts-prepareRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestUnauthorizedError": {
      "name": {
        "name": "Artifacts-prepareRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestUnauthorizedError",
        "wireValue": "Artifacts-prepareRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestForbiddenError": {
      "name": {
        "name": "Artifacts-prepareRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestForbiddenError",
        "wireValue": "Artifacts-prepareRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestTooManyRequestsError": {
      "name": {
        "name": "Artifacts-prepareRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestTooManyRequestsError",
        "wireValue": "Artifacts-prepareRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestInternalServerError": {
      "name": {
        "name": "Artifacts-prepareRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestInternalServerError",
        "wireValue": "Artifacts-prepareRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Artifacts-prepareRequestServiceUnavailableError": {
      "name": {
        "name": "Artifacts-prepareRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Artifacts-prepareRequestServiceUnavailableError",
        "wireValue": "Artifacts-prepareRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestBadRequestError",
        "wireValue": "Auth-tokens-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestUnauthorizedError",
        "wireValue": "Auth-tokens-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestForbiddenError",
        "wireValue": "Auth-tokens-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestInternalServerError",
        "wireValue": "Auth-tokens-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-createRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-createRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestBadRequestError",
        "wireValue": "Auth-tokens-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestUnauthorizedError",
        "wireValue": "Auth-tokens-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestForbiddenError",
        "wireValue": "Auth-tokens-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestNotFoundError": {
      "name": {
        "name": "Auth-tokens-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestNotFoundError",
        "wireValue": "Auth-tokens-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestInternalServerError",
        "wireValue": "Auth-tokens-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-deleteRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestBadRequestError",
        "wireValue": "Auth-tokens-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestUnauthorizedError",
        "wireValue": "Auth-tokens-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestForbiddenError",
        "wireValue": "Auth-tokens-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestNotFoundError": {
      "name": {
        "name": "Auth-tokens-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestNotFoundError",
        "wireValue": "Auth-tokens-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestInternalServerError",
        "wireValue": "Auth-tokens-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-getRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-getRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestBadRequestError",
        "wireValue": "Auth-tokens-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestUnauthorizedError",
        "wireValue": "Auth-tokens-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestForbiddenError",
        "wireValue": "Auth-tokens-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestNotFoundError": {
      "name": {
        "name": "Auth-tokens-listRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestNotFoundError",
        "wireValue": "Auth-tokens-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestInternalServerError",
        "wireValue": "Auth-tokens-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-listRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-listRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestBadRequestError",
        "wireValue": "Auth-tokens-self-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestUnauthorizedError",
        "wireValue": "Auth-tokens-self-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestForbiddenError",
        "wireValue": "Auth-tokens-self-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestNotFoundError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestNotFoundError",
        "wireValue": "Auth-tokens-self-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-self-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestInternalServerError",
        "wireValue": "Auth-tokens-self-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-self-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-self-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-self-deleteRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-self-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestBadRequestError": {
      "name": {
        "name": "Auth-tokens-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestBadRequestError",
        "wireValue": "Auth-tokens-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestUnauthorizedError": {
      "name": {
        "name": "Auth-tokens-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestUnauthorizedError",
        "wireValue": "Auth-tokens-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestForbiddenError": {
      "name": {
        "name": "Auth-tokens-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestForbiddenError",
        "wireValue": "Auth-tokens-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestNotFoundError": {
      "name": {
        "name": "Auth-tokens-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestNotFoundError",
        "wireValue": "Auth-tokens-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Auth-tokens-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestTooManyRequestsError",
        "wireValue": "Auth-tokens-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestInternalServerError": {
      "name": {
        "name": "Auth-tokens-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestInternalServerError",
        "wireValue": "Auth-tokens-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Auth-tokens-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Auth-tokens-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Auth-tokens-updateRequestServiceUnavailableError",
        "wireValue": "Auth-tokens-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-createRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-createRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestNotFoundError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestNotFoundError",
        "wireValue": "Dev-org-auth-connections-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestNotFoundError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestNotFoundError",
        "wireValue": "Dev-org-auth-connections-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-getRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-getRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-listRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-listRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-toggleRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-toggleRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestNotFoundError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestNotFoundError",
        "wireValue": "Dev-org-auth-connections-toggleRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-toggleRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-toggleRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestBadRequestError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestBadRequestError",
        "wireValue": "Dev-org-auth-connections-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestUnauthorizedError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestUnauthorizedError",
        "wireValue": "Dev-org-auth-connections-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestForbiddenError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestForbiddenError",
        "wireValue": "Dev-org-auth-connections-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestNotFoundError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestNotFoundError",
        "wireValue": "Dev-org-auth-connections-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
        "wireValue": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestInternalServerError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestInternalServerError",
        "wireValue": "Dev-org-auth-connections-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-org-auth-connections-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
        "wireValue": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestBadRequestError": {
      "name": {
        "name": "Dev-users-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-users-listRequestBadRequestError",
        "wireValue": "Dev-users-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestUnauthorizedError": {
      "name": {
        "name": "Dev-users-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-users-listRequestUnauthorizedError",
        "wireValue": "Dev-users-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestForbiddenError": {
      "name": {
        "name": "Dev-users-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-users-listRequestForbiddenError",
        "wireValue": "Dev-users-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-users-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-users-listRequestTooManyRequestsError",
        "wireValue": "Dev-users-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestInternalServerError": {
      "name": {
        "name": "Dev-users-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-users-listRequestInternalServerError",
        "wireValue": "Dev-users-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-listRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-users-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-users-listRequestServiceUnavailableError",
        "wireValue": "Dev-users-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestBadRequestError": {
      "name": {
        "name": "Dev-users-selfRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestBadRequestError",
        "wireValue": "Dev-users-selfRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestUnauthorizedError": {
      "name": {
        "name": "Dev-users-selfRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestUnauthorizedError",
        "wireValue": "Dev-users-selfRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestForbiddenError": {
      "name": {
        "name": "Dev-users-selfRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestForbiddenError",
        "wireValue": "Dev-users-selfRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestTooManyRequestsError": {
      "name": {
        "name": "Dev-users-selfRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestTooManyRequestsError",
        "wireValue": "Dev-users-selfRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestInternalServerError": {
      "name": {
        "name": "Dev-users-selfRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestInternalServerError",
        "wireValue": "Dev-users-selfRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Dev-users-selfRequestServiceUnavailableError": {
      "name": {
        "name": "Dev-users-selfRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Dev-users-selfRequestServiceUnavailableError",
        "wireValue": "Dev-users-selfRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestBadRequestError": {
      "name": {
        "name": "Parts-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Parts-createRequestBadRequestError",
        "wireValue": "Parts-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestUnauthorizedError": {
      "name": {
        "name": "Parts-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Parts-createRequestUnauthorizedError",
        "wireValue": "Parts-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestForbiddenError": {
      "name": {
        "name": "Parts-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Parts-createRequestForbiddenError",
        "wireValue": "Parts-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestTooManyRequestsError": {
      "name": {
        "name": "Parts-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Parts-createRequestTooManyRequestsError",
        "wireValue": "Parts-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestInternalServerError": {
      "name": {
        "name": "Parts-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Parts-createRequestInternalServerError",
        "wireValue": "Parts-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-createRequestServiceUnavailableError": {
      "name": {
        "name": "Parts-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Parts-createRequestServiceUnavailableError",
        "wireValue": "Parts-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestBadRequestError": {
      "name": {
        "name": "Parts-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Parts-deleteRequestBadRequestError",
        "wireValue": "Parts-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Parts-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Parts-deleteRequestUnauthorizedError",
        "wireValue": "Parts-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestForbiddenError": {
      "name": {
        "name": "Parts-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Parts-deleteRequestForbiddenError",
        "wireValue": "Parts-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestNotFoundError": {
      "name": {
        "name": "Parts-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Parts-deleteRequestNotFoundError",
        "wireValue": "Parts-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Parts-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Parts-deleteRequestTooManyRequestsError",
        "wireValue": "Parts-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestInternalServerError": {
      "name": {
        "name": "Parts-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Parts-deleteRequestInternalServerError",
        "wireValue": "Parts-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Parts-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Parts-deleteRequestServiceUnavailableError",
        "wireValue": "Parts-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestBadRequestError": {
      "name": {
        "name": "Parts-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Parts-getRequestBadRequestError",
        "wireValue": "Parts-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestUnauthorizedError": {
      "name": {
        "name": "Parts-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Parts-getRequestUnauthorizedError",
        "wireValue": "Parts-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestForbiddenError": {
      "name": {
        "name": "Parts-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Parts-getRequestForbiddenError",
        "wireValue": "Parts-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestNotFoundError": {
      "name": {
        "name": "Parts-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Parts-getRequestNotFoundError",
        "wireValue": "Parts-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestTooManyRequestsError": {
      "name": {
        "name": "Parts-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Parts-getRequestTooManyRequestsError",
        "wireValue": "Parts-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestInternalServerError": {
      "name": {
        "name": "Parts-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Parts-getRequestInternalServerError",
        "wireValue": "Parts-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-getRequestServiceUnavailableError": {
      "name": {
        "name": "Parts-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Parts-getRequestServiceUnavailableError",
        "wireValue": "Parts-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestBadRequestError": {
      "name": {
        "name": "Parts-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Parts-listRequestBadRequestError",
        "wireValue": "Parts-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestUnauthorizedError": {
      "name": {
        "name": "Parts-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Parts-listRequestUnauthorizedError",
        "wireValue": "Parts-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestForbiddenError": {
      "name": {
        "name": "Parts-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Parts-listRequestForbiddenError",
        "wireValue": "Parts-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestTooManyRequestsError": {
      "name": {
        "name": "Parts-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Parts-listRequestTooManyRequestsError",
        "wireValue": "Parts-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestInternalServerError": {
      "name": {
        "name": "Parts-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Parts-listRequestInternalServerError",
        "wireValue": "Parts-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-listRequestServiceUnavailableError": {
      "name": {
        "name": "Parts-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Parts-listRequestServiceUnavailableError",
        "wireValue": "Parts-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestBadRequestError": {
      "name": {
        "name": "Parts-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Parts-updateRequestBadRequestError",
        "wireValue": "Parts-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestUnauthorizedError": {
      "name": {
        "name": "Parts-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Parts-updateRequestUnauthorizedError",
        "wireValue": "Parts-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestForbiddenError": {
      "name": {
        "name": "Parts-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Parts-updateRequestForbiddenError",
        "wireValue": "Parts-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestNotFoundError": {
      "name": {
        "name": "Parts-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Parts-updateRequestNotFoundError",
        "wireValue": "Parts-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Parts-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Parts-updateRequestTooManyRequestsError",
        "wireValue": "Parts-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestInternalServerError": {
      "name": {
        "name": "Parts-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Parts-updateRequestInternalServerError",
        "wireValue": "Parts-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Parts-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Parts-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Parts-updateRequestServiceUnavailableError",
        "wireValue": "Parts-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestBadRequestError": {
      "name": {
        "name": "Rev-orgs-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestBadRequestError",
        "wireValue": "Rev-orgs-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestUnauthorizedError": {
      "name": {
        "name": "Rev-orgs-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestUnauthorizedError",
        "wireValue": "Rev-orgs-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestForbiddenError": {
      "name": {
        "name": "Rev-orgs-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestForbiddenError",
        "wireValue": "Rev-orgs-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestTooManyRequestsError": {
      "name": {
        "name": "Rev-orgs-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestTooManyRequestsError",
        "wireValue": "Rev-orgs-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestInternalServerError": {
      "name": {
        "name": "Rev-orgs-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestInternalServerError",
        "wireValue": "Rev-orgs-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-createRequestServiceUnavailableError": {
      "name": {
        "name": "Rev-orgs-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Rev-orgs-createRequestServiceUnavailableError",
        "wireValue": "Rev-orgs-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestBadRequestError": {
      "name": {
        "name": "Rev-orgs-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestBadRequestError",
        "wireValue": "Rev-orgs-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Rev-orgs-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestUnauthorizedError",
        "wireValue": "Rev-orgs-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestForbiddenError": {
      "name": {
        "name": "Rev-orgs-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestForbiddenError",
        "wireValue": "Rev-orgs-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestNotFoundError": {
      "name": {
        "name": "Rev-orgs-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestNotFoundError",
        "wireValue": "Rev-orgs-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Rev-orgs-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestTooManyRequestsError",
        "wireValue": "Rev-orgs-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestInternalServerError": {
      "name": {
        "name": "Rev-orgs-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestInternalServerError",
        "wireValue": "Rev-orgs-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Rev-orgs-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Rev-orgs-deleteRequestServiceUnavailableError",
        "wireValue": "Rev-orgs-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestBadRequestError": {
      "name": {
        "name": "Rev-orgs-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestBadRequestError",
        "wireValue": "Rev-orgs-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestUnauthorizedError": {
      "name": {
        "name": "Rev-orgs-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestUnauthorizedError",
        "wireValue": "Rev-orgs-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestForbiddenError": {
      "name": {
        "name": "Rev-orgs-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestForbiddenError",
        "wireValue": "Rev-orgs-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestNotFoundError": {
      "name": {
        "name": "Rev-orgs-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestNotFoundError",
        "wireValue": "Rev-orgs-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestTooManyRequestsError": {
      "name": {
        "name": "Rev-orgs-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestTooManyRequestsError",
        "wireValue": "Rev-orgs-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestInternalServerError": {
      "name": {
        "name": "Rev-orgs-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestInternalServerError",
        "wireValue": "Rev-orgs-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-getRequestServiceUnavailableError": {
      "name": {
        "name": "Rev-orgs-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Rev-orgs-getRequestServiceUnavailableError",
        "wireValue": "Rev-orgs-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestBadRequestError": {
      "name": {
        "name": "Rev-orgs-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestBadRequestError",
        "wireValue": "Rev-orgs-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestUnauthorizedError": {
      "name": {
        "name": "Rev-orgs-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestUnauthorizedError",
        "wireValue": "Rev-orgs-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestForbiddenError": {
      "name": {
        "name": "Rev-orgs-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestForbiddenError",
        "wireValue": "Rev-orgs-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestNotFoundError": {
      "name": {
        "name": "Rev-orgs-listRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestNotFoundError",
        "wireValue": "Rev-orgs-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestTooManyRequestsError": {
      "name": {
        "name": "Rev-orgs-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestTooManyRequestsError",
        "wireValue": "Rev-orgs-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestInternalServerError": {
      "name": {
        "name": "Rev-orgs-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestInternalServerError",
        "wireValue": "Rev-orgs-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-listRequestServiceUnavailableError": {
      "name": {
        "name": "Rev-orgs-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Rev-orgs-listRequestServiceUnavailableError",
        "wireValue": "Rev-orgs-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestBadRequestError": {
      "name": {
        "name": "Rev-orgs-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestBadRequestError",
        "wireValue": "Rev-orgs-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestUnauthorizedError": {
      "name": {
        "name": "Rev-orgs-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestUnauthorizedError",
        "wireValue": "Rev-orgs-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestForbiddenError": {
      "name": {
        "name": "Rev-orgs-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestForbiddenError",
        "wireValue": "Rev-orgs-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestNotFoundError": {
      "name": {
        "name": "Rev-orgs-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestNotFoundError",
        "wireValue": "Rev-orgs-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Rev-orgs-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestTooManyRequestsError",
        "wireValue": "Rev-orgs-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestInternalServerError": {
      "name": {
        "name": "Rev-orgs-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestInternalServerError",
        "wireValue": "Rev-orgs-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Rev-orgs-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Rev-orgs-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Rev-orgs-updateRequestServiceUnavailableError",
        "wireValue": "Rev-orgs-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestBadRequestError": {
      "name": {
        "name": "Tags-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Tags-createRequestBadRequestError",
        "wireValue": "Tags-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestUnauthorizedError": {
      "name": {
        "name": "Tags-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Tags-createRequestUnauthorizedError",
        "wireValue": "Tags-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestForbiddenError": {
      "name": {
        "name": "Tags-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Tags-createRequestForbiddenError",
        "wireValue": "Tags-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestTooManyRequestsError": {
      "name": {
        "name": "Tags-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Tags-createRequestTooManyRequestsError",
        "wireValue": "Tags-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestInternalServerError": {
      "name": {
        "name": "Tags-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Tags-createRequestInternalServerError",
        "wireValue": "Tags-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-createRequestServiceUnavailableError": {
      "name": {
        "name": "Tags-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Tags-createRequestServiceUnavailableError",
        "wireValue": "Tags-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestBadRequestError": {
      "name": {
        "name": "Tags-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Tags-deleteRequestBadRequestError",
        "wireValue": "Tags-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Tags-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Tags-deleteRequestUnauthorizedError",
        "wireValue": "Tags-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestForbiddenError": {
      "name": {
        "name": "Tags-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Tags-deleteRequestForbiddenError",
        "wireValue": "Tags-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestNotFoundError": {
      "name": {
        "name": "Tags-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Tags-deleteRequestNotFoundError",
        "wireValue": "Tags-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Tags-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Tags-deleteRequestTooManyRequestsError",
        "wireValue": "Tags-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestInternalServerError": {
      "name": {
        "name": "Tags-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Tags-deleteRequestInternalServerError",
        "wireValue": "Tags-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Tags-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Tags-deleteRequestServiceUnavailableError",
        "wireValue": "Tags-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestBadRequestError": {
      "name": {
        "name": "Tags-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Tags-getRequestBadRequestError",
        "wireValue": "Tags-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestUnauthorizedError": {
      "name": {
        "name": "Tags-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Tags-getRequestUnauthorizedError",
        "wireValue": "Tags-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestForbiddenError": {
      "name": {
        "name": "Tags-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Tags-getRequestForbiddenError",
        "wireValue": "Tags-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestNotFoundError": {
      "name": {
        "name": "Tags-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Tags-getRequestNotFoundError",
        "wireValue": "Tags-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestTooManyRequestsError": {
      "name": {
        "name": "Tags-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Tags-getRequestTooManyRequestsError",
        "wireValue": "Tags-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestInternalServerError": {
      "name": {
        "name": "Tags-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Tags-getRequestInternalServerError",
        "wireValue": "Tags-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-getRequestServiceUnavailableError": {
      "name": {
        "name": "Tags-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Tags-getRequestServiceUnavailableError",
        "wireValue": "Tags-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestBadRequestError": {
      "name": {
        "name": "Tags-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Tags-listRequestBadRequestError",
        "wireValue": "Tags-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestUnauthorizedError": {
      "name": {
        "name": "Tags-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Tags-listRequestUnauthorizedError",
        "wireValue": "Tags-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestForbiddenError": {
      "name": {
        "name": "Tags-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Tags-listRequestForbiddenError",
        "wireValue": "Tags-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestTooManyRequestsError": {
      "name": {
        "name": "Tags-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Tags-listRequestTooManyRequestsError",
        "wireValue": "Tags-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestInternalServerError": {
      "name": {
        "name": "Tags-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Tags-listRequestInternalServerError",
        "wireValue": "Tags-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-listRequestServiceUnavailableError": {
      "name": {
        "name": "Tags-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Tags-listRequestServiceUnavailableError",
        "wireValue": "Tags-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestBadRequestError": {
      "name": {
        "name": "Tags-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Tags-updateRequestBadRequestError",
        "wireValue": "Tags-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestUnauthorizedError": {
      "name": {
        "name": "Tags-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Tags-updateRequestUnauthorizedError",
        "wireValue": "Tags-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestForbiddenError": {
      "name": {
        "name": "Tags-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Tags-updateRequestForbiddenError",
        "wireValue": "Tags-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestNotFoundError": {
      "name": {
        "name": "Tags-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Tags-updateRequestNotFoundError",
        "wireValue": "Tags-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Tags-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Tags-updateRequestTooManyRequestsError",
        "wireValue": "Tags-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestInternalServerError": {
      "name": {
        "name": "Tags-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Tags-updateRequestInternalServerError",
        "wireValue": "Tags-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Tags-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Tags-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Tags-updateRequestServiceUnavailableError",
        "wireValue": "Tags-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestBadRequestError": {
      "name": {
        "name": "Timeline-entries-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestBadRequestError",
        "wireValue": "Timeline-entries-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestUnauthorizedError": {
      "name": {
        "name": "Timeline-entries-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestUnauthorizedError",
        "wireValue": "Timeline-entries-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestForbiddenError": {
      "name": {
        "name": "Timeline-entries-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestForbiddenError",
        "wireValue": "Timeline-entries-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestTooManyRequestsError": {
      "name": {
        "name": "Timeline-entries-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestTooManyRequestsError",
        "wireValue": "Timeline-entries-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestInternalServerError": {
      "name": {
        "name": "Timeline-entries-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestInternalServerError",
        "wireValue": "Timeline-entries-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-createRequestServiceUnavailableError": {
      "name": {
        "name": "Timeline-entries-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Timeline-entries-createRequestServiceUnavailableError",
        "wireValue": "Timeline-entries-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestBadRequestError": {
      "name": {
        "name": "Timeline-entries-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestBadRequestError",
        "wireValue": "Timeline-entries-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestUnauthorizedError": {
      "name": {
        "name": "Timeline-entries-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestUnauthorizedError",
        "wireValue": "Timeline-entries-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestForbiddenError": {
      "name": {
        "name": "Timeline-entries-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestForbiddenError",
        "wireValue": "Timeline-entries-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestNotFoundError": {
      "name": {
        "name": "Timeline-entries-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestNotFoundError",
        "wireValue": "Timeline-entries-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestTooManyRequestsError": {
      "name": {
        "name": "Timeline-entries-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestTooManyRequestsError",
        "wireValue": "Timeline-entries-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestInternalServerError": {
      "name": {
        "name": "Timeline-entries-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestInternalServerError",
        "wireValue": "Timeline-entries-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-getRequestServiceUnavailableError": {
      "name": {
        "name": "Timeline-entries-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Timeline-entries-getRequestServiceUnavailableError",
        "wireValue": "Timeline-entries-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestBadRequestError": {
      "name": {
        "name": "Timeline-entries-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestBadRequestError",
        "wireValue": "Timeline-entries-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestUnauthorizedError": {
      "name": {
        "name": "Timeline-entries-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestUnauthorizedError",
        "wireValue": "Timeline-entries-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestForbiddenError": {
      "name": {
        "name": "Timeline-entries-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestForbiddenError",
        "wireValue": "Timeline-entries-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestNotFoundError": {
      "name": {
        "name": "Timeline-entries-listRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestNotFoundError",
        "wireValue": "Timeline-entries-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestTooManyRequestsError": {
      "name": {
        "name": "Timeline-entries-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestTooManyRequestsError",
        "wireValue": "Timeline-entries-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestInternalServerError": {
      "name": {
        "name": "Timeline-entries-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestInternalServerError",
        "wireValue": "Timeline-entries-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-listRequestServiceUnavailableError": {
      "name": {
        "name": "Timeline-entries-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Timeline-entries-listRequestServiceUnavailableError",
        "wireValue": "Timeline-entries-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestBadRequestError": {
      "name": {
        "name": "Timeline-entries-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestBadRequestError",
        "wireValue": "Timeline-entries-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestUnauthorizedError": {
      "name": {
        "name": "Timeline-entries-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestUnauthorizedError",
        "wireValue": "Timeline-entries-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestForbiddenError": {
      "name": {
        "name": "Timeline-entries-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestForbiddenError",
        "wireValue": "Timeline-entries-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Timeline-entries-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestTooManyRequestsError",
        "wireValue": "Timeline-entries-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestInternalServerError": {
      "name": {
        "name": "Timeline-entries-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestInternalServerError",
        "wireValue": "Timeline-entries-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Timeline-entries-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Timeline-entries-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Timeline-entries-updateRequestServiceUnavailableError",
        "wireValue": "Timeline-entries-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestBadRequestError": {
      "name": {
        "name": "Webhooks-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Webhooks-createRequestBadRequestError",
        "wireValue": "Webhooks-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestUnauthorizedError": {
      "name": {
        "name": "Webhooks-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Webhooks-createRequestUnauthorizedError",
        "wireValue": "Webhooks-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestForbiddenError": {
      "name": {
        "name": "Webhooks-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Webhooks-createRequestForbiddenError",
        "wireValue": "Webhooks-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestTooManyRequestsError": {
      "name": {
        "name": "Webhooks-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Webhooks-createRequestTooManyRequestsError",
        "wireValue": "Webhooks-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestInternalServerError": {
      "name": {
        "name": "Webhooks-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Webhooks-createRequestInternalServerError",
        "wireValue": "Webhooks-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-createRequestServiceUnavailableError": {
      "name": {
        "name": "Webhooks-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Webhooks-createRequestServiceUnavailableError",
        "wireValue": "Webhooks-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestBadRequestError": {
      "name": {
        "name": "Webhooks-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestBadRequestError",
        "wireValue": "Webhooks-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Webhooks-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestUnauthorizedError",
        "wireValue": "Webhooks-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestForbiddenError": {
      "name": {
        "name": "Webhooks-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestForbiddenError",
        "wireValue": "Webhooks-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestNotFoundError": {
      "name": {
        "name": "Webhooks-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestNotFoundError",
        "wireValue": "Webhooks-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Webhooks-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestTooManyRequestsError",
        "wireValue": "Webhooks-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestInternalServerError": {
      "name": {
        "name": "Webhooks-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestInternalServerError",
        "wireValue": "Webhooks-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Webhooks-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Webhooks-deleteRequestServiceUnavailableError",
        "wireValue": "Webhooks-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestBadRequestError": {
      "name": {
        "name": "Webhooks-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Webhooks-getRequestBadRequestError",
        "wireValue": "Webhooks-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestUnauthorizedError": {
      "name": {
        "name": "Webhooks-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Webhooks-getRequestUnauthorizedError",
        "wireValue": "Webhooks-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestForbiddenError": {
      "name": {
        "name": "Webhooks-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Webhooks-getRequestForbiddenError",
        "wireValue": "Webhooks-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestNotFoundError": {
      "name": {
        "name": "Webhooks-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Webhooks-getRequestNotFoundError",
        "wireValue": "Webhooks-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestTooManyRequestsError": {
      "name": {
        "name": "Webhooks-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Webhooks-getRequestTooManyRequestsError",
        "wireValue": "Webhooks-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestInternalServerError": {
      "name": {
        "name": "Webhooks-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Webhooks-getRequestInternalServerError",
        "wireValue": "Webhooks-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-getRequestServiceUnavailableError": {
      "name": {
        "name": "Webhooks-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Webhooks-getRequestServiceUnavailableError",
        "wireValue": "Webhooks-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestBadRequestError": {
      "name": {
        "name": "Webhooks-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Webhooks-listRequestBadRequestError",
        "wireValue": "Webhooks-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestUnauthorizedError": {
      "name": {
        "name": "Webhooks-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Webhooks-listRequestUnauthorizedError",
        "wireValue": "Webhooks-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestForbiddenError": {
      "name": {
        "name": "Webhooks-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Webhooks-listRequestForbiddenError",
        "wireValue": "Webhooks-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestTooManyRequestsError": {
      "name": {
        "name": "Webhooks-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Webhooks-listRequestTooManyRequestsError",
        "wireValue": "Webhooks-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestInternalServerError": {
      "name": {
        "name": "Webhooks-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Webhooks-listRequestInternalServerError",
        "wireValue": "Webhooks-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-listRequestServiceUnavailableError": {
      "name": {
        "name": "Webhooks-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Webhooks-listRequestServiceUnavailableError",
        "wireValue": "Webhooks-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestBadRequestError": {
      "name": {
        "name": "Webhooks-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestBadRequestError",
        "wireValue": "Webhooks-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestUnauthorizedError": {
      "name": {
        "name": "Webhooks-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestUnauthorizedError",
        "wireValue": "Webhooks-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestForbiddenError": {
      "name": {
        "name": "Webhooks-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestForbiddenError",
        "wireValue": "Webhooks-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestNotFoundError": {
      "name": {
        "name": "Webhooks-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestNotFoundError",
        "wireValue": "Webhooks-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Webhooks-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestTooManyRequestsError",
        "wireValue": "Webhooks-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestInternalServerError": {
      "name": {
        "name": "Webhooks-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestInternalServerError",
        "wireValue": "Webhooks-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Webhooks-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Webhooks-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Webhooks-updateRequestServiceUnavailableError",
        "wireValue": "Webhooks-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestBadRequestError": {
      "name": {
        "name": "Works-createRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-createRequestBadRequestError",
        "wireValue": "Works-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestUnauthorizedError": {
      "name": {
        "name": "Works-createRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-createRequestUnauthorizedError",
        "wireValue": "Works-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestForbiddenError": {
      "name": {
        "name": "Works-createRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-createRequestForbiddenError",
        "wireValue": "Works-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestTooManyRequestsError": {
      "name": {
        "name": "Works-createRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-createRequestTooManyRequestsError",
        "wireValue": "Works-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestInternalServerError": {
      "name": {
        "name": "Works-createRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-createRequestInternalServerError",
        "wireValue": "Works-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-createRequestServiceUnavailableError": {
      "name": {
        "name": "Works-createRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-createRequestServiceUnavailableError",
        "wireValue": "Works-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestBadRequestError": {
      "name": {
        "name": "Works-deleteRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-deleteRequestBadRequestError",
        "wireValue": "Works-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestUnauthorizedError": {
      "name": {
        "name": "Works-deleteRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-deleteRequestUnauthorizedError",
        "wireValue": "Works-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestForbiddenError": {
      "name": {
        "name": "Works-deleteRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-deleteRequestForbiddenError",
        "wireValue": "Works-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestNotFoundError": {
      "name": {
        "name": "Works-deleteRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Works-deleteRequestNotFoundError",
        "wireValue": "Works-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestTooManyRequestsError": {
      "name": {
        "name": "Works-deleteRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-deleteRequestTooManyRequestsError",
        "wireValue": "Works-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestInternalServerError": {
      "name": {
        "name": "Works-deleteRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-deleteRequestInternalServerError",
        "wireValue": "Works-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-deleteRequestServiceUnavailableError": {
      "name": {
        "name": "Works-deleteRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-deleteRequestServiceUnavailableError",
        "wireValue": "Works-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestBadRequestError": {
      "name": {
        "name": "Works-exportRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-exportRequestBadRequestError",
        "wireValue": "Works-exportRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestUnauthorizedError": {
      "name": {
        "name": "Works-exportRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-exportRequestUnauthorizedError",
        "wireValue": "Works-exportRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestForbiddenError": {
      "name": {
        "name": "Works-exportRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-exportRequestForbiddenError",
        "wireValue": "Works-exportRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestTooManyRequestsError": {
      "name": {
        "name": "Works-exportRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-exportRequestTooManyRequestsError",
        "wireValue": "Works-exportRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestInternalServerError": {
      "name": {
        "name": "Works-exportRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-exportRequestInternalServerError",
        "wireValue": "Works-exportRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-exportRequestServiceUnavailableError": {
      "name": {
        "name": "Works-exportRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-exportRequestServiceUnavailableError",
        "wireValue": "Works-exportRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestBadRequestError": {
      "name": {
        "name": "Works-getRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-getRequestBadRequestError",
        "wireValue": "Works-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestUnauthorizedError": {
      "name": {
        "name": "Works-getRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-getRequestUnauthorizedError",
        "wireValue": "Works-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestForbiddenError": {
      "name": {
        "name": "Works-getRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-getRequestForbiddenError",
        "wireValue": "Works-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestNotFoundError": {
      "name": {
        "name": "Works-getRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Works-getRequestNotFoundError",
        "wireValue": "Works-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestTooManyRequestsError": {
      "name": {
        "name": "Works-getRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-getRequestTooManyRequestsError",
        "wireValue": "Works-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestInternalServerError": {
      "name": {
        "name": "Works-getRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-getRequestInternalServerError",
        "wireValue": "Works-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-getRequestServiceUnavailableError": {
      "name": {
        "name": "Works-getRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-getRequestServiceUnavailableError",
        "wireValue": "Works-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestBadRequestError": {
      "name": {
        "name": "Works-listRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-listRequestBadRequestError",
        "wireValue": "Works-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestUnauthorizedError": {
      "name": {
        "name": "Works-listRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-listRequestUnauthorizedError",
        "wireValue": "Works-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestForbiddenError": {
      "name": {
        "name": "Works-listRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-listRequestForbiddenError",
        "wireValue": "Works-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestTooManyRequestsError": {
      "name": {
        "name": "Works-listRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-listRequestTooManyRequestsError",
        "wireValue": "Works-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestInternalServerError": {
      "name": {
        "name": "Works-listRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-listRequestInternalServerError",
        "wireValue": "Works-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-listRequestServiceUnavailableError": {
      "name": {
        "name": "Works-listRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-listRequestServiceUnavailableError",
        "wireValue": "Works-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestBadRequestError": {
      "name": {
        "name": "Works-updateRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "Works-updateRequestBadRequestError",
        "wireValue": "Works-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-bad-request",
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestUnauthorizedError": {
      "name": {
        "name": "Works-updateRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "Works-updateRequestUnauthorizedError",
        "wireValue": "Works-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-unauthorized",
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestForbiddenError": {
      "name": {
        "name": "Works-updateRequestForbiddenError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": "Works-updateRequestForbiddenError",
        "wireValue": "Works-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-forbidden",
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestNotFoundError": {
      "name": {
        "name": "Works-updateRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "Works-updateRequestNotFoundError",
        "wireValue": "Works-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-not-found",
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestTooManyRequestsError": {
      "name": {
        "name": "Works-updateRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "Works-updateRequestTooManyRequestsError",
        "wireValue": "Works-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-too-many-requests",
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestInternalServerError": {
      "name": {
        "name": "Works-updateRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "Works-updateRequestInternalServerError",
        "wireValue": "Works-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-internal-server-error",
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "Works-updateRequestServiceUnavailableError": {
      "name": {
        "name": "Works-updateRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "Works-updateRequestServiceUnavailableError",
        "wireValue": "Works-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "error-service-unavailable",
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    }
  },
  "webhookGroups": {},
  "headers": [],
  "idempotencyHeaders": [],
  "pathParameters": [],
  "errorDiscriminationStrategy": {
    "type": "statusCode"
  },
  "variables": [],
  "serviceTypeReferenceInfo": {
    "sharedTypes": [],
    "typesReferencedOnlyByService": {}
  },
  "environments": {
    "defaultEnvironment": "DevRev API endpoint.",
    "environments": {
      "environments": [
        {
          "id": "DevRev API endpoint.",
          "name": "DevRev API endpoint.",
          "url": "https://api.devrev.ai",
          "docs": "DevRev API endpoint."
        }
      ],
      "type": "singleBaseUrl"
    }
  },
  "rootPackage": {
    "fernFilepath": {
      "allParts": [],
      "packagePath": []
    },
    "types": [
      "artifact-summary",
      "artifacts-locate-response",
      "artifacts-prepare-request",
      "artifacts-prepare-response",
      "artifacts-prepare-response-form-data",
      "atom-base",
      "atom-base-summary",
      "auth-connection",
      "auth-connection-options-azure-ad",
      "auth-connection-options-google-apps",
      "auth-connection-options-oidc",
      "auth-connection-options-saml",
      "auth-connection-options-social",
      "auth-connection-toggle",
      "auth-connection-type",
      "auth-token",
      "auth-token-grant-type",
      "auth-token-requested-token-type",
      "auth-token-status",
      "auth-token-subject-token-type",
      "auth-token-token-type",
      "auth-tokens-create-request",
      "auth-tokens-create-response",
      "auth-tokens-delete-request",
      "auth-tokens-get-response",
      "auth-tokens-list-response",
      "auth-tokens-org-traits",
      "auth-tokens-rev-info",
      "auth-tokens-self-delete-request",
      "auth-tokens-update-request",
      "auth-tokens-update-response",
      "auth-tokens-user-traits",
      "capability",
      "capability-summary",
      "dev-org-auth-connections-create-request",
      "dev-org-auth-connections-create-request-type",
      "dev-org-auth-connections-create-response",
      "dev-org-auth-connections-delete-request",
      "dev-org-auth-connections-get-response",
      "dev-org-auth-connections-list-response",
      "dev-org-auth-connections-toggle-request",
      "dev-org-auth-connections-update-request",
      "dev-org-auth-connections-update-request-type",
      "dev-org-auth-connections-update-response",
      "dev-user",
      "dev-user-summary",
      "dev-users-list-response",
      "dev-users-self-response",
      "empty",
      "enhancement",
      "enhancement-summary",
      "error-bad-request",
      "error-bad-request-bad-request",
      "error-bad-request-invalid-enum-value",
      "error-bad-request-missing-required-field",
      "error-bad-request-parse-error",
      "error-bad-request-type",
      "error-bad-request-value-not-permitted",
      "error-base",
      "error-forbidden",
      "error-forbidden-forbidden",
      "error-forbidden-type",
      "error-internal-server-error",
      "error-internal-server-error-internal-error",
      "error-internal-server-error-type",
      "error-not-found",
      "error-not-found-not-found",
      "error-not-found-type",
      "error-service-unavailable",
      "error-service-unavailable-service-unavailable",
      "error-service-unavailable-type",
      "error-too-many-requests",
      "error-too-many-requests-too-many-requests",
      "error-too-many-requests-type",
      "error-unauthorized",
      "error-unauthorized-type",
      "error-unauthorized-unauthenticated",
      "event-part-created",
      "event-part-deleted",
      "event-part-updated",
      "event-rev-org-created",
      "event-rev-org-deleted",
      "event-rev-org-updated",
      "event-tag-created",
      "event-tag-deleted",
      "event-tag-updated",
      "event-timeline-entry-created",
      "event-timeline-entry-deleted",
      "event-timeline-entry-updated",
      "event-webhook-created",
      "event-webhook-deleted",
      "event-webhook-updated",
      "event-work-created",
      "event-work-deleted",
      "event-work-updated",
      "external-identity",
      "feature",
      "feature-summary",
      "group-summary",
      "issue",
      "issue-priority",
      "list-mode",
      "org-base",
      "org-base-summary",
      "org-environment",
      "org-summary",
      "org-type",
      "part",
      "part-base",
      "part-base-summary",
      "part-summary",
      "part-type",
      "parts-create-request",
      "parts-create-request-capability",
      "parts-create-request-enhancement",
      "parts-create-request-feature",
      "parts-create-request-product",
      "parts-create-response",
      "parts-delete-request",
      "parts-delete-response",
      "parts-get-response",
      "parts-list-response",
      "parts-update-request",
      "parts-update-request-capability",
      "parts-update-request-enhancement",
      "parts-update-request-feature",
      "parts-update-request-owned-by",
      "parts-update-request-product",
      "parts-update-response",
      "product",
      "product-summary",
      "rev-org",
      "rev-org-summary",
      "rev-orgs-create-request",
      "rev-orgs-create-response",
      "rev-orgs-delete-request",
      "rev-orgs-delete-response",
      "rev-orgs-get-response",
      "rev-orgs-list-response",
      "rev-orgs-update-request",
      "rev-orgs-update-response",
      "rev-user-summary",
      "set-tag-with-value",
      "stage",
      "stage-init",
      "stage-update",
      "sys-user-summary",
      "tag",
      "tag-summary",
      "tag-with-value",
      "tags-create-request",
      "tags-create-response",
      "tags-delete-request",
      "tags-delete-response",
      "tags-get-response",
      "tags-list-response",
      "tags-update-allowed-values",
      "tags-update-request",
      "tags-update-response",
      "ticket",
      "ticket-severity",
      "timeline-comment",
      "timeline-comment-body-type",
      "timeline-entries-create-request",
      "timeline-entries-create-request-timeline-comment",
      "timeline-entries-create-request-type",
      "timeline-entries-create-response",
      "timeline-entries-get-response",
      "timeline-entries-list-response",
      "timeline-entries-update-request",
      "timeline-entries-update-request-timeline-comment",
      "timeline-entries-update-request-timeline-comment-artifacts",
      "timeline-entries-update-request-type",
      "timeline-entries-update-response",
      "timeline-entry",
      "timeline-entry-base",
      "timeline-entry-type",
      "timeline-entry-visibility",
      "user-base",
      "user-base-summary",
      "user-state",
      "user-summary",
      "user-type",
      "webhook",
      "webhook-event-request",
      "webhook-event-response",
      "webhook-event-type",
      "webhook-event-verify",
      "webhook-status",
      "webhooks-create-request",
      "webhooks-create-response",
      "webhooks-delete-request",
      "webhooks-delete-response",
      "webhooks-get-response",
      "webhooks-list-response",
      "webhooks-update-action",
      "webhooks-update-request",
      "webhooks-update-request-event-types",
      "webhooks-update-response",
      "work",
      "work-base",
      "work-type",
      "works-create-request",
      "works-create-request-issue",
      "works-create-request-ticket",
      "works-create-response",
      "works-delete-request",
      "works-delete-response",
      "works-export-response",
      "works-get-response",
      "works-list-response",
      "works-update-request",
      "works-update-request-artifact-ids",
      "works-update-request-issue",
      "works-update-request-owned-by",
      "works-update-request-reported-by",
      "works-update-request-tags",
      "works-update-request-ticket",
      "works-update-response"
    ],
    "errors": [],
    "subpackages": [
      "subpackage_artifacts",
      "subpackage_authTokens",
      "subpackage_authConnection",
      "subpackage_devUsers",
      "subpackage_parts",
      "subpackage_revOrgs",
      "subpackage_tags",
      "subpackage_timelineEntries",
      "subpackage_webhooks",
      "subpackage_works"
    ],
    "hasEndpointsInTree": false
  },
  "subpackages": {
    "subpackage_artifacts": {
      "name": "artifacts",
      "fernFilepath": {
        "allParts": [
          "artifacts"
        ],
        "packagePath": [],
        "file": "artifacts"
      },
      "service": "service_artifacts",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_authTokens": {
      "name": "authTokens",
      "fernFilepath": {
        "allParts": [
          "authTokens"
        ],
        "packagePath": [],
        "file": "authTokens"
      },
      "service": "service_authTokens",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_authConnection": {
      "name": "authConnection",
      "fernFilepath": {
        "allParts": [
          "authConnection"
        ],
        "packagePath": [],
        "file": "authConnection"
      },
      "service": "service_authConnection",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_devUsers": {
      "name": "devUsers",
      "fernFilepath": {
        "allParts": [
          "devUsers"
        ],
        "packagePath": [],
        "file": "devUsers"
      },
      "service": "service_devUsers",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_parts": {
      "name": "parts",
      "fernFilepath": {
        "allParts": [
          "parts"
        ],
        "packagePath": [],
        "file": "parts"
      },
      "service": "service_parts",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_revOrgs": {
      "name": "revOrgs",
      "fernFilepath": {
        "allParts": [
          "revOrgs"
        ],
        "packagePath": [],
        "file": "revOrgs"
      },
      "service": "service_revOrgs",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_tags": {
      "name": "tags",
      "fernFilepath": {
        "allParts": [
          "tags"
        ],
        "packagePath": [],
        "file": "tags"
      },
      "service": "service_tags",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_timelineEntries": {
      "name": "timelineEntries",
      "fernFilepath": {
        "allParts": [
          "timelineEntries"
        ],
        "packagePath": [],
        "file": "timelineEntries"
      },
      "service": "service_timelineEntries",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_webhooks": {
      "name": "webhooks",
      "fernFilepath": {
        "allParts": [
          "webhooks"
        ],
        "packagePath": [],
        "file": "webhooks"
      },
      "service": "service_webhooks",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_works": {
      "name": "works",
      "fernFilepath": {
        "allParts": [
          "works"
        ],
        "packagePath": [],
        "file": "works"
      },
      "service": "service_works",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    }
  },
  "sdkConfig": {
    "hasFileDownloadEndpoints": false,
    "hasPaginatedEndpoints": false,
    "hasStreamingEndpoints": false,
    "isAuthMandatory": true,
    "platformHeaders": {
      "language": "",
      "sdkName": "",
      "sdkVersion": ""
    }
  },
  "apiName": "",
  "constants": {
    "errorInstanceIdKey": {
      "name": "errorInstanceId",
      "wireValue": "errorInstanceId"
    }
  }
}