{
  "apiName": "",
  "selfHosted": false,
  "auth": {
    "requirement": "ALL",
    "schemes": [
      {
        "key": "header",
        "name": {
          "name": "apiKey",
          "wireValue": "Authorization"
        },
        "valueType": {
          "container": {
            "optional": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "type": "optional"
          },
          "type": "container"
        },
        "type": "header"
      }
    ]
  },
  "headers": [],
  "environments": {
    "defaultEnvironment": "AssemblyAI API",
    "environments": {
      "baseUrls": [
        {
          "id": "Base",
          "name": "Base"
        },
        {
          "id": "API",
          "name": "API"
        }
      ],
      "environments": [
        {
          "id": "AssemblyAI API",
          "name": "AssemblyAI API",
          "urls": {
            "Base": "https://api.assemblyai.com",
            "API": "wss://api.assemblyai.com/v2/realtime/ws"
          }
        }
      ],
      "type": "multipleBaseUrls"
    }
  },
  "types": {
    "RedactedAudioResponse": {
      "name": {
        "typeId": "RedactedAudioResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RedactedAudioResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "RedactedAudioStatus",
              "typeId": "RedactedAudioStatus",
              "inline": false,
              "type": "named"
            },
            "docs": "The status of the redacted audio",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "redacted_audio_url",
              "wireValue": "redacted_audio_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the redacted audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RedactedAudioResponseRedactedAudioUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RedactedAudioResponse_example_autogenerated": {
            "status": "redacted_audio_ready",
            "redacted_audio_url": "string"
          }
        }
      }
    },
    "RedactedAudioStatus": {
      "name": {
        "typeId": "RedactedAudioStatus",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RedactedAudioStatus"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "redacted_audio_ready",
              "wireValue": "redacted_audio_ready"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of the redacted audio",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RedactedAudioStatus_example_autogenerated": "redacted_audio_ready"
        }
      }
    },
    "SubtitleFormat": {
      "name": {
        "typeId": "SubtitleFormat",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SubtitleFormat"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "srt",
              "wireValue": "srt"
            }
          },
          {
            "name": {
              "name": "vtt",
              "wireValue": "vtt"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Format of the subtitles",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SubtitleFormat_example_autogenerated": "srt"
        }
      }
    },
    "WordSearchResponse": {
      "name": {
        "typeId": "WordSearchResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "WordSearchResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the transcript",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchResponseId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "total_count",
              "wireValue": "total_count"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The total count of all matched instances. For e.g., word 1 matched 2 times, and word 2 matched 3 times, `total_count` will equal 5.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchResponseTotalCount_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "matches",
              "wireValue": "matches"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "WordSearchMatch",
                  "typeId": "WordSearchMatch",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The matches of the search",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchResponseMatches_example_autogenerated": [
                  {
                    "text": "string",
                    "count": 1,
                    "timestamps": [
                      [
                        1
                      ]
                    ],
                    "indexes": [
                      1
                    ]
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "WordSearchResponse_example_autogenerated": {
            "id": "string",
            "total_count": 1,
            "matches": [
              {
                "text": "string",
                "count": 1,
                "timestamps": [
                  [
                    1
                  ]
                ],
                "indexes": [
                  1
                ]
              }
            ]
          }
        }
      }
    },
    "WordSearchMatch": {
      "name": {
        "typeId": "WordSearchMatch",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "WordSearchMatch"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The matched word",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchMatchText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "count",
              "wireValue": "count"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The total amount of times the word is in the transcript",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchMatchCount_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "timestamps",
              "wireValue": "timestamps"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "WordSearchTimestamp",
                  "typeId": "WordSearchTimestamp",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "An array of timestamps",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchMatchTimestamps_example_autogenerated": [
                  [
                    1
                  ]
                ]
              }
            }
          },
          {
            "name": {
              "name": "indexes",
              "wireValue": "indexes"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "INTEGER",
                    "v2": {
                      "validation": {},
                      "type": "integer"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "An array of all index locations for that word within the `words` array of the completed transcript",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordSearchMatchIndexes_example_autogenerated": [
                  1
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "WordSearchMatch_example_autogenerated": {
            "text": "string",
            "count": 1,
            "timestamps": [
              [
                1
              ]
            ],
            "indexes": [
              1
            ]
          }
        }
      }
    },
    "WordSearchTimestamp": {
      "name": {
        "typeId": "WordSearchTimestamp",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "WordSearchTimestamp"
      },
      "shape": {
        "aliasOf": {
          "container": {
            "list": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "type": "list"
          },
          "type": "container"
        },
        "resolvedType": {
          "container": {
            "list": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "type": "list"
          },
          "type": "container"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of timestamps structured as [`start_time`, `end_time`] in milliseconds",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "WordSearchTimestamp_example_autogenerated": [
            1
          ]
        }
      }
    },
    "Timestamp": {
      "name": {
        "typeId": "Timestamp",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Timestamp"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The start time in milliseconds",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimestampStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The end time in milliseconds",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimestampEnd_example_autogenerated": 1
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Timestamp containing a start and end property in milliseconds.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Timestamp_example_autogenerated": {
            "start": 1,
            "end": 1
          }
        }
      }
    },
    "CreateTranscriptOptionalParameters": {
      "name": {
        "typeId": "CreateTranscriptOptionalParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "CreateTranscriptOptionalParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "language_code",
              "wireValue": "language_code"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptLanguageCode",
                  "typeId": "TranscriptLanguageCode",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "punctuate",
              "wireValue": "punctuate"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable Automatic Punctuation, can be true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersPunctuate_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "format_text",
              "wireValue": "format_text"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable Text Formatting, can be true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersFormatText_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "dual_channel",
              "wireValue": "dual_channel"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Dual Channel](https://assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) transcription, can be true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersDualChannel_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "webhook_url",
              "wireValue": "webhook_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersWebhookUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "webhook_auth_header_name",
              "wireValue": "webhook_auth_header_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersWebhookAuthHeaderName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "webhook_auth_header_value",
              "wireValue": "webhook_auth_header_value"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersWebhookAuthHeaderValue_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "auto_highlights",
              "wireValue": "auto_highlights"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether Key Phrases was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersAutoHighlights_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "audio_start_from",
              "wireValue": "audio_start_from"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "INTEGER",
                    "v2": {
                      "validation": {},
                      "type": "integer"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The point in time, in milliseconds, to begin transcription from in your media file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersAudioStartFrom_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "audio_end_at",
              "wireValue": "audio_end_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "INTEGER",
                    "v2": {
                      "validation": {},
                      "type": "integer"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The point in time, in milliseconds, to stop transcribing in your media file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersAudioEndAt_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "word_boost",
              "wireValue": "word_boost"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersWordBoost_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "boost_param",
              "wireValue": "boost_param"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptBoostParam",
                  "typeId": "TranscriptBoostParam",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The word boost parameter value, if provided in the transcription request.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "filter_profanity",
              "wireValue": "filter_profanity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Filter profanity from the transcribed text, can be true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersFilterProfanity_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii",
              "wireValue": "redact_pii"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Redact PII from the transcribed text using the Redact PII model, can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersRedactPii_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_audio",
              "wireValue": "redact_pii_audio"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Generate a copy of the original media file with spoken PII \"beeped\" out, can be true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersRedactPiiAudio_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_audio_quality",
              "wireValue": "redact_pii_audio_quality"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "default": "mp3",
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersRedactPiiAudioQuality_example_autogenerated": "mp3"
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_policies",
              "wireValue": "redact_pii_policies"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "PiiPolicy",
                      "typeId": "PiiPolicy",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of PII Redaction policies to enable. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersRedactPiiPolicies_example_autogenerated": [
                  "medical_process"
                ]
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_sub",
              "wireValue": "redact_pii_sub"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SubstitutionPolicy",
                  "typeId": "SubstitutionPolicy",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "speaker_labels",
              "wireValue": "speaker_labels"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersSpeakerLabels_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "speakers_expected",
              "wireValue": "speakers_expected"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "INTEGER",
                        "v2": {
                          "validation": {},
                          "type": "integer"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersSpeakersExpected_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "content_safety",
              "wireValue": "content_safety"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersContentSafety_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "iab_categories",
              "wireValue": "iab_categories"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersIabCategories_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "language_detection",
              "wireValue": "language_detection"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersLanguageDetection_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "custom_spelling",
              "wireValue": "custom_spelling"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "TranscriptCustomSpelling",
                      "typeId": "TranscriptCustomSpelling",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Customize how words are spelled and formatted using to and from values",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersCustomSpelling_example_autogenerated": [
                  {
                    "from": [
                      "string"
                    ],
                    "to": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "disfluencies",
              "wireValue": "disfluencies"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersDisfluencies_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "sentiment_analysis",
              "wireValue": "sentiment_analysis"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersSentimentAnalysis_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "auto_chapters",
              "wireValue": "auto_chapters"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersAutoChapters_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "entity_detection",
              "wireValue": "entity_detection"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersEntityDetection_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "speech_threshold",
              "wireValue": "speech_threshold"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "FLOAT",
                        "v2": {
                          "validation": {
                            "max": 1,
                            "min": 0
                          },
                          "type": "float"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersSpeechThreshold_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "summarization",
              "wireValue": "summarization"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Summarization](https://www.assemblyai.com/docs/Models/summarization), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersSummarization_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "summary_model",
              "wireValue": "summary_model"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SummaryModel",
                  "typeId": "SummaryModel",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The model to summarize the transcript",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "summary_type",
              "wireValue": "summary_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SummaryType",
                  "typeId": "SummaryType",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The type of summary",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "custom_topics",
              "wireValue": "custom_topics"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether custom topics was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersCustomTopics_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "topics",
              "wireValue": "topics"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of custom topics provided if custom topics was enabled in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptOptionalParametersTopics_example_autogenerated": [
                  "string"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The parameters for creating a transcript",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "CreateTranscriptOptionalParameters_example_autogenerated": {}
        }
      }
    },
    "CreateTranscriptParameters": {
      "name": {
        "typeId": "CreateTranscriptParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "CreateTranscriptParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "audio_url",
              "wireValue": "audio_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the audio or video file to transcribe.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateTranscriptParametersAudioUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "CreateTranscriptOptionalParameters",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "CreateTranscriptOptionalParameters"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The parameters for creating a transcript",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "CreateTranscriptParameters_example_autogenerated": {
            "audio_url": "string"
          }
        }
      }
    },
    "SummaryModel": {
      "name": {
        "typeId": "SummaryModel",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SummaryModel"
      },
      "shape": {
        "default": {
          "name": {
            "name": "informative",
            "wireValue": "informative"
          }
        },
        "values": [
          {
            "name": {
              "name": "informative",
              "wireValue": "informative"
            }
          },
          {
            "name": {
              "name": "conversational",
              "wireValue": "conversational"
            }
          },
          {
            "name": {
              "name": "catchy",
              "wireValue": "catchy"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The model to summarize the transcript",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SummaryModel_example_autogenerated": "informative"
        }
      }
    },
    "SummaryType": {
      "name": {
        "typeId": "SummaryType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SummaryType"
      },
      "shape": {
        "default": {
          "name": {
            "name": "bullets",
            "wireValue": "bullets"
          }
        },
        "values": [
          {
            "name": {
              "name": "bullets",
              "wireValue": "bullets"
            }
          },
          {
            "name": {
              "name": "bullets_verbose",
              "wireValue": "bullets_verbose"
            }
          },
          {
            "name": {
              "name": "gist",
              "wireValue": "gist"
            }
          },
          {
            "name": {
              "name": "headline",
              "wireValue": "headline"
            }
          },
          {
            "name": {
              "name": "paragraph",
              "wireValue": "paragraph"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of summary",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SummaryType_example_autogenerated": "bullets"
        }
      }
    },
    "TranscriptBoostParam": {
      "name": {
        "typeId": "TranscriptBoostParam",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptBoostParam"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "low",
              "wireValue": "low"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "default",
                "camelCase": {
                  "unsafeName": "default",
                  "safeName": "default_"
                },
                "snakeCase": {
                  "unsafeName": "default",
                  "safeName": "default_"
                }
              },
              "wireValue": "default"
            }
          },
          {
            "name": {
              "name": "high",
              "wireValue": "high"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The word boost parameter value, if provided in the transcription request.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptBoostParam_example_autogenerated": "low"
        }
      }
    },
    "TranscriptCustomSpelling": {
      "name": {
        "typeId": "TranscriptCustomSpelling",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptCustomSpelling"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "from",
                "camelCase": {
                  "unsafeName": "from",
                  "safeName": "from_"
                },
                "snakeCase": {
                  "unsafeName": "from",
                  "safeName": "from_"
                }
              },
              "wireValue": "from"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "Words or phrases to replace",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptCustomSpellingFrom_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "to",
              "wireValue": "to"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Word or phrase to replace with",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptCustomSpellingTo_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object containing words or phrases to replace, and the word or phrase to replace with",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptCustomSpelling_example_autogenerated": {
            "from": [
              "string"
            ],
            "to": "string"
          }
        }
      }
    },
    "TranscriptUtterance": {
      "name": {
        "typeId": "TranscriptUtterance",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptUtterance"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "channel",
              "wireValue": "channel"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceChannel_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "words",
              "wireValue": "words"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptWord",
                  "typeId": "TranscriptWord",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtteranceWords_example_autogenerated": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptUtterance_example_autogenerated": {
            "channel": "string",
            "confidence": 0.5,
            "start": 1,
            "end": 1,
            "text": "string",
            "words": [
              {
                "confidence": 0.5,
                "start": 1,
                "end": 1,
                "text": "string"
              }
            ]
          }
        }
      }
    },
    "SubstitutionPolicy": {
      "name": {
        "typeId": "SubstitutionPolicy",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SubstitutionPolicy"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "entity_type",
              "wireValue": "entity_type"
            }
          },
          {
            "name": {
              "name": "hash",
              "wireValue": "hash"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SubstitutionPolicy_example_autogenerated": "entity_type"
        }
      }
    },
    "PiiPolicy": {
      "name": {
        "typeId": "PiiPolicy",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "PiiPolicy"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "medical_process",
              "wireValue": "medical_process"
            }
          },
          {
            "name": {
              "name": "medical_condition",
              "wireValue": "medical_condition"
            }
          },
          {
            "name": {
              "name": "blood_type",
              "wireValue": "blood_type"
            }
          },
          {
            "name": {
              "name": "drug",
              "wireValue": "drug"
            }
          },
          {
            "name": {
              "name": "injury",
              "wireValue": "injury"
            }
          },
          {
            "name": {
              "name": "number_sequence",
              "wireValue": "number_sequence"
            }
          },
          {
            "name": {
              "name": "email_address",
              "wireValue": "email_address"
            }
          },
          {
            "name": {
              "name": "date_of_birth",
              "wireValue": "date_of_birth"
            }
          },
          {
            "name": {
              "name": "phone_number",
              "wireValue": "phone_number"
            }
          },
          {
            "name": {
              "name": "us_social_security_number",
              "wireValue": "us_social_security_number"
            }
          },
          {
            "name": {
              "name": "credit_card_number",
              "wireValue": "credit_card_number"
            }
          },
          {
            "name": {
              "name": "credit_card_expiration",
              "wireValue": "credit_card_expiration"
            }
          },
          {
            "name": {
              "name": "credit_card_cvv",
              "wireValue": "credit_card_cvv"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "date",
                "pascalCase": {
                  "unsafeName": "Date",
                  "safeName": "Date_"
                }
              },
              "wireValue": "date"
            }
          },
          {
            "name": {
              "name": "nationality",
              "wireValue": "nationality"
            }
          },
          {
            "name": {
              "name": "event",
              "wireValue": "event"
            }
          },
          {
            "name": {
              "name": "language",
              "wireValue": "language"
            }
          },
          {
            "name": {
              "name": "location",
              "wireValue": "location"
            }
          },
          {
            "name": {
              "name": "money_amount",
              "wireValue": "money_amount"
            }
          },
          {
            "name": {
              "name": "person_name",
              "wireValue": "person_name"
            }
          },
          {
            "name": {
              "name": "person_age",
              "wireValue": "person_age"
            }
          },
          {
            "name": {
              "name": "organization",
              "wireValue": "organization"
            }
          },
          {
            "name": {
              "name": "political_affiliation",
              "wireValue": "political_affiliation"
            }
          },
          {
            "name": {
              "name": "occupation",
              "wireValue": "occupation"
            }
          },
          {
            "name": {
              "name": "religion",
              "wireValue": "religion"
            }
          },
          {
            "name": {
              "name": "drivers_license",
              "wireValue": "drivers_license"
            }
          },
          {
            "name": {
              "name": "banking_information",
              "wireValue": "banking_information"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "PiiPolicy_example_autogenerated": "medical_process"
        }
      }
    },
    "TranscriptLanguageCode": {
      "name": {
        "typeId": "TranscriptLanguageCode",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptLanguageCode"
      },
      "shape": {
        "default": {
          "name": {
            "name": "en_us",
            "wireValue": "en_us"
          }
        },
        "values": [
          {
            "name": {
              "name": "en",
              "wireValue": "en"
            }
          },
          {
            "name": {
              "name": "en_au",
              "wireValue": "en_au"
            }
          },
          {
            "name": {
              "name": "en_uk",
              "wireValue": "en_uk"
            }
          },
          {
            "name": {
              "name": "en_us",
              "wireValue": "en_us"
            }
          },
          {
            "name": {
              "name": "es",
              "wireValue": "es"
            }
          },
          {
            "name": {
              "name": "fr",
              "wireValue": "fr"
            }
          },
          {
            "name": {
              "name": "de",
              "wireValue": "de"
            }
          },
          {
            "name": {
              "name": "it",
              "wireValue": "it"
            }
          },
          {
            "name": {
              "name": "pt",
              "wireValue": "pt"
            }
          },
          {
            "name": {
              "name": "nl",
              "wireValue": "nl"
            }
          },
          {
            "name": {
              "name": "hi",
              "wireValue": "hi"
            }
          },
          {
            "name": {
              "name": "ja",
              "wireValue": "ja"
            }
          },
          {
            "name": {
              "name": "zh",
              "wireValue": "zh"
            }
          },
          {
            "name": {
              "name": "fi",
              "wireValue": "fi"
            }
          },
          {
            "name": {
              "name": "ko",
              "wireValue": "ko"
            }
          },
          {
            "name": {
              "name": "pl",
              "wireValue": "pl"
            }
          },
          {
            "name": {
              "name": "ru",
              "wireValue": "ru"
            }
          },
          {
            "name": {
              "name": "tr",
              "wireValue": "tr"
            }
          },
          {
            "name": {
              "name": "uk",
              "wireValue": "uk"
            }
          },
          {
            "name": {
              "name": "vi",
              "wireValue": "vi"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptLanguageCode_example_autogenerated": "en_us"
        }
      }
    },
    "TranscriptStatus": {
      "name": {
        "typeId": "TranscriptStatus",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptStatus"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "queued",
              "wireValue": "queued"
            },
            "docs": "The audio file is in the queue to be processed by the API."
          },
          {
            "name": {
              "name": "processing",
              "wireValue": "processing"
            },
            "docs": "The audio file is being processed by the API."
          },
          {
            "name": {
              "name": "completed",
              "wireValue": "completed"
            },
            "docs": "The transcription job has been completed successfully."
          },
          {
            "name": {
              "name": {
                "originalName": "error",
                "pascalCase": {
                  "unsafeName": "Error",
                  "safeName": "Error_"
                }
              },
              "wireValue": "error"
            },
            "docs": "An error occurred while processing the audio file."
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of your transcription. Possible values are queued, processing, completed, or error.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptStatus_example_autogenerated": "queued"
        }
      }
    },
    "TranscriptContentSafetyLabels": {
      "name": {
        "typeId": "TranscriptContentSafetyLabels",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptContentSafetyLabels"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "AudioIntelligenceModelStatus",
              "typeId": "AudioIntelligenceModelStatus",
              "inline": false,
              "type": "named"
            },
            "docs": "Will be either success, or unavailable in the rare case that the Content Safety Labels model failed.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "results",
              "wireValue": "results"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ContentSafetyLabelResult",
                  "typeId": "ContentSafetyLabelResult",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptContentSafetyLabelsResults_example_autogenerated": [
                  {
                    "text": "string",
                    "labels": [
                      {
                        "label": "string",
                        "confidence": 0.5,
                        "severity": 0.5
                      }
                    ],
                    "sentences_idx_start": 1,
                    "sentences_idx_end": 1,
                    "timestamp": {
                      "start": 1,
                      "end": 1
                    },
                    "summary": {},
                    "severity_score_summary": {}
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptContentSafetyLabels_example_autogenerated": {
            "status": "success",
            "results": [
              {
                "text": "string",
                "labels": [
                  {
                    "label": "string",
                    "confidence": 0.5,
                    "severity": 0.5
                  }
                ],
                "sentences_idx_start": 1,
                "sentences_idx_end": 1,
                "timestamp": {
                  "start": 1,
                  "end": 1
                },
                "summary": {},
                "severity_score_summary": {}
              }
            ]
          }
        }
      }
    },
    "TranscriptIabCategoriesResult": {
      "name": {
        "typeId": "TranscriptIabCategoriesResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptIabCategoriesResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "AudioIntelligenceModelStatus",
              "typeId": "AudioIntelligenceModelStatus",
              "inline": false,
              "type": "named"
            },
            "docs": "Will be either success, or unavailable in the rare case that the Content Moderation model failed.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "results",
              "wireValue": "results"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TopicDetectionResult",
                  "typeId": "TopicDetectionResult",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "An array of results for the Topic Detection model.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptIabCategoriesResultResults_example_autogenerated": [
                  {
                    "text": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "summary",
              "wireValue": "summary"
            },
            "valueType": {
              "container": {
                "keyType": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "valueType": {
                  "primitive": {
                    "v1": "DOUBLE",
                    "v2": {
                      "validation": {
                        "max": 1,
                        "min": 0
                      },
                      "type": "double"
                    }
                  },
                  "type": "primitive"
                },
                "type": "map"
              },
              "type": "container"
            },
            "docs": "The overall relevance of topic to the entire audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptIabCategoriesResultSummary_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptIabCategoriesResult_example_autogenerated": {
            "status": "success",
            "results": [
              {
                "text": "string"
              }
            ],
            "summary": {}
          }
        }
      }
    },
    "Transcript": {
      "name": {
        "typeId": "Transcript",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Transcript"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The unique identifier of your transcription",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "language_model",
              "wireValue": "language_model"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The language model that was used for the transcription",
            "availability": {
              "status": "DEPRECATED"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptLanguageModel_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "acoustic_model",
              "wireValue": "acoustic_model"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The acoustic model that was used for the transcription",
            "availability": {
              "status": "DEPRECATED"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAcousticModel_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "TranscriptStatus",
              "typeId": "TranscriptStatus",
              "inline": false,
              "type": "named"
            },
            "docs": "The status of your transcription. Possible values are queued, processing, completed, or error.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "language_code",
              "wireValue": "language_code"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptLanguageCode",
                  "typeId": "TranscriptLanguageCode",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The language of your audio file.\nPossible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "audio_url",
              "wireValue": "audio_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the media that was transcribed",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAudioUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The textual transcript of your media file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "words",
              "wireValue": "words"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "TranscriptWord",
                          "typeId": "TranscriptWord",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of temporally-sequential word objects, one for each word in the transcript.\nSee [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWords_example_autogenerated": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "utterances",
              "wireValue": "utterances"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "TranscriptUtterance",
                          "typeId": "TranscriptUtterance",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.\nSee [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptUtterances_example_autogenerated": [
                  {
                    "channel": "string",
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string",
                    "words": [
                      {
                        "confidence": 0.5,
                        "start": 1,
                        "end": 1,
                        "text": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "DOUBLE",
                        "v2": {
                          "validation": {
                            "max": 1,
                            "min": 0
                          },
                          "type": "double"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "audio_duration",
              "wireValue": "audio_duration"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "FLOAT",
                        "v2": {
                          "validation": {},
                          "type": "float"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The duration of this transcript object's media file, in seconds",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAudioDuration_example_autogenerated": 1.1
              }
            }
          },
          {
            "name": {
              "name": "punctuate",
              "wireValue": "punctuate"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptPunctuate_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "format_text",
              "wireValue": "format_text"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether Text Formatting was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptFormatText_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "dual_channel",
              "wireValue": "dual_channel"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptDualChannel_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "webhook_url",
              "wireValue": "webhook_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWebhookUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "webhook_status_code",
              "wireValue": "webhook_status_code"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "INTEGER",
                        "v2": {
                          "validation": {},
                          "type": "integer"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWebhookStatusCode_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "webhook_auth",
              "wireValue": "webhook_auth"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether webhook authentication details were provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWebhookAuth_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "webhook_auth_header_name",
              "wireValue": "webhook_auth_header_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The header name which should be sent back with webhook calls, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWebhookAuthHeaderName_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "speed_boost",
              "wireValue": "speed_boost"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether speed boost was enabled in the transcription request",
            "availability": {
              "status": "DEPRECATED"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSpeedBoost_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "auto_highlights",
              "wireValue": "auto_highlights"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether Key Phrases was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAutoHighlights_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "auto_highlights_result",
              "wireValue": "auto_highlights_result"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "AutoHighlightsResult",
                  "typeId": "AutoHighlightsResult",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "audio_start_from",
              "wireValue": "audio_start_from"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "INTEGER",
                        "v2": {
                          "validation": {},
                          "type": "integer"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAudioStartFrom_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "audio_end_at",
              "wireValue": "audio_end_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "INTEGER",
                        "v2": {
                          "validation": {},
                          "type": "integer"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAudioEndAt_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "word_boost",
              "wireValue": "word_boost"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordBoost_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "boost_param",
              "wireValue": "boost_param"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The word boost parameter value, if provided in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptBoostParam_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "filter_profanity",
              "wireValue": "filter_profanity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptFilterProfanity_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii",
              "wireValue": "redact_pii"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether [PII Redaction](https://www.assemblyai.com/docs/Models/pii_redaction) was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptRedactPii_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_audio",
              "wireValue": "redact_pii_audio"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),\neither true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptRedactPiiAudio_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_audio_quality",
              "wireValue": "redact_pii_audio_quality"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptRedactPiiAudioQuality_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_policies",
              "wireValue": "redact_pii_policies"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "PiiPolicy",
                          "typeId": "PiiPolicy",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptRedactPiiPolicies_example_autogenerated": [
                  "medical_process"
                ]
              }
            }
          },
          {
            "name": {
              "name": "redact_pii_sub",
              "wireValue": "redact_pii_sub"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SubstitutionPolicy",
                  "typeId": "SubstitutionPolicy",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "speaker_labels",
              "wireValue": "speaker_labels"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSpeakerLabels_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "speakers_expected",
              "wireValue": "speakers_expected"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "INTEGER",
                        "v2": {
                          "validation": {},
                          "type": "integer"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSpeakersExpected_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "content_safety",
              "wireValue": "content_safety"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptContentSafety_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "content_safety_labels",
              "wireValue": "content_safety_labels"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "TranscriptContentSafetyLabels",
                      "typeId": "TranscriptContentSafetyLabels",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptContentSafetyLabels_example_autogenerated": {
                  "status": "success",
                  "results": [
                    {
                      "text": "string",
                      "labels": [
                        {
                          "label": "string",
                          "confidence": 0.5,
                          "severity": 0.5
                        }
                      ],
                      "sentences_idx_start": 1,
                      "sentences_idx_end": 1,
                      "timestamp": {
                        "start": 1,
                        "end": 1
                      },
                      "summary": {},
                      "severity_score_summary": {}
                    }
                  ]
                }
              }
            }
          },
          {
            "name": {
              "name": "iab_categories",
              "wireValue": "iab_categories"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptIabCategories_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "iab_categories_result",
              "wireValue": "iab_categories_result"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "TranscriptIabCategoriesResult",
                      "typeId": "TranscriptIabCategoriesResult",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptIabCategoriesResult_example_autogenerated": {
                  "status": "success",
                  "results": [
                    {
                      "text": "string"
                    }
                  ],
                  "summary": {}
                }
              }
            }
          },
          {
            "name": {
              "name": "language_detection",
              "wireValue": "language_detection"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptLanguageDetection_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "custom_spelling",
              "wireValue": "custom_spelling"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "TranscriptCustomSpelling",
                          "typeId": "TranscriptCustomSpelling",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Customize how words are spelled and formatted using to and from values",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptCustomSpelling_example_autogenerated": [
                  {
                    "from": [
                      "string"
                    ],
                    "to": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "auto_chapters",
              "wireValue": "auto_chapters"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptAutoChapters_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "chapters",
              "wireValue": "chapters"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "Chapter",
                          "typeId": "Chapter",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of temporally sequential chapters for the audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptChapters_example_autogenerated": [
                  {
                    "gist": "string",
                    "headline": "string",
                    "summary": "string",
                    "start": 1,
                    "end": 1
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "summarization",
              "wireValue": "summarization"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSummarization_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "summary_type",
              "wireValue": "summary_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSummaryType_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "summary_model",
              "wireValue": "summary_model"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The Summarization model used to generate the summary,\nif [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSummaryModel_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "summary",
              "wireValue": "summary"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSummary_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "custom_topics",
              "wireValue": "custom_topics"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether custom topics was enabled in the transcription request, either true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptCustomTopics_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "topics",
              "wireValue": "topics"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The list of custom topics provided if custom topics was enabled in the transcription request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptTopics_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "disfluencies",
              "wireValue": "disfluencies"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptDisfluencies_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "sentiment_analysis",
              "wireValue": "sentiment_analysis"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentimentAnalysis_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "sentiment_analysis_results",
              "wireValue": "sentiment_analysis_results"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "SentimentAnalysisResult",
                          "typeId": "SentimentAnalysisResult",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.\nSee [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentimentAnalysisResults_example_autogenerated": [
                  {
                    "text": "string",
                    "start": 1,
                    "end": 1,
                    "sentiment": "POSITIVE",
                    "confidence": 0.5
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "entity_detection",
              "wireValue": "entity_detection"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptEntityDetection_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "entities",
              "wireValue": "entities"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "container": {
                        "list": {
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "Entity",
                          "typeId": "Entity",
                          "inline": false,
                          "type": "named"
                        },
                        "type": "list"
                      },
                      "type": "container"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An array of results for the Entity Detection model, if it was enabled during the transcription request.\nSee [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptEntities_example_autogenerated": [
                  {
                    "entity_type": "banking_information",
                    "text": "string",
                    "start": 1,
                    "end": 1
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "speech_threshold",
              "wireValue": "speech_threshold"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "FLOAT",
                        "v2": {
                          "validation": {
                            "max": 1,
                            "min": 0
                          },
                          "type": "float"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Defaults to null. Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSpeechThreshold_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "throttled",
              "wireValue": "throttled"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "BOOLEAN",
                        "v2": {
                          "type": "boolean"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "True while a request is throttled and false when a request is no longer throttled",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptThrottled_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "error",
                "pascalCase": {
                  "unsafeName": "Error",
                  "safeName": "Error_"
                }
              },
              "wireValue": "error"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Error message of why the transcript failed",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptError_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A transcript object",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Transcript_example_autogenerated": {
            "id": "string",
            "language_model": "string",
            "acoustic_model": "string",
            "status": "queued",
            "audio_url": "string",
            "webhook_auth": true,
            "auto_highlights": true,
            "redact_pii": true,
            "summarization": true
          }
        }
      }
    },
    "Chapter": {
      "name": {
        "typeId": "Chapter",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Chapter"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "gist",
              "wireValue": "gist"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "An ultra-short summary (just a few words) of the content spoken in the chapter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ChapterGist_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "headline",
              "wireValue": "headline"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A single sentence summary of the content spoken during the chapter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ChapterHeadline_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "summary",
              "wireValue": "summary"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A one paragraph summary of the content spoken during the chapter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ChapterSummary_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The starting time, in milliseconds, for the chapter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ChapterStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The starting time, in milliseconds, for the chapter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ChapterEnd_example_autogenerated": 1
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Chapter of the audio file",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Chapter_example_autogenerated": {
            "gist": "string",
            "headline": "string",
            "summary": "string",
            "start": 1,
            "end": 1
          }
        }
      }
    },
    "Entity": {
      "name": {
        "typeId": "Entity",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Entity"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "entity_type",
              "wireValue": "entity_type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "EntityType",
              "typeId": "EntityType",
              "inline": false,
              "type": "named"
            },
            "docs": "The type of entity for the detected entity",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The text for the detected entity",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EntityText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The starting time, in milliseconds, at which the detected entity appears in the audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EntityStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The ending time, in milliseconds, for the detected entity in the audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EntityEnd_example_autogenerated": 1
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A detected entity",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Entity_example_autogenerated": {
            "entity_type": "banking_information",
            "text": "string",
            "start": 1,
            "end": 1
          }
        }
      }
    },
    "EntityType": {
      "name": {
        "typeId": "EntityType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "EntityType"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "banking_information",
              "wireValue": "banking_information"
            },
            "docs": "Banking information, including account and routing numbers"
          },
          {
            "name": {
              "name": "blood_type",
              "wireValue": "blood_type"
            },
            "docs": "Blood type (e.g., O-, AB positive)"
          },
          {
            "name": {
              "name": "credit_card_cvv",
              "wireValue": "credit_card_cvv"
            },
            "docs": "Credit card verification code (e.g., CVV: 080)\n"
          },
          {
            "name": {
              "name": "credit_card_expiration",
              "wireValue": "credit_card_expiration"
            },
            "docs": "Expiration date of a credit card"
          },
          {
            "name": {
              "name": "credit_card_number",
              "wireValue": "credit_card_number"
            },
            "docs": "Credit card number"
          },
          {
            "name": {
              "name": {
                "originalName": "date",
                "pascalCase": {
                  "unsafeName": "Date",
                  "safeName": "Date_"
                }
              },
              "wireValue": "date"
            },
            "docs": "Specific calendar date (e.g., December 18)"
          },
          {
            "name": {
              "name": "date_of_birth",
              "wireValue": "date_of_birth"
            },
            "docs": "Date of Birth (e.g., Date of Birth: March 7, 1961)\n"
          },
          {
            "name": {
              "name": "drivers_license",
              "wireValue": "drivers_license"
            },
            "docs": "Driver's license number (e.g., DL #356933-540)\n"
          },
          {
            "name": {
              "name": "drug",
              "wireValue": "drug"
            },
            "docs": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)"
          },
          {
            "name": {
              "name": "email_address",
              "wireValue": "email_address"
            },
            "docs": "Email address (e.g., support@assemblyai.com)"
          },
          {
            "name": {
              "name": "event",
              "wireValue": "event"
            },
            "docs": "Name of an event or holiday (e.g., Olympics, Yom Kippur)"
          },
          {
            "name": {
              "name": "injury",
              "wireValue": "injury"
            },
            "docs": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)"
          },
          {
            "name": {
              "name": "language",
              "wireValue": "language"
            },
            "docs": "Name of a natural language (e.g., Spanish, French)"
          },
          {
            "name": {
              "name": "location",
              "wireValue": "location"
            },
            "docs": "Any location reference including mailing address, postal code, city, state, province, or country"
          },
          {
            "name": {
              "name": "medical_condition",
              "wireValue": "medical_condition"
            },
            "docs": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)"
          },
          {
            "name": {
              "name": "medical_process",
              "wireValue": "medical_process"
            },
            "docs": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)"
          },
          {
            "name": {
              "name": "money_amount",
              "wireValue": "money_amount"
            },
            "docs": "Name and/or amount of currency (e.g., 15 pesos, $94.50)"
          },
          {
            "name": {
              "name": "nationality",
              "wireValue": "nationality"
            },
            "docs": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)"
          },
          {
            "name": {
              "name": "occupation",
              "wireValue": "occupation"
            },
            "docs": "Job title or profession (e.g., professor, actors, engineer, CPA)"
          },
          {
            "name": {
              "name": "organization",
              "wireValue": "organization"
            },
            "docs": "Name of an organization (e.g., CNN, McDonalds, University of Alaska)"
          },
          {
            "name": {
              "name": "password",
              "wireValue": "password"
            },
            "docs": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)"
          },
          {
            "name": {
              "name": "person_age",
              "wireValue": "person_age"
            },
            "docs": "Number associated with an age (e.g., 27, 75)"
          },
          {
            "name": {
              "name": "person_name",
              "wireValue": "person_name"
            },
            "docs": "Name of a person (e.g., Bob, Doug Jones)"
          },
          {
            "name": {
              "name": "phone_number",
              "wireValue": "phone_number"
            },
            "docs": "Telephone or fax number"
          },
          {
            "name": {
              "name": "political_affiliation",
              "wireValue": "political_affiliation"
            },
            "docs": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)"
          },
          {
            "name": {
              "name": "religion",
              "wireValue": "religion"
            },
            "docs": "Terms indicating religious affiliation (e.g., Hindu, Catholic)"
          },
          {
            "name": {
              "name": "time",
              "wireValue": "time"
            },
            "docs": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)"
          },
          {
            "name": {
              "name": "url",
              "wireValue": "url"
            },
            "docs": "Internet addresses (e.g., www.assemblyai.com)"
          },
          {
            "name": {
              "name": "us_social_security_number",
              "wireValue": "us_social_security_number"
            },
            "docs": "Social Security Number or equivalent"
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of entity for the detected entity",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "EntityType_example_autogenerated": "banking_information"
        }
      }
    },
    "SentimentAnalysisResult": {
      "name": {
        "typeId": "SentimentAnalysisResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SentimentAnalysisResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The transcript of the sentence",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentimentAnalysisResultText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The starting time, in milliseconds, of the sentence",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentimentAnalysisResultStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The ending time, in milliseconds, of the sentence",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentimentAnalysisResultEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "sentiment",
              "wireValue": "sentiment"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "Sentiment",
              "typeId": "Sentiment",
              "inline": false,
              "type": "named"
            },
            "docs": "The detected sentiment for the sentence, one of POSITIVE, NEUTRAL, NEGATIVE",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "The confidence score for the detected sentiment of the sentence, from 0 to 1",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentimentAnalysisResultConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "speaker",
              "wireValue": "speaker"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The speaker of the sentence if Speaker Diarization is enabled, else null",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentimentAnalysisResultSpeaker_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The result of the sentiment analysis model.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SentimentAnalysisResult_example_autogenerated": {
            "text": "string",
            "start": 1,
            "end": 1,
            "sentiment": "POSITIVE",
            "confidence": 0.5
          }
        }
      }
    },
    "Sentiment": {
      "name": {
        "typeId": "Sentiment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Sentiment"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "POSITIVE",
              "wireValue": "POSITIVE"
            }
          },
          {
            "name": {
              "name": "NEUTRAL",
              "wireValue": "NEUTRAL"
            }
          },
          {
            "name": {
              "name": "NEGATIVE",
              "wireValue": "NEGATIVE"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Sentiment_example_autogenerated": "POSITIVE"
        }
      }
    },
    "TopicDetectionResultLabelsItems": {
      "name": {
        "typeId": "TopicDetectionResultLabelsItems",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TopicDetectionResultLabelsItems"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "relevance",
              "wireValue": "relevance"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "How relevant the detected topic is of a detected topic",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TopicDetectionResultLabelsItemsRelevance_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "label",
              "wireValue": "label"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The IAB taxonomical label for the label of the detected topic, where > denotes supertopic/subtopic relationship",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TopicDetectionResultLabelsItemsLabel_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TopicDetectionResultLabelsItems_example_autogenerated": {
            "relevance": 0.5,
            "label": "string"
          }
        }
      }
    },
    "TopicDetectionResult": {
      "name": {
        "typeId": "TopicDetectionResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TopicDetectionResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The text in the transcript in which a detected topic occurs",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TopicDetectionResultText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "labels",
              "wireValue": "labels"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "TopicDetectionResultLabelsItems",
                      "typeId": "TopicDetectionResultLabelsItems",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TopicDetectionResultLabels_example_autogenerated": [
                  {
                    "relevance": 0.5,
                    "label": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "timestamp",
              "wireValue": "timestamp"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Timestamp",
                  "typeId": "Timestamp",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "THe result of the topic detection model.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TopicDetectionResult_example_autogenerated": {
            "text": "string"
          }
        }
      }
    },
    "ContentSafetyLabel": {
      "name": {
        "typeId": "ContentSafetyLabel",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "ContentSafetyLabel"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "label",
              "wireValue": "label"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The label of the sensitive topic",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelLabel_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "The confidence score for the topic being discussed, from 0 to 1",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "severity",
              "wireValue": "severity"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "How severely the topic is discussed in the section, from 0 to 1",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelSeverity_example_autogenerated": 0.5
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ContentSafetyLabel_example_autogenerated": {
            "label": "string",
            "confidence": 0.5,
            "severity": 0.5
          }
        }
      }
    },
    "ContentSafetyLabelResult": {
      "name": {
        "typeId": "ContentSafetyLabelResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "ContentSafetyLabelResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The transcript of the section flagged by the Content Moderation model",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "labels",
              "wireValue": "labels"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ContentSafetyLabel",
                  "typeId": "ContentSafetyLabel",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "An array of objects, one per sensitive topic that was detected in the section",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultLabels_example_autogenerated": [
                  {
                    "label": "string",
                    "confidence": 0.5,
                    "severity": 0.5
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "sentences_idx_start",
              "wireValue": "sentences_idx_start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The sentence index at which the section begins",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultSentencesIdxStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "sentences_idx_end",
              "wireValue": "sentences_idx_end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The sentence index at which the section ends",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultSentencesIdxEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "timestamp",
              "wireValue": "timestamp"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "Timestamp",
              "typeId": "Timestamp",
              "inline": false,
              "type": "named"
            },
            "docs": "Timestamp information for the section",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "summary",
              "wireValue": "summary"
            },
            "valueType": {
              "container": {
                "keyType": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "valueType": {
                  "primitive": {
                    "v1": "DOUBLE",
                    "v2": {
                      "validation": {
                        "max": 1,
                        "min": 0
                      },
                      "type": "double"
                    }
                  },
                  "type": "primitive"
                },
                "type": "map"
              },
              "type": "container"
            },
            "docs": "A summary of the Content Moderation confidence results for the entire audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultSummary_example_autogenerated": {}
              }
            }
          },
          {
            "name": {
              "name": "severity_score_summary",
              "wireValue": "severity_score_summary"
            },
            "valueType": {
              "container": {
                "keyType": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "valueType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SeverityScoreSummary",
                  "typeId": "SeverityScoreSummary",
                  "inline": false,
                  "type": "named"
                },
                "type": "map"
              },
              "type": "container"
            },
            "docs": "A summary of the Content Moderation severity results for the entire audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ContentSafetyLabelResultSeverityScoreSummary_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ContentSafetyLabelResult_example_autogenerated": {
            "text": "string",
            "labels": [
              {
                "label": "string",
                "confidence": 0.5,
                "severity": 0.5
              }
            ],
            "sentences_idx_start": 1,
            "sentences_idx_end": 1,
            "timestamp": {
              "start": 1,
              "end": 1
            },
            "summary": {},
            "severity_score_summary": {}
          }
        }
      }
    },
    "SeverityScoreSummary": {
      "name": {
        "typeId": "SeverityScoreSummary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SeverityScoreSummary"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "low",
              "wireValue": "low"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SeverityScoreSummaryLow_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "medium",
              "wireValue": "medium"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SeverityScoreSummaryMedium_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "high",
              "wireValue": "high"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SeverityScoreSummaryHigh_example_autogenerated": 0.5
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SeverityScoreSummary_example_autogenerated": {
            "low": 0.5,
            "medium": 0.5,
            "high": 0.5
          }
        }
      }
    },
    "AutoHighlightsResult": {
      "name": {
        "typeId": "AutoHighlightsResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "AutoHighlightsResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "results",
              "wireValue": "results"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "AutoHighlightResult",
                  "typeId": "AutoHighlightResult",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "A temporally-sequential array of Key Phrases",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AutoHighlightsResultResults_example_autogenerated": [
                  {
                    "count": 1,
                    "rank": 0.5,
                    "text": "string",
                    "timestamps": [
                      {
                        "start": 1,
                        "end": 1
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "AutoHighlightsResult_example_autogenerated": {
            "results": [
              {
                "count": 1,
                "rank": 0.5,
                "text": "string",
                "timestamps": [
                  {
                    "start": 1,
                    "end": 1
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "AutoHighlightsResultWrapper": {
      "name": {
        "typeId": "AutoHighlightsResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "AutoHighlightsResult"
      },
      "shape": {
        "aliasOf": {
          "container": {
            "nullable": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "AutoHighlightsResult",
              "typeId": "AutoHighlightsResult",
              "inline": false,
              "type": "named"
            },
            "type": "nullable"
          },
          "type": "container"
        },
        "resolvedType": {
          "container": {
            "nullable": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "AutoHighlightsResult",
              "typeId": "AutoHighlightsResult",
              "inline": false,
              "type": "named"
            },
            "type": "nullable"
          },
          "type": "container"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "AutoHighlightsResult_example_autogenerated": {
            "results": [
              {
                "count": 1,
                "rank": 0.5,
                "text": "string",
                "timestamps": [
                  {
                    "start": 1,
                    "end": 1
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "AutoHighlightResult": {
      "name": {
        "typeId": "AutoHighlightResult",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "AutoHighlightResult"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "count",
              "wireValue": "count"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The total number of times the key phrase appears in the audio file",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AutoHighlightResultCount_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "rank",
              "wireValue": "rank"
            },
            "valueType": {
              "primitive": {
                "v1": "FLOAT",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "float"
                }
              },
              "type": "primitive"
            },
            "docs": "The total relevancy to the overall audio file of this key phrase - a greater number means more relevant",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AutoHighlightResultRank_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The text itself of the key phrase",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AutoHighlightResultText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "timestamps",
              "wireValue": "timestamps"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Timestamp",
                  "typeId": "Timestamp",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The timestamp of the of the key phrase",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AutoHighlightResultTimestamps_example_autogenerated": [
                  {
                    "start": 1,
                    "end": 1
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "AutoHighlightResult_example_autogenerated": {
            "count": 1,
            "rank": 0.5,
            "text": "string",
            "timestamps": [
              {
                "start": 1,
                "end": 1
              }
            ]
          }
        }
      }
    },
    "TranscriptWord": {
      "name": {
        "typeId": "TranscriptWord",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptWord"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "speaker",
              "wireValue": "speaker"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptWordSpeaker_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptWord_example_autogenerated": {
            "confidence": 0.5,
            "start": 1,
            "end": 1,
            "text": "string"
          }
        }
      }
    },
    "TranscriptSentence": {
      "name": {
        "typeId": "TranscriptSentence",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptSentence"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentenceText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentenceStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentenceEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentenceConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "words",
              "wireValue": "words"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptWord",
                  "typeId": "TranscriptWord",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptSentenceWords_example_autogenerated": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptSentence_example_autogenerated": {
            "text": "string",
            "start": 1,
            "end": 1,
            "confidence": 0.5,
            "words": [
              {
                "confidence": 0.5,
                "start": 1,
                "end": 1,
                "text": "string"
              }
            ]
          }
        }
      }
    },
    "SentencesResponse": {
      "name": {
        "typeId": "SentencesResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SentencesResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentencesResponseId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentencesResponseConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "audio_duration",
              "wireValue": "audio_duration"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {},
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentencesResponseAudioDuration_example_autogenerated": 1.1
              }
            }
          },
          {
            "name": {
              "name": "sentences",
              "wireValue": "sentences"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptSentence",
                  "typeId": "TranscriptSentence",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SentencesResponseSentences_example_autogenerated": [
                  {
                    "text": "string",
                    "start": 1,
                    "end": 1,
                    "confidence": 0.5,
                    "words": [
                      {
                        "confidence": 0.5,
                        "start": 1,
                        "end": 1,
                        "text": "string"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SentencesResponse_example_autogenerated": {
            "id": "string",
            "confidence": 0.5,
            "audio_duration": 1.1,
            "sentences": [
              {
                "text": "string",
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "words": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "TranscriptParagraph": {
      "name": {
        "typeId": "TranscriptParagraph",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptParagraph"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptParagraphText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptParagraphStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptParagraphEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptParagraphConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "words",
              "wireValue": "words"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptWord",
                  "typeId": "TranscriptWord",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptParagraphWords_example_autogenerated": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptParagraph_example_autogenerated": {
            "text": "string",
            "start": 1,
            "end": 1,
            "confidence": 0.5,
            "words": [
              {
                "confidence": 0.5,
                "start": 1,
                "end": 1,
                "text": "string"
              }
            ]
          }
        }
      }
    },
    "ParagraphsResponse": {
      "name": {
        "typeId": "ParagraphsResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "ParagraphsResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ParagraphsResponseId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ParagraphsResponseConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "audio_duration",
              "wireValue": "audio_duration"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {},
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ParagraphsResponseAudioDuration_example_autogenerated": 1.1
              }
            }
          },
          {
            "name": {
              "name": "paragraphs",
              "wireValue": "paragraphs"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptParagraph",
                  "typeId": "TranscriptParagraph",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ParagraphsResponseParagraphs_example_autogenerated": [
                  {
                    "text": "string",
                    "start": 1,
                    "end": 1,
                    "confidence": 0.5,
                    "words": [
                      {
                        "confidence": 0.5,
                        "start": 1,
                        "end": 1,
                        "text": "string"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ParagraphsResponse_example_autogenerated": {
            "id": "string",
            "confidence": 0.5,
            "audio_duration": 1.1,
            "paragraphs": [
              {
                "text": "string",
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "words": [
                  {
                    "confidence": 0.5,
                    "start": 1,
                    "end": 1,
                    "text": "string"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "PageDetails": {
      "name": {
        "typeId": "PageDetails",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "PageDetails"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "limit",
              "wireValue": "limit"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PageDetailsLimit_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "result_count",
              "wireValue": "result_count"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PageDetailsResultCount_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "current_url",
              "wireValue": "current_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PageDetailsCurrentUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "prev_url",
              "wireValue": "prev_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PageDetailsPrevUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "next_url",
              "wireValue": "next_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PageDetailsNextUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "PageDetails_example_autogenerated": {
            "limit": 1,
            "result_count": 1,
            "current_url": "string",
            "prev_url": "string"
          }
        }
      }
    },
    "TranscriptListParameters": {
      "name": {
        "typeId": "TranscriptListParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "limit",
              "wireValue": "limit"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "LONG",
                    "v2": {
                      "default": 10,
                      "type": "long"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Maximum amount of transcripts to retrieve",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListParametersLimit_example_autogenerated": 10
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptStatus",
                  "typeId": "TranscriptStatus",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Filter by transcript status",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "created_on",
              "wireValue": "created_on"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Only get transcripts created on this date",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListParametersCreatedOn_example_autogenerated": "2023-01-15"
              }
            }
          },
          {
            "name": {
              "name": "before_id",
              "wireValue": "before_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Get transcripts that were created before this transcript ID",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListParametersBeforeId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "after_id",
              "wireValue": "after_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Get transcripts that were created after this transcript ID",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListParametersAfterId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "throttled_only",
              "wireValue": "throttled_only"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Only get throttled transcripts, overrides the status filter",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListParametersThrottledOnly_example_autogenerated": true
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters_example_autogenerated": {}
        }
      }
    },
    "TranscriptListItem": {
      "name": {
        "typeId": "TranscriptListItem",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListItem"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "id",
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListItemId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "resource_url",
              "wireValue": "resource_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListItemResourceUrl_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "TranscriptStatus",
              "typeId": "TranscriptStatus",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "created",
              "wireValue": "created"
            },
            "valueType": {
              "primitive": {
                "v1": "DATE_TIME",
                "v2": {
                  "type": "dateTime"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "completed",
              "wireValue": "completed"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "DATE_TIME",
                    "v2": {
                      "type": "dateTime"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "audio_url",
              "wireValue": "audio_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListItemAudioUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListItem_example_autogenerated": {
            "id": "string",
            "resource_url": "string",
            "status": "queued",
            "created": "string",
            "audio_url": "string"
          }
        }
      }
    },
    "TranscriptList": {
      "name": {
        "typeId": "TranscriptList",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptList"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "page_details",
              "wireValue": "page_details"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "PageDetails",
              "typeId": "PageDetails",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "transcripts",
              "wireValue": "transcripts"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptListItem",
                  "typeId": "TranscriptListItem",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TranscriptListTranscripts_example_autogenerated": [
                  {
                    "id": "string",
                    "resource_url": "string",
                    "status": "queued",
                    "created": "string",
                    "audio_url": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptList_example_autogenerated": {
            "page_details": {
              "limit": 1,
              "result_count": 1,
              "current_url": "string",
              "prev_url": "string"
            },
            "transcripts": [
              {
                "id": "string",
                "resource_url": "string",
                "status": "queued",
                "created": "string",
                "audio_url": "string"
              }
            ]
          }
        }
      }
    },
    "UploadedFile": {
      "name": {
        "typeId": "UploadedFile",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "UploadedFile"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "upload_url",
              "wireValue": "upload_url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A URL that points to your audio file, accessible only by AssemblyAI's servers",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UploadedFileUploadUrl_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "UploadedFile_example_autogenerated": {
            "upload_url": "string"
          }
        }
      }
    },
    "CreateRealtimeTemporaryTokenParameters": {
      "name": {
        "typeId": "CreateRealtimeTemporaryTokenParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "CreateRealtimeTemporaryTokenParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "expires_in",
              "wireValue": "expires_in"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {
                    "min": 60
                  },
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The amount of time until the token expires in seconds.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "CreateRealtimeTemporaryTokenParametersExpiresIn_example_autogenerated": 1
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "CreateRealtimeTemporaryTokenParameters_example_autogenerated": {
            "expires_in": 1
          }
        }
      }
    },
    "RealtimeTemporaryTokenResponse": {
      "name": {
        "typeId": "RealtimeTemporaryTokenResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeTemporaryTokenResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "token",
              "wireValue": "token"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The temporary authentication token for real-time transcription",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeTemporaryTokenResponseToken_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeTemporaryTokenResponse_example_autogenerated": {
            "token": "string"
          }
        }
      }
    },
    "AudioIntelligenceModelStatus": {
      "name": {
        "typeId": "AudioIntelligenceModelStatus",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "AudioIntelligenceModelStatus"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "success",
              "wireValue": "success"
            }
          },
          {
            "name": {
              "name": "unavailable",
              "wireValue": "unavailable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Will be either success, or unavailable in the rare case that the model failed.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "AudioIntelligenceModelStatus_example_autogenerated": "success"
        }
      }
    },
    "PurgeLemurRequestDataResponse": {
      "name": {
        "typeId": "PurgeLemurRequestDataResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "PurgeLemurRequestDataResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "request_id",
              "wireValue": "request_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the LeMUR request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PurgeLemurRequestDataResponseRequestId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "request_id_to_purge",
              "wireValue": "request_id_to_purge"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the deletion request of the LeMUR request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PurgeLemurRequestDataResponseRequestIdToPurge_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "deleted",
              "wireValue": "deleted"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether the request data was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PurgeLemurRequestDataResponseDeleted_example_autogenerated": true
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "PurgeLemurRequestDataResponse_example_autogenerated": {
            "request_id": "string",
            "request_id_to_purge": "string",
            "deleted": true
          }
        }
      }
    },
    "LemurBaseResponse": {
      "name": {
        "typeId": "LemurBaseResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurBaseResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "request_id",
              "wireValue": "request_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the LeMUR request",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurBaseResponseRequestId_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurBaseResponse_example_autogenerated": {
            "request_id": "string"
          }
        }
      }
    },
    "LemurSummaryResponse": {
      "name": {
        "typeId": "LemurSummaryResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurSummaryResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "response",
              "wireValue": "response"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The response generated by LeMUR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurSummaryResponseResponse_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseResponse",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseResponse"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurSummaryResponse_example_autogenerated": {
            "request_id": "string",
            "response": "string"
          }
        }
      }
    },
    "LemurQuestionAnswerResponse": {
      "name": {
        "typeId": "LemurQuestionAnswerResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurQuestionAnswerResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "response",
              "wireValue": "response"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurQuestionAnswer",
                  "typeId": "LemurQuestionAnswer",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The answers generated by LeMUR and their questions.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerResponseResponse_example_autogenerated": [
                  {
                    "question": "string",
                    "answer": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseResponse",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseResponse"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurQuestionAnswerResponse_example_autogenerated": {
            "request_id": "string",
            "response": [
              {
                "question": "string",
                "answer": "string"
              }
            ]
          }
        }
      }
    },
    "LemurQuestionAnswer": {
      "name": {
        "typeId": "LemurQuestionAnswer",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurQuestionAnswer"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "question",
              "wireValue": "question"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The question for LeMUR to answer.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerQuestion_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "answer",
              "wireValue": "answer"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The answer generated by LeMUR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerAnswer_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An answer generated by LeMUR and its question.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurQuestionAnswer_example_autogenerated": {
            "question": "string",
            "answer": "string"
          }
        }
      }
    },
    "LemurActionItemsResponse": {
      "name": {
        "typeId": "LemurActionItemsResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurActionItemsResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "response",
              "wireValue": "response"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The response generated by LeMUR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurActionItemsResponseResponse_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseResponse",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseResponse"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurActionItemsResponse_example_autogenerated": {
            "request_id": "string",
            "response": "string"
          }
        }
      }
    },
    "LemurTaskResponse": {
      "name": {
        "typeId": "LemurTaskResponse",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurTaskResponse"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "response",
              "wireValue": "response"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The response generated by LeMUR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurTaskResponseResponse_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseResponse",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseResponse"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurTaskResponse_example_autogenerated": {
            "request_id": "string",
            "response": "string"
          }
        }
      }
    },
    "LemurBaseParametersContext": {
      "name": {
        "typeId": "LemurBaseParametersContext",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurBaseParametersContext"
      },
      "shape": {
        "members": [
          {
            "type": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            }
          },
          {
            "type": {
              "container": {
                "keyType": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "valueType": {
                  "type": "unknown"
                },
                "type": "map"
              },
              "type": "container"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Context to provide the model. This can be a string or a free-form JSON value.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurBaseParametersContext_example_autogenerated": {}
        }
      }
    },
    "LemurBaseParameters": {
      "name": {
        "typeId": "LemurBaseParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurBaseParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "transcript_ids",
              "wireValue": "transcript_ids"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "A list of completed transcripts with text. Up to 100 files max, or 100 hours max. Whichever is lower.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurBaseParametersTranscriptIds_example_autogenerated": [
                  "string"
                ]
              }
            }
          },
          {
            "name": {
              "name": "context",
              "wireValue": "context"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurBaseParametersContext",
                  "typeId": "LemurBaseParametersContext",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Context to provide the model. This can be a string or a free-form JSON value.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurBaseParametersContext_example_autogenerated": {}
              }
            }
          },
          {
            "name": {
              "name": "final_model",
              "wireValue": "final_model"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurModel",
                  "typeId": "LemurModel",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": "max_output_size",
              "wireValue": "max_output_size"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "INTEGER",
                    "v2": {
                      "validation": {},
                      "type": "integer"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Max output size in tokens. Up to 4000 allowed.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurBaseParametersMaxOutputSize_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "temperature",
              "wireValue": "temperature"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "FLOAT",
                    "v2": {
                      "validation": {
                        "max": 1,
                        "min": 0
                      },
                      "type": "float"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The temperature to use for the model.\nHigher values result in answers that are more creative, lower values are more conservative.\nCan be any value between 0.0 and 1.0 inclusive.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurBaseParametersTemperature_example_autogenerated": 0.5
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurBaseParameters_example_autogenerated": {
            "transcript_ids": [
              "string"
            ]
          }
        }
      }
    },
    "LemurSummaryParameters": {
      "name": {
        "typeId": "LemurSummaryParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurSummaryParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "answer_format",
              "wireValue": "answer_format"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "How you want the summary to be returned. This can be any text. Examples: \"TLDR\", \"bullet points\"\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurSummaryParametersAnswerFormat_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseParameters",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseParameters"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurSummaryParameters_example_autogenerated": {
            "transcript_ids": [
              "string"
            ]
          }
        }
      }
    },
    "LemurQuestionAnswerParameters": {
      "name": {
        "typeId": "LemurQuestionAnswerParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurQuestionAnswerParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "questions",
              "wireValue": "questions"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurQuestion",
                  "typeId": "LemurQuestion",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "A list of questions to ask.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerParametersQuestions_example_autogenerated": [
                  {
                    "question": "string"
                  }
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseParameters",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseParameters"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurQuestionAnswerParameters_example_autogenerated": {
            "transcript_ids": [
              "string"
            ],
            "questions": [
              {
                "question": "string"
              }
            ]
          }
        }
      }
    },
    "LemurQuestionContext": {
      "name": {
        "typeId": "LemurQuestionContext",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurQuestionContext"
      },
      "shape": {
        "members": [
          {
            "type": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            }
          },
          {
            "type": {
              "container": {
                "keyType": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "valueType": {
                  "type": "unknown"
                },
                "type": "map"
              },
              "type": "container"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurQuestionContext_example_autogenerated": {}
        }
      }
    },
    "LemurQuestion": {
      "name": {
        "typeId": "LemurQuestion",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurQuestion"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "question",
              "wireValue": "question"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The question you wish to ask. For more complex questions use default model.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionQuestion_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "context",
              "wireValue": "context"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurQuestionContext",
                  "typeId": "LemurQuestionContext",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionContext_example_autogenerated": {}
              }
            }
          },
          {
            "name": {
              "name": "answer_format",
              "wireValue": "answer_format"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "How you want the answer to be returned. This can be any text. Can't be used with answer_options. Examples: \"short sentence\", \"bullet points\"\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerFormat_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "answer_options",
              "wireValue": "answer_options"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "What discrete options to return. Useful for precise responses. Can't be used with answer_format. Example: [\"Yes\", \"No\"]\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurQuestionAnswerOptions_example_autogenerated": [
                  "string"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurQuestion_example_autogenerated": {
            "question": "string"
          }
        }
      }
    },
    "LemurActionItemsParameters": {
      "name": {
        "typeId": "LemurActionItemsParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurActionItemsParameters"
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "LemurBaseParameters",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseParameters"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurActionItemsParameters_example_autogenerated": {
            "transcript_ids": [
              "string"
            ]
          }
        }
      }
    },
    "LemurTaskParameters": {
      "name": {
        "typeId": "LemurTaskParameters",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurTaskParameters"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "prompt",
              "wireValue": "prompt"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Your text to prompt the model to produce a desired output, including any context you want to pass into the model.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "LemurTaskParametersPrompt_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "LemurBaseParameters",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "LemurBaseParameters"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurTaskParameters_example_autogenerated": {
            "transcript_ids": [
              "string"
            ],
            "prompt": "string"
          }
        }
      }
    },
    "LemurModel": {
      "name": {
        "typeId": "LemurModel",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "LemurModel"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "default",
                "camelCase": {
                  "unsafeName": "default",
                  "safeName": "default_"
                },
                "snakeCase": {
                  "unsafeName": "default",
                  "safeName": "default_"
                }
              },
              "wireValue": "default"
            }
          },
          {
            "name": {
              "name": "basic",
              "wireValue": "basic"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The model that is used for the final prompt after compression is performed (options: \"basic\" and \"default\").\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "LemurModel_example_autogenerated": "default"
        }
      }
    },
    "Error": {
      "name": {
        "typeId": "Error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "error",
                "pascalCase": {
                  "unsafeName": "Error",
                  "safeName": "Error_"
                }
              },
              "wireValue": "error"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Error message",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorError_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "status",
              "wireValue": "status"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "literal": {
                      "string": "error",
                      "type": "string"
                    },
                    "type": "literal"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorStatus_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Error_example_autogenerated": {
            "error": "string"
          }
        }
      }
    },
    "TranscriptListParameters/properties/limit": {
      "name": {
        "typeId": "TranscriptListParameters/properties/limit",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/limit"
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "LONG",
            "v2": {
              "default": 10,
              "type": "long"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "LONG",
            "v2": {
              "default": 10,
              "type": "long"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Maximum amount of transcripts to retrieve",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/limit_example_autogenerated": 10
        }
      }
    },
    "TranscriptListParameters/properties/status": {
      "name": {
        "typeId": "TranscriptListParameters/properties/status",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/status"
      },
      "shape": {
        "aliasOf": {
          "type": "unknown"
        },
        "resolvedType": {
          "type": "unknown"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Filter by transcript status",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/status_example_autogenerated": "queued"
        }
      }
    },
    "TranscriptListParameters/properties/created_on": {
      "name": {
        "typeId": "TranscriptListParameters/properties/created_on",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/created_on"
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "format": "date"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "format": "date"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Only get transcripts created on this date",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/created_on_example_autogenerated": "2023-01-15"
        }
      }
    },
    "TranscriptListParameters/properties/before_id": {
      "name": {
        "typeId": "TranscriptListParameters/properties/before_id",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/before_id"
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {},
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {},
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Get transcripts that were created before this transcript ID",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/before_id_example_autogenerated": "string"
        }
      }
    },
    "TranscriptListParameters/properties/after_id": {
      "name": {
        "typeId": "TranscriptListParameters/properties/after_id",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/after_id"
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {},
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {},
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Get transcripts that were created after this transcript ID",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/after_id_example_autogenerated": "string"
        }
      }
    },
    "TranscriptListParameters/properties/throttled_only": {
      "name": {
        "typeId": "TranscriptListParameters/properties/throttled_only",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TranscriptListParameters/properties/throttled_only"
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "BOOLEAN",
            "v2": {
              "type": "boolean"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "BOOLEAN",
            "v2": {
              "type": "boolean"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Only get throttled transcripts, overrides the status filter",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TranscriptListParameters/properties/throttled_only_example_autogenerated": true
        }
      }
    },
    "SendAudio": {
      "name": {
        "typeId": "SendAudio",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SendAudio"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "audio_data",
              "wireValue": "audio_data"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Raw audio data, base64 encoded. This can be the raw data recorded directly from a microphone or read from an audio file.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "MessagesSendAudioAudioData_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SendAudio_example_autogenerated": {
            "audio_data": "string"
          }
        }
      }
    },
    "TerminateSession": {
      "name": {
        "typeId": "TerminateSession",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "TerminateSession"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "terminate_session",
              "wireValue": "terminate_session"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "A boolean value to communicate that you wish to end your real-time session forever.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TerminateSessionTerminateSession_example_autogenerated": true
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "RealtimeBaseMessage",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "RealtimeBaseMessage"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TerminateSession_example_autogenerated": {
            "message_type": "SessionBegins",
            "terminate_session": true
          }
        }
      }
    },
    "SessionBegins": {
      "name": {
        "typeId": "SessionBegins",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SessionBegins"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message_type",
              "wireValue": "message_type"
            },
            "valueType": {
              "container": {
                "literal": {
                  "string": "SessionBegins",
                  "type": "string"
                },
                "type": "literal"
              },
              "type": "container"
            },
            "docs": "Describes the type of the message.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SessionBeginsMessageType_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "session_id",
              "wireValue": "session_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Unique identifier for the established session.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SessionBeginsSessionId_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "expires_at",
              "wireValue": "expires_at"
            },
            "valueType": {
              "primitive": {
                "v1": "DATE_TIME",
                "v2": {
                  "type": "dateTime"
                }
              },
              "type": "primitive"
            },
            "docs": "Timestamp when this session will expire.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "RealtimeBaseMessage",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "RealtimeBaseMessage"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SessionBegins_example_autogenerated": {
            "message_type": "string",
            "session_id": "string",
            "expires_at": "string"
          }
        }
      }
    },
    "SessionTerminated": {
      "name": {
        "typeId": "SessionTerminated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "SessionTerminated"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message_type",
              "wireValue": "message_type"
            },
            "valueType": {
              "container": {
                "literal": {
                  "string": "SessionTerminated",
                  "type": "string"
                },
                "type": "literal"
              },
              "type": "container"
            },
            "docs": "Describes the type of the message.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SessionTerminatedMessageType_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "RealtimeBaseMessage",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "RealtimeBaseMessage"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "SessionTerminated_example_autogenerated": {
            "message_type": "string"
          }
        }
      }
    },
    "RealtimeError": {
      "name": {
        "typeId": "RealtimeError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeError"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "error",
                "pascalCase": {
                  "unsafeName": "Error",
                  "safeName": "Error_"
                }
              },
              "wireValue": "error"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeErrorError_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeError_example_autogenerated": {
            "error": "string"
          }
        }
      }
    },
    "PartialTranscript": {
      "name": {
        "typeId": "PartialTranscript",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "PartialTranscript"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message_type",
              "wireValue": "message_type"
            },
            "valueType": {
              "container": {
                "literal": {
                  "string": "PartialTranscript",
                  "type": "string"
                },
                "type": "literal"
              },
              "type": "container"
            },
            "docs": "Describes the type of message.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartialTranscriptMessageType_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "RealtimeBaseTranscript",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "RealtimeBaseTranscript"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "PartialTranscript_example_autogenerated": {
            "audio_start": 1,
            "audio_end": 1,
            "confidence": 0.5,
            "text": "string",
            "words": [
              {
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "text": "string"
              }
            ],
            "created": "string",
            "message_type": "string"
          }
        }
      }
    },
    "FinalTranscript": {
      "name": {
        "typeId": "FinalTranscript",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "FinalTranscript"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message_type",
              "wireValue": "message_type"
            },
            "valueType": {
              "container": {
                "literal": {
                  "string": "FinalTranscript",
                  "type": "string"
                },
                "type": "literal"
              },
              "type": "container"
            },
            "docs": "Describes the type of message.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "FinalTranscriptMessageType_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "punctuated",
              "wireValue": "punctuated"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether the text has been punctuated and cased.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "FinalTranscriptPunctuated_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": "text_formatted",
              "wireValue": "text_formatted"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "Whether the text has been formatted (e.g. Dollar -> $)",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "FinalTranscriptTextFormatted_example_autogenerated": true
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "RealtimeBaseTranscript",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": "RealtimeBaseTranscript"
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "FinalTranscript_example_autogenerated": {
            "audio_start": 1,
            "audio_end": 1,
            "confidence": 0.5,
            "text": "string",
            "words": [
              {
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "text": "string"
              }
            ],
            "created": "string",
            "message_type": "string",
            "punctuated": true,
            "text_formatted": true
          }
        }
      }
    },
    "RealtimeBaseMessage": {
      "name": {
        "typeId": "RealtimeBaseMessage",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeBaseMessage"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "message_type",
              "wireValue": "message_type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "MessageType",
              "typeId": "MessageType",
              "inline": false,
              "type": "named"
            },
            "docs": "Describes the type of the message.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeBaseMessage_example_autogenerated": {
            "message_type": "SessionBegins"
          }
        }
      }
    },
    "RealtimeMessage": {
      "name": {
        "typeId": "RealtimeMessage",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeMessage"
      },
      "shape": {
        "members": [
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "SessionBegins",
              "typeId": "SessionBegins",
              "displayName": "SessionBegins",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "PartialTranscript",
              "typeId": "PartialTranscript",
              "displayName": "PartialTranscript",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "FinalTranscript",
              "typeId": "FinalTranscript",
              "displayName": "FinalTranscript",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "SessionTerminated",
              "typeId": "SessionTerminated",
              "displayName": "SessionTerminated",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "RealtimeError",
              "typeId": "RealtimeError",
              "displayName": "RealtimeError",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeMessage_example_autogenerated": {
            "message_type": "string",
            "session_id": "string",
            "expires_at": "string"
          }
        }
      }
    },
    "MessageType": {
      "name": {
        "typeId": "MessageType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "MessageType"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "SessionBegins",
              "wireValue": "SessionBegins"
            }
          },
          {
            "name": {
              "name": "PartialTranscript",
              "wireValue": "PartialTranscript"
            }
          },
          {
            "name": {
              "name": "FinalTranscript",
              "wireValue": "FinalTranscript"
            }
          },
          {
            "name": {
              "name": "SessionTerminated",
              "wireValue": "SessionTerminated"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "MessageType_example_autogenerated": "SessionBegins"
        }
      }
    },
    "RealtimeTranscriptType": {
      "name": {
        "typeId": "RealtimeTranscriptType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeTranscriptType"
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": "PartialTranscript",
              "wireValue": "PartialTranscript"
            }
          },
          {
            "name": {
              "name": "FinalTranscript",
              "wireValue": "FinalTranscript"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeTranscriptType_example_autogenerated": "PartialTranscript"
        }
      }
    },
    "RealtimeTranscript": {
      "name": {
        "typeId": "RealtimeTranscript",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeTranscript"
      },
      "shape": {
        "members": [
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "PartialTranscript",
              "typeId": "PartialTranscript",
              "displayName": "PartialTranscript",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "FinalTranscript",
              "typeId": "FinalTranscript",
              "displayName": "FinalTranscript",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeTranscript_example_autogenerated": {
            "audio_start": 1,
            "audio_end": 1,
            "confidence": 0.5,
            "text": "string",
            "words": [
              {
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "text": "string"
              }
            ],
            "created": "string",
            "message_type": "string"
          }
        }
      }
    },
    "RealtimeBaseTranscript": {
      "name": {
        "typeId": "RealtimeBaseTranscript",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "RealtimeBaseTranscript"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "audio_start",
              "wireValue": "audio_start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "Start time of audio sample relative to session start, in milliseconds.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeBaseTranscriptAudioStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "audio_end",
              "wireValue": "audio_end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "End time of audio sample relative to session start, in milliseconds.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeBaseTranscriptAudioEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "The confidence score of the entire transcription, between 0 and 1.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeBaseTranscriptConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The partial transcript for your audio.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeBaseTranscriptText_example_autogenerated": "string"
              }
            }
          },
          {
            "name": {
              "name": "words",
              "wireValue": "words"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Word",
                  "typeId": "Word",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "An array of objects, with the information for each word in the transcription text. Includes the start/end time (in milliseconds) of the word, the confidence score of the word, and the text (i.e. the word itself).",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RealtimeBaseTranscriptWords_example_autogenerated": [
                  {
                    "start": 1,
                    "end": 1,
                    "confidence": 0.5,
                    "text": "string"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": "created",
              "wireValue": "created"
            },
            "valueType": {
              "primitive": {
                "v1": "DATE_TIME",
                "v2": {
                  "type": "dateTime"
                }
              },
              "type": "primitive"
            },
            "docs": "The timestamp for the partial transcript.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "RealtimeBaseTranscript_example_autogenerated": {
            "audio_start": 1,
            "audio_end": 1,
            "confidence": 0.5,
            "text": "string",
            "words": [
              {
                "start": 1,
                "end": 1,
                "confidence": 0.5,
                "text": "string"
              }
            ],
            "created": "string"
          }
        }
      }
    },
    "Word": {
      "name": {
        "typeId": "Word",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "Word"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "start",
              "wireValue": "start"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "Start time of the word in milliseconds",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordStart_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "end",
              "wireValue": "end"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "validation": {},
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "End time of the word in milliseconds",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordEnd_example_autogenerated": 1
              }
            }
          },
          {
            "name": {
              "name": "confidence",
              "wireValue": "confidence"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "max": 1,
                    "min": 0
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "Confidence score of the word",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordConfidence_example_autogenerated": 0.5
              }
            }
          },
          {
            "name": {
              "name": "text",
              "wireValue": "text"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The word itself",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WordText_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "Word_example_autogenerated": {
            "start": 1,
            "end": 1,
            "confidence": 0.5,
            "text": "string"
          }
        }
      }
    },
    "AudioData": {
      "name": {
        "typeId": "AudioData",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "AudioData"
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": "audio_data",
              "wireValue": "audio_data"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Raw audio data, base64 encoded. This can be the raw data recorded directly from a microphone or read from an audio file.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AudioDataAudioData_example_autogenerated": "string"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "AudioData_example_autogenerated": {
            "audio_data": "string"
          }
        }
      }
    },
    "UserIdSubscribe": {
      "name": {
        "typeId": "UserIdSubscribe",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "UserIdSubscribe"
      },
      "shape": {
        "members": [
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "SessionBegins",
              "typeId": "SessionBegins",
              "displayName": "SessionBegins",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "PartialTranscript",
              "typeId": "PartialTranscript",
              "displayName": "partialTranscript",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "FinalTranscript",
              "typeId": "FinalTranscript",
              "displayName": "finalTranscript",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "SessionTerminated",
              "typeId": "SessionTerminated",
              "displayName": "SessionTerminated",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "RealtimeError",
              "typeId": "RealtimeError",
              "displayName": "RealtimeError",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "UserIdSubscribe_example_autogenerated": null
        }
      }
    },
    "UserIdPublish": {
      "name": {
        "typeId": "UserIdPublish",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": "UserIdPublish"
      },
      "shape": {
        "members": [
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "SendAudio",
              "typeId": "SendAudio",
              "displayName": "sendAudio",
              "inline": false,
              "type": "named"
            }
          },
          {
            "type": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "TerminateSession",
              "typeId": "TerminateSession",
              "displayName": "terminateSession",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "type": "undiscriminatedUnion"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "UserIdPublish_example_autogenerated": null
        }
      }
    }
  },
  "constants": {
    "errorInstanceIdKey": {
      "name": "errorInstanceId",
      "wireValue": "errorInstanceId"
    }
  },
  "errors": {
    "UploadFileRequestBadRequestError": {
      "name": {
        "name": "UploadFileRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "UploadFileRequestBadRequestError",
        "wireValue": "UploadFileRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestUnauthorizedError": {
      "name": {
        "name": "UploadFileRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "UploadFileRequestUnauthorizedError",
        "wireValue": "UploadFileRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestNotFoundError": {
      "name": {
        "name": "UploadFileRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "UploadFileRequestNotFoundError",
        "wireValue": "UploadFileRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestTooManyRequestsError": {
      "name": {
        "name": "UploadFileRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "UploadFileRequestTooManyRequestsError",
        "wireValue": "UploadFileRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestInternalServerError": {
      "name": {
        "name": "UploadFileRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "UploadFileRequestInternalServerError",
        "wireValue": "UploadFileRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestServiceUnavailableError": {
      "name": {
        "name": "UploadFileRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "UploadFileRequestServiceUnavailableError",
        "wireValue": "UploadFileRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "UploadFileRequestGatewayTimeoutError": {
      "name": {
        "name": "UploadFileRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "UploadFileRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "UploadFileRequestGatewayTimeoutError",
        "wireValue": "UploadFileRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestBadRequestError": {
      "name": {
        "name": "ListTranscriptsRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestBadRequestError",
        "wireValue": "ListTranscriptsRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestUnauthorizedError": {
      "name": {
        "name": "ListTranscriptsRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestUnauthorizedError",
        "wireValue": "ListTranscriptsRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestNotFoundError": {
      "name": {
        "name": "ListTranscriptsRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestNotFoundError",
        "wireValue": "ListTranscriptsRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestTooManyRequestsError": {
      "name": {
        "name": "ListTranscriptsRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestTooManyRequestsError",
        "wireValue": "ListTranscriptsRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestInternalServerError": {
      "name": {
        "name": "ListTranscriptsRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestInternalServerError",
        "wireValue": "ListTranscriptsRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestServiceUnavailableError": {
      "name": {
        "name": "ListTranscriptsRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestServiceUnavailableError",
        "wireValue": "ListTranscriptsRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "ListTranscriptsRequestGatewayTimeoutError": {
      "name": {
        "name": "ListTranscriptsRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "ListTranscriptsRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "ListTranscriptsRequestGatewayTimeoutError",
        "wireValue": "ListTranscriptsRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestBadRequestError": {
      "name": {
        "name": "CreateTranscriptRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestBadRequestError",
        "wireValue": "CreateTranscriptRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestUnauthorizedError": {
      "name": {
        "name": "CreateTranscriptRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestUnauthorizedError",
        "wireValue": "CreateTranscriptRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestNotFoundError": {
      "name": {
        "name": "CreateTranscriptRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestNotFoundError",
        "wireValue": "CreateTranscriptRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestTooManyRequestsError": {
      "name": {
        "name": "CreateTranscriptRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestTooManyRequestsError",
        "wireValue": "CreateTranscriptRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestInternalServerError": {
      "name": {
        "name": "CreateTranscriptRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestInternalServerError",
        "wireValue": "CreateTranscriptRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestServiceUnavailableError": {
      "name": {
        "name": "CreateTranscriptRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestServiceUnavailableError",
        "wireValue": "CreateTranscriptRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateTranscriptRequestGatewayTimeoutError": {
      "name": {
        "name": "CreateTranscriptRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateTranscriptRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "CreateTranscriptRequestGatewayTimeoutError",
        "wireValue": "CreateTranscriptRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestBadRequestError": {
      "name": {
        "name": "GetTranscriptRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "GetTranscriptRequestBadRequestError",
        "wireValue": "GetTranscriptRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestUnauthorizedError": {
      "name": {
        "name": "GetTranscriptRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "GetTranscriptRequestUnauthorizedError",
        "wireValue": "GetTranscriptRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestNotFoundError": {
      "name": {
        "name": "GetTranscriptRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "GetTranscriptRequestNotFoundError",
        "wireValue": "GetTranscriptRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestTooManyRequestsError": {
      "name": {
        "name": "GetTranscriptRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "GetTranscriptRequestTooManyRequestsError",
        "wireValue": "GetTranscriptRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestInternalServerError": {
      "name": {
        "name": "GetTranscriptRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "GetTranscriptRequestInternalServerError",
        "wireValue": "GetTranscriptRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestServiceUnavailableError": {
      "name": {
        "name": "GetTranscriptRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "GetTranscriptRequestServiceUnavailableError",
        "wireValue": "GetTranscriptRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptRequestGatewayTimeoutError": {
      "name": {
        "name": "GetTranscriptRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "GetTranscriptRequestGatewayTimeoutError",
        "wireValue": "GetTranscriptRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestBadRequestError": {
      "name": {
        "name": "DeleteTranscriptRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestBadRequestError",
        "wireValue": "DeleteTranscriptRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestUnauthorizedError": {
      "name": {
        "name": "DeleteTranscriptRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestUnauthorizedError",
        "wireValue": "DeleteTranscriptRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestNotFoundError": {
      "name": {
        "name": "DeleteTranscriptRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestNotFoundError",
        "wireValue": "DeleteTranscriptRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestTooManyRequestsError": {
      "name": {
        "name": "DeleteTranscriptRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestTooManyRequestsError",
        "wireValue": "DeleteTranscriptRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestInternalServerError": {
      "name": {
        "name": "DeleteTranscriptRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestInternalServerError",
        "wireValue": "DeleteTranscriptRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestServiceUnavailableError": {
      "name": {
        "name": "DeleteTranscriptRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestServiceUnavailableError",
        "wireValue": "DeleteTranscriptRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "DeleteTranscriptRequestGatewayTimeoutError": {
      "name": {
        "name": "DeleteTranscriptRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "DeleteTranscriptRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "DeleteTranscriptRequestGatewayTimeoutError",
        "wireValue": "DeleteTranscriptRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestBadRequestError": {
      "name": {
        "name": "GetSubtitlesRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestBadRequestError",
        "wireValue": "GetSubtitlesRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestUnauthorizedError": {
      "name": {
        "name": "GetSubtitlesRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestUnauthorizedError",
        "wireValue": "GetSubtitlesRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestNotFoundError": {
      "name": {
        "name": "GetSubtitlesRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestNotFoundError",
        "wireValue": "GetSubtitlesRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestTooManyRequestsError": {
      "name": {
        "name": "GetSubtitlesRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestTooManyRequestsError",
        "wireValue": "GetSubtitlesRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestInternalServerError": {
      "name": {
        "name": "GetSubtitlesRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestInternalServerError",
        "wireValue": "GetSubtitlesRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestServiceUnavailableError": {
      "name": {
        "name": "GetSubtitlesRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestServiceUnavailableError",
        "wireValue": "GetSubtitlesRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetSubtitlesRequestGatewayTimeoutError": {
      "name": {
        "name": "GetSubtitlesRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetSubtitlesRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "GetSubtitlesRequestGatewayTimeoutError",
        "wireValue": "GetSubtitlesRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestBadRequestError": {
      "name": {
        "name": "GetTranscriptSentencesRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestBadRequestError",
        "wireValue": "GetTranscriptSentencesRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestUnauthorizedError": {
      "name": {
        "name": "GetTranscriptSentencesRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestUnauthorizedError",
        "wireValue": "GetTranscriptSentencesRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestNotFoundError": {
      "name": {
        "name": "GetTranscriptSentencesRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestNotFoundError",
        "wireValue": "GetTranscriptSentencesRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestTooManyRequestsError": {
      "name": {
        "name": "GetTranscriptSentencesRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestTooManyRequestsError",
        "wireValue": "GetTranscriptSentencesRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestInternalServerError": {
      "name": {
        "name": "GetTranscriptSentencesRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestInternalServerError",
        "wireValue": "GetTranscriptSentencesRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestServiceUnavailableError": {
      "name": {
        "name": "GetTranscriptSentencesRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestServiceUnavailableError",
        "wireValue": "GetTranscriptSentencesRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptSentencesRequestGatewayTimeoutError": {
      "name": {
        "name": "GetTranscriptSentencesRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptSentencesRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "GetTranscriptSentencesRequestGatewayTimeoutError",
        "wireValue": "GetTranscriptSentencesRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestBadRequestError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestBadRequestError",
        "wireValue": "GetTranscriptParagraphsRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestUnauthorizedError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestUnauthorizedError",
        "wireValue": "GetTranscriptParagraphsRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestNotFoundError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestNotFoundError",
        "wireValue": "GetTranscriptParagraphsRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestTooManyRequestsError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestTooManyRequestsError",
        "wireValue": "GetTranscriptParagraphsRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestInternalServerError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestInternalServerError",
        "wireValue": "GetTranscriptParagraphsRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestServiceUnavailableError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestServiceUnavailableError",
        "wireValue": "GetTranscriptParagraphsRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetTranscriptParagraphsRequestGatewayTimeoutError": {
      "name": {
        "name": "GetTranscriptParagraphsRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetTranscriptParagraphsRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "GetTranscriptParagraphsRequestGatewayTimeoutError",
        "wireValue": "GetTranscriptParagraphsRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestBadRequestError": {
      "name": {
        "name": "WordSearchRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "WordSearchRequestBadRequestError",
        "wireValue": "WordSearchRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestUnauthorizedError": {
      "name": {
        "name": "WordSearchRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "WordSearchRequestUnauthorizedError",
        "wireValue": "WordSearchRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestNotFoundError": {
      "name": {
        "name": "WordSearchRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "WordSearchRequestNotFoundError",
        "wireValue": "WordSearchRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestTooManyRequestsError": {
      "name": {
        "name": "WordSearchRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "WordSearchRequestTooManyRequestsError",
        "wireValue": "WordSearchRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestInternalServerError": {
      "name": {
        "name": "WordSearchRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "WordSearchRequestInternalServerError",
        "wireValue": "WordSearchRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestServiceUnavailableError": {
      "name": {
        "name": "WordSearchRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "WordSearchRequestServiceUnavailableError",
        "wireValue": "WordSearchRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "WordSearchRequestGatewayTimeoutError": {
      "name": {
        "name": "WordSearchRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "WordSearchRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "WordSearchRequestGatewayTimeoutError",
        "wireValue": "WordSearchRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestBadRequestError": {
      "name": {
        "name": "GetRedactedAudioRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestBadRequestError",
        "wireValue": "GetRedactedAudioRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestUnauthorizedError": {
      "name": {
        "name": "GetRedactedAudioRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestUnauthorizedError",
        "wireValue": "GetRedactedAudioRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestNotFoundError": {
      "name": {
        "name": "GetRedactedAudioRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestNotFoundError",
        "wireValue": "GetRedactedAudioRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestTooManyRequestsError": {
      "name": {
        "name": "GetRedactedAudioRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestTooManyRequestsError",
        "wireValue": "GetRedactedAudioRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestInternalServerError": {
      "name": {
        "name": "GetRedactedAudioRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestInternalServerError",
        "wireValue": "GetRedactedAudioRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestServiceUnavailableError": {
      "name": {
        "name": "GetRedactedAudioRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestServiceUnavailableError",
        "wireValue": "GetRedactedAudioRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "GetRedactedAudioRequestGatewayTimeoutError": {
      "name": {
        "name": "GetRedactedAudioRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "GetRedactedAudioRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "GetRedactedAudioRequestGatewayTimeoutError",
        "wireValue": "GetRedactedAudioRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestBadRequestError": {
      "name": {
        "name": "CreateRealtimeTokenRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestBadRequestError",
        "wireValue": "CreateRealtimeTokenRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestUnauthorizedError": {
      "name": {
        "name": "CreateRealtimeTokenRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestUnauthorizedError",
        "wireValue": "CreateRealtimeTokenRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestNotFoundError": {
      "name": {
        "name": "CreateRealtimeTokenRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestNotFoundError",
        "wireValue": "CreateRealtimeTokenRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestTooManyRequestsError": {
      "name": {
        "name": "CreateRealtimeTokenRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestTooManyRequestsError",
        "wireValue": "CreateRealtimeTokenRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestInternalServerError": {
      "name": {
        "name": "CreateRealtimeTokenRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestInternalServerError",
        "wireValue": "CreateRealtimeTokenRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestServiceUnavailableError": {
      "name": {
        "name": "CreateRealtimeTokenRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestServiceUnavailableError",
        "wireValue": "CreateRealtimeTokenRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "CreateRealtimeTokenRequestGatewayTimeoutError": {
      "name": {
        "name": "CreateRealtimeTokenRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "CreateRealtimeTokenRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "CreateRealtimeTokenRequestGatewayTimeoutError",
        "wireValue": "CreateRealtimeTokenRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestBadRequestError": {
      "name": {
        "name": "LemurSummaryRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "LemurSummaryRequestBadRequestError",
        "wireValue": "LemurSummaryRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestUnauthorizedError": {
      "name": {
        "name": "LemurSummaryRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "LemurSummaryRequestUnauthorizedError",
        "wireValue": "LemurSummaryRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestNotFoundError": {
      "name": {
        "name": "LemurSummaryRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "LemurSummaryRequestNotFoundError",
        "wireValue": "LemurSummaryRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestTooManyRequestsError": {
      "name": {
        "name": "LemurSummaryRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "LemurSummaryRequestTooManyRequestsError",
        "wireValue": "LemurSummaryRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestInternalServerError": {
      "name": {
        "name": "LemurSummaryRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "LemurSummaryRequestInternalServerError",
        "wireValue": "LemurSummaryRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestServiceUnavailableError": {
      "name": {
        "name": "LemurSummaryRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "LemurSummaryRequestServiceUnavailableError",
        "wireValue": "LemurSummaryRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurSummaryRequestGatewayTimeoutError": {
      "name": {
        "name": "LemurSummaryRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurSummaryRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "LemurSummaryRequestGatewayTimeoutError",
        "wireValue": "LemurSummaryRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestBadRequestError": {
      "name": {
        "name": "LemurQuestionAnswerRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestBadRequestError",
        "wireValue": "LemurQuestionAnswerRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestUnauthorizedError": {
      "name": {
        "name": "LemurQuestionAnswerRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestUnauthorizedError",
        "wireValue": "LemurQuestionAnswerRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestNotFoundError": {
      "name": {
        "name": "LemurQuestionAnswerRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestNotFoundError",
        "wireValue": "LemurQuestionAnswerRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestTooManyRequestsError": {
      "name": {
        "name": "LemurQuestionAnswerRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestTooManyRequestsError",
        "wireValue": "LemurQuestionAnswerRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestInternalServerError": {
      "name": {
        "name": "LemurQuestionAnswerRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestInternalServerError",
        "wireValue": "LemurQuestionAnswerRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestServiceUnavailableError": {
      "name": {
        "name": "LemurQuestionAnswerRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestServiceUnavailableError",
        "wireValue": "LemurQuestionAnswerRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurQuestionAnswerRequestGatewayTimeoutError": {
      "name": {
        "name": "LemurQuestionAnswerRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurQuestionAnswerRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "LemurQuestionAnswerRequestGatewayTimeoutError",
        "wireValue": "LemurQuestionAnswerRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestBadRequestError": {
      "name": {
        "name": "LemurActionItemsRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestBadRequestError",
        "wireValue": "LemurActionItemsRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestUnauthorizedError": {
      "name": {
        "name": "LemurActionItemsRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestUnauthorizedError",
        "wireValue": "LemurActionItemsRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestNotFoundError": {
      "name": {
        "name": "LemurActionItemsRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestNotFoundError",
        "wireValue": "LemurActionItemsRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestTooManyRequestsError": {
      "name": {
        "name": "LemurActionItemsRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestTooManyRequestsError",
        "wireValue": "LemurActionItemsRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestInternalServerError": {
      "name": {
        "name": "LemurActionItemsRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestInternalServerError",
        "wireValue": "LemurActionItemsRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestServiceUnavailableError": {
      "name": {
        "name": "LemurActionItemsRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestServiceUnavailableError",
        "wireValue": "LemurActionItemsRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurActionItemsRequestGatewayTimeoutError": {
      "name": {
        "name": "LemurActionItemsRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurActionItemsRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "LemurActionItemsRequestGatewayTimeoutError",
        "wireValue": "LemurActionItemsRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestBadRequestError": {
      "name": {
        "name": "LemurTaskRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "LemurTaskRequestBadRequestError",
        "wireValue": "LemurTaskRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestUnauthorizedError": {
      "name": {
        "name": "LemurTaskRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "LemurTaskRequestUnauthorizedError",
        "wireValue": "LemurTaskRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestNotFoundError": {
      "name": {
        "name": "LemurTaskRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "LemurTaskRequestNotFoundError",
        "wireValue": "LemurTaskRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestTooManyRequestsError": {
      "name": {
        "name": "LemurTaskRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "LemurTaskRequestTooManyRequestsError",
        "wireValue": "LemurTaskRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestInternalServerError": {
      "name": {
        "name": "LemurTaskRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "LemurTaskRequestInternalServerError",
        "wireValue": "LemurTaskRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestServiceUnavailableError": {
      "name": {
        "name": "LemurTaskRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "LemurTaskRequestServiceUnavailableError",
        "wireValue": "LemurTaskRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "LemurTaskRequestGatewayTimeoutError": {
      "name": {
        "name": "LemurTaskRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "LemurTaskRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "LemurTaskRequestGatewayTimeoutError",
        "wireValue": "LemurTaskRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestBadRequestError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestBadRequestError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestBadRequestError",
        "wireValue": "PurgeLemurRequestDataRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "Bad Request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestUnauthorizedError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestUnauthorizedError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestUnauthorizedError",
        "wireValue": "PurgeLemurRequestDataRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "Unauthorized",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestNotFoundError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestNotFoundError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestNotFoundError",
        "wireValue": "PurgeLemurRequestDataRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "Not found",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestTooManyRequestsError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestTooManyRequestsError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestTooManyRequestsError",
        "wireValue": "PurgeLemurRequestDataRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "Too Many Requests",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestInternalServerError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestInternalServerError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestInternalServerError",
        "wireValue": "PurgeLemurRequestDataRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "Error",
          "pascalCase": {
            "unsafeName": "Error",
            "safeName": "Error_"
          }
        },
        "typeId": "Error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "An error occurred while processing the request",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestServiceUnavailableError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestServiceUnavailableError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestServiceUnavailableError",
        "wireValue": "PurgeLemurRequestDataRequestServiceUnavailableError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 503,
      "docs": "Service Unavailable",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    },
    "PurgeLemurRequestDataRequestGatewayTimeoutError": {
      "name": {
        "name": "PurgeLemurRequestDataRequestGatewayTimeoutError",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "PurgeLemurRequestDataRequestGatewayTimeoutError"
      },
      "displayName": "GatewayTimeoutError",
      "discriminantValue": {
        "name": "PurgeLemurRequestDataRequestGatewayTimeoutError",
        "wireValue": "PurgeLemurRequestDataRequestGatewayTimeoutError"
      },
      "type": {
        "type": "unknown"
      },
      "statusCode": 504,
      "docs": "Gateway Timeout",
      "examples": [],
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {}
      }
    }
  },
  "services": {
    "service_files": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "files"
          ],
          "packagePath": [],
          "file": "files"
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "displayName": "Upload an audio or video file which can be transcribed.",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/upload",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "UploadFileRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "UploadFileRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "UploadFileRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "UploadFileRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "UploadFileRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "UploadFileRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "UploadFileRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "UploadFileRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/upload",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_files.upload",
          "name": "upload",
          "requestBody": {
            "contentType": "application/octet-stream",
            "isOptional": false,
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "filesUploadExample": "string"
              }
            },
            "type": "bytes"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/octet-stream",
                "isOptional": false,
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "filesUploadExample": "string"
                  }
                },
                "type": "bytes"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "UploadedFile",
                  "typeId": "UploadedFile",
                  "inline": false,
                  "type": "named"
                },
                "docs": "File uploaded successfully",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "filesUploadExample": {
                      "upload_url": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Upload your audio or video file directly to the AssemblyAI API if it isn't accessible via a URL already.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_filesUploadExample_200": {
                "displayName": "uploadExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/v2/upload"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "upload_url": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "UploadedFile",
                      "typeId": "UploadedFile",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "File uploaded successfully",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "filesUploadExample": {
                          "upload_url": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_transcript": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "transcript"
          ],
          "packagePath": [],
          "file": "transcript"
        }
      },
      "displayName": "transcript",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "displayName": "List transcripts",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": "limit",
                "wireValue": "limit"
              },
              "docs": "Maximum amount of transcripts to retrieve",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/limit",
                    "typeId": "TranscriptListParameters/properties/limit",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 10
                }
              }
            },
            {
              "name": {
                "name": "status",
                "wireValue": "status"
              },
              "docs": "Filter by transcript status",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/status",
                    "typeId": "TranscriptListParameters/properties/status",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "status_example": "queued"
                }
              }
            },
            {
              "name": {
                "name": "created_on",
                "wireValue": "created_on"
              },
              "docs": "Only get transcripts created on this date",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/created_on",
                    "typeId": "TranscriptListParameters/properties/created_on",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_on_example": "created_on"
                }
              }
            },
            {
              "name": {
                "name": "before_id",
                "wireValue": "before_id"
              },
              "docs": "Get transcripts that were created before this transcript ID",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/before_id",
                    "typeId": "TranscriptListParameters/properties/before_id",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "before_id_example": "before_id"
                }
              }
            },
            {
              "name": {
                "name": "after_id",
                "wireValue": "after_id"
              },
              "docs": "Get transcripts that were created after this transcript ID",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/after_id",
                    "typeId": "TranscriptListParameters/properties/after_id",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "after_id_example": "after_id"
                }
              }
            },
            {
              "name": {
                "name": "throttled_only",
                "wireValue": "throttled_only"
              },
              "docs": "Only get throttled transcripts, overrides the status filter",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "TranscriptListParameters/properties/throttled_only",
                    "typeId": "TranscriptListParameters/properties/throttled_only",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "throttled_only_example": true
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "ListTranscriptsRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "ListTranscriptsRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "ListTranscriptsRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.list",
          "name": "list",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "TranscriptList",
                  "typeId": "TranscriptList",
                  "inline": false,
                  "type": "named"
                },
                "docs": "A list of transcripts filtered by `limit` and `status`",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptListExample": {
                      "page_details": {
                        "limit": 1,
                        "result_count": 1,
                        "current_url": "string",
                        "prev_url": "string",
                        "next_url": "string"
                      },
                      "transcripts": [
                        {
                          "id": "string",
                          "resource_url": "string",
                          "status": "queued",
                          "created": "string",
                          "completed": "string",
                          "audio_url": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieve a list of transcripts you have created.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptListExample_200": {
                "displayName": "listExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "page_details": {
                        "limit": 1,
                        "result_count": 1,
                        "current_url": "string",
                        "prev_url": "string",
                        "next_url": "string"
                      },
                      "transcripts": [
                        {
                          "id": "string",
                          "resource_url": "string",
                          "status": "queued",
                          "created": "string",
                          "completed": "string",
                          "audio_url": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "TranscriptList",
                      "typeId": "TranscriptList",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "A list of transcripts filtered by `limit` and `status`",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptListExample": {
                          "page_details": {
                            "limit": 1,
                            "result_count": 1,
                            "current_url": "string",
                            "prev_url": "string",
                            "next_url": "string"
                          },
                          "transcripts": [
                            {
                              "id": "string",
                              "resource_url": "string",
                              "status": "queued",
                              "created": "string",
                              "completed": "string",
                              "audio_url": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Create a transcript from an audio file",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "CreateTranscriptRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "CreateTranscriptRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateTranscriptRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.create",
          "name": "create",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to create a transcript.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "CreateTranscriptParameters",
              "typeId": "CreateTranscriptParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "transcriptCreateExample": {
                  "audio_url": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to create a transcript.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "CreateTranscriptParameters",
                  "typeId": "CreateTranscriptParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptCreateExample": {
                      "audio_url": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Transcript",
                  "typeId": "Transcript",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Transcript created and queued for processing.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptCreateExample": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Create a transcript from an audio or video file that is accessible via a URL.",
          "v2Examples": {
            "autogeneratedExamples": {
              "transcriptCreateExample_201": {
                "displayName": "transcriptCreateExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/v2/transcript"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "audio_url": "string"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 201,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "Transcript",
                      "typeId": "Transcript",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Transcript created and queued for processing.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptCreateExample": {
                          "id": "string",
                          "language_model": "string",
                          "acoustic_model": "string",
                          "status": "queued",
                          "language_code": "en_us",
                          "audio_url": "string",
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ],
                          "utterances": [
                            {
                              "channel": "string",
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "words": [
                                {
                                  "confidence": 0.5,
                                  "start": 1,
                                  "end": 1,
                                  "text": "string",
                                  "speaker": "string"
                                }
                              ]
                            }
                          ],
                          "confidence": 0.5,
                          "audio_duration": 1.1,
                          "punctuate": true,
                          "format_text": true,
                          "dual_channel": true,
                          "webhook_url": "string",
                          "webhook_status_code": 1,
                          "webhook_auth": true,
                          "webhook_auth_header_name": "string",
                          "speed_boost": true,
                          "auto_highlights": true,
                          "auto_highlights_result": {
                            "results": [
                              {
                                "count": 1,
                                "rank": 0.5,
                                "text": "string",
                                "timestamps": [
                                  {
                                    "start": 1,
                                    "end": 1
                                  }
                                ]
                              }
                            ]
                          },
                          "audio_start_from": 1,
                          "audio_end_at": 1,
                          "word_boost": [
                            "string"
                          ],
                          "boost_param": "string",
                          "filter_profanity": true,
                          "redact_pii": true,
                          "redact_pii_audio": true,
                          "redact_pii_audio_quality": "string",
                          "redact_pii_policies": [
                            "medical_process"
                          ],
                          "redact_pii_sub": "entity_type",
                          "speaker_labels": true,
                          "speakers_expected": 1,
                          "content_safety": true,
                          "content_safety_labels": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "label": "string",
                                    "confidence": 0.5,
                                    "severity": 0.5
                                  }
                                ],
                                "sentences_idx_start": 1,
                                "sentences_idx_end": 1,
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                },
                                "summary": {},
                                "severity_score_summary": {}
                              }
                            ]
                          },
                          "iab_categories": true,
                          "iab_categories_result": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "relevance": 0.5,
                                    "label": "string"
                                  }
                                ],
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                }
                              }
                            ],
                            "summary": {}
                          },
                          "language_detection": true,
                          "custom_spelling": [
                            {
                              "from": [
                                "string"
                              ],
                              "to": "string"
                            }
                          ],
                          "auto_chapters": true,
                          "chapters": [
                            {
                              "gist": "string",
                              "headline": "string",
                              "summary": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "summarization": true,
                          "summary_type": "string",
                          "summary_model": "string",
                          "summary": "string",
                          "custom_topics": true,
                          "topics": [
                            "string"
                          ],
                          "disfluencies": true,
                          "sentiment_analysis": true,
                          "sentiment_analysis_results": [
                            {
                              "text": "string",
                              "start": 1,
                              "end": 1,
                              "sentiment": "POSITIVE",
                              "confidence": 0.5,
                              "speaker": "string"
                            }
                          ],
                          "entity_detection": true,
                          "entities": [
                            {
                              "entity_type": "banking_information",
                              "text": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "speech_threshold": 0.5,
                          "throttled": true,
                          "error": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Get the transcript",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": ""
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "GetTranscriptRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "GetTranscriptRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "GetTranscriptRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "GetTranscriptRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "GetTranscriptRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "GetTranscriptRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "GetTranscriptRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": ""
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Transcript",
                  "typeId": "Transcript",
                  "inline": false,
                  "type": "named"
                },
                "docs": "The transcript resource",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptGetExample": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Get the transcript resource. The transcript is ready when the \"status\" is \"completed\".",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptGetExample_200": {
                "displayName": "getExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "Transcript",
                      "typeId": "Transcript",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "The transcript resource",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptGetExample": {
                          "id": "string",
                          "language_model": "string",
                          "acoustic_model": "string",
                          "status": "queued",
                          "language_code": "en_us",
                          "audio_url": "string",
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ],
                          "utterances": [
                            {
                              "channel": "string",
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "words": [
                                {
                                  "confidence": 0.5,
                                  "start": 1,
                                  "end": 1,
                                  "text": "string",
                                  "speaker": "string"
                                }
                              ]
                            }
                          ],
                          "confidence": 0.5,
                          "audio_duration": 1.1,
                          "punctuate": true,
                          "format_text": true,
                          "dual_channel": true,
                          "webhook_url": "string",
                          "webhook_status_code": 1,
                          "webhook_auth": true,
                          "webhook_auth_header_name": "string",
                          "speed_boost": true,
                          "auto_highlights": true,
                          "auto_highlights_result": {
                            "results": [
                              {
                                "count": 1,
                                "rank": 0.5,
                                "text": "string",
                                "timestamps": [
                                  {
                                    "start": 1,
                                    "end": 1
                                  }
                                ]
                              }
                            ]
                          },
                          "audio_start_from": 1,
                          "audio_end_at": 1,
                          "word_boost": [
                            "string"
                          ],
                          "boost_param": "string",
                          "filter_profanity": true,
                          "redact_pii": true,
                          "redact_pii_audio": true,
                          "redact_pii_audio_quality": "string",
                          "redact_pii_policies": [
                            "medical_process"
                          ],
                          "redact_pii_sub": "entity_type",
                          "speaker_labels": true,
                          "speakers_expected": 1,
                          "content_safety": true,
                          "content_safety_labels": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "label": "string",
                                    "confidence": 0.5,
                                    "severity": 0.5
                                  }
                                ],
                                "sentences_idx_start": 1,
                                "sentences_idx_end": 1,
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                },
                                "summary": {},
                                "severity_score_summary": {}
                              }
                            ]
                          },
                          "iab_categories": true,
                          "iab_categories_result": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "relevance": 0.5,
                                    "label": "string"
                                  }
                                ],
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                }
                              }
                            ],
                            "summary": {}
                          },
                          "language_detection": true,
                          "custom_spelling": [
                            {
                              "from": [
                                "string"
                              ],
                              "to": "string"
                            }
                          ],
                          "auto_chapters": true,
                          "chapters": [
                            {
                              "gist": "string",
                              "headline": "string",
                              "summary": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "summarization": true,
                          "summary_type": "string",
                          "summary_model": "string",
                          "summary": "string",
                          "custom_topics": true,
                          "topics": [
                            "string"
                          ],
                          "disfluencies": true,
                          "sentiment_analysis": true,
                          "sentiment_analysis_results": [
                            {
                              "text": "string",
                              "start": 1,
                              "end": 1,
                              "sentiment": "POSITIVE",
                              "confidence": 0.5,
                              "speaker": "string"
                            }
                          ],
                          "entity_detection": true,
                          "entities": [
                            {
                              "entity_type": "banking_information",
                              "text": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "speech_threshold": 0.5,
                          "throttled": true,
                          "error": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Delete the transcript",
          "method": "DELETE",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": ""
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "DeleteTranscriptRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "DeleteTranscriptRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "DeleteTranscriptRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": ""
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            }
          },
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "Transcript",
                  "typeId": "Transcript",
                  "inline": false,
                  "type": "named"
                },
                "docs": "The deleted transcript response.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptDeleteExample": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Delete the transcript",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptDeleteExample_200": {
                "displayName": "deleteExample",
                "request": {
                  "endpoint": {
                    "method": "DELETE",
                    "path": "/v2/transcript/transcript_id"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "id": "string",
                      "language_model": "string",
                      "acoustic_model": "string",
                      "status": "queued",
                      "language_code": "en_us",
                      "audio_url": "string",
                      "text": "string",
                      "words": [
                        {
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "speaker": "string"
                        }
                      ],
                      "utterances": [
                        {
                          "channel": "string",
                          "confidence": 0.5,
                          "start": 1,
                          "end": 1,
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ],
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "punctuate": true,
                      "format_text": true,
                      "dual_channel": true,
                      "webhook_url": "string",
                      "webhook_status_code": 1,
                      "webhook_auth": true,
                      "webhook_auth_header_name": "string",
                      "speed_boost": true,
                      "auto_highlights": true,
                      "auto_highlights_result": {
                        "results": [
                          {
                            "count": 1,
                            "rank": 0.5,
                            "text": "string",
                            "timestamps": [
                              {
                                "start": 1,
                                "end": 1
                              }
                            ]
                          }
                        ]
                      },
                      "audio_start_from": 1,
                      "audio_end_at": 1,
                      "word_boost": [
                        "string"
                      ],
                      "boost_param": "string",
                      "filter_profanity": true,
                      "redact_pii": true,
                      "redact_pii_audio": true,
                      "redact_pii_audio_quality": "string",
                      "redact_pii_policies": [
                        "medical_process"
                      ],
                      "redact_pii_sub": "entity_type",
                      "speaker_labels": true,
                      "speakers_expected": 1,
                      "content_safety": true,
                      "content_safety_labels": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "label": "string",
                                "confidence": 0.5,
                                "severity": 0.5
                              }
                            ],
                            "sentences_idx_start": 1,
                            "sentences_idx_end": 1,
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            },
                            "summary": {},
                            "severity_score_summary": {}
                          }
                        ]
                      },
                      "iab_categories": true,
                      "iab_categories_result": {
                        "status": "success",
                        "results": [
                          {
                            "text": "string",
                            "labels": [
                              {
                                "relevance": 0.5,
                                "label": "string"
                              }
                            ],
                            "timestamp": {
                              "start": 1,
                              "end": 1
                            }
                          }
                        ],
                        "summary": {}
                      },
                      "language_detection": true,
                      "custom_spelling": [
                        {
                          "from": [
                            "string"
                          ],
                          "to": "string"
                        }
                      ],
                      "auto_chapters": true,
                      "chapters": [
                        {
                          "gist": "string",
                          "headline": "string",
                          "summary": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "summarization": true,
                      "summary_type": "string",
                      "summary_model": "string",
                      "summary": "string",
                      "custom_topics": true,
                      "topics": [
                        "string"
                      ],
                      "disfluencies": true,
                      "sentiment_analysis": true,
                      "sentiment_analysis_results": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "sentiment": "POSITIVE",
                          "confidence": 0.5,
                          "speaker": "string"
                        }
                      ],
                      "entity_detection": true,
                      "entities": [
                        {
                          "entity_type": "banking_information",
                          "text": "string",
                          "start": 1,
                          "end": 1
                        }
                      ],
                      "speech_threshold": 0.5,
                      "throttled": true,
                      "error": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "Transcript",
                      "typeId": "Transcript",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "The deleted transcript response.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptDeleteExample": {
                          "id": "string",
                          "language_model": "string",
                          "acoustic_model": "string",
                          "status": "queued",
                          "language_code": "en_us",
                          "audio_url": "string",
                          "text": "string",
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ],
                          "utterances": [
                            {
                              "channel": "string",
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "words": [
                                {
                                  "confidence": 0.5,
                                  "start": 1,
                                  "end": 1,
                                  "text": "string",
                                  "speaker": "string"
                                }
                              ]
                            }
                          ],
                          "confidence": 0.5,
                          "audio_duration": 1.1,
                          "punctuate": true,
                          "format_text": true,
                          "dual_channel": true,
                          "webhook_url": "string",
                          "webhook_status_code": 1,
                          "webhook_auth": true,
                          "webhook_auth_header_name": "string",
                          "speed_boost": true,
                          "auto_highlights": true,
                          "auto_highlights_result": {
                            "results": [
                              {
                                "count": 1,
                                "rank": 0.5,
                                "text": "string",
                                "timestamps": [
                                  {
                                    "start": 1,
                                    "end": 1
                                  }
                                ]
                              }
                            ]
                          },
                          "audio_start_from": 1,
                          "audio_end_at": 1,
                          "word_boost": [
                            "string"
                          ],
                          "boost_param": "string",
                          "filter_profanity": true,
                          "redact_pii": true,
                          "redact_pii_audio": true,
                          "redact_pii_audio_quality": "string",
                          "redact_pii_policies": [
                            "medical_process"
                          ],
                          "redact_pii_sub": "entity_type",
                          "speaker_labels": true,
                          "speakers_expected": 1,
                          "content_safety": true,
                          "content_safety_labels": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "label": "string",
                                    "confidence": 0.5,
                                    "severity": 0.5
                                  }
                                ],
                                "sentences_idx_start": 1,
                                "sentences_idx_end": 1,
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                },
                                "summary": {},
                                "severity_score_summary": {}
                              }
                            ]
                          },
                          "iab_categories": true,
                          "iab_categories_result": {
                            "status": "success",
                            "results": [
                              {
                                "text": "string",
                                "labels": [
                                  {
                                    "relevance": 0.5,
                                    "label": "string"
                                  }
                                ],
                                "timestamp": {
                                  "start": 1,
                                  "end": 1
                                }
                              }
                            ],
                            "summary": {}
                          },
                          "language_detection": true,
                          "custom_spelling": [
                            {
                              "from": [
                                "string"
                              ],
                              "to": "string"
                            }
                          ],
                          "auto_chapters": true,
                          "chapters": [
                            {
                              "gist": "string",
                              "headline": "string",
                              "summary": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "summarization": true,
                          "summary_type": "string",
                          "summary_model": "string",
                          "summary": "string",
                          "custom_topics": true,
                          "topics": [
                            "string"
                          ],
                          "disfluencies": true,
                          "sentiment_analysis": true,
                          "sentiment_analysis_results": [
                            {
                              "text": "string",
                              "start": 1,
                              "end": 1,
                              "sentiment": "POSITIVE",
                              "confidence": 0.5,
                              "speaker": "string"
                            }
                          ],
                          "entity_detection": true,
                          "entities": [
                            {
                              "entity_type": "banking_information",
                              "text": "string",
                              "start": 1,
                              "end": 1
                            }
                          ],
                          "speech_threshold": 0.5,
                          "throttled": true,
                          "error": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Export transcript as SRT or VTT captions.",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/"
              },
              {
                "pathParameter": "subtitle_format",
                "tail": ""
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            },
            {
              "name": "subtitle_format",
              "docs": "The format of the captions.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": "SubtitleFormat",
                "typeId": "SubtitleFormat",
                "inline": false,
                "type": "named"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "subtitle_format_example": "srt"
                }
              }
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": "chars_per_caption",
                "wireValue": "chars_per_caption"
              },
              "docs": "The maximum number of characters per caption",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "chars_per_caption_example": 1
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "GetSubtitlesRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "GetSubtitlesRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetSubtitlesRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/"
              },
              {
                "pathParameter": "subtitle_format",
                "tail": ""
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            },
            {
              "name": "subtitle_format",
              "docs": "The format of the captions.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": "SubtitleFormat",
                "typeId": "SubtitleFormat",
                "inline": false,
                "type": "named"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "subtitle_format_example": "srt"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.getSubtitles",
          "name": "getSubtitles",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "docs": "The exported captions as text",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcriptGetSubtitlesExample": "WEBVTT\n00:12.340 --> 00:16.220\nLast year I showed these two slides said that demonstrate\n00:16.200 --> 00:20.040\nthat the Arctic ice cap which for most of the last 3,000,000 years has been the\n00:20.020 --> 00:25.040\nsize of the lower 48 States has shrunk by 40% but this understates\n"
                }
              },
              "type": "text"
            }
          },
          "docs": "Export your transcript in SRT or VTT format, to be plugged into a video player for subtitles and closed captions.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptGetSubtitlesExample_200": {
                "displayName": "getSubtitlesExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id/srt"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id",
                    "subtitle_format": "srt"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": "WEBVTT\n00:12.340 --> 00:16.220\nLast year I showed these two slides said that demonstrate\n00:16.200 --> 00:20.040\nthat the Arctic ice cap which for most of the last 3,000,000 years has been the\n00:20.020 --> 00:25.040\nsize of the lower 48 States has shrunk by 40% but this understates\n",
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "docs": "The exported captions as text",
                  "v2Examples": {
                    "userSpecifiedExamples": {},
                    "autogeneratedExamples": {
                      "transcriptGetSubtitlesExample": "WEBVTT\n00:12.340 --> 00:16.220\nLast year I showed these two slides said that demonstrate\n00:16.200 --> 00:20.040\nthat the Arctic ice cap which for most of the last 3,000,000 years has been the\n00:20.020 --> 00:25.040\nsize of the lower 48 States has shrunk by 40% but this understates\n"
                    }
                  },
                  "type": "text"
                }
              }
            ]
          }
        },
        {
          "displayName": "Get the transcript split by sentences",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/sentences"
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "GetTranscriptSentencesRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "GetTranscriptSentencesRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptSentencesRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/sentences"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.getSentences",
          "name": "getSentences",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "SentencesResponse",
                  "typeId": "SentencesResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Exported sentences",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptGetSentencesExample": {
                      "id": "string",
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "sentences": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "confidence": 0.5,
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Get the transcript split by sentences. The API will attempt to semantically segment the transcript into sentences to create more reader-friendly transcripts.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptGetSentencesExample_200": {
                "displayName": "getSentencesExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id/sentences"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "id": "string",
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "sentences": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "confidence": 0.5,
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "SentencesResponse",
                      "typeId": "SentencesResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Exported sentences",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptGetSentencesExample": {
                          "id": "string",
                          "confidence": 0.5,
                          "audio_duration": 1.1,
                          "sentences": [
                            {
                              "text": "string",
                              "start": 1,
                              "end": 1,
                              "confidence": 0.5,
                              "words": [
                                {
                                  "confidence": 0.5,
                                  "start": 1,
                                  "end": 1,
                                  "text": "string",
                                  "speaker": "string"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Get the transcript split by paragraphs",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/paragraphs"
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "GetTranscriptParagraphsRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetTranscriptParagraphsRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/paragraphs"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.getParagraphs",
          "name": "getParagraphs",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "ParagraphsResponse",
                  "typeId": "ParagraphsResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Exported paragraphs",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptGetParagraphsExample": {
                      "id": "string",
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "paragraphs": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "confidence": 0.5,
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Get the transcript split by paragraphs. The API will attempt to semantically segment your transcript into paragraphs to create more reader-friendly transcripts.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptGetParagraphsExample_200": {
                "displayName": "getParagraphsExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id/paragraphs"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "id": "string",
                      "confidence": 0.5,
                      "audio_duration": 1.1,
                      "paragraphs": [
                        {
                          "text": "string",
                          "start": 1,
                          "end": 1,
                          "confidence": 0.5,
                          "words": [
                            {
                              "confidence": 0.5,
                              "start": 1,
                              "end": 1,
                              "text": "string",
                              "speaker": "string"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "ParagraphsResponse",
                      "typeId": "ParagraphsResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Exported paragraphs",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptGetParagraphsExample": {
                          "id": "string",
                          "confidence": 0.5,
                          "audio_duration": 1.1,
                          "paragraphs": [
                            {
                              "text": "string",
                              "start": 1,
                              "end": 1,
                              "confidence": 0.5,
                              "words": [
                                {
                                  "confidence": 0.5,
                                  "start": 1,
                                  "end": 1,
                                  "text": "string",
                                  "speaker": "string"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Search the given transcript for words, numbers, or phrases",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/word-search"
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": "words",
                "wireValue": "words"
              },
              "docs": "Keywords to search for",
              "valueType": {
                "container": {
                  "list": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "list"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "words_example": [
                    "string"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "WordSearchRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "WordSearchRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "WordSearchRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "WordSearchRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "WordSearchRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "WordSearchRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "WordSearchRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "WordSearchRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/word-search"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.wordSearch",
          "name": "wordSearch",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "WordSearchResponse",
                  "typeId": "WordSearchResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Word search response",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptWordSearchExample": {
                      "id": "string",
                      "total_count": 1,
                      "matches": [
                        {
                          "text": "string",
                          "count": 1,
                          "timestamps": [
                            [
                              1
                            ]
                          ],
                          "indexes": [
                            1
                          ]
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Search through the transcript for a specific set of keywords. You can search for individual words, numbers, or phrases containing up to five words or numbers.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptWordSearchExample_200": {
                "displayName": "wordSearchExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id/word-search"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {
                    "words": [
                      "string"
                    ]
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "id": "string",
                      "total_count": 1,
                      "matches": [
                        {
                          "text": "string",
                          "count": 1,
                          "timestamps": [
                            [
                              1
                            ]
                          ],
                          "indexes": [
                            1
                          ]
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "WordSearchResponse",
                      "typeId": "WordSearchResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Word search response",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptWordSearchExample": {
                          "id": "string",
                          "total_count": 1,
                          "matches": [
                            {
                              "text": "string",
                              "count": 1,
                              "timestamps": [
                                [
                                  1
                                ]
                              ],
                              "indexes": [
                                1
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
          "method": "GET",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/redacted-audio"
              }
            ]
          },
          "pathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "GetRedactedAudioRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "GetRedactedAudioRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "GetRedactedAudioRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/transcript/",
            "parts": [
              {
                "pathParameter": "transcript_id",
                "tail": "/redacted-audio"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "transcript_id",
              "docs": "ID of the transcript",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "transcript_id_example": "transcript_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_transcript.getRedactedAudio",
          "name": "getRedactedAudio",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "RedactedAudioResponse",
                  "typeId": "RedactedAudioResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "The redacted audio object containing the status and URL to the redacted audio.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "transcriptGetRedactedAudioExample": {
                      "status": "redacted_audio_ready",
                      "redacted_audio_url": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_transcriptGetRedactedAudioExample_200": {
                "displayName": "getRedactedAudioExample",
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/v2/transcript/transcript_id/redacted-audio"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "transcript_id": "transcript_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "status": "redacted_audio_ready",
                      "redacted_audio_url": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "RedactedAudioResponse",
                      "typeId": "RedactedAudioResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "The redacted audio object containing the status and URL to the redacted audio.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "transcriptGetRedactedAudioExample": {
                          "status": "redacted_audio_ready",
                          "redacted_audio_url": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_realtime": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "realtime"
          ],
          "packagePath": [],
          "file": "realtime"
        }
      },
      "displayName": "realtime",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "displayName": "Create a temporary authentication token for real-time transcription",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/v2/realtime/token",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "CreateRealtimeTokenRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "CreateRealtimeTokenRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "CreateRealtimeTokenRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/v2/realtime/token",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_realtime.createTemporaryToken",
          "name": "createTemporaryToken",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to create a temporary authentication token.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "CreateRealtimeTemporaryTokenParameters",
              "typeId": "CreateRealtimeTemporaryTokenParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "realtimeCreateTemporaryTokenExample": {
                  "expires_in": 1
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to create a temporary authentication token.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "CreateRealtimeTemporaryTokenParameters",
                  "typeId": "CreateRealtimeTemporaryTokenParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "realtimeCreateTemporaryTokenExample": {
                      "expires_in": 1
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "RealtimeTemporaryTokenResponse",
                  "typeId": "RealtimeTemporaryTokenResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Temporary authentication token generated.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "realtimeCreateTemporaryTokenExample": {
                      "token": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Create a temporary authentication token for real-time transcription",
          "v2Examples": {
            "autogeneratedExamples": {
              "realtimeCreateTemporaryTokenExample_200": {
                "displayName": "realtimeCreateTemporaryTokenExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/v2/realtime/token"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "expires_in": 1
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "token": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "RealtimeTemporaryTokenResponse",
                      "typeId": "RealtimeTemporaryTokenResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "Temporary authentication token generated.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "realtimeCreateTemporaryTokenExample": {
                          "token": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    },
    "service_lemur": {
      "name": {
        "fernFilepath": {
          "allParts": [
            "lemur"
          ],
          "packagePath": [],
          "file": "lemur"
        }
      },
      "displayName": "LeMUR",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "displayName": "Generate a custom summary from one or more transcripts.",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/lemur/v3/generate/summary",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "LemurSummaryRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "LemurSummaryRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "LemurSummaryRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "LemurSummaryRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "LemurSummaryRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "LemurSummaryRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "LemurSummaryRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurSummaryRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/lemur/v3/generate/summary",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_lemur.summary",
          "name": "summary",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to generate the summary.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "LemurSummaryParameters",
              "typeId": "LemurSummaryParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "lemurSummaryExample": {
                  "transcript_ids": [
                    "string"
                  ]
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to generate the summary.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurSummaryParameters",
                  "typeId": "LemurSummaryParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurSummaryExample": {
                      "transcript_ids": [
                        "string"
                      ]
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurSummaryResponse",
                  "typeId": "LemurSummaryResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "LeMUR summary response",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurSummaryExample": {
                      "request_id": "string",
                      "response": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Custom Summary allows you to distill a piece of audio into a few impactful sentences. You can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.",
          "v2Examples": {
            "autogeneratedExamples": {
              "lemurSummaryExample_200": {
                "displayName": "lemurSummaryExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/lemur/v3/generate/summary"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "transcript_ids": [
                      "string"
                    ]
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "request_id": "string",
                      "response": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "LemurSummaryResponse",
                      "typeId": "LemurSummaryResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "LeMUR summary response",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "lemurSummaryExample": {
                          "request_id": "string",
                          "response": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Create answers to one or more questions about one or more transcripts.",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/lemur/v3/generate/question-answer",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "LemurQuestionAnswerRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "LemurQuestionAnswerRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurQuestionAnswerRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/lemur/v3/generate/question-answer",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_lemur.questionAnswer",
          "name": "questionAnswer",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to ask questions about the transcripts.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "LemurQuestionAnswerParameters",
              "typeId": "LemurQuestionAnswerParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "lemurQuestionAnswerExample": {
                  "transcript_ids": [
                    "string"
                  ],
                  "questions": [
                    {
                      "question": "string"
                    }
                  ]
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to ask questions about the transcripts.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurQuestionAnswerParameters",
                  "typeId": "LemurQuestionAnswerParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurQuestionAnswerExample": {
                      "transcript_ids": [
                        "string"
                      ],
                      "questions": [
                        {
                          "question": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurQuestionAnswerResponse",
                  "typeId": "LemurQuestionAnswerResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "LeMUR question & answer response",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurQuestionAnswerExample": {
                      "request_id": "string",
                      "response": [
                        {
                          "question": "string",
                          "answer": "string"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Question & Answer allows you to ask free-form questions about a single transcript or a group of transcripts. The questions can be any whose answers you find useful, such as judging whether a caller is likely to become a customer or whether all items on a meeting's agenda were covered.",
          "v2Examples": {
            "autogeneratedExamples": {
              "lemurQuestionAnswerExample_200": {
                "displayName": "lemurQuestionAnswerExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/lemur/v3/generate/question-answer"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "transcript_ids": [
                      "string"
                    ],
                    "questions": [
                      {
                        "question": "string"
                      }
                    ]
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "request_id": "string",
                      "response": [
                        {
                          "question": "string",
                          "answer": "string"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "LemurQuestionAnswerResponse",
                      "typeId": "LemurQuestionAnswerResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "LeMUR question & answer response",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "lemurQuestionAnswerExample": {
                          "request_id": "string",
                          "response": [
                            {
                              "question": "string",
                              "answer": "string"
                            }
                          ]
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Extract action items from one or more meeting transcripts.",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/lemur/v3/generate/action-items",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "LemurActionItemsRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "LemurActionItemsRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurActionItemsRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/lemur/v3/generate/action-items",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_lemur.actionItems",
          "name": "actionItems",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to generate action items from transcripts.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "LemurActionItemsParameters",
              "typeId": "LemurActionItemsParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "lemurActionItemsExample": {
                  "transcript_ids": [
                    "string"
                  ]
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to generate action items from transcripts.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurActionItemsParameters",
                  "typeId": "LemurActionItemsParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurActionItemsExample": {
                      "transcript_ids": [
                        "string"
                      ]
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurActionItemsResponse",
                  "typeId": "LemurActionItemsResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "LeMUR action items response",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurActionItemsExample": {
                      "request_id": "string",
                      "response": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Use LeMUR to generate a list of Action Items from a transcript",
          "v2Examples": {
            "autogeneratedExamples": {
              "lemurActionItemsExample_200": {
                "displayName": "lemurActionItemsExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/lemur/v3/generate/action-items"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "transcript_ids": [
                      "string"
                    ]
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "request_id": "string",
                      "response": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "LemurActionItemsResponse",
                      "typeId": "LemurActionItemsResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "LeMUR action items response",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "lemurActionItemsExample": {
                          "request_id": "string",
                          "response": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Ask LeMUR to use one or more transcripts with a Custom Task to handle your specialized task.",
          "method": "POST",
          "baseUrl": "Base",
          "path": {
            "head": "/lemur/v3/generate/task",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "LemurTaskRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "LemurTaskRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "LemurTaskRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "LemurTaskRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "LemurTaskRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "LemurTaskRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "LemurTaskRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "LemurTaskRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/lemur/v3/generate/task",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_lemur.task",
          "name": "task",
          "requestBody": {
            "contentType": "application/json",
            "docs": "Parameters to run the custom task.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "LemurTaskParameters",
              "typeId": "LemurTaskParameters",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "lemurTaskExample": {
                  "transcript_ids": [
                    "string"
                  ],
                  "prompt": "string"
                }
              }
            },
            "type": "reference"
          },
          "v2RequestBodies": {
            "requestBodies": [
              {
                "contentType": "application/json",
                "docs": "Parameters to run the custom task.",
                "requestBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurTaskParameters",
                  "typeId": "LemurTaskParameters",
                  "inline": false,
                  "type": "named"
                },
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurTaskExample": {
                      "transcript_ids": [
                        "string"
                      ],
                      "prompt": "string"
                    }
                  }
                },
                "type": "reference"
              }
            ]
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "LemurTaskResponse",
                  "typeId": "LemurTaskResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "LeMUR task response",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurTaskExample": {
                      "request_id": "string",
                      "response": "string"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Use LeMUR to ask anything with Custom Task",
          "v2Examples": {
            "autogeneratedExamples": {
              "lemurTaskExample_200": {
                "displayName": "lemurTaskExample",
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/lemur/v3/generate/task"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "transcript_ids": [
                      "string"
                    ],
                    "prompt": "string"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "request_id": "string",
                      "response": "string"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "LemurTaskResponse",
                      "typeId": "LemurTaskResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "LeMUR task response",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "lemurTaskExample": {
                          "request_id": "string",
                          "response": "string"
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        },
        {
          "displayName": "Delete the data for a previously submitted LeMUR request.",
          "method": "DELETE",
          "baseUrl": "Base",
          "path": {
            "head": "/lemur/v3/",
            "parts": [
              {
                "pathParameter": "request_id",
                "tail": ""
              }
            ]
          },
          "pathParameters": [
            {
              "name": "request_id",
              "docs": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "request_id_example": "request_id"
                }
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestBadRequestError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestBadRequestError"
              },
              "docs": "Bad Request"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestUnauthorizedError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestUnauthorizedError"
              },
              "docs": "Unauthorized"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestNotFoundError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestNotFoundError"
              },
              "docs": "Not found"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestTooManyRequestsError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestTooManyRequestsError"
              },
              "docs": "Too Many Requests"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestInternalServerError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestInternalServerError"
              },
              "docs": "An error occurred while processing the request"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestServiceUnavailableError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestServiceUnavailableError"
              },
              "docs": "Service Unavailable"
            },
            {
              "error": {
                "name": "PurgeLemurRequestDataRequestGatewayTimeoutError",
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "PurgeLemurRequestDataRequestGatewayTimeoutError"
              },
              "docs": "Gateway Timeout"
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/lemur/v3/",
            "parts": [
              {
                "pathParameter": "request_id",
                "tail": ""
              }
            ]
          },
          "allPathParameters": [
            {
              "name": "request_id",
              "docs": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT",
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "request_id_example": "request_id"
                }
              }
            }
          ],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_lemur.purgeRequestData",
          "name": "purgeRequestData",
          "v2RequestBodies": {},
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": "PurgeLemurRequestDataResponse",
                  "typeId": "PurgeLemurRequestDataResponse",
                  "inline": false,
                  "type": "named"
                },
                "docs": "LeMUR request data deleted.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "lemurPurgeRequestDataExample": {
                      "request_id": "string",
                      "request_id_to_purge": "string",
                      "deleted": true
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Delete the data for a previously submitted LeMUR request.\nThe LLM response data, as well as any context provided in the original request will be removed.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "base_lemurPurgeRequestDataExample_200": {
                "displayName": "purgeRequestDataExample",
                "request": {
                  "endpoint": {
                    "method": "DELETE",
                    "path": "/lemur/v3/request_id"
                  },
                  "environment": "AssemblyAI API",
                  "pathParameters": {
                    "request_id": "request_id"
                  },
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "request_id": "string",
                      "request_id_to_purge": "string",
                      "deleted": true
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          },
          "v2Responses": {
            "responses": [
              {
                "statusCode": 200,
                "body": {
                  "value": {
                    "responseBodyType": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": "PurgeLemurRequestDataResponse",
                      "typeId": "PurgeLemurRequestDataResponse",
                      "inline": false,
                      "type": "named"
                    },
                    "docs": "LeMUR request data deleted.",
                    "v2Examples": {
                      "userSpecifiedExamples": {},
                      "autogeneratedExamples": {
                        "lemurPurgeRequestDataExample": {
                          "request_id": "string",
                          "request_id_to_purge": "string",
                          "deleted": true
                        }
                      }
                    },
                    "type": "response"
                  },
                  "type": "json"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "webhookGroups": {},
  "subpackages": {
    "subpackage_files": {
      "name": "files",
      "fernFilepath": {
        "allParts": [
          "files"
        ],
        "packagePath": [],
        "file": "files"
      },
      "service": "service_files",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_transcript": {
      "name": "transcript",
      "fernFilepath": {
        "allParts": [
          "transcript"
        ],
        "packagePath": [],
        "file": "transcript"
      },
      "service": "service_transcript",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_realtime": {
      "name": "realtime",
      "fernFilepath": {
        "allParts": [
          "realtime"
        ],
        "packagePath": [],
        "file": "realtime"
      },
      "service": "service_realtime",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_lemur": {
      "name": "lemur",
      "fernFilepath": {
        "allParts": [
          "lemur"
        ],
        "packagePath": [],
        "file": "lemur"
      },
      "service": "service_lemur",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_userId": {
      "name": "userId",
      "fernFilepath": {
        "allParts": [
          "userId"
        ],
        "packagePath": [],
        "file": "userId"
      },
      "types": [],
      "errors": [],
      "subpackages": [],
      "websocket": "channel_userId",
      "hasEndpointsInTree": false
    }
  },
  "websocketChannels": {
    "channel_userId": {
      "name": "userId",
      "baseUrl": "API",
      "path": {
        "head": "/",
        "parts": [
          {
            "pathParameter": "userId",
            "tail": ""
          }
        ]
      },
      "auth": false,
      "headers": [
        {
          "name": {
            "name": "Authentication",
            "wireValue": "Authentication"
          },
          "docs": "Authenticate using your AssemblyAI API key.",
          "valueType": {
            "container": {
              "optional": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "type": "optional"
            },
            "type": "container"
          },
          "v2Examples": {
            "userSpecifiedExamples": {},
            "autogeneratedExamples": {
              "Authentication_example": "Authentication"
            }
          }
        }
      ],
      "queryParameters": [
        {
          "name": {
            "name": "sample_rate",
            "wireValue": "sample_rate"
          },
          "docs": "The sample rate of the streamed audio.",
          "valueType": {
            "container": {
              "optional": {
                "primitive": {
                  "v1": "INTEGER",
                  "v2": {
                    "validation": {},
                    "type": "integer"
                  }
                },
                "type": "primitive"
              },
              "type": "optional"
            },
            "type": "container"
          },
          "allowMultiple": false,
          "v2Examples": {
            "userSpecifiedExamples": {},
            "autogeneratedExamples": {
              "sample_rate_example": 1
            }
          }
        },
        {
          "name": {
            "name": "word_boost",
            "wireValue": "word_boost"
          },
          "docs": "Add up to 2500 characters of custom vocabulary.\nThe parameter should map to a JSON encoded list of strings.\n",
          "valueType": {
            "container": {
              "optional": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "type": "optional"
            },
            "type": "container"
          },
          "allowMultiple": false,
          "v2Examples": {
            "userSpecifiedExamples": {},
            "autogeneratedExamples": {
              "word_boost_example": "word_boost"
            }
          }
        },
        {
          "name": {
            "name": "token",
            "wireValue": "token"
          },
          "docs": "Authenticate using a [generated temporary token](https://www.assemblyai.com/docs/Guides/real-time_streaming_transcription#creating-temporary-authentication-tokens)",
          "valueType": {
            "container": {
              "optional": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "type": "optional"
            },
            "type": "container"
          },
          "allowMultiple": false,
          "v2Examples": {
            "userSpecifiedExamples": {},
            "autogeneratedExamples": {
              "token_example": "token"
            }
          }
        }
      ],
      "pathParameters": [
        {
          "name": "userId",
          "docs": "The ID of the user.",
          "valueType": {
            "primitive": {
              "v1": "STRING",
              "v2": {
                "validation": {},
                "type": "string"
              }
            },
            "type": "primitive"
          },
          "location": "ENDPOINT",
          "v2Examples": {
            "userSpecifiedExamples": {},
            "autogeneratedExamples": {
              "userId_example": "userId"
            }
          }
        }
      ],
      "messages": [
        {
          "type": "subscribe",
          "displayName": "subscribe",
          "origin": "server",
          "body": {
            "bodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "UserIdSubscribe",
              "typeId": "UserIdSubscribe",
              "inline": false,
              "type": "named"
            },
            "docs": "Receive messages from the WebSocket",
            "type": "reference"
          },
          "docs": "Receive messages from the WebSocket"
        },
        {
          "type": "publish",
          "displayName": "publish",
          "origin": "client",
          "body": {
            "bodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": "UserIdPublish",
              "typeId": "UserIdPublish",
              "inline": false,
              "type": "named"
            },
            "docs": "Send messages to the WebSocket",
            "type": "reference"
          },
          "docs": "Send messages to the WebSocket"
        }
      ],
      "examples": [
        {
          "pathParameters": [
            {
              "name": "userId",
              "value": {
                "jsonExample": "userId",
                "shape": {
                  "primitive": {
                    "string": {
                      "original": "userId"
                    },
                    "type": "string"
                  },
                  "type": "primitive"
                }
              }
            }
          ],
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "publish",
              "body": {
                "jsonExample": {
                  "audio_data": "audio_data"
                },
                "shape": {
                  "shape": {
                    "index": 0,
                    "singleUnionType": {
                      "jsonExample": {
                        "audio_data": "audio_data"
                      },
                      "shape": {
                        "shape": {
                          "properties": [
                            {
                              "name": {
                                "name": "audio_data",
                                "wireValue": "audio_data"
                              },
                              "originalTypeDeclaration": {
                                "typeId": "SendAudio",
                                "fernFilepath": {
                                  "allParts": [],
                                  "packagePath": []
                                },
                                "name": "SendAudio"
                              },
                              "value": {
                                "jsonExample": "audio_data",
                                "shape": {
                                  "primitive": {
                                    "string": {
                                      "original": "audio_data"
                                    },
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "typeName": {
                          "typeId": "SendAudio",
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "SendAudio"
                        },
                        "type": "named"
                      }
                    },
                    "type": "undiscriminatedUnion"
                  },
                  "typeName": {
                    "typeId": "UserIdPublish",
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "UserIdPublish"
                  },
                  "type": "named"
                },
                "type": "reference"
              }
            },
            {
              "type": "subscribe",
              "body": {
                "jsonExample": {
                  "message_type": "SessionBegins",
                  "session_id": "session_id",
                  "expires_at": "2024-01-15T09:30:00Z"
                },
                "shape": {
                  "shape": {
                    "index": 0,
                    "singleUnionType": {
                      "jsonExample": {
                        "message_type": "SessionBegins",
                        "session_id": "session_id",
                        "expires_at": "2024-01-15T09:30:00Z"
                      },
                      "shape": {
                        "shape": {
                          "properties": [
                            {
                              "name": {
                                "name": "message_type",
                                "wireValue": "message_type"
                              },
                              "originalTypeDeclaration": {
                                "typeId": "RealtimeBaseMessage",
                                "fernFilepath": {
                                  "allParts": [],
                                  "packagePath": []
                                },
                                "name": "RealtimeBaseMessage"
                              },
                              "value": {
                                "jsonExample": "SessionBegins",
                                "shape": {
                                  "shape": {
                                    "value": {
                                      "name": "SessionBegins",
                                      "wireValue": "SessionBegins"
                                    },
                                    "type": "enum"
                                  },
                                  "typeName": {
                                    "typeId": "MessageType",
                                    "fernFilepath": {
                                      "allParts": [],
                                      "packagePath": []
                                    },
                                    "name": "MessageType"
                                  },
                                  "type": "named"
                                }
                              }
                            },
                            {
                              "name": {
                                "name": "message_type",
                                "wireValue": "message_type"
                              },
                              "originalTypeDeclaration": {
                                "typeId": "SessionBegins",
                                "fernFilepath": {
                                  "allParts": [],
                                  "packagePath": []
                                },
                                "name": "SessionBegins"
                              },
                              "value": {
                                "jsonExample": "SessionBegins",
                                "shape": {
                                  "container": {
                                    "literal": {
                                      "string": {
                                        "original": "SessionBegins"
                                      },
                                      "type": "string"
                                    },
                                    "type": "literal"
                                  },
                                  "type": "container"
                                }
                              }
                            },
                            {
                              "name": {
                                "name": "session_id",
                                "wireValue": "session_id"
                              },
                              "originalTypeDeclaration": {
                                "typeId": "SessionBegins",
                                "fernFilepath": {
                                  "allParts": [],
                                  "packagePath": []
                                },
                                "name": "SessionBegins"
                              },
                              "value": {
                                "jsonExample": "session_id",
                                "shape": {
                                  "primitive": {
                                    "string": {
                                      "original": "session_id"
                                    },
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              }
                            },
                            {
                              "name": {
                                "name": "expires_at",
                                "wireValue": "expires_at"
                              },
                              "originalTypeDeclaration": {
                                "typeId": "SessionBegins",
                                "fernFilepath": {
                                  "allParts": [],
                                  "packagePath": []
                                },
                                "name": "SessionBegins"
                              },
                              "value": {
                                "jsonExample": "2024-01-15T09:30:00Z",
                                "shape": {
                                  "primitive": {
                                    "datetime": "2024-01-15T09:30:00.000Z",
                                    "raw": "2024-01-15T09:30:00Z",
                                    "type": "datetime"
                                  },
                                  "type": "primitive"
                                }
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "typeName": {
                          "typeId": "SessionBegins",
                          "fernFilepath": {
                            "allParts": [],
                            "packagePath": []
                          },
                          "name": "SessionBegins"
                        },
                        "type": "named"
                      }
                    },
                    "type": "undiscriminatedUnion"
                  },
                  "typeName": {
                    "typeId": "UserIdSubscribe",
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": "UserIdSubscribe"
                  },
                  "type": "named"
                },
                "type": "reference"
              }
            }
          ],
          "url": "/userId"
        }
      ],
      "v2Examples": {
        "autogeneratedExamples": {},
        "userSpecifiedExamples": {
          "0": {
            "channel": {
              "method": "GET",
              "path": "/{userId}"
            },
            "baseUrl": "/{userId}",
            "environment": "API",
            "pathParameters": {},
            "messages": [
              {
                "type": "publish",
                "body": {
                  "audio_data": "base64-encoded-audio-data"
                }
              },
              {
                "type": "publish",
                "body": {
                  "terminate_session": true
                }
              }
            ]
          }
        }
      }
    }
  },
  "rootPackage": {
    "types": [
      "RedactedAudioResponse",
      "RedactedAudioStatus",
      "SubtitleFormat",
      "WordSearchResponse",
      "WordSearchMatch",
      "WordSearchTimestamp",
      "Timestamp",
      "CreateTranscriptOptionalParameters",
      "CreateTranscriptParameters",
      "SummaryModel",
      "SummaryType",
      "TranscriptBoostParam",
      "TranscriptCustomSpelling",
      "TranscriptUtterance",
      "SubstitutionPolicy",
      "PiiPolicy",
      "TranscriptLanguageCode",
      "TranscriptStatus",
      "Transcript",
      "Chapter",
      "Entity",
      "EntityType",
      "SentimentAnalysisResult",
      "Sentiment",
      "TopicDetectionResult",
      "ContentSafetyLabel",
      "ContentSafetyLabelResult",
      "SeverityScoreSummary",
      "AutoHighlightsResultWrapper",
      "AutoHighlightResult",
      "TranscriptWord",
      "TranscriptSentence",
      "SentencesResponse",
      "TranscriptParagraph",
      "ParagraphsResponse",
      "PageDetails",
      "TranscriptListParameters",
      "TranscriptListItem",
      "TranscriptList",
      "UploadedFile",
      "CreateRealtimeTemporaryTokenParameters",
      "RealtimeTemporaryTokenResponse",
      "AudioIntelligenceModelStatus",
      "PurgeLemurRequestDataResponse",
      "LemurBaseResponse",
      "LemurSummaryResponse",
      "LemurQuestionAnswerResponse",
      "LemurQuestionAnswer",
      "LemurActionItemsResponse",
      "LemurTaskResponse",
      "LemurBaseParameters",
      "LemurSummaryParameters",
      "LemurQuestionAnswerParameters",
      "LemurQuestion",
      "LemurActionItemsParameters",
      "LemurTaskParameters",
      "LemurModel",
      "Error",
      "SendAudio",
      "TerminateSession",
      "SessionBegins",
      "SessionTerminated",
      "RealtimeError",
      "PartialTranscript",
      "FinalTranscript",
      "RealtimeBaseMessage",
      "RealtimeMessage",
      "RealtimeError",
      "MessageType",
      "RealtimeTranscriptType",
      "RealtimeTranscript",
      "SessionBegins",
      "SessionTerminated",
      "RealtimeBaseTranscript",
      "PartialTranscript",
      "FinalTranscript",
      "Word",
      "AudioData",
      "TerminateSession"
    ],
    "errors": [],
    "subpackages": [
      "subpackage_files",
      "subpackage_transcript",
      "subpackage_realtime",
      "subpackage_lemur",
      "subpackage_userId"
    ],
    "fernFilepath": {
      "allParts": [],
      "packagePath": []
    },
    "hasEndpointsInTree": false
  },
  "idempotencyHeaders": [],
  "pathParameters": [],
  "errorDiscriminationStrategy": {
    "type": "statusCode"
  },
  "variables": [],
  "serviceTypeReferenceInfo": {
    "sharedTypes": [],
    "typesReferencedOnlyByService": {}
  },
  "sdkConfig": {
    "hasFileDownloadEndpoints": false,
    "hasPaginatedEndpoints": false,
    "hasStreamingEndpoints": false,
    "isAuthMandatory": true,
    "platformHeaders": {
      "language": "",
      "sdkName": "",
      "sdkVersion": ""
    }
  },
  "audiences": []
}