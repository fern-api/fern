{
    "schemes": ["https"],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "The following describe Paradex API.\n",
        "title": "Paradex REST API",
        "contact": {},
        "version": "1.95.00"
    },
    "host": "api.prod.paradex.trade",
    "basePath": "/v1",
    "paths": {
        "/account": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account information",
                "operationId": "get-account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subaccount address",
                        "name": "subaccount_address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/history": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account history",
                "operationId": "get-account-history",
                "parameters": [
                    {
                        "enum": [
                            "pnl",
                            "value",
                            "volume"
                        ],
                        "type": "string",
                        "description": "Type of data",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountHistoricalDataResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/info": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Return account info of current account",
                "operationId": "get-accounts-info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.GetAccountsInfoResponse"
                        }
                    }
                }
            }
        },
        "/account/margin": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get margin configuration for an account and market",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account margin configuration",
                "operationId": "get-account-margin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market Name - example: BTC-USD-PERP",
                        "name": "market",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.GetAccountMarginConfigsResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/margin/{market}": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Set margin configuration for an account and market",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Set margin configuration",
                "operationId": "upsert-account-margin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market Name - example: BTC-USD-PERP",
                        "name": "market",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Margin Configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AccountMarginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateAccountMarginConfigResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/profile": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account profile information",
                "operationId": "get-account-profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountProfileResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/profile/market_max_slippage/{market}": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account max_slippage\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Updates account max slippage for a specific market",
                "operationId": "update-account-market-max-slippage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "{base_currency}-{quote_currency}-{kind}",
                        "name": "market",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update market max slippage request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateAccountMaxSlippageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountProfileResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/profile/referral_code": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Updates account profile fields",
                "operationId": "update-account-profile-referral-code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountProfileResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/profile/username": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's account information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Updates account profile username fields",
                "operationId": "update-account-profile-username",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountProfileResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/settings": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get account settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account settings",
                "operationId": "get-account-settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountSettingsResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/settings/trading_value_display": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "To set user preferences for the trading value display on the UI, Spot Notional will use spot price, and Market Value will use the market price.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Updates account trading value display",
                "operationId": "update-account-trading-value-display",
                "parameters": [
                    {
                        "description": "Update account trading value display request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateTradingValueDisplayRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AccountProfileResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/account/subaccounts": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's list of sub-accounts\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List sub-accounts of current account",
                "operationId": "get-sub-accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.GetSubAccountsResponse"
                        }
                    }
                }
            }
        },
        "/algo/orders": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get current user all open algo orders\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algos"
                ],
                "summary": "Get open algo orders",
                "operationId": "get-open-algo-orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.AlgoOrderResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Create a new algo order\n\n### TWAP\n\nTWAP orders break a large trade into smaller ones over time to reduce market impact:\n- Sub-orders are placed every 30 seconds.\n- Order duration is between 30 and 86,400 seconds, in multiples of 30.\n- Supported sub order type: MARKET\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algos"
                ],
                "summary": "Create algo order",
                "operationId": "create-algo-order",
                "parameters": [
                    {
                        "description": "Algo order content",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AlgoOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.AlgoOrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/algo/orders-history": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get current user algo orders filtered on attributes\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algos"
                ],
                "summary": "Get algo orders history",
                "operationId": "get-algo-orders-history",
                "parameters": [
                    {
                        "type": "string",
                        "example": "client-id",
                        "description": "Unique ID of client generating the order",
                        "name": "client_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Market for the order",
                        "name": "market",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "BUY",
                            "SELL"
                        ],
                        "type": "string",
                        "description": "Order side",
                        "name": "side",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "OPEN",
                            "CLOSED",
                            "NEW"
                        ],
                        "type": "string",
                        "description": "Order status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LIMIT",
                            "MARKET",
                            "STOP_LIMIT",
                            "STOP_MARKET",
                            "STOP_LOSS_LIMIT",
                            "STOP_LOSS_MARKET",
                            "TAKE_PROFIT_LIMIT",
                            "TAKE_PROFIT_MARKET"
                        ],
                        "type": "string",
                        "description": "Order type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.AlgoOrderResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/algo/orders/{algo_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get an algo order by id. Only return algo order in `OPEN` or `NEW` status.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algos"
                ],
                "summary": "Get algo order by id",
                "operationId": "get-algo-order-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algo ID",
                        "name": "algo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AlgoOrderResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Cancel an existing algo order by id\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algos"
                ],
                "summary": "Cancel algo order by id",
                "operationId": "cancel-algo-order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algo ID",
                        "name": "algo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/auth": {
            "post": {
                "description": "Authenticate using signed payload to get a JWT for usage in other endpoints\n\nThere are multiple valid headers required to be sent as part of this request.\n\nFor onboarding examples, refer to `go`, `java` and `python` code in [code-samples](https://github.com/tradeparadex/code-samples).\n\n#### StarkNet Message Hash and Signature\n\nInspired by [EIP-712](https://eips.ethereum.org/EIPS/eip-712),\n(a standard for hashing and signing typed structured data)\nthe encoding of an off-chain message is defined as:\n\n`signed_data = Enc[PREFIX_MESSAGE, domain_separator, account, hash_struct(message)]`\n\nwhere:\n\n- `PREFIX_MESSAGE = \"StarkNet Message\"`\n- `domain_separator` is defined as the `hash_struct` of the StarkNetDomain struct:\n  * Struct contains: `name`, `chainId` and `version`\n  * `chainId` is can be obtained calling `GET /system/config`\n- `account` is the StarkNet account address\n- The message to be hashed is represented as a struct\n  * `hash_struct(message) = Enc[type_hash(MyStruct), Enc[param1], ..., Enc[paramN]]`\n  * where `type_hash` is defined as in EIP-712 (but using `selector` instead of `keccak`)\n  * More details on StarkNet - [Hash Functions](https://docs.starknet.io/architecture-and-concepts/cryptography/#hash_functions)\n\nIn case of more complex structure of object, you have to work in the spirit of EIP-712.\nThis json structure has 4 mandatory items: `types`, `primaryType`, `domain` and `message`.\nThese items are designed to be able to be an interface with a wallet.\nAt sign request, the wallet will display:\n\n- `message` will be displayed at the bottom of the wallet display,\nshowing clearly (not in hex) the message to sign.\nIts structure has to be in accordance with the type listed in primaryType,\ndefined in types.\n- `domain` will be shown above the message.\nIts structure has to be in accordance with `StarkNetDomain`.\n\nThe predefined types that you can use :\n\n- `felt` : for an integer on 251 bits.\n- `felt*` : for an array of felt.\n- `string` : for a shortString of 31 ASCII characters max.\n- `selector` : for a name of a smart contract function.\n- `merkletree` : for a Root of a Merkle tree, calculated with the provided data.\n\nSpecification details: [Signing transactions and off-chain messages](https://github.com/argentlabs/argent-x/discussions/14)\n\n#### Message Hash Sample Code\n\nFor a complete `message_hash` example, refer to `python` code in [code-samples](https://github.com/tradeparadex/code-samples).\n\n\u003e Examples:\n\n```json\n{\n  \"paradex-signature-expiration\": 1682364556,\n  \"paradex-starknet-account\": \"0x129f3dc1b8962d8a87abc692424c78fda963ade0e1cd17bf3d1c26f8d41ee7a\",\n  \"paradex-starknet-signature\": [\n    \"1381323390094460587764867648394252677239485992175346764030313478865763678671\",\n    \"396490140510115262427678549757564216013606350105112805717359873954984880589\"\n  ],\n  \"paradex-timestamp\": 1681759756\n}\n```\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get JWT",
                "operationId": "auth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Starknet account",
                        "name": "PARADEX-STARKNET-ACCOUNT",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starknet signature",
                        "name": "PARADEX-STARKNET-SIGNATURE",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Timestamp when the signature was created",
                        "name": "PARADEX-TIMESTAMP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Timestamp when signature expires (default 30 min | Max 1 week)",
                        "name": "PARADEX-SIGNATURE-EXPIRATION",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Optional flag to authorize all isolated market accounts linked to the main account. When set to true, the returned JWT will grant trading access to all isolated accounts. Defaults to false if not specified",
                        "name": "PARADEX-AUTHORIZE-ISOLATED-MARKETS",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AuthResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/balance": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Respond with requester's own balances\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List balances",
                "operationId": "get-balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.BalanceResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/bbo/{market}": {
            "get": {
                "description": "Get the best bid/ask for the given market\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "Get market bbo",
                "operationId": "get-bbo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market symbol - ex: BTC-USD-PERP",
                        "name": "market",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.BBOResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/fills": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "This API returns a list of matched orders (i.e. fills) that have been sent to\r\nchain for settlement.\r\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List fills",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Market symbol",
                        "name": "market",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.FillResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/funding/data": {
            "get": {
                "description": "List historical funding data by market\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "Funding data history",
                "operationId": "get-funding-data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Market for which funding payments are queried",
                        "name": "market",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.FundingDataResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/funding/payments": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "List funding payments made by/to the requester's account\n\n*Funding payments are periodic payments between traders to make the perpetual\nfutures contract price is close to the index price.*\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Funding payments history",
                "operationId": "get-funding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Market for which funding payments are queried",
                        "name": "market",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.FundingPayment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/insurance": {
            "get": {
                "description": "Get insurance fund account's information\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Insurance"
                ],
                "summary": "Get insurance fund account information",
                "operationId": "get-insurance-fund",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.InsuranceAccountResp"
                        }
                    }
                }
            }
        },
        "/liquidations": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Retrieves a list of liquidations associated to the requester's account\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Liquidations"
                ],
                "summary": "List liquidations",
                "operationId": "get-liquidations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.LiquidationResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/markets": {
            "get": {
                "description": "Get markets static data component\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "List available markets",
                "operationId": "get-markets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market Name - example: BTC-USD-PERP",
                        "name": "market",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.MarketResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/markets/klines": {
            "get": {
                "description": "Klines for a symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "OHLCV for a symbol",
                "operationId": "markets-klines",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "end time for klines in milliseconds",
                        "name": "end_at",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "last",
                            "mark",
                            "underlying"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "PriceKindLast",
                            "PriceKindMark",
                            "PriceKindUnderlying"
                        ],
                        "description": "Which price to use for the klines",
                        "name": "price_kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "resolution in minutes: 1, 3, 5, 15, 30, 60",
                        "name": "resolution",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "start time for klines in milliseconds",
                        "name": "start_at",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Symbol of the market pair",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/markets/summary": {
            "get": {
                "description": "Get markets dynamic data component\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "List available markets summary",
                "operationId": "get-markets-summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Name of the market for which summary is requested (for all available markets use ALL)",
                        "name": "market",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.MarketSummaryResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/onboarding": {
            "post": {
                "description": "Onboarding verifies that the caller owns the StarkNet address and enters them\ninto the database. This call is idempotent.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Onboarding",
                "operationId": "onboarding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum account used to onboard",
                        "name": "PARADEX-ETHEREUM-ACCOUNT",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starknet address",
                        "name": "PARADEX-STARKNET-ACCOUNT",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starknet signature",
                        "name": "PARADEX-STARKNET-SIGNATURE",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Onboarding user public_key",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.Onboarding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An empty response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orderbook/{market}": {
            "get": {
                "description": "Get snapshot of the orderbook for the given market\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Markets"
                ],
                "summary": "Get market orderbook",
                "operationId": "get-orderbook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market symbol - ex: BTC-USD-PERP",
                        "name": "market",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Depth",
                        "name": "depth",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.AskBidArray"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get current user all open orders\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get open orders",
                "operationId": "get-open-orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market symbol, ex: BTC-USD-PERP",
                        "name": "market",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.OrderResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Submits a new order to Paradex.\n\nReturns an order status object with a unique order `id` assigned by Paradex. This\norder `id` serves as the primary identifier for the order.\n\nThe REST API performs basic validation and queues the order for risk checks\n(order `status`=`NEW`).\n\nOnce validation and risk checks are successful, the order is sent to the matching\nengine. The matching engine processes the order and updates the status to `OPEN`\nif the order is resting. If the order is fully filled or cannot be processed, the\nstatus changes to `CLOSED` and a `cancel_reason` code is provided (e.g., fully\nfilled or no liquidity).\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create order",
                "operationId": "orders-new",
                "parameters": [
                    {
                        "description": "Order content",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.OrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel all open orders",
                "operationId": "orders-cancel-all",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market to cancel orders for",
                        "name": "market",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orders-history": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get current user orders filtered on attributes\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders",
                "operationId": "get-orders",
                "parameters": [
                    {
                        "type": "string",
                        "example": "client-id",
                        "description": "Unique ID of client generating the order",
                        "name": "client_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Market for the order",
                        "name": "market",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "BUY",
                            "SELL"
                        ],
                        "type": "string",
                        "description": "Order side",
                        "name": "side",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "OPEN",
                            "CLOSED",
                            "NEW"
                        ],
                        "type": "string",
                        "description": "Order status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LIMIT",
                            "MARKET",
                            "STOP_LIMIT",
                            "STOP_MARKET",
                            "STOP_LOSS_LIMIT",
                            "STOP_LOSS_MARKET",
                            "TAKE_PROFIT_LIMIT",
                            "TAKE_PROFIT_MARKET"
                        ],
                        "type": "string",
                        "description": "Order type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.OrderResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orders/batch": {
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Place a batch of orders\n\n+ Valid batch size is between 1-10 order(s)\n+ If basic validation(including signature) fails - all orders will be rejected.\n+ Orders are queued for risk checking independently and failure of one order\n  doesn't affect processing of another order.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create batch of orders",
                "operationId": "orders-new-batch",
                "parameters": [
                    {
                        "description": "Order content",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/requests.OrderRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.BatchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Queues cancellation for multiple orders by providing identifiers in a batch.\n\nThe request body can contain either or both of:\n- `order_ids`: Array of order IDs assigned by Paradex\n- `client_order_ids`: Array of client-assigned order IDs\n\n```json\n{\n  \"order_ids\": [\"order-id-1\", \"order-id-2\"],\n  \"client_order_ids\": [\"client-id-1\", \"client-id-2\"]\n}\n```\n\nReturns a 200 OK status code with detailed results for each order:\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"order-id-1\",\n      \"client_id\": \"client-id-X\",\n      \"account\": \"account-1\",\n      \"market\": \"BTC-USD-PERP\",\n      \"status\": \"QUEUED_FOR_CANCELLATION\"\n    },\n    {\n      \"id\": \"order-id-2\",\n      \"client_id\": \"client-id-Y\",\n      \"account\": \"account-1\",\n      \"market\": \"ETH-USD-PERP\",\n      \"status\": \"ALREADY_CLOSED\"\n    },\n    {\n      \"id\": \"order-id-3\",\n      \"client_id\": \"client-id-1\",\n      \"account\": \"account-1\",\n      \"market\": \"BTC-USD-PERP\",\n      \"status\": \"QUEUED_FOR_CANCELLATION\"\n    },\n    {\n      \"client_id\": \"client-id-2\",\n      \"status\": \"NOT_FOUND\"\n    }\n  ]\n}\n```\n\nEach result includes:\n- `id`: Order ID (if the order was found)\n- `client_id`: Client order ID (if available)\n- `account`: Account that owns the order\n- `market`: Market of the order\n- `status`: One of:\n  + `QUEUED_FOR_CANCELLATION`: Order was successfully queued for cancellation\n  + `ALREADY_CLOSED`: Order was already in a closed state\n  + `NOT_FOUND`: The order with the provided ID/client ID was not found\n\nConfirmation of cancellation will be sent via websocket or can be verified from\nGET /orders/:id endpoint.\n\nOrders that are already in a CLOSED state will be included in the response with\nstatus \"ALREADY_CLOSED\".\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel batch of orders by order IDs or client order IDs",
                "operationId": "orders-cancel-batch",
                "parameters": [
                    {
                        "description": "Order IDs or Client Order IDs to cancel",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CancelOrderBatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cancellation results",
                        "schema": {
                            "$ref": "#/definitions/responses.CancelOrderBatchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orders/by_client_id/{client_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get an order by client id. Only returns orders in `OPEN` status.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by client id",
                "operationId": "orders-get-by-client-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Order Id",
                        "name": "client_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.OrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel open order by client order id",
                "operationId": "orders-cancel-by-client-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Order Id",
                        "name": "client_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/orders/{order_id}": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get an order by id. Only return orders in `OPEN` or `NEW` status.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order",
                "operationId": "orders-get",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Id",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.OrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Modify an existing open order by changing its price and/or size.\nThe modified order maintains its original order ID.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Modify order",
                "operationId": "orders-modify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Id",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Modify Order Request",
                        "name": "order_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ModifyOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.OrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Queues a cancellation for a specific order identified by its order ID (assigned by\nParadex).\n\nReturns a 204 No Content status code with no response body which means the order\nhas been queued for cancellation.\n\nConfirmation of cancellation will be sent via websocket or can be retried from\nGET /orders/:id endpoint.\n\nOrders that are already in a CLOSED state cannot be canceled.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel order",
                "operationId": "orders-cancel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Id",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/positions": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get all positions owned by current user\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List open positions",
                "operationId": "get-positions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.PositionResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/referrals/qr-code": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Returns a QR code image containing the user's referral link",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Get Referral QR Code",
                "operationId": "get-referral-qr-code",
                "responses": {
                    "200": {
                        "description": "QR code image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/referrals/summary": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get latest referee data for requester's account\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Get account referral details",
                "operationId": "get-referrals-summary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.ReferralsResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/system/config": {
            "get": {
                "description": "Get clearing and settlement layer config for Paradex\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SystemConfigResponse"
                        }
                    }
                }
            }
        },
        "/system/state": {
            "get": {
                "description": "Get the current state of the Paradex system\n\n## Response\n\n```json\n{\"status\": \"ok\"}\n```\n\n### Status Values\n\n- `ok`: Fully operational\n- `maintenance`: Trading unavailable\n- `cancel_only`: Only cancellations allowed\n\nCheck before trading operations.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system state",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SystemStateResponse"
                        }
                    }
                }
            }
        },
        "/system/time": {
            "get": {
                "description": "Get the current time in the Paradex\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system time (unix milliseconds)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SystemTimeResponse"
                        }
                    }
                }
            }
        },
        "/tradebusts": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Returns paginated tradebusts for the account.\n\nA tradebust occurs when a fill fails to clear and settle on the Paradex Chain.\nThe results of busted fills are not reflected on-chain and are reverted in the\ncloud (off-chain position cache).\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List tradebusts",
                "operationId": "tradebusts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.TradebustResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/trades": {
            "get": {
                "description": "Returns a paginated list of trades that have occurred on the exchange.\nDefault page size is 100, maxium is 5000.\n\nThe `side` field in the response indicates the taker side of the trade.\n\n### Example\n\n```http\nGET /trades?market=BTC-USD-PERP\u0026page_size=100\n```\n\nThis endpoint supports cursor-based pagination for efficiently traversing large\nresult sets.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trades"
                ],
                "summary": "Trade tape",
                "operationId": "trades",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "BTC-USD-PERP",
                        "description": "Market name",
                        "name": "market",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.TradeResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Retrieves a list of transactions initiated by the user\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "List transactions",
                "operationId": "transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.TransactionResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/transfers": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "List account's transfers, i.e. deposits and withdrawals",
                "operationId": "get-transfers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns the ‘next’ paginated page.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End Time (unix time millisecond)",
                        "name": "end_at",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Limit the number of responses in the page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start Time (unix time millisecond)",
                        "name": "start_at",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "AVAILABLE",
                            "COMPLETED",
                            "FAILED"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.PaginatedAPIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.TransferResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults": {
            "get": {
                "description": "Get list of available vaults.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vaults",
                "operationId": "vaults-get",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.VaultResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new vault by providing deployment parameters.Current user will\nbe set as owner of the account and a new sub-account will be deployed as\nvault operator.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Create vault",
                "operationId": "vaults-create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Onboarded by prdx:0xa123456789",
                        "name": "PARADEX-PARENT-ACCOUNT",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starknet signature",
                        "name": "PARADEX-STARKNET-SIGNATURE",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starknet address",
                        "name": "PARADEX-STARKNET-ACCOUNT",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account derivation path - m/44'/9004'/0'/0/1",
                        "name": "PARADEX-STARKNET-ACCOUNT-DERIVATION-PATH",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Vault parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateVault"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.VaultResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/account-summary": {
            "get": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Get current user summary metrics for all vaults or for the single vault\nspecified by address. User metrics are only returned if the current user\nis a depositor for the vault.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault account summary",
                "operationId": "vaults-get-account-summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.VaultAccountSummaryResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/balance": {
            "get": {
                "description": "Get spot balance of a vault\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault balances",
                "operationId": "vaults-get-balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Vault Strategy Address",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.BalanceResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/config": {
            "get": {
                "description": "Get vaults global configuration.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vaults config",
                "operationId": "vaults-get-config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.VaultsConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/history": {
            "get": {
                "description": "Get PnL and Account value historical timeseries for the given vault.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault historical data",
                "operationId": "vaults-get-historical-data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Vault Strategy Address",
                        "name": "strategy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pnl",
                            "value",
                            "price"
                        ],
                        "type": "string",
                        "description": "Type of data",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "alltime",
                            "1h",
                            "8h"
                        ],
                        "type": "string",
                        "description": "Resolution of data",
                        "name": "resolution",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.VaultHistoricalDataResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/positions": {
            "get": {
                "description": "Get positions opened by the given vault.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault positions",
                "operationId": "vaults-get-positions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Vault Strategy Address",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.PositionResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/summary": {
            "get": {
                "description": "Get vaults summary metrics for all vaults or for the single vault specified by address.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault summary",
                "operationId": "vaults-get-summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.VaultSummaryResp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        },
        "/vaults/transfers": {
            "get": {
                "description": "Get deposits and withdrawals related to the given vault.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Get vault transfers",
                "operationId": "vaults-get-transfers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vault Address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.APIResults"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/responses.TransferResult"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.AccountMarginRequest": {
            "type": "object",
            "required": [
                "leverage",
                "margin_type"
            ],
            "properties": {
                "leverage": {
                    "description": "Leverage value (1 up to market's maximum leverage)",
                    "type": "integer",
                    "example": 10
                },
                "margin_type": {
                    "description": "Margin type (CROSS or ISOLATED)",
                    "type": "string",
                    "example": "CROSS"
                },
                "on_behalf_of_account": {
                    "description": "Specify sub-account ID to set margin for, if not provided, it will be the main account itself",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                }
            }
        },
        "requests.AlgoOrderRequest": {
            "type": "object",
            "required": [
                "algo_type",
                "duration_seconds",
                "market",
                "side",
                "signature",
                "signature_timestamp",
                "size",
                "type"
            ],
            "properties": {
                "algo_type": {
                    "description": "Algo type, required for algo orders creation",
                    "type": "string",
                    "example": "TWAP"
                },
                "duration_seconds": {
                    "description": "Duration in seconds for which the algo order will be running, required for algo orders creation",
                    "type": "integer",
                    "example": 3600
                },
                "market": {
                    "description": "Market for which order is created",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "side": {
                    "description": "Algo order side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ],
                    "example": "MARKET"
                },
                "signature": {
                    "description": "Order Payload signed with STARK Private Key",
                    "type": "string"
                },
                "signature_timestamp": {
                    "description": "Timestamp of order creation, used for signature verification",
                    "type": "integer"
                },
                "size": {
                    "description": "Size of the algo order",
                    "type": "string",
                    "example": "1.213"
                },
                "type": {
                    "description": "Algo order type, only MARKET is supported",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderType"
                        }
                    ]
                }
            }
        },
        "requests.CancelOrderBatchRequest": {
            "type": "object",
            "properties": {
                "client_order_ids": {
                    "description": "List of client order IDs to cancel",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"client-id-1\"",
                        "\"client-id-2\"]"
                    ]
                },
                "order_ids": {
                    "description": "List of order IDs to cancel",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"order-id-1\"",
                        "\"order-id-2\"]"
                    ]
                }
            }
        },
        "requests.CreateVault": {
            "type": "object",
            "properties": {
                "deposit_tx_signature": {
                    "description": "Initial deposit transfer by vault owner",
                    "type": "string",
                    "example": "["
                },
                "description": {
                    "description": "Description for the vault",
                    "type": "string",
                    "example": "My vault description"
                },
                "lockup_period": {
                    "description": "User's deposits lockup period in days",
                    "type": "integer",
                    "example": 1
                },
                "max_tvl": {
                    "description": "Max TVL locked by the Vault, if any. 0 for unlimited",
                    "type": "integer",
                    "example": 1000000
                },
                "name": {
                    "description": "Unique name for the vault",
                    "type": "string",
                    "example": "MyVault"
                },
                "profit_share": {
                    "description": "Vault owner profit share (percentage)",
                    "type": "integer",
                    "example": 10
                },
                "public_key": {
                    "description": "Public key of vault operator",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                }
            }
        },
        "requests.ModifyOrderRequest": {
            "type": "object",
            "required": [
                "id",
                "market",
                "price",
                "side",
                "signature",
                "signature_timestamp",
                "size",
                "type"
            ],
            "properties": {
                "id": {
                    "description": "Order ID to be modified",
                    "type": "string"
                },
                "market": {
                    "description": "Market for which order is modified",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "on_behalf_of_account": {
                    "description": "ID corresponding to the configured isolated margin account.  Only for isolated margin orders",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "price": {
                    "description": "Existing or modified price of the order",
                    "type": "string",
                    "example": "29500.12"
                },
                "side": {
                    "description": "Existing side of the order",
                    "type": "string",
                    "example": "BUY"
                },
                "signature": {
                    "description": "Order Payload signed with STARK Private Key",
                    "type": "string"
                },
                "signature_timestamp": {
                    "description": "Timestamp of order creation, used for signature verification",
                    "type": "integer"
                },
                "size": {
                    "description": "Existing or modified size of the order",
                    "type": "string",
                    "example": "1.213"
                },
                "type": {
                    "description": "Existing type of the order",
                    "type": "string",
                    "example": "LIMIT"
                }
            }
        },
        "requests.Onboarding": {
            "type": "object",
            "properties": {
                "public_key": {
                    "description": "Public key of the user being onboarded.",
                    "type": "string",
                    "example": "0x3d9f2b2e5f50c1aade60ca540368cd7490160f41270c192c05729fe35b656a9"
                },
                "referral_code": {
                    "description": "Referral code of the user who referred the user being onboarded.",
                    "type": "string",
                    "example": "cryptofox8"
                }
            }
        },
        "requests.OrderRequest": {
            "type": "object",
            "required": [
                "instruction",
                "market",
                "price",
                "side",
                "signature",
                "signature_timestamp",
                "size",
                "type"
            ],
            "properties": {
                "client_id": {
                    "description": "Unique client assigned ID for the order",
                    "type": "string",
                    "maxLength": 64,
                    "example": "123454321"
                },
                "flags": {
                    "description": "Order flags, allow flag: REDUCE_ONLY",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.OrderFlag"
                    }
                },
                "instruction": {
                    "description": "Order Instruction, GTC, IOC or POST_ONLY if empty GTC",
                    "type": "string"
                },
                "market": {
                    "description": "Market for which order is created",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "on_behalf_of_account": {
                    "description": "ID corresponding to the configured isolated margin account.  Only for isolated margin orders",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "price": {
                    "description": "Order price",
                    "type": "string",
                    "example": "29500.12"
                },
                "recv_window": {
                    "description": "Order will be created if it is received by API within RecvWindow milliseconds from signature timestamp, minimum is 10 milliseconds",
                    "type": "integer"
                },
                "side": {
                    "description": "Order side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ]
                },
                "signature": {
                    "description": "Order Payload signed with STARK Private Key",
                    "type": "string"
                },
                "signature_timestamp": {
                    "description": "Timestamp of order creation, used for signature verification",
                    "type": "integer"
                },
                "size": {
                    "description": "Size of the order",
                    "type": "string",
                    "example": "1.213"
                },
                "stp": {
                    "description": "Self Trade Prevention, EXPIRE_MAKER, EXPIRE_TAKER or EXPIRE_BOTH, if empty EXPIRE_TAKER",
                    "type": "string"
                },
                "trigger_price": {
                    "description": "Trigger price for stop order",
                    "type": "string"
                },
                "type": {
                    "description": "Order type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderType"
                        }
                    ]
                }
            }
        },
        "requests.PriceKind": {
            "type": "string",
            "enum": [
                "last",
                "mark",
                "underlying"
            ],
            "x-enum-varnames": [
                "PriceKindLast",
                "PriceKindMark",
                "PriceKindUnderlying"
            ]
        },
        "requests.UpdateAccountMaxSlippageRequest": {
            "type": "object",
            "required": [
                "max_slippage"
            ],
            "properties": {
                "max_slippage": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateTradingValueDisplayRequest": {
            "type": "object",
            "required": [
                "trading_value_display"
            ],
            "properties": {
                "trading_value_display": {
                    "type": "string"
                }
            }
        },
        "responses.APIResults": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Array of results",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "responses.AccountHistoricalDataResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Ordered list of datapoints",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "timestamps": {
                    "description": "Ordered list of timestamps",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "responses.AccountInfoResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Starknet address of the account",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "created_at": {
                    "description": "Account creation time",
                    "type": "integer",
                    "example": 1681471234972
                },
                "derivation_path": {
                    "description": "Account derivation path used to derive the account, if a sub-account",
                    "type": "string",
                    "example": "m/44'/9004'/0'/0/1"
                },
                "fees": {
                    "$ref": "#/definitions/responses.Fees"
                },
                "isolated_market": {
                    "description": "Isolated market for the account",
                    "type": "string",
                    "example": "ETHUSD-PERP"
                },
                "kind": {
                    "description": "Account kind",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.AccountKind"
                        }
                    ],
                    "example": "main"
                },
                "parent_account": {
                    "description": "Starknet address of the parent account",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d"
                },
                "public_key": {
                    "description": "Starknet public key",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d"
                },
                "username": {
                    "description": "Username of the account",
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "responses.AccountKind": {
            "type": "string",
            "enum": [
                "",
                "main",
                "subaccount",
                "vault_operator",
                "vault_sub_operator"
            ],
            "x-enum-varnames": [
                "AccountKindUnspecified",
                "AccountKindMain",
                "AccountKindSubaccount",
                "AccountKindVaultOperator",
                "AccountKindVaultSubOperator"
            ]
        },
        "responses.AccountMarginEntry": {
            "type": "object",
            "properties": {
                "isolated_margin_leverage": {
                    "description": "Isolated margin leverage",
                    "type": "integer"
                },
                "leverage": {
                    "description": "Leverage value",
                    "type": "integer"
                },
                "margin_type": {
                    "description": "Margin type (CROSS/ISOLATED)",
                    "type": "string"
                },
                "market": {
                    "description": "Market symbol",
                    "type": "string"
                }
            }
        },
        "responses.AccountProfileResp": {
            "type": "object",
            "properties": {
                "discord": {
                    "$ref": "#/definitions/responses.DiscordProfile"
                },
                "is_username_private": {
                    "type": "boolean",
                    "example": true
                },
                "market_max_slippage": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nfts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.Nft"
                    }
                },
                "programs_eligibility": {
                    "$ref": "#/definitions/responses.ProgramsEligibility"
                },
                "referral": {
                    "$ref": "#/definitions/responses.ReferralConfigResp"
                },
                "referral_code": {
                    "type": "string",
                    "example": "cryptofox8"
                },
                "referred_by": {
                    "type": "string",
                    "example": "maxDegen"
                },
                "twitter": {
                    "$ref": "#/definitions/responses.TwitterProfile"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "responses.AccountSettingsResp": {
            "type": "object",
            "properties": {
                "trading_value_display": {
                    "type": "string",
                    "example": "SPOT_NOTIONAL"
                }
            }
        },
        "responses.AccountSummaryResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "User's starknet account",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "account_value": {
                    "description": "Current account value [with unrealized P\u0026Ls]",
                    "type": "string",
                    "example": "136285.06918911"
                },
                "free_collateral": {
                    "description": "Free collateral available (Account value in excess of Initial Margin required)",
                    "type": "string",
                    "example": "73276.47229774"
                },
                "initial_margin_requirement": {
                    "description": "Amount required to open trade for the existing positions",
                    "type": "string",
                    "example": "63008.59689218"
                },
                "maintenance_margin_requirement": {
                    "description": "Amount required to maintain exisiting positions",
                    "type": "string",
                    "example": "31597.25239676"
                },
                "margin_cushion": {
                    "description": "Acc value in excess of maintenance margin required",
                    "type": "string",
                    "example": "104687.8167956"
                },
                "seq_no": {
                    "description": "Unique increasing number (non-sequential) that is assigned to this account update. Can be used to deduplicate multiple feeds",
                    "type": "integer",
                    "example": 1681471234972000000
                },
                "settlement_asset": {
                    "description": "Settlement asset for the account",
                    "type": "string",
                    "example": "USDC"
                },
                "status": {
                    "description": "Status of the acc - like ACTIVE, LIQUIDATION",
                    "type": "string",
                    "example": "ACTIVE"
                },
                "total_collateral": {
                    "description": "User's total collateral",
                    "type": "string",
                    "example": "123003.62047353"
                },
                "updated_at": {
                    "description": "Account last updated time",
                    "type": "integer",
                    "example": 1681471234972
                }
            }
        },
        "responses.AlgoOrderResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account identifier (user's account address)",
                    "type": "string",
                    "example": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512"
                },
                "algo_type": {
                    "description": "Algo type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.AlgoType"
                        }
                    ],
                    "example": "TWAP"
                },
                "avg_fill_price": {
                    "description": "Average fill price of the order",
                    "type": "string",
                    "example": "26000"
                },
                "cancel_reason": {
                    "description": "Reason for algo cancellation if it was closed by cancel",
                    "type": "string",
                    "example": "NOT_ENOUGH_MARGIN"
                },
                "created_at": {
                    "description": "Algo creation time",
                    "type": "integer",
                    "example": 1681493746016
                },
                "end_at": {
                    "description": "Algo end time",
                    "type": "integer",
                    "example": 1681493746016
                },
                "id": {
                    "description": "Unique algo identifier",
                    "type": "string",
                    "example": "123456"
                },
                "last_updated_at": {
                    "description": "Algo last update time.  No changes once status=CLOSED",
                    "type": "integer",
                    "example": 1681493746016
                },
                "market": {
                    "description": "Market to which algo belongs",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "remaining_size": {
                    "description": "Remaining size of the algo",
                    "type": "string",
                    "example": "0"
                },
                "side": {
                    "description": "Algo side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ]
                },
                "size": {
                    "description": "Algo size",
                    "type": "string",
                    "example": "0.05"
                },
                "status": {
                    "description": "Algo status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderStatus"
                        }
                    ]
                }
            }
        },
        "responses.AlgoType": {
            "type": "string",
            "enum": [
                "",
                "TWAP"
            ],
            "x-enum-varnames": [
                "AlgoTypeUnspecified",
                "AlgoTypeTWAP"
            ]
        },
        "responses.ApiError": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "any additional data related to the error"
                },
                "error": {
                    "description": "unique immutable string identifier for specific error",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.ErrorCode"
                        }
                    ],
                    "example": "NOT_ONBOARDED"
                },
                "message": {
                    "description": "detailed description of error and how to address it",
                    "type": "string",
                    "example": "User has never called /onboarding endpoint"
                }
            }
        },
        "responses.AskBidArray": {
            "type": "object",
            "properties": {
                "asks": {
                    "description": "List of Ask sizes and prices",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "bids": {
                    "description": "List of Bid sizes and prices",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "last_updated_at": {
                    "description": "Last update to the orderbook in milliseconds",
                    "type": "integer",
                    "example": 1681462770114
                },
                "market": {
                    "description": "Market name",
                    "type": "string",
                    "example": "ETH-USD-PERP"
                },
                "seq_no": {
                    "description": "Sequence number of the orderbook",
                    "type": "integer",
                    "example": 20784
                }
            }
        },
        "responses.AuthResp": {
            "type": "object",
            "properties": {
                "jwt_token": {
                    "description": "Authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCJ9.eyJ0eXAiOiJhdCtKV1QiLCJleHAiOjE2ODE0NTI5MDcsImlhdCI6MTY4MTQ1MjYwNywiaXNzIjoiUGFyYWRleCBzdGFnaW5nIiwic3ViIjoiMHg0OTVkMmViNTIzNmExMmI4YjRhZDdkMzg0OWNlNmEyMDNjZTIxYzQzZjQ3M2MyNDhkZmQ1Y2U3MGQ5NDU0ZmEifQ.BPihIbGhnnsuPlReqC9x12JFXldpswg5EdA6tTiDQm-_UHaRz_8RfVBqWc2fPN6CzFsXTq7GowZu-2qMxPvZK_fGcxEhTp2k1r8MUxowlUIT4vPu2scCwrsyIujlCAwS"
                }
            }
        },
        "responses.BBOResp": {
            "type": "object",
            "properties": {
                "ask": {
                    "description": "Best ask price",
                    "type": "string",
                    "example": "30130.15"
                },
                "ask_size": {
                    "description": "Best ask size",
                    "type": "string",
                    "example": "0.05"
                },
                "bid": {
                    "description": "Best bid price",
                    "type": "string",
                    "example": "30112.22"
                },
                "bid_size": {
                    "description": "Best bid size",
                    "type": "string",
                    "example": "0.04"
                },
                "last_updated_at": {
                    "description": "Last update to the orderbook in milliseconds",
                    "type": "integer",
                    "example": 1681493939981
                },
                "market": {
                    "description": "Symbol of the market",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "seq_no": {
                    "description": "Sequence number of the orderbook",
                    "type": "integer",
                    "example": 20784
                }
            }
        },
        "responses.BalanceResp": {
            "type": "object",
            "properties": {
                "last_updated_at": {
                    "description": "Balance last updated time",
                    "type": "integer",
                    "example": 1681462770114
                },
                "size": {
                    "description": "Balance amount of settlement token (includes deposits, withdrawals, realized PnL, realized funding, and fees)",
                    "type": "string",
                    "example": "123003.620"
                },
                "token": {
                    "description": "Name of the token",
                    "type": "string",
                    "example": "USDC"
                }
            }
        },
        "responses.BatchResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ErrorResponse"
                    }
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.OrderResp"
                    }
                }
            }
        },
        "responses.BridgedToken": {
            "type": "object",
            "properties": {
                "decimals": {
                    "type": "integer"
                },
                "l1_bridge_address": {
                    "type": "string"
                },
                "l1_token_address": {
                    "type": "string"
                },
                "l2_bridge_address": {
                    "type": "string"
                },
                "l2_token_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "responses.CancelOrderBatchResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of cancellation results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.CancelOrderResult"
                    }
                }
            }
        },
        "responses.CancelOrderResult": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account that owns the order",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client order ID",
                    "type": "string"
                },
                "id": {
                    "description": "Order ID",
                    "type": "string"
                },
                "market": {
                    "description": "Market of the order",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the cancellation: QUEUED_FOR_CANCELLATION, ALREADY_CLOSED, NOT_FOUND",
                    "type": "string"
                }
            }
        },
        "responses.Delta1CrossMarginParams": {
            "type": "object",
            "properties": {
                "imf_base": {
                    "description": "Initial Margin Base",
                    "type": "string",
                    "example": "0.11"
                },
                "imf_factor": {
                    "description": "Initial Margin Factor, always 0.",
                    "type": "string",
                    "example": "0"
                },
                "imf_shift": {
                    "description": "Initial Margin Shift, unused, always 0.",
                    "type": "string",
                    "example": "0"
                },
                "mmf_factor": {
                    "description": "Maintenance Margin Factor",
                    "type": "string",
                    "example": "0.51"
                }
            }
        },
        "responses.DiscordProfile": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorCode": {
            "type": "string",
            "enum": [
                "VALIDATION_ERROR",
                "BINDING_ERROR",
                "INTERNAL_ERROR",
                "NOT_FOUND",
                "SERVICE_UNAVAILABLE",
                "INVALID_REQUEST_PARAMETER",
                "ORDER_ID_NOT_FOUND",
                "ORDER_IS_CLOSED",
                "ORDER_IS_NOT_OPEN",
                "INVALID_ORDER_SIZE",
                "CLIENT_ORDER_ID_NOT_FOUND",
                "DUPLICATED_CLIENT_ID",
                "INVALID_PRICE_PRECISION",
                "INVALID_SYMBOL",
                "INVALID_TOKEN",
                "INVALID_ETHEREUM_ADDRESS",
                "INVALID_ETHEREUM_SIGNATURE",
                "INVALID_STARKNET_ADDRESS",
                "INVALID_STARKNET_SIGNATURE",
                "STARKNET_SIGNATURE_VERIFICATION_FAILED",
                "BAD_STARKNET_REQUEST",
                "ETHEREUM_SIGNER_MISMATCH",
                "ETHEREUM_HASH_MISMATCH",
                "NOT_ONBOARDED",
                "INVALID_TIMESTAMP",
                "INVALID_SIGNATURE_EXPIRATION",
                "ACCOUNT_NOT_FOUND",
                "INVALID_ORDER_SIGNATURE",
                "PUBLIC_KEY_INVALID",
                "UNAUTHORIZED_ETHEREUM_ADDRESS",
                "UNAUTHORIZED_ERROR",
                "ETHEREUM_ADDRESS_ALREADY_ONBOARDED",
                "MARKET_NOT_FOUND",
                "ALLOWLIST_ENTRY_NOT_FOUND",
                "USERNAME_IN_USE",
                "GEO_IP_BLOCK",
                "ETHEREUM_ADDRESS_BLOCKED",
                "PROGRAM_NOT_FOUND",
                "PROGRAM_NOT_SUPPORTED",
                "INVALID_DASHBOARD",
                "MARKET_NOT_OPEN",
                "INVALID_REFERRAL_CODE",
                "REQUEST_NOT_ALLOWED",
                "PARENT_ADDRESS_ALREADY_ONBOARDED",
                "INVALID_PARENT_ACCOUNT",
                "INVALID_VAULT_OPERATOR_CHAIN",
                "VAULT_OPERATOR_ALREADY_ONBOARDED",
                "VAULT_NAME_IN_USE",
                "VAULT_NOT_FOUND",
                "VAULT_STRATEGY_NOT_FOUND",
                "VAULT_LIMIT_REACHED",
                "BATCH_SIZE_OUT_OF_RANGE",
                "ISOLATED_MARKET_ACCOUNT_MISMATCH",
                "NO_ACCESS_TO_MARKET",
                "POINTS_SUMMARY_NOT_FOUND",
                "ALGO_ID_NOT_FOUND",
                "INVALID_DERIVATION_PATH",
                "PROFILE_STATS_NOT_FOUND",
                "INVALID_CHAIN",
                "INVALID_LAYERSWAP_SWAP",
                "SOCIAL_USERNAME_IN_USE",
                "INVALID_OAUTH_REQUEST"
            ],
            "x-enum-comments": {
                "ErrorCodeString_SignerMismatch": "#nosec G101"
            },
            "x-enum-varnames": [
                "ErrorCode_Validation",
                "ErrorCode_Binding",
                "ErrorCode_InternalError",
                "ErrorCode_NotFound",
                "ErrorCode_ServiceUnavailable",
                "ErrorCodeString_InvalidParameter",
                "ErrorCodeString_OrderIdNotFound",
                "ErrorCodeString_OrderIsClosed",
                "ErrorCodeString_OrderIsNotOpen",
                "ErrorCodeString_InvalidSizeForModifyOrder",
                "ErrorCodeString_ClientOrderIdNotFound",
                "ErrorCodeString_DuplicatedClientOrderId",
                "ErrorCodeString_InvalidPricePrecision",
                "ErrorCodeString_InvalidSymbol",
                "ErrorCodeString_InvalidToken",
                "ErrorCodeString_BadEthAddress",
                "ErrorCodeString_BadEthSignature",
                "ErrorCodeString_BadStarkNetAddress",
                "ErrorCodeString_BadStarkNetSignature",
                "ErrorCodeString_StarknetSigVerificationFailed",
                "ErrorCodeString_BadFormatStarknetCall",
                "ErrorCodeString_SignerMismatch",
                "ErrorCodeString_HashMismatch",
                "ErrorCodeString_NotOnboarded",
                "ErrorCodeString_BadTimestamp",
                "ErrorCodeString_BadExpiration",
                "ErrorCodeString_AccountIdNotFound",
                "ErrorCodeString_InvalidOrderSignature",
                "ErrorCodeString_BadPublicKey",
                "ErrorCodeString_UnauthorizedEthAddress",
                "ErrorCodeString_UnauthorizedError",
                "ErrorCodeString_EthAddressAlreadyOnboarded",
                "ErrorCodeString_MarketNotFound",
                "ErrorCodeString_AllowlistNotFound",
                "ErrorCodeString_UsernameInUse",
                "ErrorCodeString_GeoIPBlock",
                "ErrorCodeString_EthAddressBlocked",
                "ErrorCodeString_ProgramNotFound",
                "ErrorCodeString_ProgramNotSupported",
                "ErrorCodeString_InvalidDashboard",
                "ErrorCodeString_MarketNotOpen",
                "ErrorCodeString_InvalidReferralCode",
                "ErrorCodeString_RequestNotAllowed",
                "ErrorCodeString_ParentAddressAlreadyOnboarded",
                "ErrorCodeString_InvalidParentAccount",
                "ErrorCodeString_InvalidVaultOperatorChain",
                "ErrorCodeString_VaultOperatorAlreadyOnboarded",
                "ErrorCodeString_VaultNameInUse",
                "ErrorCodeString_VaultNotFound",
                "ErrorCodeString_VaultStrategyNotFound",
                "ErrorCodeString_VaultLimitReached",
                "ErrorCodeString_BatchSizeOutOfRange",
                "ErrorCodeString_IsolatedMarketAccountMismatch",
                "ErrorCodeString_NoAccessToMarket",
                "ErrorCodeString_PointsSummaryNotFound",
                "ErrorCodeString_AlgoIdNotFound",
                "ErrorCodeString_InvalidDerivationPath",
                "ErrorCodeString_ProfileStatsNotFound",
                "ErrorCodeString_InvalidChain",
                "ErrorCodeString_InvalidLayerswapSwap",
                "ErrorCodeString_SocialUsernameInUse",
                "ErrorCodeString_InvalidOAuthRequest"
            ]
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/responses.ErrorCode"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.Fees": {
            "type": "object",
            "properties": {
                "commission_rate": {
                    "description": "multiplier used to calculate the commission amount from fee",
                    "type": "string",
                    "example": "0.0001"
                },
                "discount_rate": {
                    "description": "multiplier used to calculate the fee rate after discount, if discount is 10%, then discount_rate is 0.9",
                    "type": "string",
                    "example": "0.9"
                },
                "maker_rate": {
                    "type": "string",
                    "example": "0.0001"
                },
                "option_maker_rate": {
                    "type": "string",
                    "example": "0.0001"
                },
                "option_taker_rate": {
                    "type": "string",
                    "example": "0.0001"
                },
                "taker_rate": {
                    "type": "string",
                    "example": "0.0001"
                }
            }
        },
        "responses.FillResult": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account that made the fill",
                    "type": "string",
                    "example": "0x978532f46745d7fFBa1CDfa1D8C8202D09D89C9E"
                },
                "client_id": {
                    "description": "Unique client assigned ID for the order",
                    "type": "string",
                    "example": "x1234"
                },
                "created_at": {
                    "description": "Fill time",
                    "type": "integer",
                    "example": 1681375176910
                },
                "fee": {
                    "description": "Fee paid by the user",
                    "type": "string",
                    "example": "7.56"
                },
                "fee_currency": {
                    "description": "Asset that fee is charged in",
                    "type": "string",
                    "example": "USDC"
                },
                "fill_type": {
                    "description": "Fill type, can be FILL, LIQUIDATION or TRANSFER",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.FillType"
                        }
                    ],
                    "example": "FILL"
                },
                "id": {
                    "description": "Unique string ID of fill per FillType",
                    "type": "string",
                    "example": "8615262148007718462"
                },
                "liquidity": {
                    "description": "Maker or Taker",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.TraderRole"
                        }
                    ]
                },
                "market": {
                    "description": "Market name",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "order_id": {
                    "description": "Order ID",
                    "type": "string",
                    "example": "1681462103821101699438490000"
                },
                "price": {
                    "description": "Price at which order was filled",
                    "type": "string",
                    "example": "30000.12"
                },
                "realized_funding": {
                    "description": "Realized funding of the fill",
                    "type": "string",
                    "example": "7.56"
                },
                "realized_pnl": {
                    "description": "Realized PnL of the fill",
                    "type": "string",
                    "example": "7.56"
                },
                "remaining_size": {
                    "description": "Remaining size of the order",
                    "type": "string",
                    "example": "0.5"
                },
                "side": {
                    "description": "Taker side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ]
                },
                "size": {
                    "description": "Size of the fill",
                    "type": "string",
                    "example": "0.5"
                },
                "underlying_price": {
                    "description": "Underlying asset price of the fill (spot price)",
                    "type": "string",
                    "example": "7.56"
                }
            }
        },
        "responses.FillType": {
            "type": "string",
            "enum": [
                "LIQUIDATION",
                "TRANSFER",
                "FILL",
                "SETTLE_MARKET"
            ],
            "x-enum-varnames": [
                "FillTypeLiquidation",
                "FillTypeTransfer",
                "FillTypeFill",
                "FillTypeSettleMarket"
            ]
        },
        "responses.FundingDataResult": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp in milliseconds when the funding data was created",
                    "type": "integer"
                },
                "funding_index": {
                    "description": "Current funding index value as a decimal string",
                    "type": "string"
                },
                "funding_premium": {
                    "description": "Current funding premium as a decimal string",
                    "type": "string"
                },
                "funding_rate": {
                    "description": "Current funding rate as a decimal string",
                    "type": "string"
                },
                "market": {
                    "description": "Market represents the market identifier",
                    "type": "string"
                }
            }
        },
        "responses.FundingPayment": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account that made the payment",
                    "type": "string"
                },
                "created_at": {
                    "description": "Funding payment time",
                    "type": "integer",
                    "example": 1681375481000
                },
                "fill_id": {
                    "description": "Fill id that triggered the payment (if any)",
                    "type": "string",
                    "example": "8615262148007718462"
                },
                "id": {
                    "description": "Unique string ID to identify the payment",
                    "type": "string",
                    "example": "1681375578221101699352320000"
                },
                "index": {
                    "description": "Value of the funding index at the time of payment",
                    "type": "string",
                    "example": "-2819.53434361"
                },
                "market": {
                    "description": "Market against which payment is made",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "payment": {
                    "description": "Payment amount in settlement asset",
                    "type": "string",
                    "example": "34.4490622"
                }
            }
        },
        "responses.GetAccountMarginConfigsResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account ID",
                    "type": "string"
                },
                "configs": {
                    "description": "List of margin configurations per market",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.AccountMarginEntry"
                    }
                }
            }
        },
        "responses.GetAccountsInfoResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.AccountInfoResponse"
                    }
                }
            }
        },
        "responses.GetSubAccountsResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.AccountInfoResponse"
                    }
                }
            }
        },
        "responses.Greeks": {
            "type": "object",
            "properties": {
                "delta": {
                    "description": "Market Delta",
                    "type": "string",
                    "example": "1"
                },
                "gamma": {
                    "description": "Market Gamma",
                    "type": "string",
                    "example": "0.2"
                },
                "rho": {
                    "description": "Market Rho",
                    "type": "string",
                    "example": "0.2"
                },
                "vanna": {
                    "description": "Market Vanna",
                    "type": "string",
                    "example": "0.2"
                },
                "vega": {
                    "description": "Market Vega",
                    "type": "string",
                    "example": "0.2"
                },
                "volga": {
                    "description": "Market Volga",
                    "type": "string",
                    "example": "0.2"
                }
            }
        },
        "responses.InsuranceAccountResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Starknet address of the Insurance fund",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "account_value": {
                    "description": "Total account value of insurance fund",
                    "type": "string",
                    "example": "136285.069"
                },
                "settlement_asset": {
                    "description": "Settlement Asset for the account",
                    "type": "string",
                    "example": "USDC"
                },
                "updated_at": {
                    "description": "Account last updated time",
                    "type": "integer",
                    "example": 1681471234972
                }
            }
        },
        "responses.LiquidationResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Liquidation created at timestamp",
                    "type": "integer",
                    "example": 1697213130097
                },
                "id": {
                    "description": "Liquidation transaction hash",
                    "type": "string",
                    "example": "0x123456789"
                }
            }
        },
        "responses.MarketChainDetails": {
            "type": "object",
            "properties": {
                "collateral_address": {
                    "description": "Collateral address",
                    "type": "string",
                    "example": "0x1234567890"
                },
                "contract_address": {
                    "description": "Contract address",
                    "type": "string",
                    "example": "0x1234567890"
                },
                "fee_account_address": {
                    "description": "Fee account address",
                    "type": "string",
                    "example": "0x1234567890"
                },
                "fee_maker": {
                    "description": "Maker fee",
                    "type": "string",
                    "example": "0.01"
                },
                "fee_taker": {
                    "description": "Taker fee",
                    "type": "string",
                    "example": "0.01"
                },
                "insurance_fund_address": {
                    "description": "Insurance fund address",
                    "type": "string",
                    "example": "0x1234567890"
                },
                "liquidation_fee": {
                    "description": "Liquidation fee",
                    "type": "string",
                    "example": "0.01"
                },
                "oracle_address": {
                    "description": "Oracle address",
                    "type": "string",
                    "example": "0x1234567890"
                },
                "symbol": {
                    "description": "Market symbol",
                    "type": "string",
                    "example": "ETH-USD-PERP"
                }
            }
        },
        "responses.MarketKind": {
            "type": "string",
            "enum": [
                "",
                "cross",
                "isolated"
            ],
            "x-enum-varnames": [
                "MarketKindUnknown",
                "MarketKindCross",
                "MarketKindIsolated"
            ]
        },
        "responses.MarketResp": {
            "type": "object",
            "properties": {
                "asset_kind": {
                    "description": "Type of asset",
                    "type": "string",
                    "enum": [
                        "PERP",
                        "PERP_OPTION"
                    ],
                    "example": "PERP"
                },
                "base_currency": {
                    "description": "Base currency of the market",
                    "type": "string",
                    "example": "ETH"
                },
                "chain_details": {
                    "description": "Chain details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.MarketChainDetails"
                        }
                    ]
                },
                "clamp_rate": {
                    "description": "Clamp rate",
                    "type": "string",
                    "example": "0.05"
                },
                "delta1_cross_margin_params": {
                    "description": "Delta1 Cross margin parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.Delta1CrossMarginParams"
                        }
                    ]
                },
                "expiry_at": {
                    "description": "Market expiry time",
                    "type": "integer",
                    "example": 0
                },
                "funding_period_hours": {
                    "description": "Funding period in hours",
                    "type": "number",
                    "example": 8
                },
                "interest_rate": {
                    "description": "Interest rate",
                    "type": "string",
                    "example": "0.01"
                },
                "iv_bands_width": {
                    "description": "IV Bands Width",
                    "type": "string",
                    "example": "0.05"
                },
                "market_kind": {
                    "description": "Market's margin mode",
                    "enum": [
                        "cross",
                        "isolated"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.MarketKind"
                        }
                    ],
                    "example": "cross"
                },
                "max_funding_rate": {
                    "description": "Max funding rate",
                    "type": "string",
                    "example": "0.05"
                },
                "max_funding_rate_change": {
                    "description": "Max funding rate change",
                    "type": "string",
                    "example": "0.0005"
                },
                "max_open_orders": {
                    "description": "Max open orders",
                    "type": "integer",
                    "example": 100
                },
                "max_order_size": {
                    "description": "Maximum order size in base currency",
                    "type": "string",
                    "example": "100"
                },
                "max_tob_spread": {
                    "description": "The maximum TOB spread allowed to apply funding rate changes",
                    "type": "string",
                    "example": "0.2"
                },
                "min_notional": {
                    "description": "Minimum order notional in USD. For futures: size*mark_price, for options: size*spot_price",
                    "type": "string",
                    "example": "3"
                },
                "open_at": {
                    "description": "Market open time in milliseconds",
                    "type": "integer",
                    "example": 0
                },
                "option_cross_margin_params": {
                    "description": "Option Cross margin parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.PerpetualOptionCrossMarginParams"
                        }
                    ]
                },
                "option_type": {
                    "description": "Type of option",
                    "type": "string",
                    "enum": [
                        "PUT",
                        "CALL"
                    ],
                    "example": "PUT"
                },
                "oracle_ewma_factor": {
                    "description": "Oracle EWMA factor",
                    "type": "string",
                    "example": "0.2"
                },
                "order_size_increment": {
                    "description": "Minimum size increment for base currency",
                    "type": "string",
                    "example": "0.001"
                },
                "position_limit": {
                    "description": "Position limit in base currency",
                    "type": "string",
                    "example": "500"
                },
                "price_bands_width": {
                    "description": "Price Bands Width, 0.05 means 5% price deviation allowed from mark price",
                    "type": "string",
                    "example": "0.05"
                },
                "price_feed_id": {
                    "description": "Price feed id. Pyth price account used to price underlying asset",
                    "type": "string",
                    "example": "GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU"
                },
                "price_tick_size": {
                    "description": "Minimum price increment of the market in USD",
                    "type": "string",
                    "example": "0.01"
                },
                "quote_currency": {
                    "description": "Quote currency of the market",
                    "type": "string",
                    "example": "USD"
                },
                "settlement_currency": {
                    "description": "Settlement currency of the market",
                    "type": "string",
                    "example": "USDC"
                },
                "strike_price": {
                    "description": "Strike price for option market",
                    "type": "string",
                    "example": "66500"
                },
                "symbol": {
                    "description": "Market symbol",
                    "type": "string",
                    "example": "ETH-USD-PERP"
                },
                "tags": {
                    "description": "Market tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "MEME",
                        "DEFI"
                    ]
                }
            }
        },
        "responses.MarketSummaryResp": {
            "type": "object",
            "properties": {
                "ask": {
                    "description": "Best ask price",
                    "type": "string",
                    "example": "30130.15"
                },
                "ask_iv": {
                    "description": "Ask implied volatility, for options",
                    "type": "string",
                    "example": "0.2"
                },
                "bid": {
                    "description": "Best bid price",
                    "type": "string",
                    "example": "30112.22"
                },
                "bid_iv": {
                    "description": "Bid implied volatility, for options",
                    "type": "string",
                    "example": "0.2"
                },
                "created_at": {
                    "description": "Market summary creation time",
                    "type": "integer"
                },
                "delta": {
                    "description": "Deprecated: Use greeks.delta instead",
                    "type": "string",
                    "example": "1"
                },
                "funding_rate": {
                    "description": "[8 hour funding rate](https://docs.paradex.trade/risk-system/funding-mechanism#funding-rate)",
                    "type": "string",
                    "example": "0.3"
                },
                "future_funding_rate": {
                    "description": "Future funding rate, for options",
                    "type": "string",
                    "example": "0.3"
                },
                "greeks": {
                    "description": "Greeks (delta, gamma, vega). Partial for perpetual futures.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.Greeks"
                        }
                    ]
                },
                "last_iv": {
                    "description": "Last traded price implied volatility, for options",
                    "type": "string",
                    "example": "0.2"
                },
                "last_traded_price": {
                    "description": "Last traded price",
                    "type": "string",
                    "example": "30109.53"
                },
                "mark_iv": {
                    "description": "Mark implied volatility, for options",
                    "type": "string",
                    "example": "0.2"
                },
                "mark_price": {
                    "description": "[Mark price](https://docs.paradex.trade/risk-system/mark-price-calculation)",
                    "type": "string",
                    "example": "29799.70877478"
                },
                "open_interest": {
                    "description": "Open interest in base currency",
                    "type": "string",
                    "example": "6100048.3"
                },
                "price_change_rate_24h": {
                    "description": "Price change rate in the last 24 hours",
                    "type": "string",
                    "example": "0.05"
                },
                "symbol": {
                    "description": "Market symbol",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "total_volume": {
                    "description": "Lifetime total traded volume in USD",
                    "type": "string",
                    "example": "141341.0424"
                },
                "underlying_price": {
                    "description": "Underlying asset price (spot price)",
                    "type": "string",
                    "example": "29876.3"
                },
                "volume_24h": {
                    "description": "24 hour volume in USD",
                    "type": "string",
                    "example": "47041.0424"
                }
            }
        },
        "responses.Nft": {
            "type": "object",
            "properties": {
                "collection_address": {
                    "type": "string"
                },
                "collection_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "responses.OrderFlag": {
            "type": "string",
            "enum": [
                "REDUCE_ONLY",
                "STOP_CONDITION_BELOW_TRIGGER",
                "STOP_CONDITION_ABOVE_TRIGGER"
            ],
            "x-enum-varnames": [
                "FlagsReduceOnly",
                "FlagsStopConditionBelowTrigger",
                "FlagsStopConditionAboveTrigger"
            ]
        },
        "responses.OrderInstruction": {
            "type": "string",
            "enum": [
                "GTC",
                "POST_ONLY",
                "IOC"
            ],
            "x-enum-varnames": [
                "OrderInstructionGTC",
                "OrderInstructionPostOnly",
                "OrderInstructionIOC"
            ]
        },
        "responses.OrderResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Paradex Account",
                    "type": "string",
                    "example": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512x"
                },
                "avg_fill_price": {
                    "description": "Average fill price of the order",
                    "type": "string",
                    "example": "26000"
                },
                "cancel_reason": {
                    "description": "Reason for order cancellation if it was closed by cancel",
                    "type": "string",
                    "example": "NOT_ENOUGH_MARGIN"
                },
                "client_id": {
                    "description": "Client order id provided by the client at order creation",
                    "type": "string",
                    "example": "x1234"
                },
                "created_at": {
                    "description": "Order creation time",
                    "type": "integer",
                    "example": 1681493746016
                },
                "flags": {
                    "description": "Order flags, allow flag: REDUCE_ONLY",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.OrderFlag"
                    }
                },
                "id": {
                    "description": "Unique order identifier generated by Paradex",
                    "type": "string",
                    "example": "123456"
                },
                "instruction": {
                    "description": "Execution instruction for order matching",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderInstruction"
                        }
                    ],
                    "example": "GTC"
                },
                "last_updated_at": {
                    "description": "Order last update time.  No changes once status=CLOSED",
                    "type": "integer",
                    "example": 1681493746016
                },
                "market": {
                    "description": "Market",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "price": {
                    "description": "Order price. 0 for MARKET orders",
                    "type": "string",
                    "example": "26000"
                },
                "published_at": {
                    "description": "Timestamp in milliseconds when order was sent to the client",
                    "type": "integer",
                    "example": 1681493746016
                },
                "received_at": {
                    "description": "Timestamp in milliseconds when order was received by API service",
                    "type": "integer",
                    "example": 1681493746016
                },
                "remaining_size": {
                    "description": "Remaining size of the order",
                    "type": "string",
                    "example": "0"
                },
                "request_info": {
                    "description": "Additional request information for orders",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.RequestInfo"
                        }
                    ]
                },
                "seq_no": {
                    "description": "Unique increasing number (non-sequential) that is assigned to this order update and changes on every order update. Can be used to deduplicate multiple feeds. WebSocket and REST responses use independently generated seq_no per event.",
                    "type": "integer",
                    "example": 1681471234972000000
                },
                "side": {
                    "description": "Order side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ]
                },
                "size": {
                    "description": "Order size",
                    "type": "string",
                    "example": "0.05"
                },
                "status": {
                    "description": "Order status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderStatus"
                        }
                    ]
                },
                "stp": {
                    "description": "Self Trade Prevention mode",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.STPMode"
                        }
                    ],
                    "example": "EXPIRE_MAKER"
                },
                "timestamp": {
                    "description": "Order signature timestamp",
                    "type": "integer",
                    "example": 1681493746016
                },
                "trigger_price": {
                    "description": "Trigger price for stop order",
                    "type": "string",
                    "example": "26000"
                },
                "type": {
                    "description": "Order type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderType"
                        }
                    ]
                }
            }
        },
        "responses.OrderSide": {
            "type": "string",
            "enum": [
                "BUY",
                "SELL"
            ],
            "x-enum-varnames": [
                "OrderSideBuy",
                "OrderSideSell"
            ]
        },
        "responses.OrderStatus": {
            "type": "string",
            "enum": [
                "NEW",
                "UNTRIGGERED",
                "OPEN",
                "CLOSED"
            ],
            "x-enum-varnames": [
                "OrderStatusNew",
                "OrderStatusUntriggered",
                "OrderStatusOpen",
                "OrderStatusClosed"
            ]
        },
        "responses.OrderType": {
            "type": "string",
            "enum": [
                "MARKET",
                "LIMIT",
                "STOP_LIMIT",
                "STOP_MARKET",
                "TAKE_PROFIT_LIMIT",
                "TAKE_PROFIT_MARKET",
                "STOP_LOSS_MARKET",
                "STOP_LOSS_LIMIT"
            ],
            "x-enum-varnames": [
                "OrderTypeMarket",
                "OrderTypeLimit",
                "OrderTypeStopLimit",
                "OrderTypeStopMarket",
                "OrderTypeTakeProfitLimit",
                "OrderTypeTakeProfitMarket",
                "OrderTypeStopLossMarket",
                "OrderTypeStopLossLimit"
            ]
        },
        "responses.PaginatedAPIResults": {
            "type": "object",
            "properties": {
                "next": {
                    "description": "The pointer to fetch next set of records (null if there are no records left)",
                    "type": "string",
                    "example": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N="
                },
                "prev": {
                    "description": "The pointer to fetch previous set of records (null if there are no records left)",
                    "type": "string",
                    "example": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD=="
                },
                "results": {
                    "description": "Array of paginated results",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "responses.PerpetualOptionCrossMarginParams": {
            "type": "object",
            "properties": {
                "imf": {
                    "$ref": "#/definitions/responses.PerpetualOptionMarginParams"
                },
                "mmf": {
                    "$ref": "#/definitions/responses.PerpetualOptionMarginParams"
                }
            }
        },
        "responses.PerpetualOptionMarginParams": {
            "type": "object",
            "properties": {
                "long_itm": {
                    "description": "Margin fraction for long ITM options",
                    "type": "string",
                    "example": "0.2"
                },
                "premium_multiplier": {
                    "description": "Multiplier for margin fraction for premium",
                    "type": "string",
                    "example": "1.2"
                },
                "short_itm": {
                    "description": "Margin fraction for short ITM options",
                    "type": "string",
                    "example": "0.4"
                },
                "short_otm": {
                    "description": "Margin fraction for short OTM options",
                    "type": "string",
                    "example": "0.25"
                },
                "short_put_cap": {
                    "description": "Cap for margin fraction for short put options",
                    "type": "string",
                    "example": "0.5"
                }
            }
        },
        "responses.PositionResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account ID of the position",
                    "type": "string"
                },
                "average_entry_price": {
                    "description": "Average entry price",
                    "type": "string",
                    "example": "29001.34"
                },
                "average_entry_price_usd": {
                    "description": "Average entry price in USD",
                    "type": "string",
                    "example": "29001.34"
                },
                "average_exit_price": {
                    "description": "Average exit price",
                    "type": "string",
                    "example": "29001.34"
                },
                "cached_funding_index": {
                    "description": "Position cached funding index",
                    "type": "string",
                    "example": "1234.3"
                },
                "closed_at": {
                    "description": "Position closed time",
                    "type": "integer",
                    "example": 1681493939981
                },
                "cost": {
                    "description": "Position cost",
                    "type": "string",
                    "example": "-10005.4623"
                },
                "cost_usd": {
                    "description": "Position cost in USD",
                    "type": "string",
                    "example": "-10005.4623"
                },
                "created_at": {
                    "description": "Position creation time",
                    "type": "integer",
                    "example": 1681493939981
                },
                "id": {
                    "description": "Unique string ID for the position",
                    "type": "string",
                    "example": "1234234"
                },
                "last_fill_id": {
                    "description": "Last fill ID to which the position is referring",
                    "type": "string",
                    "example": "1234234"
                },
                "last_updated_at": {
                    "description": "Position last update time",
                    "type": "integer",
                    "example": 1681493939981
                },
                "leverage": {
                    "description": "Leverage of the position",
                    "type": "string"
                },
                "liquidation_price": {
                    "description": "Liquidation price of the position",
                    "type": "string"
                },
                "market": {
                    "description": "Market for position",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "realized_positional_funding_pnl": {
                    "description": "Realized Funding PnL for the position. Reset to 0 when position is closed or flipped.",
                    "type": "string",
                    "example": "12.234"
                },
                "realized_positional_pnl": {
                    "description": "Realized PnL including both positional PnL and funding payments. Reset to 0 when position is closed or flipped.",
                    "type": "string",
                    "example": "-123.23"
                },
                "seq_no": {
                    "description": "Unique increasing number (non-sequential) that is assigned to this position update. Can be used to deduplicate multiple feeds",
                    "type": "integer",
                    "example": 1681471234972000000
                },
                "side": {
                    "description": "Position Side : Long or Short",
                    "type": "string",
                    "enum": [
                        "SHORT",
                        "LONG"
                    ]
                },
                "size": {
                    "description": "Size of the position with sign (positive if long or negative if short)",
                    "type": "string",
                    "example": "-0.345"
                },
                "status": {
                    "description": "Status of Position : Open or Closed",
                    "type": "string",
                    "enum": [
                        "OPEN",
                        "CLOSED"
                    ]
                },
                "unrealized_funding_pnl": {
                    "description": "Unrealized running funding P\u0026L for the position",
                    "type": "string",
                    "example": "12.234"
                },
                "unrealized_pnl": {
                    "description": "Unrealized P\u0026L of the position in the quote asset. Includes the unrealized running funding P\u0026L.",
                    "type": "string",
                    "example": "-123.23"
                }
            }
        },
        "responses.ProgramsEligibility": {
            "type": "object",
            "properties": {
                "affiliate": {
                    "type": "string",
                    "example": "Pending"
                },
                "fee": {
                    "type": "string",
                    "example": "True"
                },
                "maker": {
                    "type": "string",
                    "example": "True"
                },
                "referral": {
                    "type": "string",
                    "example": "False"
                }
            }
        },
        "responses.ReferralConfigResp": {
            "type": "object",
            "properties": {
                "commission_rate": {
                    "description": "Commission rate for the referer",
                    "type": "string",
                    "example": "0.1"
                },
                "commission_volume_cap": {
                    "description": "Volume cap for commission",
                    "type": "string",
                    "example": "1000000000"
                },
                "discount_rate": {
                    "description": "Discount rate for the referee",
                    "type": "string",
                    "example": "0.1"
                },
                "discount_volume_cap": {
                    "description": "Volume cap for discount",
                    "type": "string",
                    "example": "30000000"
                },
                "minimum_volume": {
                    "description": "Minimum volume required to be eligible for Program",
                    "type": "string",
                    "example": "0.123"
                },
                "name": {
                    "description": "Referral name",
                    "type": "string",
                    "example": "Referral"
                },
                "points_bonus_rate": {
                    "description": "Points bonus rate for the referee",
                    "type": "string",
                    "example": "0.1"
                },
                "points_bonus_volume_cap": {
                    "description": "Volume cap for points bonus",
                    "type": "string",
                    "example": "1000000000"
                },
                "referral_type": {
                    "description": "Referral type",
                    "type": "string",
                    "example": "Referral"
                }
            }
        },
        "responses.ReferralsResp": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "referee address",
                    "type": "string"
                },
                "created_at": {
                    "description": "Joined at timestamp in milliseconds",
                    "type": "integer",
                    "example": 1715592690488
                },
                "referral_code": {
                    "description": "Referral code used to onboard the referee",
                    "type": "string",
                    "example": "maxdegen01"
                },
                "referral_rewards": {
                    "description": "Total referral commission earned from the fee of referee",
                    "type": "string",
                    "example": "0.123"
                },
                "volume_traded": {
                    "description": "Total volume traded by referee",
                    "type": "string",
                    "example": "0.123"
                }
            }
        },
        "responses.RequestInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Request id",
                    "type": "string"
                },
                "message": {
                    "description": "Error message for failed requests",
                    "type": "string"
                },
                "request_type": {
                    "description": "Type of request (MODIFY_ORDER)",
                    "type": "string"
                },
                "status": {
                    "description": "Status of modify order request",
                    "type": "string"
                }
            }
        },
        "responses.STPMode": {
            "type": "string",
            "enum": [
                "EXPIRE_MAKER",
                "EXPIRE_TAKER",
                "EXPIRE_BOTH"
            ],
            "x-enum-comments": {
                "STPModeExpireBoth": "Expire both maker and taker orders if self cross",
                "STPModeExpireMaker": "Expire maker orders if self cross",
                "STPModeExpireTaker": "Expire taker orders if self cross"
            },
            "x-enum-varnames": [
                "STPModeExpireMaker",
                "STPModeExpireTaker",
                "STPModeExpireBoth"
            ]
        },
        "responses.Strategy": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Contract address of the sub-operator",
                    "type": "string",
                    "example": "0x29464b79b02543ed8746bba6e71c8a15401dd27b7279a5fa2f2fe8e8cdfabb"
                },
                "name": {
                    "description": "Strategy name",
                    "type": "string",
                    "example": "Alpha Strategy"
                }
            }
        },
        "responses.SystemConfigResponse": {
            "type": "object",
            "properties": {
                "block_explorer_url": {
                    "description": "Block explorer URL for the current SN Instance",
                    "type": "string",
                    "example": "https://voyager.testnet.paradex.trade/"
                },
                "bridged_tokens": {
                    "description": "bridged tokens config\nhttps://github.com/starknet-io/starknet-addresses/blob/master/bridged_tokens/goerli.json",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.BridgedToken"
                    }
                },
                "environment": {
                    "description": "Environment of the Paradex Instance",
                    "type": "string",
                    "example": "local"
                },
                "l1_chain_id": {
                    "description": "L1 chain ID value",
                    "type": "string",
                    "example": "5"
                },
                "l1_core_contract_address": {
                    "description": "Address of Starknet L1 core contract",
                    "type": "string",
                    "example": "0x182FE62c57461d4c5Ab1aE6F04f1D51aA1607daf"
                },
                "l1_operator_address": {
                    "description": "Address of Starknet L1 operator",
                    "type": "string",
                    "example": "0x63e762538C70442758Fd622116d817761c94FD6A"
                },
                "l1_withdraw_relayer_address": {
                    "description": "Address of L1 Withdraw Relayer",
                    "type": "string",
                    "example": "0x63e762538C70442758Fd622116d817761c94FD6A"
                },
                "l2_withdraw_relayer_address": {
                    "description": "Address of L2 Withdraw Relayer",
                    "type": "string",
                    "example": "0x63e762538C70442758Fd622116d817761c94FD6A"
                },
                "liquidation_fee": {
                    "description": "Liquidation fee",
                    "type": "string",
                    "example": "0.20"
                },
                "oracle_address": {
                    "description": "Oracle contract address",
                    "type": "string",
                    "example": "0x47c622ce5f7ff7fa17725df596f4f506364e49be0621eb142a75b44ee3689c6"
                },
                "paraclear_account_hash": {
                    "description": "Class hash of the account contract",
                    "type": "string",
                    "example": "0x033434ad846cdd5f23eb73ff09fe6fddd568284a0fb7d1be20ee482f044dabe2"
                },
                "paraclear_account_proxy_hash": {
                    "description": "Proxy hash of the account contract",
                    "type": "string",
                    "example": "0x3530cc4759d78042f1b543bf797f5f3d647cde0388c33734cf91b7f7b9314a9"
                },
                "paraclear_address": {
                    "description": "Paraclear contract address",
                    "type": "string",
                    "example": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7554d"
                },
                "paraclear_decimals": {
                    "type": "integer"
                },
                "partial_liquidation_buffer": {
                    "description": "Partial liquidation buffer. Account value is supposed to be at least this much above the MMR after partial liquidation",
                    "type": "string",
                    "example": "0.2"
                },
                "partial_liquidation_share_increment": {
                    "description": "Minimum granularity of partial liquidation share. The share is rounded up to the nearest multiple of this value",
                    "type": "string",
                    "example": "0.05"
                },
                "starknet_chain_id": {
                    "description": "Chain ID for the Starknet Instance",
                    "type": "string",
                    "example": "SN_CHAIN_ID"
                },
                "starknet_fullnode_rpc_url": {
                    "description": "Full node RPC URL from Starknet",
                    "type": "string",
                    "example": "https://pathfinder.api.testnet.paradex.trade/rpc/v0_7"
                },
                "starknet_gateway_url": {
                    "description": "Feeder Gateway URL from Starknet",
                    "type": "string",
                    "example": "https://potc-testnet-02.starknet.io"
                },
                "universal_deployer_address": {
                    "description": "Universal deployer address",
                    "type": "string",
                    "example": "0x1f3f9d3f1f0b7f3f9f3f9f3f9f3f9f3f9f3f9f3f"
                }
            }
        },
        "responses.SystemStateResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the system",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.SystemStatus"
                        }
                    ],
                    "example": "ok"
                }
            }
        },
        "responses.SystemStatus": {
            "type": "string",
            "enum": [
                "ok",
                "maintenance",
                "cancel_only"
            ],
            "x-enum-varnames": [
                "SystemStatusOk",
                "SystemStatusMaintenance",
                "SystemStatusCancelOnly"
            ]
        },
        "responses.SystemTimeResponse": {
            "type": "object",
            "properties": {
                "server_time": {
                    "description": "Paradex Server time",
                    "type": "string",
                    "example": "1681493415023"
                }
            }
        },
        "responses.TradeResult": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Unix Millisecond timestamp at which trade was done",
                    "type": "integer",
                    "example": 1681497002041
                },
                "id": {
                    "description": "Unique Trade ID per TradeType",
                    "type": "string",
                    "example": "12345643"
                },
                "market": {
                    "description": "Market for which trade was done",
                    "type": "string",
                    "example": "BTC-USD-PERP"
                },
                "price": {
                    "description": "Trade price",
                    "type": "string",
                    "example": "30001.2"
                },
                "side": {
                    "description": "Taker side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.OrderSide"
                        }
                    ]
                },
                "size": {
                    "description": "Trade size",
                    "type": "string",
                    "example": "0.01"
                },
                "trade_type": {
                    "description": "Trade type, can be FILL or LIQUIDATION",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.FillType"
                        }
                    ],
                    "example": "FILL"
                }
            }
        },
        "responses.TradebustResult": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Paradex Account",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "busted_fill_id": {
                    "description": "Unique ID of the busted fill",
                    "type": "string",
                    "example": "12342345"
                },
                "created_at": {
                    "description": "Unix timestamp in milliseconds when bust was created",
                    "type": "integer",
                    "example": 1681497002041
                }
            }
        },
        "responses.TraderRole": {
            "type": "string",
            "enum": [
                "TAKER",
                "MAKER"
            ],
            "x-enum-varnames": [
                "TraderRoleTaker",
                "TraderRoleMaker"
            ]
        },
        "responses.TransactionResponse": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "description": "Timestamp from when the transaction was completed",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamp from when the transaction was sent to blockchain gateway",
                    "type": "integer"
                },
                "hash": {
                    "description": "Tx Hash of the settled trade                                                // Hash of the transaction",
                    "type": "string",
                    "example": "0x445c05d6bfb899e39338440d199971c4d7f4cde7878ed3888df3f716efb8df2"
                },
                "id": {
                    "description": "Unique string ID of the event that triggered the transaction. For example, fill ID or liquidation ID",
                    "type": "string",
                    "example": "12342423"
                },
                "state": {
                    "description": "Status of the transaction on Starknet",
                    "type": "string",
                    "enum": [
                        "ACCEPTED_ON_L1",
                        "ACCEPTED_ON_L2",
                        "NOT_RECEIVED",
                        "RECEIVED",
                        "REJECTED",
                        "REVERTED"
                    ]
                },
                "type": {
                    "description": "Event that triggered the transaction",
                    "type": "string",
                    "enum": [
                        "TRANSACTION_FILL",
                        "TRANSACTION_LIQUIDATE",
                        "TRANSACTION_SETTLE_MARKET"
                    ]
                }
            }
        },
        "responses.TransferBridge": {
            "type": "string",
            "enum": [
                "",
                "STARKGATE",
                "LAYERSWAP",
                "RHINOFI"
            ],
            "x-enum-varnames": [
                "TransferBridgeUnspecified",
                "TransferBridgeStarkgate",
                "TransferBridgeLayerswap",
                "TransferBridgeRhinofi"
            ]
        },
        "responses.TransferDirection": {
            "type": "string",
            "enum": [
                "IN",
                "OUT"
            ],
            "x-enum-varnames": [
                "TransferDirectionIn",
                "TransferDirectionOut"
            ]
        },
        "responses.TransferKind": {
            "type": "string",
            "enum": [
                "DEPOSIT",
                "WITHDRAWAL",
                "UNWINDING",
                "VAULT_DEPOSIT",
                "VAULT_WITHDRAWAL",
                "AUTO_WITHDRAWAL"
            ],
            "x-enum-varnames": [
                "TransferKindDeposit",
                "TransferKindWithdrawal",
                "TransferKindUnwinding",
                "TransferKindVaultDeposit",
                "TransferKindVaultWithdrawal",
                "TransferKindAutoWithdrawal"
            ]
        },
        "responses.TransferResult": {
            "description": "TransferResult",
            "type": "object",
            "properties": {
                "account": {
                    "description": "Starknet Account address",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "amount": {
                    "description": "Transferred amount",
                    "type": "string",
                    "example": "100"
                },
                "auto_withdrawal_fee": {
                    "description": "Fee for auto withdrawal in USDC",
                    "type": "string",
                    "example": "4.5"
                },
                "bridge": {
                    "description": "Bridge used for the transfer",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.TransferBridge"
                        }
                    ],
                    "example": "STARKGATE"
                },
                "counterparty": {
                    "description": "Counterparty address",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "created_at": {
                    "description": "Unix Millis timestamp transfer was created on L2",
                    "type": "integer",
                    "example": 1681497002041
                },
                "direction": {
                    "description": "Transfer direction (IN, OUT)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.TransferDirection"
                        }
                    ],
                    "example": "OUT"
                },
                "external_account": {
                    "description": "External chain account address",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "external_chain": {
                    "description": "External chain used for the transfer",
                    "type": "string",
                    "example": "ETHEREUM"
                },
                "external_txn_hash": {
                    "description": "Transaction hash on the external chain",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "failure_reason": {
                    "description": "Reason for transfer failure",
                    "type": "string",
                    "example": "Gas fee too low"
                },
                "id": {
                    "description": "Transfer auto-generated ID",
                    "type": "string",
                    "example": "123456789"
                },
                "kind": {
                    "description": "Transfer Kind (DEPOSIT, WITHDRAWAL)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.TransferKind"
                        }
                    ],
                    "example": "DEPOSIT"
                },
                "last_updated_at": {
                    "description": "Unix Millis timestamp transfer was last updated on L2",
                    "type": "integer",
                    "example": 1681497002041
                },
                "socialized_loss_factor": {
                    "description": "Withdrawal's socialized loss factor",
                    "type": "string",
                    "example": "0"
                },
                "status": {
                    "description": "Transfer External State (PENDING, AVAILABLE, COMPLETED, FAILED)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.TransferStatus"
                        }
                    ],
                    "example": "PENDING"
                },
                "token": {
                    "description": "Transferred token name",
                    "type": "string",
                    "example": "USDC"
                },
                "txn_hash": {
                    "description": "Transaction hash on Paradex chain",
                    "type": "string",
                    "example": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa"
                },
                "vault_address": {
                    "description": "Vault address",
                    "type": "string",
                    "example": "0x7a3b1c8f9e2d4e6f8a0c2b4d6e8f0a2c4b6e8d0a"
                },
                "vault_unwind_completion_percentage": {
                    "description": "Vault unwind completion percentage",
                    "type": "string",
                    "example": "0.35"
                }
            }
        },
        "responses.TransferStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "AVAILABLE",
                "COMPLETED",
                "FAILED"
            ],
            "x-enum-comments": {
                "TransferStatusAvailable": "Action is required from user: For Withdrawals refers to L2 txn status being `ACCEPTED_ON_L1` and funds available for collection on Ethereum bridge. For Deposits refers to funds being available in the L2 account, ready to be deposited to Paraclear contract.",
                "TransferStatusCompleted": "Transfer has completed (final state): For Withdrawals funds have been collected and have moved to the requested Ethereum account; refers to L1 bridge withdraw txn status `SUCCESS`. For Deposits funds have become available in Paradex; refers to the L2 txn status being `ACCEPTED_ON_L2`.",
                "TransferStatusFailed": "L2 txn calling Paraclear contract failed with `REJECTED` or `REVERTED` status. Deposits can be retried when they fail by repeating the L2 txn.",
                "TransferStatusPending": "L2 txn calling Paraclear contract is in flight: For Withdrawals it's the initial status; refers to the L2 txn status being `RECEIVED`, `PENDING`, `ACCEPTED_ON_L2`. For Deposits refers to L2 txn status being `RECEIVED`, `PENDING`."
            },
            "x-enum-varnames": [
                "TransferStatusPending",
                "TransferStatusAvailable",
                "TransferStatusCompleted",
                "TransferStatusFailed"
            ]
        },
        "responses.TwitterProfile": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "responses.UpdateAccountMarginConfigResp": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account ID",
                    "type": "string"
                },
                "leverage": {
                    "description": "Leverage value",
                    "type": "integer"
                },
                "margin_type": {
                    "description": "Margin type (CROSS/ISOLATED)",
                    "type": "string"
                },
                "market": {
                    "description": "Market symbol",
                    "type": "string"
                }
            }
        },
        "responses.VaultAccountSummaryResp": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Contract address of the vault",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "created_at": {
                    "description": "Unix timestamp in milliseconds of when the user joined the vault.",
                    "type": "integer",
                    "example": 1717171717
                },
                "deposited_amount": {
                    "description": "Amount deposited on the vault by the user in USDC",
                    "type": "string",
                    "example": "123.45"
                },
                "total_pnl": {
                    "description": "Total P\u0026L realized by the user in USD.",
                    "type": "string",
                    "example": "149.12"
                },
                "total_roi": {
                    "description": "Total ROI realized by the user in percentage, i.e. 0.1 means 10%.",
                    "type": "string",
                    "example": "0.724"
                },
                "vtoken_amount": {
                    "description": "Amount of vault tokens owned by the user",
                    "type": "string",
                    "example": "123.45"
                }
            }
        },
        "responses.VaultHistoricalDataResp": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Contract address of the vault",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "data": {
                    "description": "Ordered list of datapoints",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "timestamps": {
                    "description": "Ordered list of timestamps",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "responses.VaultKind": {
            "type": "string",
            "enum": [
                "user",
                "protocol"
            ],
            "x-enum-varnames": [
                "VaultKindUser",
                "VaultKindProtocol"
            ]
        },
        "responses.VaultResp": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Contract address of the vault",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "created_at": {
                    "description": "Unix timestamp in milliseconds of when the vault has been created",
                    "type": "integer",
                    "example": 1517171717
                },
                "description": {
                    "description": "Description of the vault",
                    "type": "string",
                    "example": "My description"
                },
                "kind": {
                    "description": "Kind of the vault: 'user' for user-defined vaults, 'protocol' for vaults controlled by Paradex",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.VaultKind"
                        }
                    ],
                    "example": "user"
                },
                "last_updated_at": {
                    "description": "Unix timestamp in milliseconds of when the vault was last updated",
                    "type": "integer",
                    "example": 1617171717
                },
                "lockup_period": {
                    "description": "Lockup period of the vault in days",
                    "type": "integer",
                    "example": 1
                },
                "max_tvl": {
                    "description": "Maximum amount of assets the vault can hold in USDC",
                    "type": "integer",
                    "example": 1000000
                },
                "name": {
                    "description": "Name of the vault",
                    "type": "string",
                    "example": "MyVault"
                },
                "operator_account": {
                    "description": "Operator account of the vault",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "owner_account": {
                    "description": "Owner account of the vault",
                    "type": "string",
                    "example": "0x0234567890abcdef"
                },
                "profit_share": {
                    "description": "Profit share of the vault in percentage, i.e. 10 means 10%",
                    "type": "integer",
                    "example": 10
                },
                "status": {
                    "description": "Status of the vault",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.VaultStatus"
                        }
                    ],
                    "example": "ACTIVE"
                },
                "strategies": {
                    "description": "Strategies of the vault",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.Strategy"
                    }
                },
                "token_address": {
                    "description": "LP token address",
                    "type": "string"
                }
            }
        },
        "responses.VaultStatus": {
            "type": "string",
            "enum": [
                "INITIALIZING",
                "ACTIVE",
                "CLOSED",
                "FAILED"
            ],
            "x-enum-varnames": [
                "VaultStatusInitializing",
                "VaultStatusActive",
                "VaultStatusClosed",
                "VaultStatusFailed"
            ]
        },
        "responses.VaultSummaryResp": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Contract address of the vault",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                },
                "last_month_return": {
                    "description": "APR return of the vault in the last trailing month in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.023"
                },
                "max_drawdown": {
                    "description": "Max all time drawdown realized by the vault in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.1916"
                },
                "max_drawdown_24h": {
                    "description": "Max drawdown realized by the vault in the last 24 hours in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.0138"
                },
                "max_drawdown_30d": {
                    "description": "Max drawdown realized by the vault in the last 30 days in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.1821"
                },
                "max_drawdown_7d": {
                    "description": "Max drawdown realized by the vault in the last 7 days in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.1124"
                },
                "net_deposits": {
                    "description": "Net deposits of the vault in USDC",
                    "type": "string",
                    "example": "1000000"
                },
                "num_depositors": {
                    "description": "Number of depositors on the vault",
                    "type": "integer",
                    "example": 100
                },
                "owner_equity": {
                    "description": "Vault equity of the owner (% of ownership) in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.145"
                },
                "pnl_24h": {
                    "description": "P\u0026L of the vault in the last 24 hours in USD",
                    "type": "string",
                    "example": "13.41"
                },
                "pnl_30d": {
                    "description": "P\u0026L of the vault in the last 30 days in USD",
                    "type": "string",
                    "example": "114.19"
                },
                "pnl_7d": {
                    "description": "P\u0026L of the vault in the last 7 days in USD",
                    "type": "string",
                    "example": "91.31"
                },
                "roi_24h": {
                    "description": "Return of the vault in the last 24 hours in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.034"
                },
                "roi_30d": {
                    "description": "Return of the vault in the last 30 days in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.003"
                },
                "roi_7d": {
                    "description": "Return of the vault in the last 7 days in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.123"
                },
                "total_pnl": {
                    "description": "Total P\u0026L of the vault in USD",
                    "type": "string",
                    "example": "149.12"
                },
                "total_roi": {
                    "description": "Total ROI of the vault in percentage, i.e. 0.1 means 10%",
                    "type": "string",
                    "example": "0.724"
                },
                "tvl": {
                    "description": "Net deposits of the vault in USDC (deprecated; use net_deposits instead)",
                    "type": "string",
                    "example": "1000000"
                },
                "volume": {
                    "description": "All time volume traded by the vault in USD",
                    "type": "string",
                    "example": "12345678.16"
                },
                "volume_24h": {
                    "description": "Volume traded by the vault in the last 24 hours in USD",
                    "type": "string",
                    "example": "45678.16"
                },
                "volume_30d": {
                    "description": "Volume traded by the vault in the last 30 days in USD",
                    "type": "string",
                    "example": "2345678.16"
                },
                "volume_7d": {
                    "description": "Volume traded by the vault in the last 7 days in USD",
                    "type": "string",
                    "example": "345678.16"
                },
                "vtoken_price": {
                    "description": "Current value of vault token price in USD",
                    "type": "string",
                    "example": "1.23"
                },
                "vtoken_supply": {
                    "description": "Total amount of available vault tokens",
                    "type": "string",
                    "example": "1000000"
                }
            }
        },
        "responses.VaultsConfigResponse": {
            "type": "object",
            "properties": {
                "max_lockup_period_days": {
                    "description": "Maximum lockup period in days an owner can configure for a vault",
                    "type": "string",
                    "example": "4"
                },
                "max_profit_share_percentage": {
                    "description": "Maximum profit share percentage (0-100) an owner can configure for a vault",
                    "type": "string",
                    "example": "50"
                },
                "min_initial_deposit": {
                    "description": "Minimum initial collateral deposit (in currency units) at vault creation. Only applies to the owner",
                    "type": "string",
                    "example": "1000"
                },
                "min_lockup_period_days": {
                    "description": "Minimum lockup period in days an owner can configure for a vault",
                    "type": "string",
                    "example": "1"
                },
                "min_owner_share_percentage": {
                    "description": "Minimum share percentage (0-100) the vault owner must maintain on the vault",
                    "type": "string",
                    "example": "5"
                },
                "vault_factory_address": {
                    "description": "Address of the vault factory contract",
                    "type": "string",
                    "example": "0x1234567890abcdef"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "x-hideTryItPanel": true
}