{
    "openapi": "3.1.0",
    "paths": {
      "/v0/evi/language_models": {
        "get": {
          "description": "Fetch a list of available language models from various providers along with their built-in tools.",
          "operationId": "language_models_v0_evi_language_models_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SupportedLanguageModelsResponse"
                  }
                }
              },
              "description": "A list of available language models with details about their providers and built-in tools."
            }
          },
          "summary": "Language Models"
        }
      },
      "/v0/evi/tts": {
        "post": {
          "operationId": "tts_v0_evi_tts_post",
          "parameters": [
            {
              "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
              "in": "query",
              "name": "access_token",
              "required": false,
              "schema": {
                "default": "",
                "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                "title": "Access Token",
                "type": "string"
              }
            },
            {
              "description": "Indicates what content type the server sent response (containing both the generated speech and the associated metadata) should have. Select `\"application/json\"` to receive a JSON response containing the audio as a Base64-encoded string. Select `\"audio/*\"` to receive a binary streaming response containing just the audio data in the requested format. Select `\"multipart/form-data\"` to receive a response containing separate form fields for both the binary audio data (in the requested format) and the JSON metadata.\n\nNote that only an \"audio/*\" response is streamed; the other response types are sent to the client all at once.",
              "in": "header",
              "name": "Accept",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/Accept",
                "default": "audio/*",
                "description": "Indicates what content type the server sent response (containing both the generated speech and the associated metadata) should have. Select `\"application/json\"` to receive a JSON response containing the audio as a Base64-encoded string. Select `\"audio/*\"` to receive a binary streaming response containing just the audio data in the requested format. Select `\"multipart/form-data\"` to receive a response containing separate form fields for both the binary audio data (in the requested format) and the JSON metadata.\n\nNote that only an \"audio/*\" response is streamed; the other response types are sent to the client all at once."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceTtsBodyArgs"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VoiceTtsResponse_str_"
                  }
                },
                "audio/*": {},
                "multipart/form-data": {
                  "schema": {
                    "$ref": "#/components/schemas/VoiceTtsResponse_bytes_"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Tts"
        }
      },
      "/v0/evi/twilio": {
        "post": {
          "description": "This is the webhook that will be called along with the twilio phone caller-callee information whenever\na call is made to a twilio phone number.\nHere we also authenticate the hume api_key of the user. Then, if authenticated, it sends an XML response\nback to twilio instructing it to create a websocket stream between the twilio incoming phone call and evi's\n_twilio websocket endpoint, which will then handle the call session.",
          "operationId": "twilio_webhook_v0_evi_twilio_post",
          "parameters": [
            {
              "in": "query",
              "name": "config_id",
              "required": true,
              "schema": {
                "title": "Config Id",
                "type": "string"
              }
            },
            {
              "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
              "in": "query",
              "name": "access_token",
              "required": false,
              "schema": {
                "default": "",
                "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                "title": "Access Token",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Body_twilio_webhook_v0_evi_twilio_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Twilio Webhook"
        }
      },
      "/v0/evi/voice": {
        "post": {
          "operationId": "voice_v0_evi_voice_post",
          "parameters": [
            {
              "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
              "in": "query",
              "name": "access_token",
              "required": false,
              "schema": {
                "default": "",
                "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                "title": "Access Token",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedVoiceArgs"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Voice"
        }
      },
      "/v0/evi/voice-names": {
        "get": {
          "description": "Fetch a list of available voice names and sample audio file URLs.",
          "operationId": "voice_names_v0_evi_voice_names_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VoiceNameEndpointResponse"
                  }
                }
              },
              "description": "A list of available voice names and sample audio file URLs."
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Voice Names"
        }
      },
      "/v0/evi/tools": {
        "get": {
          "tags": [
            "Tools"
          ],
          "summary": "List tools",
          "operationId": "getReturnToolsForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Filter to only include tools with name.",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name_requires_exact_match",
              "in": "query",
              "description": "If true, the name filter requires an exact match. If false, the results will include all matches where name is a case-insensitive substring of the full name.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_user_defined_tools"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Tools"
          ],
          "summary": "Create tool",
          "operationId": "createNewTool",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_user_defined_tool"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_user_defined_tool"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/tools/{id}": {
        "get": {
          "tags": [
            "Tools"
          ],
          "summary": "List tool versions",
          "operationId": "getReturnToolByToolId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_user_defined_tools"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Tools"
          ],
          "summary": "Create tool version",
          "operationId": "addNewToolVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_user_defined_tool_version"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_user_defined_tool"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Tools"
          ],
          "summary": "Delete tool",
          "operationId": "deleteToolVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Tools"
          ],
          "summary": "Update tool name",
          "operationId": "updateToolName",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_user_defined_tool_name"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "text/plain": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/prompts": {
        "get": {
          "tags": [
            "Prompts"
          ],
          "summary": "List prompts",
          "operationId": "getReturnPromptsForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "Only include the most recent version of each prompt in the list.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Filter to only include prompts with name.",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name_requires_exact_match",
              "in": "query",
              "description": "If true, the name filter requires an exact match. If false, the results will include all matches where name is a case-insensitive substring of the full name.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_prompts"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Prompts"
          ],
          "summary": "Create prompt",
          "operationId": "createNewPrompt",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_prompt"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_prompt"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/prompts/{id}": {
        "get": {
          "tags": [
            "Prompts"
          ],
          "summary": "List prompt versions",
          "operationId": "getReturnPromptByPromptId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "Only include the most recent version of each prompt in the list.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_prompts"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Prompts"
          ],
          "summary": "Create prompt version",
          "operationId": "addNewPromptVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_prompt_version"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_prompt"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Prompts"
          ],
          "summary": "Delete prompt",
          "operationId": "deletePromptVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Prompts"
          ],
          "summary": "Update prompt name",
          "operationId": "updatePromptName",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_prompt_name"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "text/plain": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/custom_voices": {
        "get": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "List custom voices",
          "operationId": "getReturnCustomVoicesForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Filter to only include custom voices with name.",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name_requires_exact_match",
              "in": "query",
              "description": "If true, the name filter requires an exact, case-insensitive match. If false, the results will include all matches where name is a case-insensitive substring of the full name.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_custom_voices"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "Create custom voice",
          "operationId": "createNewCustomVoice",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_custom_voice"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_voice_evi2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/custom_voices/{id}": {
        "get": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "Get specific custom voice by ID",
          "operationId": "getReturnCustomVoiceByCustomVoiceId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a Custom Voice. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_voice_evi2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "Create new version of existing custom voice",
          "operationId": "addNewCustomVoiceVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a Custom Voice. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_custom_voice"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_voice_evi2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "Delete a custom voice",
          "operationId": "deleteCustomVoice",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a Custom Voice. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Custom Voices"
          ],
          "summary": "Update custom voice name",
          "operationId": "updateCustomVoiceName",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a Custom Voice. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_custom_voice_name"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "text/plain": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/configs": {
        "get": {
          "tags": [
            "Configs"
          ],
          "summary": "List configs",
          "operationId": "getReturnConfigsForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Filter to only include configs with this name.",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name_requires_exact_match",
              "in": "query",
              "description": "If true, the name filter requires an exact match. If false, the results will include all matches where name is a case-insensitive substring of the full name.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_configs"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Configs"
          ],
          "summary": "Create config",
          "operationId": "createNewConfig",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_config"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_config"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/configs/{id}": {
        "get": {
          "tags": [
            "Configs"
          ],
          "summary": "List config versions",
          "operationId": "getReturnConfigByVersionId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "restrict_to_most_recent",
              "in": "query",
              "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_configs"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "post": {
          "tags": [
            "Configs"
          ],
          "summary": "Create config version",
          "operationId": "addNewConfigVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_config_version"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_config"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Configs"
          ],
          "summary": "Delete config",
          "operationId": "deleteConfig",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Configs"
          ],
          "summary": "Update config name",
          "operationId": "updateConfigName",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_config_name"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "text/plain": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/tools/{id}/version/{version}": {
        "get": {
          "tags": [
            "Tools"
          ],
          "summary": "Get tool version",
          "operationId": "getReturnToolByVersionNumber",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a tool. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_user_defined_tool"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Tools"
          ],
          "summary": "Delete tool version",
          "operationId": "deleteToolVersion_1",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a tool. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Tools"
          ],
          "summary": "Update tool description",
          "operationId": "updateToolVersionDescription",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a tool. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a tool. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_user_defined_tool_version_description"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_user_defined_tool"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/prompts/{id}/version/{version}": {
        "get": {
          "tags": [
            "Prompts"
          ],
          "summary": "Get prompt version",
          "operationId": "getReturnPromptByVersionNumber",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a prompt. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_prompt"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Prompts"
          ],
          "summary": "Delete prompt version",
          "operationId": "deletePromptVersion_1",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a prompt. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Prompts"
          ],
          "summary": "Update prompt description",
          "operationId": "updatePromptVersionDescription",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a prompt. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a prompt. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_prompt_version_description"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_prompt"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/configs/{id}/version/{version}": {
        "get": {
          "tags": [
            "Configs"
          ],
          "summary": "Get config version",
          "operationId": "getReturnPromptByRevisionId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a config. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_config"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "delete": {
          "tags": [
            "Configs"
          ],
          "summary": "Delete config version",
          "operationId": "deleteConfigVersion",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a config. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        },
        "patch": {
          "tags": [
            "Configs"
          ],
          "summary": "Update config description",
          "operationId": "updateConfigVersionDescription",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a config. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "Version number for a config. Version numbers should be integers.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_config_version_description"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_config"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chats": {
        "get": {
          "tags": [
            "Chats"
          ],
          "summary": "List chats",
          "operationId": "getReturnChatsForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "config_id",
              "in": "query",
              "description": "Filter to only include chats that used this config.",
              "required": false,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_chats"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chats/{id}": {
        "get": {
          "tags": [
            "Chats"
          ],
          "summary": "List chat events",
          "operationId": "getChatByChatId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a chat. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_chat_paged_events"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chats/{id}/audio": {
        "get": {
          "tags": [
            "Chats"
          ],
          "summary": "Return signed url with audio reconstruction of chat",
          "operationId": "getReconstructionByChatId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a chat. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReturnChatAudioReconstruction"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chat_groups": {
        "get": {
          "tags": [
            "Chat_groups"
          ],
          "summary": "List chat_groups",
          "operationId": "getReturnChatGroupsForUser",
          "parameters": [
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "config_id",
              "in": "query",
              "description": "Filter chatgroups to only include chats that used this config in their most recent chat.",
              "required": false,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_paged_chat_groups"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chat_groups/{id}": {
        "get": {
          "tags": [
            "Chat_groups"
          ],
          "summary": "List chat summaries in a specific chat_group",
          "operationId": "getChatsByChatGroupId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a chat. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_chat_group_paged_chats"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chat_groups/{id}/events": {
        "get": {
          "tags": [
            "Chat_groups"
          ],
          "summary": "List chat events from a specific chat_group",
          "operationId": "getChatEventsByChatGroupId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a chat. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_chat_group_paged_events"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      },
      "/v0/evi/chat_groups/{id}/audio": {
        "get": {
          "tags": [
            "Chat_groups"
          ],
          "summary": "Return signed urls with audio reconstructions of each chat in chatgroup",
          "operationId": "getReconstructionByChatGroupId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for a chat. Formatted as a UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "page_number",
              "in": "query",
              "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ascending_order",
              "in": "query",
              "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/return_chat_group_paged_audio_reconstructions"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-public-api-root": "/v0/evi"
        }
      }
    },
    "servers": [
      {
        "url": "https://api.hume.ai/v0/evi"
      }
    ],
    "webhooks": {
      "chat_ended": {
        "post": {
          "description": "Sent when an EVI chat ends.",
          "operationId": "chatEnded",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventChatEnded"
                }
              }
            }
          },
          "summary": "Chat Ended",
          "tags": [
            "Chat Webhooks"
          ],
          "x-fern-webhook": true
        }
      },
      "chat_started": {
        "post": {
          "description": "Sent when an EVI chat is started.",
          "operationId": "chatStarted",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventChatStarted"
                }
              }
            }
          },
          "summary": "Chat Started",
          "tags": [
            "Chat Webhooks"
          ],
          "x-fern-webhook": true
        }
      }
    }
  }