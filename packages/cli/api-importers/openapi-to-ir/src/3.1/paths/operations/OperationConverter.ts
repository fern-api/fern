import { OpenAPIV3_1 } from "openapi-types";

import { FernIr, HttpEndpoint } from "@fern-api/ir-sdk";
import { constructHttpPath } from "@fern-api/ir-utils";
import { ErrorCollector } from "@fern-api/v2-importer-commons";

import { FernExamplesExtension } from "../../../extensions/x-fern-examples";
import { FernStreamingExtension } from "../../../extensions/x-fern-streaming";
import { OpenAPIConverterContext3_1 } from "../../OpenAPIConverterContext3_1";
import { ServersConverter } from "../../servers/ServersConverter";
import { AbstractOperationConverter } from "./AbstractOperationConverter";

export declare namespace OperationConverter {
    export interface Args extends AbstractOperationConverter.Args {
        idempotent: boolean | undefined;
        servers?: OpenAPIV3_1.ServerObject[];
    }

    export interface Output extends AbstractOperationConverter.Output {
        endpoint: HttpEndpoint;
        servers?: OpenAPIV3_1.ServerObject[];
    }
}

export class OperationConverter extends AbstractOperationConverter {
    private readonly idempotent: boolean | undefined;
    private readonly servers?: OpenAPIV3_1.ServerObject[];
    private readonly streamingExtensionConverter: FernStreamingExtension;

    constructor({ context, breadcrumbs, operation, method, path, idempotent, servers }: OperationConverter.Args) {
        super({ context, breadcrumbs, operation, method, path });
        this.idempotent = idempotent;
        this.servers = servers;
        this.streamingExtensionConverter = new FernStreamingExtension({
            breadcrumbs: this.breadcrumbs,
            operation: this.operation
        });
    }

    public async convert({
        errorCollector
    }: {
        errorCollector: ErrorCollector;
    }): Promise<OperationConverter.Output | undefined> {
        const httpMethod = this.convertHttpMethod();
        if (httpMethod == null) {
            return undefined;
        }

        const { group, method } =
            this.computeGroupNameAndLocationFromExtensions({ errorCollector }) ??
            this.computeGroupNameFromTagAndOperationId({ errorCollector });

        const streamingExtension = this.streamingExtensionConverter.convert({ errorCollector });

        const { headers, pathParameters, queryParameters } = await this.convertParameters({
            errorCollector,
            breadcrumbs: [...this.breadcrumbs, "parameters"]
        });

        const convertedRequestBody = await this.convertRequestBody({
            errorCollector,
            breadcrumbs: [...this.breadcrumbs, "requestBody"],
            group,
            method
        });
        const requestBody = convertedRequestBody != null ? convertedRequestBody.value : undefined;

        const convertedResponseBody = await this.convertResponseBody({
            errorCollector,
            breadcrumbs: [...this.breadcrumbs, "responses"],
            group,
            method,
            streamingExtension
        });
        const response = convertedResponseBody != null ? convertedResponseBody.value : undefined;
        const server = this.operation.servers?.[0] ?? this.servers?.[0] ?? this.context.spec.servers?.[0];

        const endpointId = [];
        if (this.context.namespace != null) {
            endpointId.push(this.context.namespace);
        }
        endpointId.push(...(group ?? []));
        endpointId.push(method);

        const path = constructHttpPath(this.path);
        const baseUrl =
            server != null
                ? ServersConverter.getServerName({ server, context: this.context, errorCollector })
                : undefined;

        const fernExamples = this.convertExamples({
            pathHead: path.head,
            httpMethod,
            baseUrl,
            errorCollector
        });

        return {
            group,
            endpoint: {
                id: endpointId.join("."),
                displayName: this.operation.summary,
                method: httpMethod,
                name: this.context.casingsGenerator.generateName(method),
                baseUrl,
                path,
                pathParameters,
                queryParameters,
                headers,
                requestBody,
                sdkRequest: undefined,
                response,
                errors: [],
                auth: this.operation.security != null || this.context.spec.security != null,
                availability: await this.context.getAvailability({
                    node: this.operation,
                    breadcrumbs: this.breadcrumbs,
                    errorCollector
                }),
                docs: this.operation.description,
                userSpecifiedExamples: [],
                autogeneratedExamples: [],
                idempotent: this.idempotent ?? false,
                basePath: undefined,
                fullPath: path,
                allPathParameters: pathParameters,
                pagination: undefined,
                transport: undefined,
                v2Examples: {
                    autogeneratedExamples: {},
                    userSpecifiedExamples: fernExamples
                }
            },
            inlinedTypes: this.inlinedTypes,
            servers: this.operation.servers
        };
    }

    private convertExamples({
        pathHead,
        httpMethod,
        baseUrl,
        errorCollector
    }: {
        pathHead: string;
        httpMethod: FernIr.HttpMethod;
        baseUrl: string | undefined;
        errorCollector: ErrorCollector;
    }): Record<string, FernIr.V2HttpEndpointExample> {
        const fernExamplesExtension = new FernExamplesExtension({
            context: this.context,
            breadcrumbs: this.breadcrumbs,
            operation: this.operation as object
        });
        const fernExamples = fernExamplesExtension.convert({ errorCollector });
        if (fernExamples == null) {
            return {};
        }
        return Object.fromEntries(
            fernExamples.map((example, index) => {
                return [
                    example.id ?? index.toString(),
                    {
                        request: {
                            docs: undefined,
                            endpoint: {
                                method: httpMethod,
                                path: pathHead
                            },
                            baseUrl: undefined,
                            environment: baseUrl,
                            auth: undefined,
                            pathParameters: {
                                userSpecifiedExamples: example["path-parameters"] ?? {},
                                autogeneratedExamples: {}
                            },
                            queryParameters: {
                                userSpecifiedExamples: example["query-parameters"] ?? {},
                                autogeneratedExamples: {}
                            },
                            headers: {
                                userSpecifiedExamples: example.headers ?? {},
                                autogeneratedExamples: {}
                            },
                            requestBody: example.request
                        },
                        response: {
                            docs: undefined,
                            statusCode: undefined,
                            body: FernIr.V2HttpEndpointResponseBody.json(example.response)
                        },
                        codeSamples: example["code-samples"]?.map((codeSample) => {
                            const language =
                                ("language" in codeSample ? codeSample.language : codeSample.sdk) ?? undefined;
                            return {
                                docs: undefined,
                                language,
                                code: codeSample.code
                            };
                        })
                    }
                ];
            })
        );
    }
}
