{
  "auth": {
    "requirement": "ALL",
    "schemes": [
      {
        "name": {
          "name": {
            "originalName": "apiKey",
            "camelCase": {
              "unsafeName": "apiKey",
              "safeName": "apiKey"
            },
            "snakeCase": {
              "unsafeName": "api_key",
              "safeName": "api_key"
            },
            "screamingSnakeCase": {
              "unsafeName": "API_KEY",
              "safeName": "API_KEY"
            },
            "pascalCase": {
              "unsafeName": "ApiKey",
              "safeName": "ApiKey"
            }
          },
          "wireValue": "Authorization"
        },
        "valueType": {
          "container": {
            "optional": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "type": "optional"
          },
          "type": "container"
        },
        "docs": "All the DevRev APIs require a token to authenticate the user. Provide `Authorization: <token>` as a header to every API request.\n [How do I find my token?](https://devrev.ai/docs/apis/auth)",
        "type": "header"
      }
    ]
  },
  "selfHosted": false,
  "types": {
    "artifact-summary": {
      "name": {
        "typeId": "artifact-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "artifact-summary",
          "camelCase": {
            "unsafeName": "artifactSummary",
            "safeName": "artifactSummary"
          },
          "snakeCase": {
            "unsafeName": "artifact_summary",
            "safeName": "artifact_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACT_SUMMARY",
            "safeName": "ARTIFACT_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "ArtifactSummary",
            "safeName": "ArtifactSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifact-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "artifacts-locate-response": {
      "name": {
        "typeId": "artifacts-locate-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "artifacts-locate-response",
          "camelCase": {
            "unsafeName": "artifactsLocateResponse",
            "safeName": "artifactsLocateResponse"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_response",
            "safeName": "artifacts_locate_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_RESPONSE",
            "safeName": "ARTIFACTS_LOCATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateResponse",
            "safeName": "ArtifactsLocateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "expires_at",
                "camelCase": {
                  "unsafeName": "expiresAt",
                  "safeName": "expiresAt"
                },
                "snakeCase": {
                  "unsafeName": "expires_at",
                  "safeName": "expires_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXPIRES_AT",
                  "safeName": "EXPIRES_AT"
                },
                "pascalCase": {
                  "unsafeName": "ExpiresAt",
                  "safeName": "ExpiresAt"
                }
              },
              "wireValue": "expires_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expiration timestamp of the URL.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsLocateResponseExpiresAt_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "url",
                "camelCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "snakeCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URL",
                  "safeName": "URL"
                },
                "pascalCase": {
                  "unsafeName": "Url",
                  "safeName": "Url"
                }
              },
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The artifact's download URL.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsLocateResponseUrl_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting an artifact's download URL.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-locate-response_example_autogenerated": {
            "url": "foo"
          }
        }
      }
    },
    "artifacts-prepare-request": {
      "name": {
        "typeId": "artifacts-prepare-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "artifacts-prepare-request",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequest",
            "safeName": "artifactsPrepareRequest"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request",
            "safeName": "artifacts_prepare_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST",
            "safeName": "ARTIFACTS_PREPARE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequest",
            "safeName": "ArtifactsPrepareRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "file_name",
                "camelCase": {
                  "unsafeName": "fileName",
                  "safeName": "fileName"
                },
                "snakeCase": {
                  "unsafeName": "file_name",
                  "safeName": "file_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FILE_NAME",
                  "safeName": "FILE_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FileName",
                  "safeName": "FileName"
                }
              },
              "wireValue": "file_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the file that's being uploaded.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareRequestFileName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to prepare a URL to upload a file.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-request_example_autogenerated": {
            "file_name": "foo"
          }
        }
      }
    },
    "artifacts-prepare-response": {
      "name": {
        "typeId": "artifacts-prepare-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "artifacts-prepare-response",
          "camelCase": {
            "unsafeName": "artifactsPrepareResponse",
            "safeName": "artifactsPrepareResponse"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_response",
            "safeName": "artifacts_prepare_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_RESPONSE",
            "safeName": "ARTIFACTS_PREPARE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareResponse",
            "safeName": "ArtifactsPrepareResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "form_data",
                "camelCase": {
                  "unsafeName": "formData",
                  "safeName": "formData"
                },
                "snakeCase": {
                  "unsafeName": "form_data",
                  "safeName": "form_data"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FORM_DATA",
                  "safeName": "FORM_DATA"
                },
                "pascalCase": {
                  "unsafeName": "FormData",
                  "safeName": "FormData"
                }
              },
              "wireValue": "form_data"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "artifacts-prepare-response-form-data",
                    "camelCase": {
                      "unsafeName": "artifactsPrepareResponseFormData",
                      "safeName": "artifactsPrepareResponseFormData"
                    },
                    "snakeCase": {
                      "unsafeName": "artifacts_prepare_response_form_data",
                      "safeName": "artifacts_prepare_response_form_data"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ARTIFACTS_PREPARE_RESPONSE_FORM_DATA",
                      "safeName": "ARTIFACTS_PREPARE_RESPONSE_FORM_DATA"
                    },
                    "pascalCase": {
                      "unsafeName": "ArtifactsPrepareResponseFormData",
                      "safeName": "ArtifactsPrepareResponseFormData"
                    }
                  },
                  "typeId": "artifacts-prepare-response-form-data",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The POST policy form data.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormData_example_autogenerated": [
                  {
                    "key": "foo",
                    "value": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The generated artifact's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "ArtifactsPrepareResponseId_example_0": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "url",
                "camelCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "snakeCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URL",
                  "safeName": "URL"
                },
                "pascalCase": {
                  "unsafeName": "Url",
                  "safeName": "Url"
                }
              },
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL that the file's data should be uploaded to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseUrl_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to preparing a URL to upload a file.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-response_example_autogenerated": {
            "form_data": [
              {
                "key": "foo",
                "value": "foo"
              }
            ],
            "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
            "url": "foo"
          }
        }
      }
    },
    "artifacts-prepare-response-form-data": {
      "name": {
        "typeId": "artifacts-prepare-response-form-data",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "artifacts-prepare-response-form-data",
          "camelCase": {
            "unsafeName": "artifactsPrepareResponseFormData",
            "safeName": "artifactsPrepareResponseFormData"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_response_form_data",
            "safeName": "artifacts_prepare_response_form_data"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_RESPONSE_FORM_DATA",
            "safeName": "ARTIFACTS_PREPARE_RESPONSE_FORM_DATA"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareResponseFormData",
            "safeName": "ArtifactsPrepareResponseFormData"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "key",
                "camelCase": {
                  "unsafeName": "key",
                  "safeName": "key"
                },
                "snakeCase": {
                  "unsafeName": "key",
                  "safeName": "key"
                },
                "screamingSnakeCase": {
                  "unsafeName": "KEY",
                  "safeName": "KEY"
                },
                "pascalCase": {
                  "unsafeName": "Key",
                  "safeName": "Key"
                }
              },
              "wireValue": "key"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Key of the form field.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormDataKey_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "value",
                "camelCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "snakeCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VALUE",
                  "safeName": "VALUE"
                },
                "pascalCase": {
                  "unsafeName": "Value",
                  "safeName": "Value"
                }
              },
              "wireValue": "value"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Value corresponding to the key.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ArtifactsPrepareResponseFormDataValue_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "artifacts-prepare-response-form-data_example_autogenerated": {
            "key": "foo",
            "value": "foo"
          }
        }
      }
    },
    "atom-base": {
      "name": {
        "typeId": "atom-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "atom-base",
          "camelCase": {
            "unsafeName": "atomBase",
            "safeName": "atomBase"
          },
          "snakeCase": {
            "unsafeName": "atom_base",
            "safeName": "atom_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "ATOM_BASE",
            "safeName": "ATOM_BASE"
          },
          "pascalCase": {
            "unsafeName": "AtomBase",
            "safeName": "AtomBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "created_by",
                "camelCase": {
                  "unsafeName": "createdBy",
                  "safeName": "createdBy"
                },
                "snakeCase": {
                  "unsafeName": "created_by",
                  "safeName": "created_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREATED_BY",
                  "safeName": "CREATED_BY"
                },
                "pascalCase": {
                  "unsafeName": "CreatedBy",
                  "safeName": "CreatedBy"
                }
              },
              "wireValue": "created_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-summary",
                    "camelCase": {
                      "unsafeName": "userSummary",
                      "safeName": "userSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "user_summary",
                      "safeName": "user_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_SUMMARY",
                      "safeName": "USER_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "UserSummary",
                      "safeName": "UserSummary"
                    }
                  },
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "created_date",
                "camelCase": {
                  "unsafeName": "createdDate",
                  "safeName": "createdDate"
                },
                "snakeCase": {
                  "unsafeName": "created_date",
                  "safeName": "created_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREATED_DATE",
                  "safeName": "CREATED_DATE"
                },
                "pascalCase": {
                  "unsafeName": "CreatedDate",
                  "safeName": "CreatedDate"
                }
              },
              "wireValue": "created_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the object was created.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseCreatedDate_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "display_id",
                "camelCase": {
                  "unsafeName": "displayId",
                  "safeName": "displayId"
                },
                "snakeCase": {
                  "unsafeName": "display_id",
                  "safeName": "display_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_ID",
                  "safeName": "DISPLAY_ID"
                },
                "pascalCase": {
                  "unsafeName": "DisplayId",
                  "safeName": "DisplayId"
                }
              },
              "wireValue": "display_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Human-readable object ID unique to the Dev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseDisplayId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Globally unique object ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "modified_by",
                "camelCase": {
                  "unsafeName": "modifiedBy",
                  "safeName": "modifiedBy"
                },
                "snakeCase": {
                  "unsafeName": "modified_by",
                  "safeName": "modified_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MODIFIED_BY",
                  "safeName": "MODIFIED_BY"
                },
                "pascalCase": {
                  "unsafeName": "ModifiedBy",
                  "safeName": "ModifiedBy"
                }
              },
              "wireValue": "modified_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-summary",
                    "camelCase": {
                      "unsafeName": "userSummary",
                      "safeName": "userSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "user_summary",
                      "safeName": "user_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_SUMMARY",
                      "safeName": "USER_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "UserSummary",
                      "safeName": "UserSummary"
                    }
                  },
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "modified_date",
                "camelCase": {
                  "unsafeName": "modifiedDate",
                  "safeName": "modifiedDate"
                },
                "snakeCase": {
                  "unsafeName": "modified_date",
                  "safeName": "modified_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MODIFIED_DATE",
                  "safeName": "MODIFIED_DATE"
                },
                "pascalCase": {
                  "unsafeName": "ModifiedDate",
                  "safeName": "ModifiedDate"
                }
              },
              "wireValue": "modified_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the object was last modified.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseModifiedDate_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "atom-base_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "atom-base-summary": {
      "name": {
        "typeId": "atom-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "atom-base-summary",
          "camelCase": {
            "unsafeName": "atomBaseSummary",
            "safeName": "atomBaseSummary"
          },
          "snakeCase": {
            "unsafeName": "atom_base_summary",
            "safeName": "atom_base_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "ATOM_BASE_SUMMARY",
            "safeName": "ATOM_BASE_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "AtomBaseSummary",
            "safeName": "AtomBaseSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_id",
                "camelCase": {
                  "unsafeName": "displayId",
                  "safeName": "displayId"
                },
                "snakeCase": {
                  "unsafeName": "display_id",
                  "safeName": "display_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_ID",
                  "safeName": "DISPLAY_ID"
                },
                "pascalCase": {
                  "unsafeName": "DisplayId",
                  "safeName": "DisplayId"
                }
              },
              "wireValue": "display_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Human-readable object ID unique to the Dev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseSummaryDisplayId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Globally unique object ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AtomBaseSummaryId_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "atom-base-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "auth-connection": {
      "name": {
        "typeId": "auth-connection",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection",
          "camelCase": {
            "unsafeName": "authConnection",
            "safeName": "authConnection"
          },
          "snakeCase": {
            "unsafeName": "auth_connection",
            "safeName": "auth_connection"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION",
            "safeName": "AUTH_CONNECTION"
          },
          "pascalCase": {
            "unsafeName": "AuthConnection",
            "safeName": "AuthConnection"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "enabled",
                "camelCase": {
                  "unsafeName": "enabled",
                  "safeName": "enabled"
                },
                "snakeCase": {
                  "unsafeName": "enabled",
                  "safeName": "enabled"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENABLED",
                  "safeName": "ENABLED"
                },
                "pascalCase": {
                  "unsafeName": "Enabled",
                  "safeName": "Enabled"
                }
              },
              "wireValue": "enabled"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionEnabled_example_autogenerated": true
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-connection-type",
                "camelCase": {
                  "unsafeName": "authConnectionType",
                  "safeName": "authConnectionType"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_type",
                  "safeName": "auth_connection_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_TYPE",
                  "safeName": "AUTH_CONNECTION_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionType",
                  "safeName": "AuthConnectionType"
                }
              },
              "typeId": "auth-connection-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": {
                "originalName": "auth-connection-options-google-apps",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsGoogleApps",
                  "safeName": "authConnectionOptionsGoogleApps"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_google_apps",
                  "safeName": "auth_connection_options_google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS",
                  "safeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsGoogleApps",
                  "safeName": "AuthConnectionOptionsGoogleApps"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": {
                "originalName": "auth-connection-options-oidc",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsOidc",
                  "safeName": "authConnectionOptionsOidc"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_oidc",
                  "safeName": "auth_connection_options_oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_OIDC",
                  "safeName": "AUTH_CONNECTION_OPTIONS_OIDC"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsOidc",
                  "safeName": "AuthConnectionOptionsOidc"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": {
                "originalName": "auth-connection-options-saml",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsSaml",
                  "safeName": "authConnectionOptionsSaml"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_saml",
                  "safeName": "auth_connection_options_saml"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_SAML",
                  "safeName": "AUTH_CONNECTION_OPTIONS_SAML"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsSaml",
                  "safeName": "AuthConnectionOptionsSaml"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "social",
                "camelCase": {
                  "unsafeName": "social",
                  "safeName": "social"
                },
                "snakeCase": {
                  "unsafeName": "social",
                  "safeName": "social"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SOCIAL",
                  "safeName": "SOCIAL"
                },
                "pascalCase": {
                  "unsafeName": "Social",
                  "safeName": "Social"
                }
              },
              "wireValue": "social"
            },
            "displayName": "social",
            "shape": {
              "typeId": "auth-connection-options-social",
              "name": {
                "originalName": "auth-connection-options-social",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsSocial",
                  "safeName": "authConnectionOptionsSocial"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_social",
                  "safeName": "auth_connection_options_social"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_SOCIAL",
                  "safeName": "AUTH_CONNECTION_OPTIONS_SOCIAL"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsSocial",
                  "safeName": "AuthConnectionOptionsSocial"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "social",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": {
                "originalName": "auth-connection-options-azure-ad",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsAzureAd",
                  "safeName": "authConnectionOptionsAzureAd"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_azure_ad",
                  "safeName": "auth_connection_options_azure_ad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD",
                  "safeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsAzureAd",
                  "safeName": "AuthConnectionOptionsAzureAd"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Connection object that specifies the configuration for an\nauthentication connection that is set up for a Dev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-azure-ad": {
      "name": {
        "typeId": "auth-connection-options-azure-ad",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-options-azure-ad",
          "camelCase": {
            "unsafeName": "authConnectionOptionsAzureAd",
            "safeName": "authConnectionOptionsAzureAd"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_options_azure_ad",
            "safeName": "auth_connection_options_azure_ad"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD",
            "safeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionOptionsAzureAd",
            "safeName": "AuthConnectionOptionsAzureAd"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "client_secret",
                "camelCase": {
                  "unsafeName": "clientSecret",
                  "safeName": "clientSecret"
                },
                "snakeCase": {
                  "unsafeName": "client_secret",
                  "safeName": "client_secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_SECRET",
                  "safeName": "CLIENT_SECRET"
                },
                "pascalCase": {
                  "unsafeName": "ClientSecret",
                  "safeName": "ClientSecret"
                }
              },
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdClientSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domain",
                "camelCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "snakeCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMAIN",
                  "safeName": "DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "Domain",
                  "safeName": "Domain"
                }
              },
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Domain URL of the Azure authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsAzureAdDomain_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for an Azure AD\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-azure-ad_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-google-apps": {
      "name": {
        "typeId": "auth-connection-options-google-apps",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-options-google-apps",
          "camelCase": {
            "unsafeName": "authConnectionOptionsGoogleApps",
            "safeName": "authConnectionOptionsGoogleApps"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_options_google_apps",
            "safeName": "auth_connection_options_google_apps"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS",
            "safeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionOptionsGoogleApps",
            "safeName": "AuthConnectionOptionsGoogleApps"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the Google Apps authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "client_secret",
                "camelCase": {
                  "unsafeName": "clientSecret",
                  "safeName": "clientSecret"
                },
                "snakeCase": {
                  "unsafeName": "client_secret",
                  "safeName": "client_secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_SECRET",
                  "safeName": "CLIENT_SECRET"
                },
                "pascalCase": {
                  "unsafeName": "ClientSecret",
                  "safeName": "ClientSecret"
                }
              },
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the Google Apps authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsClientSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tenant_domain",
                "camelCase": {
                  "unsafeName": "tenantDomain",
                  "safeName": "tenantDomain"
                },
                "snakeCase": {
                  "unsafeName": "tenant_domain",
                  "safeName": "tenant_domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TENANT_DOMAIN",
                  "safeName": "TENANT_DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "TenantDomain",
                  "safeName": "TenantDomain"
                }
              },
              "wireValue": "tenant_domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tenant domain URL of the Google Apps authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsGoogleAppsTenantDomain_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for a Google Apps\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-google-apps_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-oidc": {
      "name": {
        "typeId": "auth-connection-options-oidc",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-options-oidc",
          "camelCase": {
            "unsafeName": "authConnectionOptionsOidc",
            "safeName": "authConnectionOptionsOidc"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_options_oidc",
            "safeName": "auth_connection_options_oidc"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_OPTIONS_OIDC",
            "safeName": "AUTH_CONNECTION_OPTIONS_OIDC"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionOptionsOidc",
            "safeName": "AuthConnectionOptionsOidc"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client ID for the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "client_secret",
                "camelCase": {
                  "unsafeName": "clientSecret",
                  "safeName": "clientSecret"
                },
                "snakeCase": {
                  "unsafeName": "client_secret",
                  "safeName": "client_secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_SECRET",
                  "safeName": "CLIENT_SECRET"
                },
                "pascalCase": {
                  "unsafeName": "ClientSecret",
                  "safeName": "ClientSecret"
                }
              },
              "wireValue": "client_secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Client secret for the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcClientSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "issuer",
                "camelCase": {
                  "unsafeName": "issuer",
                  "safeName": "issuer"
                },
                "snakeCase": {
                  "unsafeName": "issuer",
                  "safeName": "issuer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUER",
                  "safeName": "ISSUER"
                },
                "pascalCase": {
                  "unsafeName": "Issuer",
                  "safeName": "Issuer"
                }
              },
              "wireValue": "issuer"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Issuer URL of the OIDC authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsOidcIssuer_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for an OIDC\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-oidc_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-saml": {
      "name": {
        "typeId": "auth-connection-options-saml",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-options-saml",
          "camelCase": {
            "unsafeName": "authConnectionOptionsSaml",
            "safeName": "authConnectionOptionsSaml"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_options_saml",
            "safeName": "auth_connection_options_saml"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_OPTIONS_SAML",
            "safeName": "AUTH_CONNECTION_OPTIONS_SAML"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionOptionsSaml",
            "safeName": "AuthConnectionOptionsSaml"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "sign_in_endpoint",
                "camelCase": {
                  "unsafeName": "signInEndpoint",
                  "safeName": "signInEndpoint"
                },
                "snakeCase": {
                  "unsafeName": "sign_in_endpoint",
                  "safeName": "sign_in_endpoint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SIGN_IN_ENDPOINT",
                  "safeName": "SIGN_IN_ENDPOINT"
                },
                "pascalCase": {
                  "unsafeName": "SignInEndpoint",
                  "safeName": "SignInEndpoint"
                }
              },
              "wireValue": "sign_in_endpoint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sign In endpoint for the SAML authentication connection.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsSamlSignInEndpoint_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "signing_cert",
                "camelCase": {
                  "unsafeName": "signingCert",
                  "safeName": "signingCert"
                },
                "snakeCase": {
                  "unsafeName": "signing_cert",
                  "safeName": "signing_cert"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SIGNING_CERT",
                  "safeName": "SIGNING_CERT"
                },
                "pascalCase": {
                  "unsafeName": "SigningCert",
                  "safeName": "SigningCert"
                }
              },
              "wireValue": "signing_cert"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Signing certificate for the SAML authentication connection.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthConnectionOptionsSamlSigningCert_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Object encapsulating the configuration parameters for a SAML\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-saml_example_autogenerated": {}
        }
      }
    },
    "auth-connection-options-social": {
      "name": {
        "typeId": "auth-connection-options-social",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-options-social",
          "camelCase": {
            "unsafeName": "authConnectionOptionsSocial",
            "safeName": "authConnectionOptionsSocial"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_options_social",
            "safeName": "auth_connection_options_social"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_OPTIONS_SOCIAL",
            "safeName": "AUTH_CONNECTION_OPTIONS_SOCIAL"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionOptionsSocial",
            "safeName": "AuthConnectionOptionsSocial"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-options-social_example_autogenerated": {}
        }
      }
    },
    "auth-connection-toggle": {
      "name": {
        "typeId": "auth-connection-toggle",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-toggle",
          "camelCase": {
            "unsafeName": "authConnectionToggle",
            "safeName": "authConnectionToggle"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_toggle",
            "safeName": "auth_connection_toggle"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_TOGGLE",
            "safeName": "AUTH_CONNECTION_TOGGLE"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionToggle",
            "safeName": "AuthConnectionToggle"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "disable",
                "camelCase": {
                  "unsafeName": "disable",
                  "safeName": "disable"
                },
                "snakeCase": {
                  "unsafeName": "disable",
                  "safeName": "disable"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISABLE",
                  "safeName": "DISABLE"
                },
                "pascalCase": {
                  "unsafeName": "Disable",
                  "safeName": "Disable"
                }
              },
              "wireValue": "disable"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "enable",
                "camelCase": {
                  "unsafeName": "enable",
                  "safeName": "enable"
                },
                "snakeCase": {
                  "unsafeName": "enable",
                  "safeName": "enable"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENABLE",
                  "safeName": "ENABLE"
                },
                "pascalCase": {
                  "unsafeName": "Enable",
                  "safeName": "Enable"
                }
              },
              "wireValue": "enable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-toggle_example_autogenerated": "disable"
        }
      }
    },
    "auth-connection-type": {
      "name": {
        "typeId": "auth-connection-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-connection-type",
          "camelCase": {
            "unsafeName": "authConnectionType",
            "safeName": "authConnectionType"
          },
          "snakeCase": {
            "unsafeName": "auth_connection_type",
            "safeName": "auth_connection_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION_TYPE",
            "safeName": "AUTH_CONNECTION_TYPE"
          },
          "pascalCase": {
            "unsafeName": "AuthConnectionType",
            "safeName": "AuthConnectionType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "social",
                "camelCase": {
                  "unsafeName": "social",
                  "safeName": "social"
                },
                "snakeCase": {
                  "unsafeName": "social",
                  "safeName": "social"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SOCIAL",
                  "safeName": "SOCIAL"
                },
                "pascalCase": {
                  "unsafeName": "Social",
                  "safeName": "Social"
                }
              },
              "wireValue": "social"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Defines the type for the authentication connection. The configuration\nfor each authentication connection will depend on the type value.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-connection-type_example_autogenerated": "google_apps"
        }
      }
    },
    "auth-token": {
      "name": {
        "typeId": "auth-token",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token",
          "camelCase": {
            "unsafeName": "authToken",
            "safeName": "authToken"
          },
          "snakeCase": {
            "unsafeName": "auth_token",
            "safeName": "auth_token"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN",
            "safeName": "AUTH_TOKEN"
          },
          "pascalCase": {
            "unsafeName": "AuthToken",
            "safeName": "AuthToken"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application that requested the\ntoken. Only applicable for application access tokens.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "expires_at",
                "camelCase": {
                  "unsafeName": "expiresAt",
                  "safeName": "expiresAt"
                },
                "snakeCase": {
                  "unsafeName": "expires_at",
                  "safeName": "expires_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXPIRES_AT",
                  "safeName": "EXPIRES_AT"
                },
                "pascalCase": {
                  "unsafeName": "ExpiresAt",
                  "safeName": "ExpiresAt"
                }
              },
              "wireValue": "expires_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The time at which the token expires.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenExpiresAt_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "issued_at",
                "camelCase": {
                  "unsafeName": "issuedAt",
                  "safeName": "issuedAt"
                },
                "snakeCase": {
                  "unsafeName": "issued_at",
                  "safeName": "issued_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUED_AT",
                  "safeName": "ISSUED_AT"
                },
                "pascalCase": {
                  "unsafeName": "IssuedAt",
                  "safeName": "IssuedAt"
                }
              },
              "wireValue": "issued_at"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The time at which the token was issued.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenIssuedAt_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "requested_token_type",
                "camelCase": {
                  "unsafeName": "requestedTokenType",
                  "safeName": "requestedTokenType"
                },
                "snakeCase": {
                  "unsafeName": "requested_token_type",
                  "safeName": "requested_token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REQUESTED_TOKEN_TYPE",
                  "safeName": "REQUESTED_TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "RequestedTokenType",
                  "safeName": "RequestedTokenType"
                }
              },
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-requested-token-type",
                    "camelCase": {
                      "unsafeName": "authTokenRequestedTokenType",
                      "safeName": "authTokenRequestedTokenType"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_requested_token_type",
                      "safeName": "auth_token_requested_token_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE",
                      "safeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenRequestedTokenType",
                      "safeName": "AuthTokenRequestedTokenType"
                    }
                  },
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "scopes",
                "camelCase": {
                  "unsafeName": "scopes",
                  "safeName": "scopes"
                },
                "snakeCase": {
                  "unsafeName": "scopes",
                  "safeName": "scopes"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCOPES",
                  "safeName": "SCOPES"
                },
                "pascalCase": {
                  "unsafeName": "Scopes",
                  "safeName": "Scopes"
                }
              },
              "wireValue": "scopes"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The scopes associated with the issued token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenScopes_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "status",
                "camelCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "snakeCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STATUS",
                  "safeName": "STATUS"
                },
                "pascalCase": {
                  "unsafeName": "Status",
                  "safeName": "Status"
                }
              },
              "wireValue": "status"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-status",
                    "camelCase": {
                      "unsafeName": "authTokenStatus",
                      "safeName": "authTokenStatus"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_status",
                      "safeName": "auth_token_status"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_STATUS",
                      "safeName": "AUTH_TOKEN_STATUS"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenStatus",
                      "safeName": "AuthTokenStatus"
                    }
                  },
                  "typeId": "auth-token-status",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "subject",
                "camelCase": {
                  "unsafeName": "subject",
                  "safeName": "subject"
                },
                "snakeCase": {
                  "unsafeName": "subject",
                  "safeName": "subject"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SUBJECT",
                  "safeName": "SUBJECT"
                },
                "pascalCase": {
                  "unsafeName": "Subject",
                  "safeName": "Subject"
                }
              },
              "wireValue": "subject"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The subject of the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenSubject_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "token_hint",
                "camelCase": {
                  "unsafeName": "tokenHint",
                  "safeName": "tokenHint"
                },
                "snakeCase": {
                  "unsafeName": "token_hint",
                  "safeName": "token_hint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_HINT",
                  "safeName": "TOKEN_HINT"
                },
                "pascalCase": {
                  "unsafeName": "TokenHint",
                  "safeName": "TokenHint"
                }
              },
              "wireValue": "token_hint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokenTokenHint_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "auth-token-grant-type": {
      "name": {
        "typeId": "auth-token-grant-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token-grant-type",
          "camelCase": {
            "unsafeName": "authTokenGrantType",
            "safeName": "authTokenGrantType"
          },
          "snakeCase": {
            "unsafeName": "auth_token_grant_type",
            "safeName": "auth_token_grant_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN_GRANT_TYPE",
            "safeName": "AUTH_TOKEN_GRANT_TYPE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokenGrantType",
            "safeName": "AuthTokenGrantType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:grant-type:token-issue",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthGrantTypeTokenIssue",
                  "safeName": "urnDevrevParamsOauthGrantTypeTokenIssue"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_grant_type_token_issue",
                  "safeName": "urn_devrev_params_oauth_grant_type_token_issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_GRANT_TYPE_TOKEN_ISSUE",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_GRANT_TYPE_TOKEN_ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthGrantTypeTokenIssue",
                  "safeName": "UrnDevrevParamsOauthGrantTypeTokenIssue"
                }
              },
              "wireValue": "urn:devrev:params:oauth:grant-type:token-issue"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:ietf:params:oauth:grant-type:token-exchange",
                "camelCase": {
                  "unsafeName": "urnIetfParamsOauthGrantTypeTokenExchange",
                  "safeName": "urnIetfParamsOauthGrantTypeTokenExchange"
                },
                "snakeCase": {
                  "unsafeName": "urn_ietf_params_oauth_grant_type_token_exchange",
                  "safeName": "urn_ietf_params_oauth_grant_type_token_exchange"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_IETF_PARAMS_OAUTH_GRANT_TYPE_TOKEN_EXCHANGE",
                  "safeName": "URN_IETF_PARAMS_OAUTH_GRANT_TYPE_TOKEN_EXCHANGE"
                },
                "pascalCase": {
                  "unsafeName": "UrnIetfParamsOauthGrantTypeTokenExchange",
                  "safeName": "UrnIetfParamsOauthGrantTypeTokenExchange"
                }
              },
              "wireValue": "urn:ietf:params:oauth:grant-type:token-exchange"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies the process of obtaining a token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-grant-type_example_autogenerated": "urn:devrev:params:oauth:grant-type:token-issue"
        }
      }
    },
    "auth-token-requested-token-type": {
      "name": {
        "typeId": "auth-token-requested-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token-requested-token-type",
          "camelCase": {
            "unsafeName": "authTokenRequestedTokenType",
            "safeName": "authTokenRequestedTokenType"
          },
          "snakeCase": {
            "unsafeName": "auth_token_requested_token_type",
            "safeName": "auth_token_requested_token_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE",
            "safeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokenRequestedTokenType",
            "safeName": "AuthTokenRequestedTokenType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:aat",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeAat",
                  "safeName": "urnDevrevParamsOauthTokenTypeAat"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_aat",
                  "safeName": "urn_devrev_params_oauth_token_type_aat"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_AAT",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_AAT"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeAat",
                  "safeName": "UrnDevrevParamsOauthTokenTypeAat"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:aat"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:aat:public",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeAatPublic",
                  "safeName": "urnDevrevParamsOauthTokenTypeAatPublic"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_aat_public",
                  "safeName": "urn_devrev_params_oauth_token_type_aat_public"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_AAT_PUBLIC",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_AAT_PUBLIC"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeAatPublic",
                  "safeName": "UrnDevrevParamsOauthTokenTypeAatPublic"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:aat:public"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:dev",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeDev",
                  "safeName": "urnDevrevParamsOauthTokenTypeDev"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_dev",
                  "safeName": "urn_devrev_params_oauth_token_type_dev"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_DEV",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_DEV"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeDev",
                  "safeName": "UrnDevrevParamsOauthTokenTypeDev"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:dev"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:pat",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypePat",
                  "safeName": "urnDevrevParamsOauthTokenTypePat"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_pat",
                  "safeName": "urn_devrev_params_oauth_token_type_pat"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_PAT",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_PAT"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypePat",
                  "safeName": "UrnDevrevParamsOauthTokenTypePat"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:pat"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:rev",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeRev",
                  "safeName": "urnDevrevParamsOauthTokenTypeRev"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_rev",
                  "safeName": "urn_devrev_params_oauth_token_type_rev"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_REV",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_REV"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeRev",
                  "safeName": "UrnDevrevParamsOauthTokenTypeRev"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:rev"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:session",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeSession",
                  "safeName": "urnDevrevParamsOauthTokenTypeSession"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_session",
                  "safeName": "urn_devrev_params_oauth_token_type_session"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SESSION",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SESSION"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeSession",
                  "safeName": "UrnDevrevParamsOauthTokenTypeSession"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:session"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:session:dev0",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeSessionDev0",
                  "safeName": "urnDevrevParamsOauthTokenTypeSessionDev0"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_session_dev_0",
                  "safeName": "urn_devrev_params_oauth_token_type_session_dev_0"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SESSION_DEV_0",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SESSION_DEV_0"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeSessionDev0",
                  "safeName": "UrnDevrevParamsOauthTokenTypeSessionDev0"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:session:dev0"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:sys",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeSys",
                  "safeName": "urnDevrevParamsOauthTokenTypeSys"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_sys",
                  "safeName": "urn_devrev_params_oauth_token_type_sys"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SYS",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SYS"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeSys",
                  "safeName": "UrnDevrevParamsOauthTokenTypeSys"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:sys"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:ietf:params:oauth:token-type:jwt",
                "camelCase": {
                  "unsafeName": "urnIetfParamsOauthTokenTypeJwt",
                  "safeName": "urnIetfParamsOauthTokenTypeJwt"
                },
                "snakeCase": {
                  "unsafeName": "urn_ietf_params_oauth_token_type_jwt",
                  "safeName": "urn_ietf_params_oauth_token_type_jwt"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_JWT",
                  "safeName": "URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_JWT"
                },
                "pascalCase": {
                  "unsafeName": "UrnIetfParamsOauthTokenTypeJwt",
                  "safeName": "UrnIetfParamsOauthTokenTypeJwt"
                }
              },
              "wireValue": "urn:ietf:params:oauth:token-type:jwt"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the requested token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-requested-token-type_example_autogenerated": "urn:devrev:params:oauth:token-type:aat"
        }
      }
    },
    "auth-token-status": {
      "name": {
        "typeId": "auth-token-status",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token-status",
          "camelCase": {
            "unsafeName": "authTokenStatus",
            "safeName": "authTokenStatus"
          },
          "snakeCase": {
            "unsafeName": "auth_token_status",
            "safeName": "auth_token_status"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN_STATUS",
            "safeName": "AUTH_TOKEN_STATUS"
          },
          "pascalCase": {
            "unsafeName": "AuthTokenStatus",
            "safeName": "AuthTokenStatus"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "active",
                "camelCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "snakeCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACTIVE",
                  "safeName": "ACTIVE"
                },
                "pascalCase": {
                  "unsafeName": "Active",
                  "safeName": "Active"
                }
              },
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "expired",
                "camelCase": {
                  "unsafeName": "expired",
                  "safeName": "expired"
                },
                "snakeCase": {
                  "unsafeName": "expired",
                  "safeName": "expired"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXPIRED",
                  "safeName": "EXPIRED"
                },
                "pascalCase": {
                  "unsafeName": "Expired",
                  "safeName": "Expired"
                }
              },
              "wireValue": "expired"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "revoked",
                "camelCase": {
                  "unsafeName": "revoked",
                  "safeName": "revoked"
                },
                "snakeCase": {
                  "unsafeName": "revoked",
                  "safeName": "revoked"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REVOKED",
                  "safeName": "REVOKED"
                },
                "pascalCase": {
                  "unsafeName": "Revoked",
                  "safeName": "Revoked"
                }
              },
              "wireValue": "revoked"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of the token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-status_example_autogenerated": "active"
        }
      }
    },
    "auth-token-subject-token-type": {
      "name": {
        "typeId": "auth-token-subject-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token-subject-token-type",
          "camelCase": {
            "unsafeName": "authTokenSubjectTokenType",
            "safeName": "authTokenSubjectTokenType"
          },
          "snakeCase": {
            "unsafeName": "auth_token_subject_token_type",
            "safeName": "auth_token_subject_token_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN_SUBJECT_TOKEN_TYPE",
            "safeName": "AUTH_TOKEN_SUBJECT_TOKEN_TYPE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokenSubjectTokenType",
            "safeName": "AuthTokenSubjectTokenType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:jwt:auth0",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeJwtAuth0",
                  "safeName": "urnDevrevParamsOauthTokenTypeJwtAuth0"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_jwt_auth_0",
                  "safeName": "urn_devrev_params_oauth_token_type_jwt_auth_0"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_JWT_AUTH_0",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_JWT_AUTH_0"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
                  "safeName": "UrnDevrevParamsOauthTokenTypeJwtAuth0"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:jwt:auth0"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:jwt:dev",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeJwtDev",
                  "safeName": "urnDevrevParamsOauthTokenTypeJwtDev"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_jwt_dev",
                  "safeName": "urn_devrev_params_oauth_token_type_jwt_dev"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_JWT_DEV",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_JWT_DEV"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeJwtDev",
                  "safeName": "UrnDevrevParamsOauthTokenTypeJwtDev"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:jwt:dev"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:revinfo",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeRevinfo",
                  "safeName": "urnDevrevParamsOauthTokenTypeRevinfo"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_revinfo",
                  "safeName": "urn_devrev_params_oauth_token_type_revinfo"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_REVINFO",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_REVINFO"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeRevinfo",
                  "safeName": "UrnDevrevParamsOauthTokenTypeRevinfo"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:revinfo"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:sysu",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeSysu",
                  "safeName": "urnDevrevParamsOauthTokenTypeSysu"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_sysu",
                  "safeName": "urn_devrev_params_oauth_token_type_sysu"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SYSU",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_SYSU"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeSysu",
                  "safeName": "UrnDevrevParamsOauthTokenTypeSysu"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:sysu"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:userinfo",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeUserinfo",
                  "safeName": "urnDevrevParamsOauthTokenTypeUserinfo"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_userinfo",
                  "safeName": "urn_devrev_params_oauth_token_type_userinfo"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_USERINFO",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_USERINFO"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeUserinfo",
                  "safeName": "UrnDevrevParamsOauthTokenTypeUserinfo"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:userinfo"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:devrev:params:oauth:token-type:userinfo:profile",
                "camelCase": {
                  "unsafeName": "urnDevrevParamsOauthTokenTypeUserinfoProfile",
                  "safeName": "urnDevrevParamsOauthTokenTypeUserinfoProfile"
                },
                "snakeCase": {
                  "unsafeName": "urn_devrev_params_oauth_token_type_userinfo_profile",
                  "safeName": "urn_devrev_params_oauth_token_type_userinfo_profile"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_USERINFO_PROFILE",
                  "safeName": "URN_DEVREV_PARAMS_OAUTH_TOKEN_TYPE_USERINFO_PROFILE"
                },
                "pascalCase": {
                  "unsafeName": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
                  "safeName": "UrnDevrevParamsOauthTokenTypeUserinfoProfile"
                }
              },
              "wireValue": "urn:devrev:params:oauth:token-type:userinfo:profile"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "urn:ietf:params:oauth:token-type:jwt",
                "camelCase": {
                  "unsafeName": "urnIetfParamsOauthTokenTypeJwt",
                  "safeName": "urnIetfParamsOauthTokenTypeJwt"
                },
                "snakeCase": {
                  "unsafeName": "urn_ietf_params_oauth_token_type_jwt",
                  "safeName": "urn_ietf_params_oauth_token_type_jwt"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_JWT",
                  "safeName": "URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_JWT"
                },
                "pascalCase": {
                  "unsafeName": "UrnIetfParamsOauthTokenTypeJwt",
                  "safeName": "UrnIetfParamsOauthTokenTypeJwt"
                }
              },
              "wireValue": "urn:ietf:params:oauth:token-type:jwt"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the subject token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-subject-token-type_example_autogenerated": "urn:devrev:params:oauth:token-type:jwt:auth0"
        }
      }
    },
    "auth-token-token-type": {
      "name": {
        "typeId": "auth-token-token-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-token-token-type",
          "camelCase": {
            "unsafeName": "authTokenTokenType",
            "safeName": "authTokenTokenType"
          },
          "snakeCase": {
            "unsafeName": "auth_token_token_type",
            "safeName": "auth_token_token_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKEN_TOKEN_TYPE",
            "safeName": "AUTH_TOKEN_TOKEN_TYPE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokenTokenType",
            "safeName": "AuthTokenTokenType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "bearer",
                "camelCase": {
                  "unsafeName": "bearer",
                  "safeName": "bearer"
                },
                "snakeCase": {
                  "unsafeName": "bearer",
                  "safeName": "bearer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BEARER",
                  "safeName": "BEARER"
                },
                "pascalCase": {
                  "unsafeName": "Bearer",
                  "safeName": "Bearer"
                }
              },
              "wireValue": "bearer"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the issued token. Bearer is the only supported token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-token-token-type_example_autogenerated": "bearer"
        }
      }
    },
    "auth-tokens-create-request": {
      "name": {
        "typeId": "auth-tokens-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-create-request",
          "camelCase": {
            "unsafeName": "authTokensCreateRequest",
            "safeName": "authTokensCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request",
            "safeName": "auth_tokens_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequest",
            "safeName": "AuthTokensCreateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "aud",
                "camelCase": {
                  "unsafeName": "aud",
                  "safeName": "aud"
                },
                "snakeCase": {
                  "unsafeName": "aud",
                  "safeName": "aud"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUD",
                  "safeName": "AUD"
                },
                "pascalCase": {
                  "unsafeName": "Aud",
                  "safeName": "Aud"
                }
              },
              "wireValue": "aud"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expected audience values with respect to the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestAud_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application which is requesting\nthe token. If no client_id is present in the request to generate an\napplication access token (AAT), DevRev will generate a client_id.\nThis client_id is only associated with an AAT.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "expires_in",
                "camelCase": {
                  "unsafeName": "expiresIn",
                  "safeName": "expiresIn"
                },
                "snakeCase": {
                  "unsafeName": "expires_in",
                  "safeName": "expires_in"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXPIRES_IN",
                  "safeName": "EXPIRES_IN"
                },
                "pascalCase": {
                  "unsafeName": "ExpiresIn",
                  "safeName": "ExpiresIn"
                }
              },
              "wireValue": "expires_in"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "LONG",
                    "v2": {
                      "type": "long"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The expected validity lifetime of the token in number of days.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestExpiresIn_example_autogenerated": 42
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "grant_type",
                "camelCase": {
                  "unsafeName": "grantType",
                  "safeName": "grantType"
                },
                "snakeCase": {
                  "unsafeName": "grant_type",
                  "safeName": "grant_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GRANT_TYPE",
                  "safeName": "GRANT_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "GrantType",
                  "safeName": "GrantType"
                }
              },
              "wireValue": "grant_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-grant-type",
                    "camelCase": {
                      "unsafeName": "authTokenGrantType",
                      "safeName": "authTokenGrantType"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_grant_type",
                      "safeName": "auth_token_grant_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_GRANT_TYPE",
                      "safeName": "AUTH_TOKEN_GRANT_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenGrantType",
                      "safeName": "AuthTokenGrantType"
                    }
                  },
                  "typeId": "auth-token-grant-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "requested_token_type",
                "camelCase": {
                  "unsafeName": "requestedTokenType",
                  "safeName": "requestedTokenType"
                },
                "snakeCase": {
                  "unsafeName": "requested_token_type",
                  "safeName": "requested_token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REQUESTED_TOKEN_TYPE",
                  "safeName": "REQUESTED_TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "RequestedTokenType",
                  "safeName": "RequestedTokenType"
                }
              },
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-requested-token-type",
                    "camelCase": {
                      "unsafeName": "authTokenRequestedTokenType",
                      "safeName": "authTokenRequestedTokenType"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_requested_token_type",
                      "safeName": "auth_token_requested_token_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE",
                      "safeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenRequestedTokenType",
                      "safeName": "AuthTokenRequestedTokenType"
                    }
                  },
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_info",
                "camelCase": {
                  "unsafeName": "revInfo",
                  "safeName": "revInfo"
                },
                "snakeCase": {
                  "unsafeName": "rev_info",
                  "safeName": "rev_info"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_INFO",
                  "safeName": "REV_INFO"
                },
                "pascalCase": {
                  "unsafeName": "RevInfo",
                  "safeName": "RevInfo"
                }
              },
              "wireValue": "rev_info"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-rev-info",
                    "camelCase": {
                      "unsafeName": "authTokensRevInfo",
                      "safeName": "authTokensRevInfo"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_rev_info",
                      "safeName": "auth_tokens_rev_info"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_REV_INFO",
                      "safeName": "AUTH_TOKENS_REV_INFO"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensRevInfo",
                      "safeName": "AuthTokensRevInfo"
                    }
                  },
                  "typeId": "auth-tokens-rev-info",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "scope",
                "camelCase": {
                  "unsafeName": "scope",
                  "safeName": "scope"
                },
                "snakeCase": {
                  "unsafeName": "scope",
                  "safeName": "scope"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCOPE",
                  "safeName": "SCOPE"
                },
                "pascalCase": {
                  "unsafeName": "Scope",
                  "safeName": "Scope"
                }
              },
              "wireValue": "scope"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The requested set of scopes associated with the issued token. A\nspace-delimited list of values in which the order of values does\nnot matter.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestScope_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "subject_token",
                "camelCase": {
                  "unsafeName": "subjectToken",
                  "safeName": "subjectToken"
                },
                "snakeCase": {
                  "unsafeName": "subject_token",
                  "safeName": "subject_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SUBJECT_TOKEN",
                  "safeName": "SUBJECT_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "SubjectToken",
                  "safeName": "SubjectToken"
                }
              },
              "wireValue": "subject_token"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Represents the entity that requests the token. Not required when\nrequesting an application access token (AAT).\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestSubjectToken_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "subject_token_type",
                "camelCase": {
                  "unsafeName": "subjectTokenType",
                  "safeName": "subjectTokenType"
                },
                "snakeCase": {
                  "unsafeName": "subject_token_type",
                  "safeName": "subject_token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SUBJECT_TOKEN_TYPE",
                  "safeName": "SUBJECT_TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "SubjectTokenType",
                  "safeName": "SubjectTokenType"
                }
              },
              "wireValue": "subject_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-subject-token-type",
                    "camelCase": {
                      "unsafeName": "authTokenSubjectTokenType",
                      "safeName": "authTokenSubjectTokenType"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_subject_token_type",
                      "safeName": "auth_token_subject_token_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_SUBJECT_TOKEN_TYPE",
                      "safeName": "AUTH_TOKEN_SUBJECT_TOKEN_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenSubjectTokenType",
                      "safeName": "AuthTokenSubjectTokenType"
                    }
                  },
                  "typeId": "auth-token-subject-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "token_hint",
                "camelCase": {
                  "unsafeName": "tokenHint",
                  "safeName": "tokenHint"
                },
                "snakeCase": {
                  "unsafeName": "token_hint",
                  "safeName": "token_hint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_HINT",
                  "safeName": "TOKEN_HINT"
                },
                "pascalCase": {
                  "unsafeName": "TokenHint",
                  "safeName": "TokenHint"
                }
              },
              "wireValue": "token_hint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateRequestTokenHint_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A request to create a new token corresponding to the requested token\ntype.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-create-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-create-response": {
      "name": {
        "typeId": "auth-tokens-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-create-response",
          "camelCase": {
            "unsafeName": "authTokensCreateResponse",
            "safeName": "authTokensCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_response",
            "safeName": "auth_tokens_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_RESPONSE",
            "safeName": "AUTH_TOKENS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateResponse",
            "safeName": "AuthTokensCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "access_token",
                "camelCase": {
                  "unsafeName": "accessToken",
                  "safeName": "accessToken"
                },
                "snakeCase": {
                  "unsafeName": "access_token",
                  "safeName": "access_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACCESS_TOKEN",
                  "safeName": "ACCESS_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "AccessToken",
                  "safeName": "AccessToken"
                }
              },
              "wireValue": "access_token"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The issued JSON Web Token (JWT) corresponding to the requested\ntoken type.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseAccessToken_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "client_id",
                "camelCase": {
                  "unsafeName": "clientId",
                  "safeName": "clientId"
                },
                "snakeCase": {
                  "unsafeName": "client_id",
                  "safeName": "client_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLIENT_ID",
                  "safeName": "CLIENT_ID"
                },
                "pascalCase": {
                  "unsafeName": "ClientId",
                  "safeName": "ClientId"
                }
              },
              "wireValue": "client_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier that represents the application which is requesting\nthe token. Only present in a response corresponding to an\napplication access token (AAT).\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseClientId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "expires_in",
                "camelCase": {
                  "unsafeName": "expiresIn",
                  "safeName": "expiresIn"
                },
                "snakeCase": {
                  "unsafeName": "expires_in",
                  "safeName": "expires_in"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXPIRES_IN",
                  "safeName": "EXPIRES_IN"
                },
                "pascalCase": {
                  "unsafeName": "ExpiresIn",
                  "safeName": "ExpiresIn"
                }
              },
              "wireValue": "expires_in"
            },
            "valueType": {
              "primitive": {
                "v1": "LONG",
                "v2": {
                  "type": "long"
                }
              },
              "type": "primitive"
            },
            "docs": "The validity lifetime of the token specified in seconds since Unix\nepoch.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseExpiresIn_example_autogenerated": 42
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "refresh_token",
                "camelCase": {
                  "unsafeName": "refreshToken",
                  "safeName": "refreshToken"
                },
                "snakeCase": {
                  "unsafeName": "refresh_token",
                  "safeName": "refresh_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REFRESH_TOKEN",
                  "safeName": "REFRESH_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "RefreshToken",
                  "safeName": "RefreshToken"
                }
              },
              "wireValue": "refresh_token"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A token to refresh the issued token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseRefreshToken_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "scope",
                "camelCase": {
                  "unsafeName": "scope",
                  "safeName": "scope"
                },
                "snakeCase": {
                  "unsafeName": "scope",
                  "safeName": "scope"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCOPE",
                  "safeName": "SCOPE"
                },
                "pascalCase": {
                  "unsafeName": "Scope",
                  "safeName": "Scope"
                }
              },
              "wireValue": "scope"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The scopes associated with the issued token. A space-delimited list\nof values in which the order of values does not matter.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensCreateResponseScope_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "token_type",
                "camelCase": {
                  "unsafeName": "tokenType",
                  "safeName": "tokenType"
                },
                "snakeCase": {
                  "unsafeName": "token_type",
                  "safeName": "token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_TYPE",
                  "safeName": "TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "TokenType",
                  "safeName": "TokenType"
                }
              },
              "wireValue": "token_type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-token-token-type",
                "camelCase": {
                  "unsafeName": "authTokenTokenType",
                  "safeName": "authTokenTokenType"
                },
                "snakeCase": {
                  "unsafeName": "auth_token_token_type",
                  "safeName": "auth_token_token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKEN_TOKEN_TYPE",
                  "safeName": "AUTH_TOKEN_TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "AuthTokenTokenType",
                  "safeName": "AuthTokenTokenType"
                }
              },
              "typeId": "auth-token-token-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to create a new token corresponding to the\nrequested token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-create-response_example_autogenerated": {
            "access_token": "foo",
            "expires_in": 42,
            "token_type": "bearer"
          }
        }
      }
    },
    "auth-tokens-delete-request": {
      "name": {
        "typeId": "auth-tokens-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-delete-request",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequest",
            "safeName": "authTokensDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request",
            "safeName": "auth_tokens_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequest",
            "safeName": "AuthTokensDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "token_id",
                "camelCase": {
                  "unsafeName": "tokenId",
                  "safeName": "tokenId"
                },
                "snakeCase": {
                  "unsafeName": "token_id",
                  "safeName": "token_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_ID",
                  "safeName": "TOKEN_ID"
                },
                "pascalCase": {
                  "unsafeName": "TokenId",
                  "safeName": "TokenId"
                }
              },
              "wireValue": "token_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The unique identifier for the token under a given Dev organization.\nIf no token ID is provided, then the token ID will be set from the\nJTI claim of the token in the authorization header.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensDeleteRequestTokenId_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to revoke the token.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-delete-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-get-response": {
      "name": {
        "typeId": "auth-tokens-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-get-response",
          "camelCase": {
            "unsafeName": "authTokensGetResponse",
            "safeName": "authTokensGetResponse"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_response",
            "safeName": "auth_tokens_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_RESPONSE",
            "safeName": "AUTH_TOKENS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetResponse",
            "safeName": "AuthTokensGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "token",
                "camelCase": {
                  "unsafeName": "token",
                  "safeName": "token"
                },
                "snakeCase": {
                  "unsafeName": "token",
                  "safeName": "token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN",
                  "safeName": "TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "Token",
                  "safeName": "Token"
                }
              },
              "wireValue": "token"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-token",
                "camelCase": {
                  "unsafeName": "authToken",
                  "safeName": "authToken"
                },
                "snakeCase": {
                  "unsafeName": "auth_token",
                  "safeName": "auth_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKEN",
                  "safeName": "AUTH_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "AuthToken",
                  "safeName": "AuthToken"
                }
              },
              "typeId": "auth-token",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to get the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-get-response_example_autogenerated": {
            "token": {
              "id": "foo"
            }
          }
        }
      }
    },
    "auth-tokens-list-response": {
      "name": {
        "typeId": "auth-tokens-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-list-response",
          "camelCase": {
            "unsafeName": "authTokensListResponse",
            "safeName": "authTokensListResponse"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_response",
            "safeName": "auth_tokens_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_RESPONSE",
            "safeName": "AUTH_TOKENS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListResponse",
            "safeName": "AuthTokensListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tokens",
                "camelCase": {
                  "unsafeName": "tokens",
                  "safeName": "tokens"
                },
                "snakeCase": {
                  "unsafeName": "tokens",
                  "safeName": "tokens"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKENS",
                  "safeName": "TOKENS"
                },
                "pascalCase": {
                  "unsafeName": "Tokens",
                  "safeName": "Tokens"
                }
              },
              "wireValue": "tokens"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token",
                    "camelCase": {
                      "unsafeName": "authToken",
                      "safeName": "authToken"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token",
                      "safeName": "auth_token"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN",
                      "safeName": "AUTH_TOKEN"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthToken",
                      "safeName": "AuthToken"
                    }
                  },
                  "typeId": "auth-token",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of token metadata.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensListResponseTokens_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to list the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-list-response_example_autogenerated": {
            "tokens": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "auth-tokens-org-traits": {
      "name": {
        "typeId": "auth-tokens-org-traits",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-org-traits",
          "camelCase": {
            "unsafeName": "authTokensOrgTraits",
            "safeName": "authTokensOrgTraits"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_org_traits",
            "safeName": "auth_tokens_org_traits"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_ORG_TRAITS",
            "safeName": "AUTH_TOKENS_ORG_TRAITS"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensOrgTraits",
            "safeName": "AuthTokensOrgTraits"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The display name of the Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensOrgTraitsDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domain",
                "camelCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "snakeCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMAIN",
                  "safeName": "DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "Domain",
                  "safeName": "Domain"
                }
              },
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The domain of the Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensOrgTraitsDomain_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries Rev org info.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-org-traits_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-rev-info": {
      "name": {
        "typeId": "auth-tokens-rev-info",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-rev-info",
          "camelCase": {
            "unsafeName": "authTokensRevInfo",
            "safeName": "authTokensRevInfo"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_rev_info",
            "safeName": "auth_tokens_rev_info"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_REV_INFO",
            "safeName": "AUTH_TOKENS_REV_INFO"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensRevInfo",
            "safeName": "AuthTokensRevInfo"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "org_ref",
                "camelCase": {
                  "unsafeName": "orgRef",
                  "safeName": "orgRef"
                },
                "snakeCase": {
                  "unsafeName": "org_ref",
                  "safeName": "org_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ORG_REF",
                  "safeName": "ORG_REF"
                },
                "pascalCase": {
                  "unsafeName": "OrgRef",
                  "safeName": "OrgRef"
                }
              },
              "wireValue": "org_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An identifier which uniquely identifies a Rev org.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoOrgRef_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "org_traits",
                "camelCase": {
                  "unsafeName": "orgTraits",
                  "safeName": "orgTraits"
                },
                "snakeCase": {
                  "unsafeName": "org_traits",
                  "safeName": "org_traits"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ORG_TRAITS",
                  "safeName": "ORG_TRAITS"
                },
                "pascalCase": {
                  "unsafeName": "OrgTraits",
                  "safeName": "OrgTraits"
                }
              },
              "wireValue": "org_traits"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-org-traits",
                    "camelCase": {
                      "unsafeName": "authTokensOrgTraits",
                      "safeName": "authTokensOrgTraits"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_org_traits",
                      "safeName": "auth_tokens_org_traits"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_ORG_TRAITS",
                      "safeName": "AUTH_TOKENS_ORG_TRAITS"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensOrgTraits",
                      "safeName": "AuthTokensOrgTraits"
                    }
                  },
                  "typeId": "auth-tokens-org-traits",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_user_id",
                "camelCase": {
                  "unsafeName": "revUserId",
                  "safeName": "revUserId"
                },
                "snakeCase": {
                  "unsafeName": "rev_user_id",
                  "safeName": "rev_user_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_USER_ID",
                  "safeName": "REV_USER_ID"
                },
                "pascalCase": {
                  "unsafeName": "RevUserId",
                  "safeName": "RevUserId"
                }
              },
              "wireValue": "rev_user_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The unique ID of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoRevUserId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "user_ref",
                "camelCase": {
                  "unsafeName": "userRef",
                  "safeName": "userRef"
                },
                "snakeCase": {
                  "unsafeName": "user_ref",
                  "safeName": "user_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "USER_REF",
                  "safeName": "USER_REF"
                },
                "pascalCase": {
                  "unsafeName": "UserRef",
                  "safeName": "UserRef"
                }
              },
              "wireValue": "user_ref"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "An identifier which uniquely identifies a Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensRevInfoUserRef_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "user_traits",
                "camelCase": {
                  "unsafeName": "userTraits",
                  "safeName": "userTraits"
                },
                "snakeCase": {
                  "unsafeName": "user_traits",
                  "safeName": "user_traits"
                },
                "screamingSnakeCase": {
                  "unsafeName": "USER_TRAITS",
                  "safeName": "USER_TRAITS"
                },
                "pascalCase": {
                  "unsafeName": "UserTraits",
                  "safeName": "UserTraits"
                }
              },
              "wireValue": "user_traits"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-user-traits",
                    "camelCase": {
                      "unsafeName": "authTokensUserTraits",
                      "safeName": "authTokensUserTraits"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_user_traits",
                      "safeName": "auth_tokens_user_traits"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_USER_TRAITS",
                      "safeName": "AUTH_TOKENS_USER_TRAITS"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensUserTraits",
                      "safeName": "AuthTokensUserTraits"
                    }
                  },
                  "typeId": "auth-tokens-user-traits",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries info corresponding to the Rev user to be provisioned and/or\nissue a Rev session token.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-rev-info_example_autogenerated": {
            "user_ref": "foo"
          }
        }
      }
    },
    "auth-tokens-self-delete-request": {
      "name": {
        "typeId": "auth-tokens-self-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-self-delete-request",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequest",
            "safeName": "authTokensSelfDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request",
            "safeName": "auth_tokens_self_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequest",
            "safeName": "AuthTokensSelfDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "requested_token_type",
                "camelCase": {
                  "unsafeName": "requestedTokenType",
                  "safeName": "requestedTokenType"
                },
                "snakeCase": {
                  "unsafeName": "requested_token_type",
                  "safeName": "requested_token_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REQUESTED_TOKEN_TYPE",
                  "safeName": "REQUESTED_TOKEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "RequestedTokenType",
                  "safeName": "RequestedTokenType"
                }
              },
              "wireValue": "requested_token_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-token-requested-token-type",
                    "camelCase": {
                      "unsafeName": "authTokenRequestedTokenType",
                      "safeName": "authTokenRequestedTokenType"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_token_requested_token_type",
                      "safeName": "auth_token_requested_token_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE",
                      "safeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokenRequestedTokenType",
                      "safeName": "AuthTokenRequestedTokenType"
                    }
                  },
                  "typeId": "auth-token-requested-token-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete all the tokens created by the authenticated user,\nthat match with the provided token type.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-self-delete-request_example_autogenerated": {}
        }
      }
    },
    "auth-tokens-update-request": {
      "name": {
        "typeId": "auth-tokens-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-update-request",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequest",
            "safeName": "authTokensUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request",
            "safeName": "auth_tokens_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequest",
            "safeName": "AuthTokensUpdateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "token_hint",
                "camelCase": {
                  "unsafeName": "tokenHint",
                  "safeName": "tokenHint"
                },
                "snakeCase": {
                  "unsafeName": "token_hint",
                  "safeName": "token_hint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_HINT",
                  "safeName": "TOKEN_HINT"
                },
                "pascalCase": {
                  "unsafeName": "TokenHint",
                  "safeName": "TokenHint"
                }
              },
              "wireValue": "token_hint"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A hint that identifies the token.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUpdateRequestTokenHint_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "token_id",
                "camelCase": {
                  "unsafeName": "tokenId",
                  "safeName": "tokenId"
                },
                "snakeCase": {
                  "unsafeName": "token_id",
                  "safeName": "token_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN_ID",
                  "safeName": "TOKEN_ID"
                },
                "pascalCase": {
                  "unsafeName": "TokenId",
                  "safeName": "TokenId"
                }
              },
              "wireValue": "token_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The unique identifier of the token under a given Dev organization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUpdateRequestTokenId_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A request to update the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-update-request_example_autogenerated": {
            "token_hint": "foo",
            "token_id": "foo"
          }
        }
      }
    },
    "auth-tokens-update-response": {
      "name": {
        "typeId": "auth-tokens-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-update-response",
          "camelCase": {
            "unsafeName": "authTokensUpdateResponse",
            "safeName": "authTokensUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_response",
            "safeName": "auth_tokens_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_RESPONSE",
            "safeName": "AUTH_TOKENS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateResponse",
            "safeName": "AuthTokensUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "token",
                "camelCase": {
                  "unsafeName": "token",
                  "safeName": "token"
                },
                "snakeCase": {
                  "unsafeName": "token",
                  "safeName": "token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOKEN",
                  "safeName": "TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "Token",
                  "safeName": "Token"
                }
              },
              "wireValue": "token"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-token",
                "camelCase": {
                  "unsafeName": "authToken",
                  "safeName": "authToken"
                },
                "snakeCase": {
                  "unsafeName": "auth_token",
                  "safeName": "auth_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKEN",
                  "safeName": "AUTH_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "AuthToken",
                  "safeName": "AuthToken"
                }
              },
              "typeId": "auth-token",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to update the token metadata.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-update-response_example_autogenerated": {
            "token": {
              "id": "foo"
            }
          }
        }
      }
    },
    "auth-tokens-user-traits": {
      "name": {
        "typeId": "auth-tokens-user-traits",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "auth-tokens-user-traits",
          "camelCase": {
            "unsafeName": "authTokensUserTraits",
            "safeName": "authTokensUserTraits"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_user_traits",
            "safeName": "auth_tokens_user_traits"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_USER_TRAITS",
            "safeName": "AUTH_TOKENS_USER_TRAITS"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUserTraits",
            "safeName": "AuthTokensUserTraits"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The display name of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "email",
                "camelCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "snakeCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMAIL",
                  "safeName": "EMAIL"
                },
                "pascalCase": {
                  "unsafeName": "Email",
                  "safeName": "Email"
                }
              },
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The email address of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsEmail_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "full_name",
                "camelCase": {
                  "unsafeName": "fullName",
                  "safeName": "fullName"
                },
                "snakeCase": {
                  "unsafeName": "full_name",
                  "safeName": "full_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FULL_NAME",
                  "safeName": "FULL_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FullName",
                  "safeName": "FullName"
                }
              },
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The full name of the Rev user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "AuthTokensUserTraitsFullName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Carries Rev user info.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "auth-tokens-user-traits_example_autogenerated": {}
        }
      }
    },
    "capability": {
      "name": {
        "typeId": "capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "capability",
          "camelCase": {
            "unsafeName": "capability",
            "safeName": "capability"
          },
          "snakeCase": {
            "unsafeName": "capability",
            "safeName": "capability"
          },
          "screamingSnakeCase": {
            "unsafeName": "CAPABILITY",
            "safeName": "CAPABILITY"
          },
          "pascalCase": {
            "unsafeName": "Capability",
            "safeName": "Capability"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base",
              "camelCase": {
                "unsafeName": "partBase",
                "safeName": "partBase"
              },
              "snakeCase": {
                "unsafeName": "part_base",
                "safeName": "part_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE",
                "safeName": "PART_BASE"
              },
              "pascalCase": {
                "unsafeName": "PartBase",
                "safeName": "PartBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "capability_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "capability-summary": {
      "name": {
        "typeId": "capability-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "capability-summary",
          "camelCase": {
            "unsafeName": "capabilitySummary",
            "safeName": "capabilitySummary"
          },
          "snakeCase": {
            "unsafeName": "capability_summary",
            "safeName": "capability_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "CAPABILITY_SUMMARY",
            "safeName": "CAPABILITY_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "CapabilitySummary",
            "safeName": "CapabilitySummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base-summary",
              "camelCase": {
                "unsafeName": "partBaseSummary",
                "safeName": "partBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "part_base_summary",
                "safeName": "part_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE_SUMMARY",
                "safeName": "PART_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "PartBaseSummary",
                "safeName": "PartBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "capability-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "dev-org-auth-connections-create-request": {
      "name": {
        "typeId": "dev-org-auth-connections-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-create-request",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequest",
            "safeName": "devOrgAuthConnectionsCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request",
            "safeName": "dev_org_auth_connections_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequest",
            "safeName": "DevOrgAuthConnectionsCreateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsCreateRequestDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-create-request-type",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsCreateRequestType",
                  "safeName": "devOrgAuthConnectionsCreateRequestType"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_create_request_type",
                  "safeName": "dev_org_auth_connections_create_request_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TYPE",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsCreateRequestType",
                  "safeName": "DevOrgAuthConnectionsCreateRequestType"
                }
              },
              "typeId": "dev-org-auth-connections-create-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": {
                "originalName": "auth-connection-options-google-apps",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsGoogleApps",
                  "safeName": "authConnectionOptionsGoogleApps"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_google_apps",
                  "safeName": "auth_connection_options_google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS",
                  "safeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsGoogleApps",
                  "safeName": "AuthConnectionOptionsGoogleApps"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": {
                "originalName": "auth-connection-options-oidc",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsOidc",
                  "safeName": "authConnectionOptionsOidc"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_oidc",
                  "safeName": "auth_connection_options_oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_OIDC",
                  "safeName": "AUTH_CONNECTION_OPTIONS_OIDC"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsOidc",
                  "safeName": "AuthConnectionOptionsOidc"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": {
                "originalName": "auth-connection-options-saml",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsSaml",
                  "safeName": "authConnectionOptionsSaml"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_saml",
                  "safeName": "auth_connection_options_saml"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_SAML",
                  "safeName": "AUTH_CONNECTION_OPTIONS_SAML"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsSaml",
                  "safeName": "AuthConnectionOptionsSaml"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": {
                "originalName": "auth-connection-options-azure-ad",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsAzureAd",
                  "safeName": "authConnectionOptionsAzureAd"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_azure_ad",
                  "safeName": "auth_connection_options_azure_ad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD",
                  "safeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsAzureAd",
                  "safeName": "AuthConnectionOptionsAzureAd"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to create a new enterprise authentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-request_example_autogenerated": {}
        }
      }
    },
    "dev-org-auth-connections-create-request-type": {
      "name": {
        "typeId": "dev-org-auth-connections-create-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-create-request-type",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestType",
            "safeName": "devOrgAuthConnectionsCreateRequestType"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_type",
            "safeName": "dev_org_auth_connections_create_request_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TYPE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TYPE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestType",
            "safeName": "DevOrgAuthConnectionsCreateRequestType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Defines the type for the authentication connection. Different types of\nauthentication connections have different configuration parameters.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-request-type_example_autogenerated": "google_apps"
        }
      }
    },
    "dev-org-auth-connections-create-response": {
      "name": {
        "typeId": "dev-org-auth-connections-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-create-response",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateResponse",
            "safeName": "devOrgAuthConnectionsCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_response",
            "safeName": "dev_org_auth_connections_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_RESPONSE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateResponse",
            "safeName": "DevOrgAuthConnectionsCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "auth_connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to create a new enterprise authentication\nconnection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-create-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-org-auth-connections-delete-request": {
      "name": {
        "typeId": "dev-org-auth-connections-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-delete-request",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequest",
            "safeName": "devOrgAuthConnectionsDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request",
            "safeName": "dev_org_auth_connections_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequest",
            "safeName": "DevOrgAuthConnectionsDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection to be deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsDeleteRequestId_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to delete an enterprise authentication connection for a Dev\norganization. A default connection and a connection which is currently\nenabled cannot be deleted.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-delete-request_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "dev-org-auth-connections-get-response": {
      "name": {
        "typeId": "dev-org-auth-connections-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-get-response",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetResponse",
            "safeName": "devOrgAuthConnectionsGetResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_response",
            "safeName": "dev_org_auth_connections_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_RESPONSE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetResponse",
            "safeName": "DevOrgAuthConnectionsGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "auth_connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object encapsulating the configuration details of an\nauthentication connection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-get-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-org-auth-connections-list-response": {
      "name": {
        "typeId": "dev-org-auth-connections-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-list-response",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListResponse",
            "safeName": "devOrgAuthConnectionsListResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_response",
            "safeName": "dev_org_auth_connections_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_RESPONSE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListResponse",
            "safeName": "DevOrgAuthConnectionsListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "auth_connections",
                "camelCase": {
                  "unsafeName": "authConnections",
                  "safeName": "authConnections"
                },
                "snakeCase": {
                  "unsafeName": "auth_connections",
                  "safeName": "auth_connections"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTIONS",
                  "safeName": "AUTH_CONNECTIONS"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnections",
                  "safeName": "AuthConnections"
                }
              },
              "wireValue": "auth_connections"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-connection",
                    "camelCase": {
                      "unsafeName": "authConnection",
                      "safeName": "authConnection"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_connection",
                      "safeName": "auth_connection"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_CONNECTION",
                      "safeName": "AUTH_CONNECTION"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthConnection",
                      "safeName": "AuthConnection"
                    }
                  },
                  "typeId": "auth-connection",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "List of all the authentication connections currently configured for\na Dev organization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsListResponseAuthConnections_example_autogenerated": [
                  {}
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object for the request to list all the social and enterprise\nauthentication connections configured for a Dev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-list-response_example_autogenerated": {
            "auth_connections": [
              {}
            ]
          }
        }
      }
    },
    "dev-org-auth-connections-toggle-request": {
      "name": {
        "typeId": "dev-org-auth-connections-toggle-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-toggle-request",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequest",
            "safeName": "devOrgAuthConnectionsToggleRequest"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request",
            "safeName": "dev_org_auth_connections_toggle_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequest",
            "safeName": "DevOrgAuthConnectionsToggleRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection to be toggled.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsToggleRequestId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "toggle",
                "camelCase": {
                  "unsafeName": "toggle",
                  "safeName": "toggle"
                },
                "snakeCase": {
                  "unsafeName": "toggle",
                  "safeName": "toggle"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOGGLE",
                  "safeName": "TOGGLE"
                },
                "pascalCase": {
                  "unsafeName": "Toggle",
                  "safeName": "Toggle"
                }
              },
              "wireValue": "toggle"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-connection-toggle",
                    "camelCase": {
                      "unsafeName": "authConnectionToggle",
                      "safeName": "authConnectionToggle"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_connection_toggle",
                      "safeName": "auth_connection_toggle"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_CONNECTION_TOGGLE",
                      "safeName": "AUTH_CONNECTION_TOGGLE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthConnectionToggle",
                      "safeName": "AuthConnectionToggle"
                    }
                  },
                  "typeId": "auth-connection-toggle",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to enable or disable an authentication connection for a Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-toggle-request_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "dev-org-auth-connections-update-request": {
      "name": {
        "typeId": "dev-org-auth-connections-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-update-request",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequest",
            "safeName": "devOrgAuthConnectionsUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request",
            "safeName": "dev_org_auth_connections_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequest",
            "safeName": "DevOrgAuthConnectionsUpdateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsUpdateRequestDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the authentication connection which is to be updated.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevOrgAuthConnectionsUpdateRequestId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-update-request-type",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsUpdateRequestType",
                  "safeName": "devOrgAuthConnectionsUpdateRequestType"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_update_request_type",
                  "safeName": "dev_org_auth_connections_update_request_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TYPE",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsUpdateRequestType",
                  "safeName": "DevOrgAuthConnectionsUpdateRequestType"
                }
              },
              "typeId": "dev-org-auth-connections-update-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            },
            "displayName": "google_apps",
            "shape": {
              "typeId": "auth-connection-options-google-apps",
              "name": {
                "originalName": "auth-connection-options-google-apps",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsGoogleApps",
                  "safeName": "authConnectionOptionsGoogleApps"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_google_apps",
                  "safeName": "auth_connection_options_google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS",
                  "safeName": "AUTH_CONNECTION_OPTIONS_GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsGoogleApps",
                  "safeName": "AuthConnectionOptionsGoogleApps"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "google_apps",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "none",
                "camelCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "snakeCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NONE",
                  "safeName": "NONE"
                },
                "pascalCase": {
                  "unsafeName": "None",
                  "safeName": "None"
                }
              },
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": {
                "originalName": "empty",
                "camelCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "snakeCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMPTY",
                  "safeName": "EMPTY"
                },
                "pascalCase": {
                  "unsafeName": "Empty",
                  "safeName": "Empty"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            },
            "displayName": "oidc",
            "shape": {
              "typeId": "auth-connection-options-oidc",
              "name": {
                "originalName": "auth-connection-options-oidc",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsOidc",
                  "safeName": "authConnectionOptionsOidc"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_oidc",
                  "safeName": "auth_connection_options_oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_OIDC",
                  "safeName": "AUTH_CONNECTION_OPTIONS_OIDC"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsOidc",
                  "safeName": "AuthConnectionOptionsOidc"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "oidc",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            },
            "displayName": "samlp",
            "shape": {
              "typeId": "auth-connection-options-saml",
              "name": {
                "originalName": "auth-connection-options-saml",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsSaml",
                  "safeName": "authConnectionOptionsSaml"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_saml",
                  "safeName": "auth_connection_options_saml"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_SAML",
                  "safeName": "AUTH_CONNECTION_OPTIONS_SAML"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsSaml",
                  "safeName": "AuthConnectionOptionsSaml"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "samlp",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            },
            "displayName": "waad",
            "shape": {
              "typeId": "auth-connection-options-azure-ad",
              "name": {
                "originalName": "auth-connection-options-azure-ad",
                "camelCase": {
                  "unsafeName": "authConnectionOptionsAzureAd",
                  "safeName": "authConnectionOptionsAzureAd"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection_options_azure_ad",
                  "safeName": "auth_connection_options_azure_ad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD",
                  "safeName": "AUTH_CONNECTION_OPTIONS_AZURE_AD"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnectionOptionsAzureAd",
                  "safeName": "AuthConnectionOptionsAzureAd"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "waad",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request to update an enterprise authentication connection for a Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-request_example_autogenerated": {}
        }
      }
    },
    "dev-org-auth-connections-update-request-type": {
      "name": {
        "typeId": "dev-org-auth-connections-update-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-update-request-type",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestType",
            "safeName": "devOrgAuthConnectionsUpdateRequestType"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_type",
            "safeName": "dev_org_auth_connections_update_request_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TYPE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TYPE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestType",
            "safeName": "DevOrgAuthConnectionsUpdateRequestType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "google_apps",
                "camelCase": {
                  "unsafeName": "googleApps",
                  "safeName": "googleApps"
                },
                "snakeCase": {
                  "unsafeName": "google_apps",
                  "safeName": "google_apps"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GOOGLE_APPS",
                  "safeName": "GOOGLE_APPS"
                },
                "pascalCase": {
                  "unsafeName": "GoogleApps",
                  "safeName": "GoogleApps"
                }
              },
              "wireValue": "google_apps"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "none",
                "camelCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "snakeCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NONE",
                  "safeName": "NONE"
                },
                "pascalCase": {
                  "unsafeName": "None",
                  "safeName": "None"
                }
              },
              "wireValue": "none"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "oidc",
                "camelCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "snakeCase": {
                  "unsafeName": "oidc",
                  "safeName": "oidc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OIDC",
                  "safeName": "OIDC"
                },
                "pascalCase": {
                  "unsafeName": "Oidc",
                  "safeName": "Oidc"
                }
              },
              "wireValue": "oidc"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "samlp",
                "camelCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "snakeCase": {
                  "unsafeName": "samlp",
                  "safeName": "samlp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAMLP",
                  "safeName": "SAMLP"
                },
                "pascalCase": {
                  "unsafeName": "Samlp",
                  "safeName": "Samlp"
                }
              },
              "wireValue": "samlp"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "waad",
                "camelCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "snakeCase": {
                  "unsafeName": "waad",
                  "safeName": "waad"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WAAD",
                  "safeName": "WAAD"
                },
                "pascalCase": {
                  "unsafeName": "Waad",
                  "safeName": "Waad"
                }
              },
              "wireValue": "waad"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies the type for the authentication connection. Different types\nof authentication connections have different configuration parameters\nthat can be updated.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-request-type_example_autogenerated": "google_apps"
        }
      }
    },
    "dev-org-auth-connections-update-response": {
      "name": {
        "typeId": "dev-org-auth-connections-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-org-auth-connections-update-response",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateResponse",
            "safeName": "devOrgAuthConnectionsUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_response",
            "safeName": "dev_org_auth_connections_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_RESPONSE",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateResponse",
            "safeName": "DevOrgAuthConnectionsUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "auth_connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "wireValue": "auth_connection"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-connection",
                "camelCase": {
                  "unsafeName": "authConnection",
                  "safeName": "authConnection"
                },
                "snakeCase": {
                  "unsafeName": "auth_connection",
                  "safeName": "auth_connection"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_CONNECTION",
                  "safeName": "AUTH_CONNECTION"
                },
                "pascalCase": {
                  "unsafeName": "AuthConnection",
                  "safeName": "AuthConnection"
                }
              },
              "typeId": "auth-connection",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response for the request to update an enterprise authentication\nconnection.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-org-auth-connections-update-response_example_autogenerated": {
            "auth_connection": {}
          }
        }
      }
    },
    "dev-user": {
      "name": {
        "typeId": "dev-user",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-user",
          "camelCase": {
            "unsafeName": "devUser",
            "safeName": "devUser"
          },
          "snakeCase": {
            "unsafeName": "dev_user",
            "safeName": "dev_user"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USER",
            "safeName": "DEV_USER"
          },
          "pascalCase": {
            "unsafeName": "DevUser",
            "safeName": "DevUser"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "external_identities",
                "camelCase": {
                  "unsafeName": "externalIdentities",
                  "safeName": "externalIdentities"
                },
                "snakeCase": {
                  "unsafeName": "external_identities",
                  "safeName": "external_identities"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_IDENTITIES",
                  "safeName": "EXTERNAL_IDENTITIES"
                },
                "pascalCase": {
                  "unsafeName": "ExternalIdentities",
                  "safeName": "ExternalIdentities"
                }
              },
              "wireValue": "external_identities"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "external-identity",
                        "camelCase": {
                          "unsafeName": "externalIdentity",
                          "safeName": "externalIdentity"
                        },
                        "snakeCase": {
                          "unsafeName": "external_identity",
                          "safeName": "external_identity"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "EXTERNAL_IDENTITY",
                          "safeName": "EXTERNAL_IDENTITY"
                        },
                        "pascalCase": {
                          "unsafeName": "ExternalIdentity",
                          "safeName": "ExternalIdentity"
                        }
                      },
                      "typeId": "external-identity",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "IDs of the Dev User outside the DevRev SOR.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUserExternalIdentities_example_autogenerated": [
                  {}
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "user-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "user-base",
              "camelCase": {
                "unsafeName": "userBase",
                "safeName": "userBase"
              },
              "snakeCase": {
                "unsafeName": "user_base",
                "safeName": "user_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "USER_BASE",
                "safeName": "USER_BASE"
              },
              "pascalCase": {
                "unsafeName": "UserBase",
                "safeName": "UserBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-user_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "dev-user-summary": {
      "name": {
        "typeId": "dev-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-user-summary",
          "camelCase": {
            "unsafeName": "devUserSummary",
            "safeName": "devUserSummary"
          },
          "snakeCase": {
            "unsafeName": "dev_user_summary",
            "safeName": "dev_user_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USER_SUMMARY",
            "safeName": "DEV_USER_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "DevUserSummary",
            "safeName": "DevUserSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "user-base-summary",
              "camelCase": {
                "unsafeName": "userBaseSummary",
                "safeName": "userBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "user_base_summary",
                "safeName": "user_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "USER_BASE_SUMMARY",
                "safeName": "USER_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "UserBaseSummary",
                "safeName": "UserBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-user-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "dev-users-list-response": {
      "name": {
        "typeId": "dev-users-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-users-list-response",
          "camelCase": {
            "unsafeName": "devUsersListResponse",
            "safeName": "devUsersListResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_response",
            "safeName": "dev_users_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_RESPONSE",
            "safeName": "DEV_USERS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListResponse",
            "safeName": "DevUsersListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "dev_users",
                "camelCase": {
                  "unsafeName": "devUsers",
                  "safeName": "devUsers"
                },
                "snakeCase": {
                  "unsafeName": "dev_users",
                  "safeName": "dev_users"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USERS",
                  "safeName": "DEV_USERS"
                },
                "pascalCase": {
                  "unsafeName": "DevUsers",
                  "safeName": "DevUsers"
                }
              },
              "wireValue": "dev_users"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-user",
                    "camelCase": {
                      "unsafeName": "devUser",
                      "safeName": "devUser"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_user",
                      "safeName": "dev_user"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_USER",
                      "safeName": "DEV_USER"
                    },
                    "pascalCase": {
                      "unsafeName": "DevUser",
                      "safeName": "DevUser"
                    }
                  },
                  "typeId": "dev-user",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of Dev users.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponseDevUsers_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "DevUsersListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the Dev users.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-users-list-response_example_autogenerated": {
            "dev_users": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "dev-users-self-response": {
      "name": {
        "typeId": "dev-users-self-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dev-users-self-response",
          "camelCase": {
            "unsafeName": "devUsersSelfResponse",
            "safeName": "devUsersSelfResponse"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_response",
            "safeName": "dev_users_self_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_RESPONSE",
            "safeName": "DEV_USERS_SELF_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfResponse",
            "safeName": "DevUsersSelfResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "dev_user",
                "camelCase": {
                  "unsafeName": "devUser",
                  "safeName": "devUser"
                },
                "snakeCase": {
                  "unsafeName": "dev_user",
                  "safeName": "dev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USER",
                  "safeName": "DEV_USER"
                },
                "pascalCase": {
                  "unsafeName": "DevUser",
                  "safeName": "DevUser"
                }
              },
              "wireValue": "dev_user"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-user",
                "camelCase": {
                  "unsafeName": "devUser",
                  "safeName": "devUser"
                },
                "snakeCase": {
                  "unsafeName": "dev_user",
                  "safeName": "dev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USER",
                  "safeName": "DEV_USER"
                },
                "pascalCase": {
                  "unsafeName": "DevUser",
                  "safeName": "DevUser"
                }
              },
              "typeId": "dev-user",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting the information for the authenticated user.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "dev-users-self-response_example_autogenerated": {
            "dev_user": {
              "id": "foo"
            }
          }
        }
      }
    },
    "empty": {
      "name": {
        "typeId": "empty",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "empty",
          "camelCase": {
            "unsafeName": "empty",
            "safeName": "empty"
          },
          "snakeCase": {
            "unsafeName": "empty",
            "safeName": "empty"
          },
          "screamingSnakeCase": {
            "unsafeName": "EMPTY",
            "safeName": "EMPTY"
          },
          "pascalCase": {
            "unsafeName": "Empty",
            "safeName": "Empty"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "empty_example_autogenerated": {}
        }
      }
    },
    "enhancement": {
      "name": {
        "typeId": "enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "enhancement",
          "camelCase": {
            "unsafeName": "enhancement",
            "safeName": "enhancement"
          },
          "snakeCase": {
            "unsafeName": "enhancement",
            "safeName": "enhancement"
          },
          "screamingSnakeCase": {
            "unsafeName": "ENHANCEMENT",
            "safeName": "ENHANCEMENT"
          },
          "pascalCase": {
            "unsafeName": "Enhancement",
            "safeName": "Enhancement"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the enhancement is expected to be closed.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EnhancementTargetCloseDate_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base",
              "camelCase": {
                "unsafeName": "partBase",
                "safeName": "partBase"
              },
              "snakeCase": {
                "unsafeName": "part_base",
                "safeName": "part_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE",
                "safeName": "PART_BASE"
              },
              "pascalCase": {
                "unsafeName": "PartBase",
                "safeName": "PartBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "enhancement_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "enhancement-summary": {
      "name": {
        "typeId": "enhancement-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "enhancement-summary",
          "camelCase": {
            "unsafeName": "enhancementSummary",
            "safeName": "enhancementSummary"
          },
          "snakeCase": {
            "unsafeName": "enhancement_summary",
            "safeName": "enhancement_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "ENHANCEMENT_SUMMARY",
            "safeName": "ENHANCEMENT_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "EnhancementSummary",
            "safeName": "EnhancementSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base-summary",
              "camelCase": {
                "unsafeName": "partBaseSummary",
                "safeName": "partBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "part_base_summary",
                "safeName": "part_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE_SUMMARY",
                "safeName": "PART_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "PartBaseSummary",
                "safeName": "PartBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "enhancement-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "error-bad-request": {
      "name": {
        "typeId": "error-bad-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-bad-request-type",
                "camelCase": {
                  "unsafeName": "errorBadRequestType",
                  "safeName": "errorBadRequestType"
                },
                "snakeCase": {
                  "unsafeName": "error_bad_request_type",
                  "safeName": "error_bad_request_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_BAD_REQUEST_TYPE",
                  "safeName": "ERROR_BAD_REQUEST_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorBadRequestType",
                  "safeName": "ErrorBadRequestType"
                }
              },
              "typeId": "error-bad-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-bad-request": {
      "name": {
        "typeId": "error-bad-request-bad-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequestBadRequest",
            "safeName": "errorBadRequestBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_bad_request",
            "safeName": "error_bad_request_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestBadRequest",
            "safeName": "ErrorBadRequestBadRequest"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-bad-request_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-invalid-enum-value": {
      "name": {
        "typeId": "error-bad-request-invalid-enum-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-invalid-enum-value",
          "camelCase": {
            "unsafeName": "errorBadRequestInvalidEnumValue",
            "safeName": "errorBadRequestInvalidEnumValue"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_invalid_enum_value",
            "safeName": "error_bad_request_invalid_enum_value"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_INVALID_ENUM_VALUE",
            "safeName": "ERROR_BAD_REQUEST_INVALID_ENUM_VALUE"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestInvalidEnumValue",
            "safeName": "ErrorBadRequestInvalidEnumValue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "allowed_values",
                "camelCase": {
                  "unsafeName": "allowedValues",
                  "safeName": "allowedValues"
                },
                "snakeCase": {
                  "unsafeName": "allowed_values",
                  "safeName": "allowed_values"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ALLOWED_VALUES",
                  "safeName": "ALLOWED_VALUES"
                },
                "pascalCase": {
                  "unsafeName": "AllowedValues",
                  "safeName": "AllowedValues"
                }
              },
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The allowed values for the field.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueAllowedValues_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "field_name",
                "camelCase": {
                  "unsafeName": "fieldName",
                  "safeName": "fieldName"
                },
                "snakeCase": {
                  "unsafeName": "field_name",
                  "safeName": "field_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FIELD_NAME",
                  "safeName": "FIELD_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FieldName",
                  "safeName": "FieldName"
                }
              },
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The field whose enum value is invalid.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueFieldName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "value",
                "camelCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "snakeCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VALUE",
                  "safeName": "VALUE"
                },
                "pascalCase": {
                  "unsafeName": "Value",
                  "safeName": "Value"
                }
              },
              "wireValue": "value"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The value that was received.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestInvalidEnumValueValue_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-invalid-enum-value_example_autogenerated": {
            "allowed_values": [
              "foo"
            ],
            "field_name": "foo",
            "value": "foo"
          }
        }
      }
    },
    "error-bad-request-missing-required-field": {
      "name": {
        "typeId": "error-bad-request-missing-required-field",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-missing-required-field",
          "camelCase": {
            "unsafeName": "errorBadRequestMissingRequiredField",
            "safeName": "errorBadRequestMissingRequiredField"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_missing_required_field",
            "safeName": "error_bad_request_missing_required_field"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_MISSING_REQUIRED_FIELD",
            "safeName": "ERROR_BAD_REQUEST_MISSING_REQUIRED_FIELD"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestMissingRequiredField",
            "safeName": "ErrorBadRequestMissingRequiredField"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "field_name",
                "camelCase": {
                  "unsafeName": "fieldName",
                  "safeName": "fieldName"
                },
                "snakeCase": {
                  "unsafeName": "field_name",
                  "safeName": "field_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FIELD_NAME",
                  "safeName": "FIELD_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FieldName",
                  "safeName": "FieldName"
                }
              },
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The missing field's name.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestMissingRequiredFieldFieldName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-missing-required-field_example_autogenerated": {
            "field_name": "foo"
          }
        }
      }
    },
    "error-bad-request-parse-error": {
      "name": {
        "typeId": "error-bad-request-parse-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-parse-error",
          "camelCase": {
            "unsafeName": "errorBadRequestParseError",
            "safeName": "errorBadRequestParseError"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_parse_error",
            "safeName": "error_bad_request_parse_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_PARSE_ERROR",
            "safeName": "ERROR_BAD_REQUEST_PARSE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestParseError",
            "safeName": "ErrorBadRequestParseError"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-parse-error_example_autogenerated": {}
        }
      }
    },
    "error-bad-request-type": {
      "name": {
        "typeId": "error-bad-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-type",
          "camelCase": {
            "unsafeName": "errorBadRequestType",
            "safeName": "errorBadRequestType"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_type",
            "safeName": "error_bad_request_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_TYPE",
            "safeName": "ERROR_BAD_REQUEST_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestType",
            "safeName": "ErrorBadRequestType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "bad_request",
                "camelCase": {
                  "unsafeName": "badRequest",
                  "safeName": "badRequest"
                },
                "snakeCase": {
                  "unsafeName": "bad_request",
                  "safeName": "bad_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BAD_REQUEST",
                  "safeName": "BAD_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "BadRequest",
                  "safeName": "BadRequest"
                }
              },
              "wireValue": "bad_request"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "invalid_enum_value",
                "camelCase": {
                  "unsafeName": "invalidEnumValue",
                  "safeName": "invalidEnumValue"
                },
                "snakeCase": {
                  "unsafeName": "invalid_enum_value",
                  "safeName": "invalid_enum_value"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INVALID_ENUM_VALUE",
                  "safeName": "INVALID_ENUM_VALUE"
                },
                "pascalCase": {
                  "unsafeName": "InvalidEnumValue",
                  "safeName": "InvalidEnumValue"
                }
              },
              "wireValue": "invalid_enum_value"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "missing_required_field",
                "camelCase": {
                  "unsafeName": "missingRequiredField",
                  "safeName": "missingRequiredField"
                },
                "snakeCase": {
                  "unsafeName": "missing_required_field",
                  "safeName": "missing_required_field"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MISSING_REQUIRED_FIELD",
                  "safeName": "MISSING_REQUIRED_FIELD"
                },
                "pascalCase": {
                  "unsafeName": "MissingRequiredField",
                  "safeName": "MissingRequiredField"
                }
              },
              "wireValue": "missing_required_field"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "parse_error",
                "camelCase": {
                  "unsafeName": "parseError",
                  "safeName": "parseError"
                },
                "snakeCase": {
                  "unsafeName": "parse_error",
                  "safeName": "parse_error"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARSE_ERROR",
                  "safeName": "PARSE_ERROR"
                },
                "pascalCase": {
                  "unsafeName": "ParseError",
                  "safeName": "ParseError"
                }
              },
              "wireValue": "parse_error"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "value_not_permitted",
                "camelCase": {
                  "unsafeName": "valueNotPermitted",
                  "safeName": "valueNotPermitted"
                },
                "snakeCase": {
                  "unsafeName": "value_not_permitted",
                  "safeName": "value_not_permitted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VALUE_NOT_PERMITTED",
                  "safeName": "VALUE_NOT_PERMITTED"
                },
                "pascalCase": {
                  "unsafeName": "ValueNotPermitted",
                  "safeName": "ValueNotPermitted"
                }
              },
              "wireValue": "value_not_permitted"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-type_example_autogenerated": "bad_request"
        }
      }
    },
    "error-bad-request-value-not-permitted": {
      "name": {
        "typeId": "error-bad-request-value-not-permitted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request-value-not-permitted",
          "camelCase": {
            "unsafeName": "errorBadRequestValueNotPermitted",
            "safeName": "errorBadRequestValueNotPermitted"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request_value_not_permitted",
            "safeName": "error_bad_request_value_not_permitted"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST_VALUE_NOT_PERMITTED",
            "safeName": "ERROR_BAD_REQUEST_VALUE_NOT_PERMITTED"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequestValueNotPermitted",
            "safeName": "ErrorBadRequestValueNotPermitted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "field_name",
                "camelCase": {
                  "unsafeName": "fieldName",
                  "safeName": "fieldName"
                },
                "snakeCase": {
                  "unsafeName": "field_name",
                  "safeName": "field_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FIELD_NAME",
                  "safeName": "FIELD_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FieldName",
                  "safeName": "FieldName"
                }
              },
              "wireValue": "field_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The field whose value is not permitted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestValueNotPermittedFieldName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "reason",
                "camelCase": {
                  "unsafeName": "reason",
                  "safeName": "reason"
                },
                "snakeCase": {
                  "unsafeName": "reason",
                  "safeName": "reason"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REASON",
                  "safeName": "REASON"
                },
                "pascalCase": {
                  "unsafeName": "Reason",
                  "safeName": "Reason"
                }
              },
              "wireValue": "reason"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The reason the value isn't permitted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBadRequestValueNotPermittedReason_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-bad-request-value-not-permitted_example_autogenerated": {
            "field_name": "foo"
          }
        }
      }
    },
    "error-base": {
      "name": {
        "typeId": "error-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-base",
          "camelCase": {
            "unsafeName": "errorBase",
            "safeName": "errorBase"
          },
          "snakeCase": {
            "unsafeName": "error_base",
            "safeName": "error_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BASE",
            "safeName": "ERROR_BASE"
          },
          "pascalCase": {
            "unsafeName": "ErrorBase",
            "safeName": "ErrorBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "message",
                "camelCase": {
                  "unsafeName": "message",
                  "safeName": "message"
                },
                "snakeCase": {
                  "unsafeName": "message",
                  "safeName": "message"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MESSAGE",
                  "safeName": "MESSAGE"
                },
                "pascalCase": {
                  "unsafeName": "Message",
                  "safeName": "Message"
                }
              },
              "wireValue": "message"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The message associated with the error.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorBaseMessage_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-base_example_autogenerated": {}
        }
      }
    },
    "error-forbidden": {
      "name": {
        "typeId": "error-forbidden",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-forbidden-type",
                "camelCase": {
                  "unsafeName": "errorForbiddenType",
                  "safeName": "errorForbiddenType"
                },
                "snakeCase": {
                  "unsafeName": "error_forbidden_type",
                  "safeName": "error_forbidden_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_FORBIDDEN_TYPE",
                  "safeName": "ERROR_FORBIDDEN_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorForbiddenType",
                  "safeName": "ErrorForbiddenType"
                }
              },
              "typeId": "error-forbidden-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden_example_autogenerated": {}
        }
      }
    },
    "error-forbidden-forbidden": {
      "name": {
        "typeId": "error-forbidden-forbidden",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden-forbidden",
          "camelCase": {
            "unsafeName": "errorForbiddenForbidden",
            "safeName": "errorForbiddenForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden_forbidden",
            "safeName": "error_forbidden_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbiddenForbidden",
            "safeName": "ErrorForbiddenForbidden"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden-forbidden_example_autogenerated": {}
        }
      }
    },
    "error-forbidden-type": {
      "name": {
        "typeId": "error-forbidden-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden-type",
          "camelCase": {
            "unsafeName": "errorForbiddenType",
            "safeName": "errorForbiddenType"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden_type",
            "safeName": "error_forbidden_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN_TYPE",
            "safeName": "ERROR_FORBIDDEN_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbiddenType",
            "safeName": "ErrorForbiddenType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "forbidden",
                "camelCase": {
                  "unsafeName": "forbidden",
                  "safeName": "forbidden"
                },
                "snakeCase": {
                  "unsafeName": "forbidden",
                  "safeName": "forbidden"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FORBIDDEN",
                  "safeName": "FORBIDDEN"
                },
                "pascalCase": {
                  "unsafeName": "Forbidden",
                  "safeName": "Forbidden"
                }
              },
              "wireValue": "forbidden"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-forbidden-type_example_autogenerated": "forbidden"
        }
      }
    },
    "error-internal-server-error": {
      "name": {
        "typeId": "error-internal-server-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "reference_id",
                "camelCase": {
                  "unsafeName": "referenceId",
                  "safeName": "referenceId"
                },
                "snakeCase": {
                  "unsafeName": "reference_id",
                  "safeName": "reference_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REFERENCE_ID",
                  "safeName": "REFERENCE_ID"
                },
                "pascalCase": {
                  "unsafeName": "ReferenceId",
                  "safeName": "ReferenceId"
                }
              },
              "wireValue": "reference_id"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A unique ID that's generated for the error that can be used for\ninquiry.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorInternalServerErrorReferenceId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-internal-server-error-type",
                "camelCase": {
                  "unsafeName": "errorInternalServerErrorType",
                  "safeName": "errorInternalServerErrorType"
                },
                "snakeCase": {
                  "unsafeName": "error_internal_server_error_type",
                  "safeName": "error_internal_server_error_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_INTERNAL_SERVER_ERROR_TYPE",
                  "safeName": "ERROR_INTERNAL_SERVER_ERROR_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorInternalServerErrorType",
                  "safeName": "ErrorInternalServerErrorType"
                }
              },
              "typeId": "error-internal-server-error-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error_example_autogenerated": {}
        }
      }
    },
    "error-internal-server-error-internal-error": {
      "name": {
        "typeId": "error-internal-server-error-internal-error",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error-internal-error",
          "camelCase": {
            "unsafeName": "errorInternalServerErrorInternalError",
            "safeName": "errorInternalServerErrorInternalError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error_internal_error",
            "safeName": "error_internal_server_error_internal_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR_INTERNAL_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR_INTERNAL_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerErrorInternalError",
            "safeName": "ErrorInternalServerErrorInternalError"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error-internal-error_example_autogenerated": {}
        }
      }
    },
    "error-internal-server-error-type": {
      "name": {
        "typeId": "error-internal-server-error-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error-type",
          "camelCase": {
            "unsafeName": "errorInternalServerErrorType",
            "safeName": "errorInternalServerErrorType"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error_type",
            "safeName": "error_internal_server_error_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR_TYPE",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerErrorType",
            "safeName": "ErrorInternalServerErrorType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "internal_error",
                "camelCase": {
                  "unsafeName": "internalError",
                  "safeName": "internalError"
                },
                "snakeCase": {
                  "unsafeName": "internal_error",
                  "safeName": "internal_error"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNAL_ERROR",
                  "safeName": "INTERNAL_ERROR"
                },
                "pascalCase": {
                  "unsafeName": "InternalError",
                  "safeName": "InternalError"
                }
              },
              "wireValue": "internal_error"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-internal-server-error-type_example_autogenerated": "internal_error"
        }
      }
    },
    "error-not-found": {
      "name": {
        "typeId": "error-not-found",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-not-found-type",
                "camelCase": {
                  "unsafeName": "errorNotFoundType",
                  "safeName": "errorNotFoundType"
                },
                "snakeCase": {
                  "unsafeName": "error_not_found_type",
                  "safeName": "error_not_found_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_NOT_FOUND_TYPE",
                  "safeName": "ERROR_NOT_FOUND_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorNotFoundType",
                  "safeName": "ErrorNotFoundType"
                }
              },
              "typeId": "error-not-found-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found_example_autogenerated": {}
        }
      }
    },
    "error-not-found-not-found": {
      "name": {
        "typeId": "error-not-found-not-found",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found-not-found",
          "camelCase": {
            "unsafeName": "errorNotFoundNotFound",
            "safeName": "errorNotFoundNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found_not_found",
            "safeName": "error_not_found_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFoundNotFound",
            "safeName": "ErrorNotFoundNotFound"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found-not-found_example_autogenerated": {}
        }
      }
    },
    "error-not-found-type": {
      "name": {
        "typeId": "error-not-found-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found-type",
          "camelCase": {
            "unsafeName": "errorNotFoundType",
            "safeName": "errorNotFoundType"
          },
          "snakeCase": {
            "unsafeName": "error_not_found_type",
            "safeName": "error_not_found_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND_TYPE",
            "safeName": "ERROR_NOT_FOUND_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFoundType",
            "safeName": "ErrorNotFoundType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "not_found",
                "camelCase": {
                  "unsafeName": "notFound",
                  "safeName": "notFound"
                },
                "snakeCase": {
                  "unsafeName": "not_found",
                  "safeName": "not_found"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NOT_FOUND",
                  "safeName": "NOT_FOUND"
                },
                "pascalCase": {
                  "unsafeName": "NotFound",
                  "safeName": "NotFound"
                }
              },
              "wireValue": "not_found"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-not-found-type_example_autogenerated": "not_found"
        }
      }
    },
    "error-service-unavailable": {
      "name": {
        "typeId": "error-service-unavailable",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-service-unavailable-type",
                "camelCase": {
                  "unsafeName": "errorServiceUnavailableType",
                  "safeName": "errorServiceUnavailableType"
                },
                "snakeCase": {
                  "unsafeName": "error_service_unavailable_type",
                  "safeName": "error_service_unavailable_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_SERVICE_UNAVAILABLE_TYPE",
                  "safeName": "ERROR_SERVICE_UNAVAILABLE_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorServiceUnavailableType",
                  "safeName": "ErrorServiceUnavailableType"
                }
              },
              "typeId": "error-service-unavailable-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable_example_autogenerated": {}
        }
      }
    },
    "error-service-unavailable-service-unavailable": {
      "name": {
        "typeId": "error-service-unavailable-service-unavailable",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailableServiceUnavailable",
            "safeName": "errorServiceUnavailableServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable_service_unavailable",
            "safeName": "error_service_unavailable_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailableServiceUnavailable",
            "safeName": "ErrorServiceUnavailableServiceUnavailable"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable-service-unavailable_example_autogenerated": {}
        }
      }
    },
    "error-service-unavailable-type": {
      "name": {
        "typeId": "error-service-unavailable-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable-type",
          "camelCase": {
            "unsafeName": "errorServiceUnavailableType",
            "safeName": "errorServiceUnavailableType"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable_type",
            "safeName": "error_service_unavailable_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE_TYPE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailableType",
            "safeName": "ErrorServiceUnavailableType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "service_unavailable",
                "camelCase": {
                  "unsafeName": "serviceUnavailable",
                  "safeName": "serviceUnavailable"
                },
                "snakeCase": {
                  "unsafeName": "service_unavailable",
                  "safeName": "service_unavailable"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SERVICE_UNAVAILABLE",
                  "safeName": "SERVICE_UNAVAILABLE"
                },
                "pascalCase": {
                  "unsafeName": "ServiceUnavailable",
                  "safeName": "ServiceUnavailable"
                }
              },
              "wireValue": "service_unavailable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-service-unavailable-type_example_autogenerated": "service_unavailable"
        }
      }
    },
    "error-too-many-requests": {
      "name": {
        "typeId": "error-too-many-requests",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "retry_after",
                "camelCase": {
                  "unsafeName": "retryAfter",
                  "safeName": "retryAfter"
                },
                "snakeCase": {
                  "unsafeName": "retry_after",
                  "safeName": "retry_after"
                },
                "screamingSnakeCase": {
                  "unsafeName": "RETRY_AFTER",
                  "safeName": "RETRY_AFTER"
                },
                "pascalCase": {
                  "unsafeName": "RetryAfter",
                  "safeName": "RetryAfter"
                }
              },
              "wireValue": "retry_after"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "LONG",
                    "v2": {
                      "type": "long"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The number of seconds after which the client should retry.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "ErrorTooManyRequestsRetryAfter_example_autogenerated": 42
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-too-many-requests-type",
                "camelCase": {
                  "unsafeName": "errorTooManyRequestsType",
                  "safeName": "errorTooManyRequestsType"
                },
                "snakeCase": {
                  "unsafeName": "error_too_many_requests_type",
                  "safeName": "error_too_many_requests_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_TOO_MANY_REQUESTS_TYPE",
                  "safeName": "ERROR_TOO_MANY_REQUESTS_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorTooManyRequestsType",
                  "safeName": "ErrorTooManyRequestsType"
                }
              },
              "typeId": "error-too-many-requests-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests_example_autogenerated": {}
        }
      }
    },
    "error-too-many-requests-too-many-requests": {
      "name": {
        "typeId": "error-too-many-requests-too-many-requests",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequestsTooManyRequests",
            "safeName": "errorTooManyRequestsTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests_too_many_requests",
            "safeName": "error_too_many_requests_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequestsTooManyRequests",
            "safeName": "ErrorTooManyRequestsTooManyRequests"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests-too-many-requests_example_autogenerated": {}
        }
      }
    },
    "error-too-many-requests-type": {
      "name": {
        "typeId": "error-too-many-requests-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests-type",
          "camelCase": {
            "unsafeName": "errorTooManyRequestsType",
            "safeName": "errorTooManyRequestsType"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests_type",
            "safeName": "error_too_many_requests_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS_TYPE",
            "safeName": "ERROR_TOO_MANY_REQUESTS_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequestsType",
            "safeName": "ErrorTooManyRequestsType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "too_many_requests",
                "camelCase": {
                  "unsafeName": "tooManyRequests",
                  "safeName": "tooManyRequests"
                },
                "snakeCase": {
                  "unsafeName": "too_many_requests",
                  "safeName": "too_many_requests"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TOO_MANY_REQUESTS",
                  "safeName": "TOO_MANY_REQUESTS"
                },
                "pascalCase": {
                  "unsafeName": "TooManyRequests",
                  "safeName": "TooManyRequests"
                }
              },
              "wireValue": "too_many_requests"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-too-many-requests-type_example_autogenerated": "too_many_requests"
        }
      }
    },
    "error-unauthorized": {
      "name": {
        "typeId": "error-unauthorized",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "error-unauthorized-type",
                "camelCase": {
                  "unsafeName": "errorUnauthorizedType",
                  "safeName": "errorUnauthorizedType"
                },
                "snakeCase": {
                  "unsafeName": "error_unauthorized_type",
                  "safeName": "error_unauthorized_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ERROR_UNAUTHORIZED_TYPE",
                  "safeName": "ERROR_UNAUTHORIZED_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "ErrorUnauthorizedType",
                  "safeName": "ErrorUnauthorizedType"
                }
              },
              "typeId": "error-unauthorized-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "error-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "error-base",
              "camelCase": {
                "unsafeName": "errorBase",
                "safeName": "errorBase"
              },
              "snakeCase": {
                "unsafeName": "error_base",
                "safeName": "error_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ERROR_BASE",
                "safeName": "ERROR_BASE"
              },
              "pascalCase": {
                "unsafeName": "ErrorBase",
                "safeName": "ErrorBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized_example_autogenerated": {}
        }
      }
    },
    "error-unauthorized-type": {
      "name": {
        "typeId": "error-unauthorized-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized-type",
          "camelCase": {
            "unsafeName": "errorUnauthorizedType",
            "safeName": "errorUnauthorizedType"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized_type",
            "safeName": "error_unauthorized_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED_TYPE",
            "safeName": "ERROR_UNAUTHORIZED_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorizedType",
            "safeName": "ErrorUnauthorizedType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "unauthenticated",
                "camelCase": {
                  "unsafeName": "unauthenticated",
                  "safeName": "unauthenticated"
                },
                "snakeCase": {
                  "unsafeName": "unauthenticated",
                  "safeName": "unauthenticated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UNAUTHENTICATED",
                  "safeName": "UNAUTHENTICATED"
                },
                "pascalCase": {
                  "unsafeName": "Unauthenticated",
                  "safeName": "Unauthenticated"
                }
              },
              "wireValue": "unauthenticated"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized-type_example_autogenerated": "unauthenticated"
        }
      }
    },
    "error-unauthorized-unauthenticated": {
      "name": {
        "typeId": "error-unauthorized-unauthenticated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized-unauthenticated",
          "camelCase": {
            "unsafeName": "errorUnauthorizedUnauthenticated",
            "safeName": "errorUnauthorizedUnauthenticated"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized_unauthenticated",
            "safeName": "error_unauthorized_unauthenticated"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED_UNAUTHENTICATED",
            "safeName": "ERROR_UNAUTHORIZED_UNAUTHENTICATED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorizedUnauthenticated",
            "safeName": "ErrorUnauthorizedUnauthenticated"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "error-unauthorized-unauthenticated_example_autogenerated": {}
        }
      }
    },
    "event-part-created": {
      "name": {
        "typeId": "event-part-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-part-created",
          "camelCase": {
            "unsafeName": "eventPartCreated",
            "safeName": "eventPartCreated"
          },
          "snakeCase": {
            "unsafeName": "event_part_created",
            "safeName": "event_part_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_PART_CREATED",
            "safeName": "EVENT_PART_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventPartCreated",
            "safeName": "EventPartCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-created_example_autogenerated": {
            "part": {
              "id": "foo",
              "name": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ]
            }
          }
        }
      }
    },
    "event-part-deleted": {
      "name": {
        "typeId": "event-part-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-part-deleted",
          "camelCase": {
            "unsafeName": "eventPartDeleted",
            "safeName": "eventPartDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_part_deleted",
            "safeName": "event_part_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_PART_DELETED",
            "safeName": "EVENT_PART_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventPartDeleted",
            "safeName": "EventPartDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventPartDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
          }
        }
      }
    },
    "event-part-updated": {
      "name": {
        "typeId": "event-part-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-part-updated",
          "camelCase": {
            "unsafeName": "eventPartUpdated",
            "safeName": "eventPartUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_part_updated",
            "safeName": "event_part_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_PART_UPDATED",
            "safeName": "EVENT_PART_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventPartUpdated",
            "safeName": "EventPartUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-part-updated_example_autogenerated": {
            "part": {
              "id": "foo",
              "name": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ]
            }
          }
        }
      }
    },
    "event-rev-org-created": {
      "name": {
        "typeId": "event-rev-org-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-rev-org-created",
          "camelCase": {
            "unsafeName": "eventRevOrgCreated",
            "safeName": "eventRevOrgCreated"
          },
          "snakeCase": {
            "unsafeName": "event_rev_org_created",
            "safeName": "event_rev_org_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_REV_ORG_CREATED",
            "safeName": "EVENT_REV_ORG_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventRevOrgCreated",
            "safeName": "EventRevOrgCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-created_example_autogenerated": {
            "rev_org": {
              "id": "foo"
            }
          }
        }
      }
    },
    "event-rev-org-deleted": {
      "name": {
        "typeId": "event-rev-org-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-rev-org-deleted",
          "camelCase": {
            "unsafeName": "eventRevOrgDeleted",
            "safeName": "eventRevOrgDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_rev_org_deleted",
            "safeName": "event_rev_org_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_REV_ORG_DELETED",
            "safeName": "EVENT_REV_ORG_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventRevOrgDeleted",
            "safeName": "EventRevOrgDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the Rev organization that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventRevOrgDeletedId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-deleted_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "event-rev-org-updated": {
      "name": {
        "typeId": "event-rev-org-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-rev-org-updated",
          "camelCase": {
            "unsafeName": "eventRevOrgUpdated",
            "safeName": "eventRevOrgUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_rev_org_updated",
            "safeName": "event_rev_org_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_REV_ORG_UPDATED",
            "safeName": "EVENT_REV_ORG_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventRevOrgUpdated",
            "safeName": "EventRevOrgUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-rev-org-updated_example_autogenerated": {
            "rev_org": {
              "id": "foo"
            }
          }
        }
      }
    },
    "event-tag-created": {
      "name": {
        "typeId": "event-tag-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-tag-created",
          "camelCase": {
            "unsafeName": "eventTagCreated",
            "safeName": "eventTagCreated"
          },
          "snakeCase": {
            "unsafeName": "event_tag_created",
            "safeName": "event_tag_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TAG_CREATED",
            "safeName": "EVENT_TAG_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventTagCreated",
            "safeName": "EventTagCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-created_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "event-tag-deleted": {
      "name": {
        "typeId": "event-tag-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-tag-deleted",
          "camelCase": {
            "unsafeName": "eventTagDeleted",
            "safeName": "eventTagDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_tag_deleted",
            "safeName": "event_tag_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TAG_DELETED",
            "safeName": "EVENT_TAG_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventTagDeleted",
            "safeName": "EventTagDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventTagDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "event-tag-updated": {
      "name": {
        "typeId": "event-tag-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-tag-updated",
          "camelCase": {
            "unsafeName": "eventTagUpdated",
            "safeName": "eventTagUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_tag_updated",
            "safeName": "event_tag_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TAG_UPDATED",
            "safeName": "EVENT_TAG_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventTagUpdated",
            "safeName": "EventTagUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-tag-updated_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "event-timeline-entry-created": {
      "name": {
        "typeId": "event-timeline-entry-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-timeline-entry-created",
          "camelCase": {
            "unsafeName": "eventTimelineEntryCreated",
            "safeName": "eventTimelineEntryCreated"
          },
          "snakeCase": {
            "unsafeName": "event_timeline_entry_created",
            "safeName": "event_timeline_entry_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TIMELINE_ENTRY_CREATED",
            "safeName": "EVENT_TIMELINE_ENTRY_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventTimelineEntryCreated",
            "safeName": "EventTimelineEntryCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "entry",
                "camelCase": {
                  "unsafeName": "entry",
                  "safeName": "entry"
                },
                "snakeCase": {
                  "unsafeName": "entry",
                  "safeName": "entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENTRY",
                  "safeName": "ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "Entry",
                  "safeName": "Entry"
                }
              },
              "wireValue": "entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-created_example_autogenerated": {
            "entry": {
              "id": "foo"
            }
          }
        }
      }
    },
    "event-timeline-entry-deleted": {
      "name": {
        "typeId": "event-timeline-entry-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-timeline-entry-deleted",
          "camelCase": {
            "unsafeName": "eventTimelineEntryDeleted",
            "safeName": "eventTimelineEntryDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_timeline_entry_deleted",
            "safeName": "event_timeline_entry_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TIMELINE_ENTRY_DELETED",
            "safeName": "EVENT_TIMELINE_ENTRY_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventTimelineEntryDeleted",
            "safeName": "EventTimelineEntryDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the timeline entry that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "EventTimelineEntryDeletedId_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-deleted_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "event-timeline-entry-updated": {
      "name": {
        "typeId": "event-timeline-entry-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-timeline-entry-updated",
          "camelCase": {
            "unsafeName": "eventTimelineEntryUpdated",
            "safeName": "eventTimelineEntryUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_timeline_entry_updated",
            "safeName": "event_timeline_entry_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_TIMELINE_ENTRY_UPDATED",
            "safeName": "EVENT_TIMELINE_ENTRY_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventTimelineEntryUpdated",
            "safeName": "EventTimelineEntryUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "entry",
                "camelCase": {
                  "unsafeName": "entry",
                  "safeName": "entry"
                },
                "snakeCase": {
                  "unsafeName": "entry",
                  "safeName": "entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENTRY",
                  "safeName": "ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "Entry",
                  "safeName": "Entry"
                }
              },
              "wireValue": "entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-timeline-entry-updated_example_autogenerated": {
            "entry": {
              "id": "foo"
            }
          }
        }
      }
    },
    "event-webhook-created": {
      "name": {
        "typeId": "event-webhook-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-webhook-created",
          "camelCase": {
            "unsafeName": "eventWebhookCreated",
            "safeName": "eventWebhookCreated"
          },
          "snakeCase": {
            "unsafeName": "event_webhook_created",
            "safeName": "event_webhook_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WEBHOOK_CREATED",
            "safeName": "EVENT_WEBHOOK_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventWebhookCreated",
            "safeName": "EventWebhookCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-created_example_autogenerated": {
            "webhook": {
              "id": "foo",
              "secret": "foo",
              "status": "active",
              "url": "foo"
            }
          }
        }
      }
    },
    "event-webhook-deleted": {
      "name": {
        "typeId": "event-webhook-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-webhook-deleted",
          "camelCase": {
            "unsafeName": "eventWebhookDeleted",
            "safeName": "eventWebhookDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_webhook_deleted",
            "safeName": "event_webhook_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WEBHOOK_DELETED",
            "safeName": "EVENT_WEBHOOK_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventWebhookDeleted",
            "safeName": "EventWebhookDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the webhook that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventWebhookDeletedId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-deleted_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "event-webhook-updated": {
      "name": {
        "typeId": "event-webhook-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-webhook-updated",
          "camelCase": {
            "unsafeName": "eventWebhookUpdated",
            "safeName": "eventWebhookUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_webhook_updated",
            "safeName": "event_webhook_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WEBHOOK_UPDATED",
            "safeName": "EVENT_WEBHOOK_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventWebhookUpdated",
            "safeName": "EventWebhookUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-webhook-updated_example_autogenerated": {
            "webhook": {
              "id": "foo",
              "secret": "foo",
              "status": "active",
              "url": "foo"
            }
          }
        }
      }
    },
    "event-work-created": {
      "name": {
        "typeId": "event-work-created",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-work-created",
          "camelCase": {
            "unsafeName": "eventWorkCreated",
            "safeName": "eventWorkCreated"
          },
          "snakeCase": {
            "unsafeName": "event_work_created",
            "safeName": "event_work_created"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WORK_CREATED",
            "safeName": "EVENT_WORK_CREATED"
          },
          "pascalCase": {
            "unsafeName": "EventWorkCreated",
            "safeName": "EventWorkCreated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-created_example_autogenerated": {
            "work": {
              "id": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ],
              "title": "foo"
            }
          }
        }
      }
    },
    "event-work-deleted": {
      "name": {
        "typeId": "event-work-deleted",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-work-deleted",
          "camelCase": {
            "unsafeName": "eventWorkDeleted",
            "safeName": "eventWorkDeleted"
          },
          "snakeCase": {
            "unsafeName": "event_work_deleted",
            "safeName": "event_work_deleted"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WORK_DELETED",
            "safeName": "EVENT_WORK_DELETED"
          },
          "pascalCase": {
            "unsafeName": "EventWorkDeleted",
            "safeName": "EventWorkDeleted"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the work that was deleted.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "EventWorkDeletedId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-deleted_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
          }
        }
      }
    },
    "event-work-updated": {
      "name": {
        "typeId": "event-work-updated",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "event-work-updated",
          "camelCase": {
            "unsafeName": "eventWorkUpdated",
            "safeName": "eventWorkUpdated"
          },
          "snakeCase": {
            "unsafeName": "event_work_updated",
            "safeName": "event_work_updated"
          },
          "screamingSnakeCase": {
            "unsafeName": "EVENT_WORK_UPDATED",
            "safeName": "EVENT_WORK_UPDATED"
          },
          "pascalCase": {
            "unsafeName": "EventWorkUpdated",
            "safeName": "EventWorkUpdated"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "event-work-updated_example_autogenerated": {
            "work": {
              "id": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ],
              "title": "foo"
            }
          }
        }
      }
    },
    "external-identity": {
      "name": {
        "typeId": "external-identity",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "external-identity",
          "camelCase": {
            "unsafeName": "externalIdentity",
            "safeName": "externalIdentity"
          },
          "snakeCase": {
            "unsafeName": "external_identity",
            "safeName": "external_identity"
          },
          "screamingSnakeCase": {
            "unsafeName": "EXTERNAL_IDENTITY",
            "safeName": "EXTERNAL_IDENTITY"
          },
          "pascalCase": {
            "unsafeName": "ExternalIdentity",
            "safeName": "ExternalIdentity"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "External identity of a user.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "external-identity_example_autogenerated": {}
        }
      }
    },
    "feature": {
      "name": {
        "typeId": "feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "feature",
          "camelCase": {
            "unsafeName": "feature",
            "safeName": "feature"
          },
          "snakeCase": {
            "unsafeName": "feature",
            "safeName": "feature"
          },
          "screamingSnakeCase": {
            "unsafeName": "FEATURE",
            "safeName": "FEATURE"
          },
          "pascalCase": {
            "unsafeName": "Feature",
            "safeName": "Feature"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base",
              "camelCase": {
                "unsafeName": "partBase",
                "safeName": "partBase"
              },
              "snakeCase": {
                "unsafeName": "part_base",
                "safeName": "part_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE",
                "safeName": "PART_BASE"
              },
              "pascalCase": {
                "unsafeName": "PartBase",
                "safeName": "PartBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "feature_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "feature-summary": {
      "name": {
        "typeId": "feature-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "feature-summary",
          "camelCase": {
            "unsafeName": "featureSummary",
            "safeName": "featureSummary"
          },
          "snakeCase": {
            "unsafeName": "feature_summary",
            "safeName": "feature_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "FEATURE_SUMMARY",
            "safeName": "FEATURE_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "FeatureSummary",
            "safeName": "FeatureSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base-summary",
              "camelCase": {
                "unsafeName": "partBaseSummary",
                "safeName": "partBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "part_base_summary",
                "safeName": "part_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE_SUMMARY",
                "safeName": "PART_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "PartBaseSummary",
                "safeName": "PartBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "feature-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "group-summary": {
      "name": {
        "typeId": "group-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "group-summary",
          "camelCase": {
            "unsafeName": "groupSummary",
            "safeName": "groupSummary"
          },
          "snakeCase": {
            "unsafeName": "group_summary",
            "safeName": "group_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "GROUP_SUMMARY",
            "safeName": "GROUP_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "GroupSummary",
            "safeName": "GroupSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "group-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "issue": {
      "name": {
        "typeId": "issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "issue",
          "camelCase": {
            "unsafeName": "issue",
            "safeName": "issue"
          },
          "snakeCase": {
            "unsafeName": "issue",
            "safeName": "issue"
          },
          "screamingSnakeCase": {
            "unsafeName": "ISSUE",
            "safeName": "ISSUE"
          },
          "pascalCase": {
            "unsafeName": "Issue",
            "safeName": "Issue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "priority",
                "camelCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "snakeCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRIORITY",
                  "safeName": "PRIORITY"
                },
                "pascalCase": {
                  "unsafeName": "Priority",
                  "safeName": "Priority"
                }
              },
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "issue-priority",
                    "camelCase": {
                      "unsafeName": "issuePriority",
                      "safeName": "issuePriority"
                    },
                    "snakeCase": {
                      "unsafeName": "issue_priority",
                      "safeName": "issue_priority"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ISSUE_PRIORITY",
                      "safeName": "ISSUE_PRIORITY"
                    },
                    "pascalCase": {
                      "unsafeName": "IssuePriority",
                      "safeName": "IssuePriority"
                    }
                  },
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "work-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "work-base",
              "camelCase": {
                "unsafeName": "workBase",
                "safeName": "workBase"
              },
              "snakeCase": {
                "unsafeName": "work_base",
                "safeName": "work_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "WORK_BASE",
                "safeName": "WORK_BASE"
              },
              "pascalCase": {
                "unsafeName": "WorkBase",
                "safeName": "WorkBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "issue_example_autogenerated": {
            "id": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ],
            "title": "foo"
          }
        }
      }
    },
    "issue-priority": {
      "name": {
        "typeId": "issue-priority",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "issue-priority",
          "camelCase": {
            "unsafeName": "issuePriority",
            "safeName": "issuePriority"
          },
          "snakeCase": {
            "unsafeName": "issue_priority",
            "safeName": "issue_priority"
          },
          "screamingSnakeCase": {
            "unsafeName": "ISSUE_PRIORITY",
            "safeName": "ISSUE_PRIORITY"
          },
          "pascalCase": {
            "unsafeName": "IssuePriority",
            "safeName": "IssuePriority"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "p0",
                "camelCase": {
                  "unsafeName": "p0",
                  "safeName": "p0"
                },
                "snakeCase": {
                  "unsafeName": "p_0",
                  "safeName": "p_0"
                },
                "screamingSnakeCase": {
                  "unsafeName": "P_0",
                  "safeName": "P_0"
                },
                "pascalCase": {
                  "unsafeName": "P0",
                  "safeName": "P0"
                }
              },
              "wireValue": "p0"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "p1",
                "camelCase": {
                  "unsafeName": "p1",
                  "safeName": "p1"
                },
                "snakeCase": {
                  "unsafeName": "p_1",
                  "safeName": "p_1"
                },
                "screamingSnakeCase": {
                  "unsafeName": "P_1",
                  "safeName": "P_1"
                },
                "pascalCase": {
                  "unsafeName": "P1",
                  "safeName": "P1"
                }
              },
              "wireValue": "p1"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "p2",
                "camelCase": {
                  "unsafeName": "p2",
                  "safeName": "p2"
                },
                "snakeCase": {
                  "unsafeName": "p_2",
                  "safeName": "p_2"
                },
                "screamingSnakeCase": {
                  "unsafeName": "P_2",
                  "safeName": "P_2"
                },
                "pascalCase": {
                  "unsafeName": "P2",
                  "safeName": "P2"
                }
              },
              "wireValue": "p2"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "p3",
                "camelCase": {
                  "unsafeName": "p3",
                  "safeName": "p3"
                },
                "snakeCase": {
                  "unsafeName": "p_3",
                  "safeName": "p_3"
                },
                "screamingSnakeCase": {
                  "unsafeName": "P_3",
                  "safeName": "P_3"
                },
                "pascalCase": {
                  "unsafeName": "P3",
                  "safeName": "P3"
                }
              },
              "wireValue": "p3"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Priority of the work based upon impact and criticality.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "issue-priority_example_autogenerated": "p0"
        }
      }
    },
    "list-mode": {
      "name": {
        "typeId": "list-mode",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "list-mode",
          "camelCase": {
            "unsafeName": "listMode",
            "safeName": "listMode"
          },
          "snakeCase": {
            "unsafeName": "list_mode",
            "safeName": "list_mode"
          },
          "screamingSnakeCase": {
            "unsafeName": "LIST_MODE",
            "safeName": "LIST_MODE"
          },
          "pascalCase": {
            "unsafeName": "ListMode",
            "safeName": "ListMode"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "after",
                "camelCase": {
                  "unsafeName": "after",
                  "safeName": "after"
                },
                "snakeCase": {
                  "unsafeName": "after",
                  "safeName": "after"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AFTER",
                  "safeName": "AFTER"
                },
                "pascalCase": {
                  "unsafeName": "After",
                  "safeName": "After"
                }
              },
              "wireValue": "after"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "before",
                "camelCase": {
                  "unsafeName": "before",
                  "safeName": "before"
                },
                "snakeCase": {
                  "unsafeName": "before",
                  "safeName": "before"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BEFORE",
                  "safeName": "BEFORE"
                },
                "pascalCase": {
                  "unsafeName": "Before",
                  "safeName": "Before"
                }
              },
              "wireValue": "before"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The iteration mode to use. If \"after\", then entries after the provided\ncursor will be returned, or if no cursor is provided, then from the\nbeginning. If \"before\", then entries before the provided cursor will be\nreturned, or if no cursor is provided, then from the end. Entries will\nalways be returned in the specified sort-by order.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "list-mode_example_autogenerated": "after"
        }
      }
    },
    "org-base": {
      "name": {
        "typeId": "org-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "org-base",
          "camelCase": {
            "unsafeName": "orgBase",
            "safeName": "orgBase"
          },
          "snakeCase": {
            "unsafeName": "org_base",
            "safeName": "org_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "ORG_BASE",
            "safeName": "ORG_BASE"
          },
          "pascalCase": {
            "unsafeName": "OrgBase",
            "safeName": "OrgBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Name of the Organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "OrgBaseDisplayName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-base_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "org-base-summary": {
      "name": {
        "typeId": "org-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "org-base-summary",
          "camelCase": {
            "unsafeName": "orgBaseSummary",
            "safeName": "orgBaseSummary"
          },
          "snakeCase": {
            "unsafeName": "org_base_summary",
            "safeName": "org_base_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "ORG_BASE_SUMMARY",
            "safeName": "ORG_BASE_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "OrgBaseSummary",
            "safeName": "OrgBaseSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Name of the Organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "OrgBaseSummaryDisplayName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-base-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "org-environment": {
      "name": {
        "typeId": "org-environment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "org-environment",
          "camelCase": {
            "unsafeName": "orgEnvironment",
            "safeName": "orgEnvironment"
          },
          "snakeCase": {
            "unsafeName": "org_environment",
            "safeName": "org_environment"
          },
          "screamingSnakeCase": {
            "unsafeName": "ORG_ENVIRONMENT",
            "safeName": "ORG_ENVIRONMENT"
          },
          "pascalCase": {
            "unsafeName": "OrgEnvironment",
            "safeName": "OrgEnvironment"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "production",
                "camelCase": {
                  "unsafeName": "production",
                  "safeName": "production"
                },
                "snakeCase": {
                  "unsafeName": "production",
                  "safeName": "production"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCTION",
                  "safeName": "PRODUCTION"
                },
                "pascalCase": {
                  "unsafeName": "Production",
                  "safeName": "Production"
                }
              },
              "wireValue": "production"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "staging",
                "camelCase": {
                  "unsafeName": "staging",
                  "safeName": "staging"
                },
                "snakeCase": {
                  "unsafeName": "staging",
                  "safeName": "staging"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STAGING",
                  "safeName": "STAGING"
                },
                "pascalCase": {
                  "unsafeName": "Staging",
                  "safeName": "Staging"
                }
              },
              "wireValue": "staging"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "test",
                "camelCase": {
                  "unsafeName": "test",
                  "safeName": "test"
                },
                "snakeCase": {
                  "unsafeName": "test",
                  "safeName": "test"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TEST",
                  "safeName": "TEST"
                },
                "pascalCase": {
                  "unsafeName": "Test",
                  "safeName": "Test"
                }
              },
              "wireValue": "test"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The environment of the Org. Defaults to 'production' if not specified.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-environment_example_autogenerated": "production"
        }
      }
    },
    "org-summary": {
      "name": {
        "typeId": "org-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "org-summary",
          "camelCase": {
            "unsafeName": "orgSummary",
            "safeName": "orgSummary"
          },
          "snakeCase": {
            "unsafeName": "org_summary",
            "safeName": "org_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "ORG_SUMMARY",
            "safeName": "ORG_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "OrgSummary",
            "safeName": "OrgSummary"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "org-type",
                "camelCase": {
                  "unsafeName": "orgType",
                  "safeName": "orgType"
                },
                "snakeCase": {
                  "unsafeName": "org_type",
                  "safeName": "org_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ORG_TYPE",
                  "safeName": "ORG_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "OrgType",
                  "safeName": "OrgType"
                }
              },
              "typeId": "org-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "displayName": "rev_org",
            "shape": {
              "typeId": "rev-org-summary",
              "name": {
                "originalName": "rev-org-summary",
                "camelCase": {
                  "unsafeName": "revOrgSummary",
                  "safeName": "revOrgSummary"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_summary",
                  "safeName": "rev_org_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_SUMMARY",
                  "safeName": "REV_ORG_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgSummary",
                  "safeName": "RevOrgSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "rev_org",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "org-type": {
      "name": {
        "typeId": "org-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "org-type",
          "camelCase": {
            "unsafeName": "orgType",
            "safeName": "orgType"
          },
          "snakeCase": {
            "unsafeName": "org_type",
            "safeName": "org_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "ORG_TYPE",
            "safeName": "ORG_TYPE"
          },
          "pascalCase": {
            "unsafeName": "OrgType",
            "safeName": "OrgType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "org-type_example_autogenerated": "rev_org"
        }
      }
    },
    "part": {
      "name": {
        "typeId": "part",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "part",
          "camelCase": {
            "unsafeName": "part",
            "safeName": "part"
          },
          "snakeCase": {
            "unsafeName": "part",
            "safeName": "part"
          },
          "screamingSnakeCase": {
            "unsafeName": "PART",
            "safeName": "PART"
          },
          "pascalCase": {
            "unsafeName": "Part",
            "safeName": "Part"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part-type",
                "camelCase": {
                  "unsafeName": "partType",
                  "safeName": "partType"
                },
                "snakeCase": {
                  "unsafeName": "part_type",
                  "safeName": "part_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_TYPE",
                  "safeName": "PART_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "PartType",
                  "safeName": "PartType"
                }
              },
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "capability",
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "enhancement",
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "feature",
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "product",
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "part-base": {
      "name": {
        "typeId": "part-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "part-base",
          "camelCase": {
            "unsafeName": "partBase",
            "safeName": "partBase"
          },
          "snakeCase": {
            "unsafeName": "part_base",
            "safeName": "part_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "PART_BASE",
            "safeName": "PART_BASE"
          },
          "pascalCase": {
            "unsafeName": "PartBase",
            "safeName": "PartBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "artifact-summary",
                        "camelCase": {
                          "unsafeName": "artifactSummary",
                          "safeName": "artifactSummary"
                        },
                        "snakeCase": {
                          "unsafeName": "artifact_summary",
                          "safeName": "artifact_summary"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "ARTIFACT_SUMMARY",
                          "safeName": "ARTIFACT_SUMMARY"
                        },
                        "pascalCase": {
                          "unsafeName": "ArtifactSummary",
                          "safeName": "ArtifactSummary"
                        }
                      },
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The attached artifacts.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseArtifacts_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-summary",
                    "camelCase": {
                      "unsafeName": "userSummary",
                      "safeName": "userSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "user_summary",
                      "safeName": "user_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_SUMMARY",
                      "safeName": "USER_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "UserSummary",
                      "safeName": "UserSummary"
                    }
                  },
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseOwnedBy_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tags",
                "camelCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "snakeCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS",
                  "safeName": "TAGS"
                },
                "pascalCase": {
                  "unsafeName": "Tags",
                  "safeName": "Tags"
                }
              },
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "tag-with-value",
                        "camelCase": {
                          "unsafeName": "tagWithValue",
                          "safeName": "tagWithValue"
                        },
                        "snakeCase": {
                          "unsafeName": "tag_with_value",
                          "safeName": "tag_with_value"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "TAG_WITH_VALUE",
                          "safeName": "TAG_WITH_VALUE"
                        },
                        "pascalCase": {
                          "unsafeName": "TagWithValue",
                          "safeName": "TagWithValue"
                        }
                      },
                      "typeId": "tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseTags_example_autogenerated": [
                  {
                    "tag": {
                      "id": "foo",
                      "name": "foo"
                    }
                  }
                ]
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-base_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "part-base-summary": {
      "name": {
        "typeId": "part-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "part-base-summary",
          "camelCase": {
            "unsafeName": "partBaseSummary",
            "safeName": "partBaseSummary"
          },
          "snakeCase": {
            "unsafeName": "part_base_summary",
            "safeName": "part_base_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "PART_BASE_SUMMARY",
            "safeName": "PART_BASE_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "PartBaseSummary",
            "safeName": "PartBaseSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartBaseSummaryName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-base-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "part-summary": {
      "name": {
        "typeId": "part-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "part-summary",
          "camelCase": {
            "unsafeName": "partSummary",
            "safeName": "partSummary"
          },
          "snakeCase": {
            "unsafeName": "part_summary",
            "safeName": "part_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "PART_SUMMARY",
            "safeName": "PART_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "PartSummary",
            "safeName": "PartSummary"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part-type",
                "camelCase": {
                  "unsafeName": "partType",
                  "safeName": "partType"
                },
                "snakeCase": {
                  "unsafeName": "part_type",
                  "safeName": "part_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_TYPE",
                  "safeName": "PART_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "PartType",
                  "safeName": "PartType"
                }
              },
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "capability-summary",
              "name": {
                "originalName": "capability-summary",
                "camelCase": {
                  "unsafeName": "capabilitySummary",
                  "safeName": "capabilitySummary"
                },
                "snakeCase": {
                  "unsafeName": "capability_summary",
                  "safeName": "capability_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY_SUMMARY",
                  "safeName": "CAPABILITY_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "CapabilitySummary",
                  "safeName": "CapabilitySummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "enhancement-summary",
              "name": {
                "originalName": "enhancement-summary",
                "camelCase": {
                  "unsafeName": "enhancementSummary",
                  "safeName": "enhancementSummary"
                },
                "snakeCase": {
                  "unsafeName": "enhancement_summary",
                  "safeName": "enhancement_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT_SUMMARY",
                  "safeName": "ENHANCEMENT_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "EnhancementSummary",
                  "safeName": "EnhancementSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "feature-summary",
              "name": {
                "originalName": "feature-summary",
                "camelCase": {
                  "unsafeName": "featureSummary",
                  "safeName": "featureSummary"
                },
                "snakeCase": {
                  "unsafeName": "feature_summary",
                  "safeName": "feature_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE_SUMMARY",
                  "safeName": "FEATURE_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "FeatureSummary",
                  "safeName": "FeatureSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "product-summary",
              "name": {
                "originalName": "product-summary",
                "camelCase": {
                  "unsafeName": "productSummary",
                  "safeName": "productSummary"
                },
                "snakeCase": {
                  "unsafeName": "product_summary",
                  "safeName": "product_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT_SUMMARY",
                  "safeName": "PRODUCT_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "ProductSummary",
                  "safeName": "ProductSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "part-type": {
      "name": {
        "typeId": "part-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "part-type",
          "camelCase": {
            "unsafeName": "partType",
            "safeName": "partType"
          },
          "snakeCase": {
            "unsafeName": "part_type",
            "safeName": "part_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "PART_TYPE",
            "safeName": "PART_TYPE"
          },
          "pascalCase": {
            "unsafeName": "PartType",
            "safeName": "PartType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "wireValue": "capability"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "wireValue": "enhancement"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "wireValue": "feature"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "part-type_example_autogenerated": "capability"
        }
      }
    },
    "parts-create-request": {
      "name": {
        "typeId": "parts-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-request",
          "camelCase": {
            "unsafeName": "partsCreateRequest",
            "safeName": "partsCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request",
            "safeName": "parts_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST",
            "safeName": "PARTS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequest",
            "safeName": "PartsCreateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the part.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestOwnedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part-type",
                "camelCase": {
                  "unsafeName": "partType",
                  "safeName": "partType"
                },
                "snakeCase": {
                  "unsafeName": "part_type",
                  "safeName": "part_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_TYPE",
                  "safeName": "PART_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "PartType",
                  "safeName": "PartType"
                }
              },
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "parts-create-request-capability",
              "name": {
                "originalName": "parts-create-request-capability",
                "camelCase": {
                  "unsafeName": "partsCreateRequestCapability",
                  "safeName": "partsCreateRequestCapability"
                },
                "snakeCase": {
                  "unsafeName": "parts_create_request_capability",
                  "safeName": "parts_create_request_capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_CREATE_REQUEST_CAPABILITY",
                  "safeName": "PARTS_CREATE_REQUEST_CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "PartsCreateRequestCapability",
                  "safeName": "PartsCreateRequestCapability"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "parts-create-request-enhancement",
              "name": {
                "originalName": "parts-create-request-enhancement",
                "camelCase": {
                  "unsafeName": "partsCreateRequestEnhancement",
                  "safeName": "partsCreateRequestEnhancement"
                },
                "snakeCase": {
                  "unsafeName": "parts_create_request_enhancement",
                  "safeName": "parts_create_request_enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_CREATE_REQUEST_ENHANCEMENT",
                  "safeName": "PARTS_CREATE_REQUEST_ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "PartsCreateRequestEnhancement",
                  "safeName": "PartsCreateRequestEnhancement"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "parts-create-request-feature",
              "name": {
                "originalName": "parts-create-request-feature",
                "camelCase": {
                  "unsafeName": "partsCreateRequestFeature",
                  "safeName": "partsCreateRequestFeature"
                },
                "snakeCase": {
                  "unsafeName": "parts_create_request_feature",
                  "safeName": "parts_create_request_feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_CREATE_REQUEST_FEATURE",
                  "safeName": "PARTS_CREATE_REQUEST_FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "PartsCreateRequestFeature",
                  "safeName": "PartsCreateRequestFeature"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "parts-create-request-product",
              "name": {
                "originalName": "parts-create-request-product",
                "camelCase": {
                  "unsafeName": "partsCreateRequestProduct",
                  "safeName": "partsCreateRequestProduct"
                },
                "snakeCase": {
                  "unsafeName": "parts_create_request_product",
                  "safeName": "parts_create_request_product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_CREATE_REQUEST_PRODUCT",
                  "safeName": "PARTS_CREATE_REQUEST_PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "PartsCreateRequestProduct",
                  "safeName": "PartsCreateRequestProduct"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request_example_autogenerated": {}
        }
      }
    },
    "parts-create-request-capability": {
      "name": {
        "typeId": "parts-create-request-capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-request-capability",
          "camelCase": {
            "unsafeName": "partsCreateRequestCapability",
            "safeName": "partsCreateRequestCapability"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_capability",
            "safeName": "parts_create_request_capability"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_CAPABILITY",
            "safeName": "PARTS_CREATE_REQUEST_CAPABILITY"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestCapability",
            "safeName": "PartsCreateRequestCapability"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "parent_part",
                "camelCase": {
                  "unsafeName": "parentPart",
                  "safeName": "parentPart"
                },
                "snakeCase": {
                  "unsafeName": "parent_part",
                  "safeName": "parent_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARENT_PART",
                  "safeName": "PARENT_PART"
                },
                "pascalCase": {
                  "unsafeName": "ParentPart",
                  "safeName": "ParentPart"
                }
              },
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent product for the capability.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestCapabilityParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-capability_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-enhancement": {
      "name": {
        "typeId": "parts-create-request-enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-request-enhancement",
          "camelCase": {
            "unsafeName": "partsCreateRequestEnhancement",
            "safeName": "partsCreateRequestEnhancement"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_enhancement",
            "safeName": "parts_create_request_enhancement"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_ENHANCEMENT",
            "safeName": "PARTS_CREATE_REQUEST_ENHANCEMENT"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestEnhancement",
            "safeName": "PartsCreateRequestEnhancement"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "parent_part",
                "camelCase": {
                  "unsafeName": "parentPart",
                  "safeName": "parentPart"
                },
                "snakeCase": {
                  "unsafeName": "parent_part",
                  "safeName": "parent_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARENT_PART",
                  "safeName": "PARENT_PART"
                },
                "pascalCase": {
                  "unsafeName": "ParentPart",
                  "safeName": "ParentPart"
                }
              },
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent part on which the enhancement is to be created.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestEnhancementParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Target close date by which enhancement is expected to be closed.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsCreateRequestEnhancementTargetCloseDate_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-enhancement_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-feature": {
      "name": {
        "typeId": "parts-create-request-feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-request-feature",
          "camelCase": {
            "unsafeName": "partsCreateRequestFeature",
            "safeName": "partsCreateRequestFeature"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_feature",
            "safeName": "parts_create_request_feature"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_FEATURE",
            "safeName": "PARTS_CREATE_REQUEST_FEATURE"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestFeature",
            "safeName": "PartsCreateRequestFeature"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "parent_part",
                "camelCase": {
                  "unsafeName": "parentPart",
                  "safeName": "parentPart"
                },
                "snakeCase": {
                  "unsafeName": "parent_part",
                  "safeName": "parent_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARENT_PART",
                  "safeName": "PARENT_PART"
                },
                "pascalCase": {
                  "unsafeName": "ParentPart",
                  "safeName": "ParentPart"
                }
              },
              "wireValue": "parent_part"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "ID of the parent capability/feature for the feature.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsCreateRequestFeatureParentPart_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-feature_example_autogenerated": {
            "parent_part": [
              "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
            ]
          }
        }
      }
    },
    "parts-create-request-product": {
      "name": {
        "typeId": "parts-create-request-product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-request-product",
          "camelCase": {
            "unsafeName": "partsCreateRequestProduct",
            "safeName": "partsCreateRequestProduct"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_product",
            "safeName": "parts_create_request_product"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_PRODUCT",
            "safeName": "PARTS_CREATE_REQUEST_PRODUCT"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestProduct",
            "safeName": "PartsCreateRequestProduct"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-request-product_example_autogenerated": {}
        }
      }
    },
    "parts-create-response": {
      "name": {
        "typeId": "parts-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-create-response",
          "camelCase": {
            "unsafeName": "partsCreateResponse",
            "safeName": "partsCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "parts_create_response",
            "safeName": "parts_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_RESPONSE",
            "safeName": "PARTS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateResponse",
            "safeName": "PartsCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-create-response_example_autogenerated": {
            "part": {
              "id": "foo",
              "name": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ]
            }
          }
        }
      }
    },
    "parts-delete-request": {
      "name": {
        "typeId": "parts-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-delete-request",
          "camelCase": {
            "unsafeName": "partsDeleteRequest",
            "safeName": "partsDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request",
            "safeName": "parts_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST",
            "safeName": "PARTS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequest",
            "safeName": "PartsDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
          }
        }
      }
    },
    "parts-delete-response": {
      "name": {
        "typeId": "parts-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-delete-response",
          "camelCase": {
            "unsafeName": "partsDeleteResponse",
            "safeName": "partsDeleteResponse"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_response",
            "safeName": "parts_delete_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_RESPONSE",
            "safeName": "PARTS_DELETE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteResponse",
            "safeName": "PartsDeleteResponse"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-delete-response_example_autogenerated": {}
        }
      }
    },
    "parts-get-response": {
      "name": {
        "typeId": "parts-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-get-response",
          "camelCase": {
            "unsafeName": "partsGetResponse",
            "safeName": "partsGetResponse"
          },
          "snakeCase": {
            "unsafeName": "parts_get_response",
            "safeName": "parts_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_RESPONSE",
            "safeName": "PARTS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "PartsGetResponse",
            "safeName": "PartsGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-get-response_example_autogenerated": {
            "part": {
              "id": "foo",
              "name": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ]
            }
          }
        }
      }
    },
    "parts-list-response": {
      "name": {
        "typeId": "parts-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-list-response",
          "camelCase": {
            "unsafeName": "partsListResponse",
            "safeName": "partsListResponse"
          },
          "snakeCase": {
            "unsafeName": "parts_list_response",
            "safeName": "parts_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_RESPONSE",
            "safeName": "PARTS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "PartsListResponse",
            "safeName": "PartsListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "parts",
                "camelCase": {
                  "unsafeName": "parts",
                  "safeName": "parts"
                },
                "snakeCase": {
                  "unsafeName": "parts",
                  "safeName": "parts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS",
                  "safeName": "PARTS"
                },
                "pascalCase": {
                  "unsafeName": "Parts",
                  "safeName": "Parts"
                }
              },
              "wireValue": "parts"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "part",
                    "camelCase": {
                      "unsafeName": "part",
                      "safeName": "part"
                    },
                    "snakeCase": {
                      "unsafeName": "part",
                      "safeName": "part"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PART",
                      "safeName": "PART"
                    },
                    "pascalCase": {
                      "unsafeName": "Part",
                      "safeName": "Part"
                    }
                  },
                  "typeId": "part",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of parts.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponseParts_example_autogenerated": [
                  {
                    "id": "foo",
                    "name": "foo",
                    "owned_by": [
                      {
                        "id": "foo"
                      }
                    ]
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-list-response_example_autogenerated": {
            "parts": [
              {
                "id": "foo",
                "name": "foo",
                "owned_by": [
                  {
                    "id": "foo"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "parts-update-request": {
      "name": {
        "typeId": "parts-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request",
          "camelCase": {
            "unsafeName": "partsUpdateRequest",
            "safeName": "partsUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request",
            "safeName": "parts_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST",
            "safeName": "PARTS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequest",
            "safeName": "PartsUpdateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated description of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the part to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the part.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-update-request-owned-by",
                    "camelCase": {
                      "unsafeName": "partsUpdateRequestOwnedBy",
                      "safeName": "partsUpdateRequestOwnedBy"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_update_request_owned_by",
                      "safeName": "parts_update_request_owned_by"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_UPDATE_REQUEST_OWNED_BY",
                      "safeName": "PARTS_UPDATE_REQUEST_OWNED_BY"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsUpdateRequestOwnedBy",
                      "safeName": "PartsUpdateRequestOwnedBy"
                    }
                  },
                  "typeId": "parts-update-request-owned-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part-type",
                "camelCase": {
                  "unsafeName": "partType",
                  "safeName": "partType"
                },
                "snakeCase": {
                  "unsafeName": "part_type",
                  "safeName": "part_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_TYPE",
                  "safeName": "PART_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "PartType",
                  "safeName": "PartType"
                }
              },
              "typeId": "part-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "capability",
                "camelCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "snakeCase": {
                  "unsafeName": "capability",
                  "safeName": "capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CAPABILITY",
                  "safeName": "CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "Capability",
                  "safeName": "Capability"
                }
              },
              "wireValue": "capability"
            },
            "displayName": "capability",
            "shape": {
              "typeId": "parts-update-request-capability",
              "name": {
                "originalName": "parts-update-request-capability",
                "camelCase": {
                  "unsafeName": "partsUpdateRequestCapability",
                  "safeName": "partsUpdateRequestCapability"
                },
                "snakeCase": {
                  "unsafeName": "parts_update_request_capability",
                  "safeName": "parts_update_request_capability"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_UPDATE_REQUEST_CAPABILITY",
                  "safeName": "PARTS_UPDATE_REQUEST_CAPABILITY"
                },
                "pascalCase": {
                  "unsafeName": "PartsUpdateRequestCapability",
                  "safeName": "PartsUpdateRequestCapability"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "capability",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "enhancement",
                "camelCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "snakeCase": {
                  "unsafeName": "enhancement",
                  "safeName": "enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENHANCEMENT",
                  "safeName": "ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "Enhancement",
                  "safeName": "Enhancement"
                }
              },
              "wireValue": "enhancement"
            },
            "displayName": "enhancement",
            "shape": {
              "typeId": "parts-update-request-enhancement",
              "name": {
                "originalName": "parts-update-request-enhancement",
                "camelCase": {
                  "unsafeName": "partsUpdateRequestEnhancement",
                  "safeName": "partsUpdateRequestEnhancement"
                },
                "snakeCase": {
                  "unsafeName": "parts_update_request_enhancement",
                  "safeName": "parts_update_request_enhancement"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_UPDATE_REQUEST_ENHANCEMENT",
                  "safeName": "PARTS_UPDATE_REQUEST_ENHANCEMENT"
                },
                "pascalCase": {
                  "unsafeName": "PartsUpdateRequestEnhancement",
                  "safeName": "PartsUpdateRequestEnhancement"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "enhancement",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "feature",
                "camelCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "snakeCase": {
                  "unsafeName": "feature",
                  "safeName": "feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FEATURE",
                  "safeName": "FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "Feature",
                  "safeName": "Feature"
                }
              },
              "wireValue": "feature"
            },
            "displayName": "feature",
            "shape": {
              "typeId": "parts-update-request-feature",
              "name": {
                "originalName": "parts-update-request-feature",
                "camelCase": {
                  "unsafeName": "partsUpdateRequestFeature",
                  "safeName": "partsUpdateRequestFeature"
                },
                "snakeCase": {
                  "unsafeName": "parts_update_request_feature",
                  "safeName": "parts_update_request_feature"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_UPDATE_REQUEST_FEATURE",
                  "safeName": "PARTS_UPDATE_REQUEST_FEATURE"
                },
                "pascalCase": {
                  "unsafeName": "PartsUpdateRequestFeature",
                  "safeName": "PartsUpdateRequestFeature"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "feature",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "none",
                "camelCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "snakeCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NONE",
                  "safeName": "NONE"
                },
                "pascalCase": {
                  "unsafeName": "None",
                  "safeName": "None"
                }
              },
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": {
                "originalName": "empty",
                "camelCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "snakeCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMPTY",
                  "safeName": "EMPTY"
                },
                "pascalCase": {
                  "unsafeName": "Empty",
                  "safeName": "Empty"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            },
            "displayName": "product",
            "shape": {
              "typeId": "parts-update-request-product",
              "name": {
                "originalName": "parts-update-request-product",
                "camelCase": {
                  "unsafeName": "partsUpdateRequestProduct",
                  "safeName": "partsUpdateRequestProduct"
                },
                "snakeCase": {
                  "unsafeName": "parts_update_request_product",
                  "safeName": "parts_update_request_product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_UPDATE_REQUEST_PRODUCT",
                  "safeName": "PARTS_UPDATE_REQUEST_PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "PartsUpdateRequestProduct",
                  "safeName": "PartsUpdateRequestProduct"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "product",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-capability": {
      "name": {
        "typeId": "parts-update-request-capability",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request-capability",
          "camelCase": {
            "unsafeName": "partsUpdateRequestCapability",
            "safeName": "partsUpdateRequestCapability"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_capability",
            "safeName": "parts_update_request_capability"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_CAPABILITY",
            "safeName": "PARTS_UPDATE_REQUEST_CAPABILITY"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestCapability",
            "safeName": "PartsUpdateRequestCapability"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-capability_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-enhancement": {
      "name": {
        "typeId": "parts-update-request-enhancement",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request-enhancement",
          "camelCase": {
            "unsafeName": "partsUpdateRequestEnhancement",
            "safeName": "partsUpdateRequestEnhancement"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_enhancement",
            "safeName": "parts_update_request_enhancement"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_ENHANCEMENT",
            "safeName": "PARTS_UPDATE_REQUEST_ENHANCEMENT"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestEnhancement",
            "safeName": "PartsUpdateRequestEnhancement"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the target close date of the enhancement.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "PartsUpdateRequestEnhancementTargetCloseDate_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-enhancement_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-feature": {
      "name": {
        "typeId": "parts-update-request-feature",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request-feature",
          "camelCase": {
            "unsafeName": "partsUpdateRequestFeature",
            "safeName": "partsUpdateRequestFeature"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_feature",
            "safeName": "parts_update_request_feature"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_FEATURE",
            "safeName": "PARTS_UPDATE_REQUEST_FEATURE"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestFeature",
            "safeName": "PartsUpdateRequestFeature"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-feature_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-owned-by": {
      "name": {
        "typeId": "parts-update-request-owned-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request-owned-by",
          "camelCase": {
            "unsafeName": "partsUpdateRequestOwnedBy",
            "safeName": "partsUpdateRequestOwnedBy"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_owned_by",
            "safeName": "parts_update_request_owned_by"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_OWNED_BY",
            "safeName": "PARTS_UPDATE_REQUEST_OWNED_BY"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestOwnedBy",
            "safeName": "PartsUpdateRequestOwnedBy"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "PartsUpdateRequestOwnedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-owned-by_example_autogenerated": {}
        }
      }
    },
    "parts-update-request-product": {
      "name": {
        "typeId": "parts-update-request-product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-request-product",
          "camelCase": {
            "unsafeName": "partsUpdateRequestProduct",
            "safeName": "partsUpdateRequestProduct"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_product",
            "safeName": "parts_update_request_product"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_PRODUCT",
            "safeName": "PARTS_UPDATE_REQUEST_PRODUCT"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestProduct",
            "safeName": "PartsUpdateRequestProduct"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-request-product_example_autogenerated": {}
        }
      }
    },
    "parts-update-response": {
      "name": {
        "typeId": "parts-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "parts-update-response",
          "camelCase": {
            "unsafeName": "partsUpdateResponse",
            "safeName": "partsUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "parts_update_response",
            "safeName": "parts_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_RESPONSE",
            "safeName": "PARTS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateResponse",
            "safeName": "PartsUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "wireValue": "part"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "part",
                "camelCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "snakeCase": {
                  "unsafeName": "part",
                  "safeName": "part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART",
                  "safeName": "PART"
                },
                "pascalCase": {
                  "unsafeName": "Part",
                  "safeName": "Part"
                }
              },
              "typeId": "part",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "parts-update-response_example_autogenerated": {
            "part": {
              "id": "foo",
              "name": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ]
            }
          }
        }
      }
    },
    "product": {
      "name": {
        "typeId": "product",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "product",
          "camelCase": {
            "unsafeName": "product",
            "safeName": "product"
          },
          "snakeCase": {
            "unsafeName": "product",
            "safeName": "product"
          },
          "screamingSnakeCase": {
            "unsafeName": "PRODUCT",
            "safeName": "PRODUCT"
          },
          "pascalCase": {
            "unsafeName": "Product",
            "safeName": "Product"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base",
              "camelCase": {
                "unsafeName": "partBase",
                "safeName": "partBase"
              },
              "snakeCase": {
                "unsafeName": "part_base",
                "safeName": "part_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE",
                "safeName": "PART_BASE"
              },
              "pascalCase": {
                "unsafeName": "PartBase",
                "safeName": "PartBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "product_example_autogenerated": {
            "id": "foo",
            "name": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "product-summary": {
      "name": {
        "typeId": "product-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "product-summary",
          "camelCase": {
            "unsafeName": "productSummary",
            "safeName": "productSummary"
          },
          "snakeCase": {
            "unsafeName": "product_summary",
            "safeName": "product_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "PRODUCT_SUMMARY",
            "safeName": "PRODUCT_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "ProductSummary",
            "safeName": "ProductSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "part-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "part-base-summary",
              "camelCase": {
                "unsafeName": "partBaseSummary",
                "safeName": "partBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "part_base_summary",
                "safeName": "part_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "PART_BASE_SUMMARY",
                "safeName": "PART_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "PartBaseSummary",
                "safeName": "PartBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "product-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "rev-org": {
      "name": {
        "typeId": "rev-org",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-org",
          "camelCase": {
            "unsafeName": "revOrg",
            "safeName": "revOrg"
          },
          "snakeCase": {
            "unsafeName": "rev_org",
            "safeName": "rev_org"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORG",
            "safeName": "REV_ORG"
          },
          "pascalCase": {
            "unsafeName": "RevOrg",
            "safeName": "RevOrg"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domain",
                "camelCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "snakeCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMAIN",
                  "safeName": "DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "Domain",
                  "safeName": "Domain"
                }
              },
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgDomain_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "external_ref",
                "camelCase": {
                  "unsafeName": "externalRef",
                  "safeName": "externalRef"
                },
                "snakeCase": {
                  "unsafeName": "external_ref",
                  "safeName": "external_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_REF",
                  "safeName": "EXTERNAL_REF"
                },
                "pascalCase": {
                  "unsafeName": "ExternalRef",
                  "safeName": "ExternalRef"
                }
              },
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a unique identifier for the Rev (customer)\norganization from your primary customer system of records. If none\nis specified, a system-generated identifier will be assigned to the\norganization.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgExternalRef_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "org-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "org-base",
              "camelCase": {
                "unsafeName": "orgBase",
                "safeName": "orgBase"
              },
              "snakeCase": {
                "unsafeName": "org_base",
                "safeName": "org_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ORG_BASE",
                "safeName": "ORG_BASE"
              },
              "pascalCase": {
                "unsafeName": "OrgBase",
                "safeName": "OrgBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-org_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "rev-org-summary": {
      "name": {
        "typeId": "rev-org-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-org-summary",
          "camelCase": {
            "unsafeName": "revOrgSummary",
            "safeName": "revOrgSummary"
          },
          "snakeCase": {
            "unsafeName": "rev_org_summary",
            "safeName": "rev_org_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORG_SUMMARY",
            "safeName": "REV_ORG_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "RevOrgSummary",
            "safeName": "RevOrgSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "org-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "org-base-summary",
              "camelCase": {
                "unsafeName": "orgBaseSummary",
                "safeName": "orgBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "org_base_summary",
                "safeName": "org_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ORG_BASE_SUMMARY",
                "safeName": "ORG_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "OrgBaseSummary",
                "safeName": "OrgBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-org-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "rev-orgs-create-request": {
      "name": {
        "typeId": "rev-orgs-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-create-request",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequest",
            "safeName": "revOrgsCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request",
            "safeName": "rev_orgs_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST",
            "safeName": "REV_ORGS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequest",
            "safeName": "RevOrgsCreateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Name of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domain",
                "camelCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "snakeCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMAIN",
                  "safeName": "DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "Domain",
                  "safeName": "Domain"
                }
              },
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestDomain_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "environment",
                "camelCase": {
                  "unsafeName": "environment",
                  "safeName": "environment"
                },
                "snakeCase": {
                  "unsafeName": "environment",
                  "safeName": "environment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENVIRONMENT",
                  "safeName": "ENVIRONMENT"
                },
                "pascalCase": {
                  "unsafeName": "Environment",
                  "safeName": "Environment"
                }
              },
              "wireValue": "environment"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "org-environment",
                    "camelCase": {
                      "unsafeName": "orgEnvironment",
                      "safeName": "orgEnvironment"
                    },
                    "snakeCase": {
                      "unsafeName": "org_environment",
                      "safeName": "org_environment"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ORG_ENVIRONMENT",
                      "safeName": "ORG_ENVIRONMENT"
                    },
                    "pascalCase": {
                      "unsafeName": "OrgEnvironment",
                      "safeName": "OrgEnvironment"
                    }
                  },
                  "typeId": "org-environment",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "external_ref",
                "camelCase": {
                  "unsafeName": "externalRef",
                  "safeName": "externalRef"
                },
                "snakeCase": {
                  "unsafeName": "external_ref",
                  "safeName": "external_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_REF",
                  "safeName": "EXTERNAL_REF"
                },
                "pascalCase": {
                  "unsafeName": "ExternalRef",
                  "safeName": "ExternalRef"
                }
              },
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestExternalRef_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tier",
                "camelCase": {
                  "unsafeName": "tier",
                  "safeName": "tier"
                },
                "snakeCase": {
                  "unsafeName": "tier",
                  "safeName": "tier"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIER",
                  "safeName": "TIER"
                },
                "pascalCase": {
                  "unsafeName": "Tier",
                  "safeName": "Tier"
                }
              },
              "wireValue": "tier"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The tier of the RevOrg.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsCreateRequestTier_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to create a new Rev organization in the Dev\norganization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-create-request_example_autogenerated": {
            "display_name": "foo"
          }
        }
      }
    },
    "rev-orgs-create-response": {
      "name": {
        "typeId": "rev-orgs-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-create-response",
          "camelCase": {
            "unsafeName": "revOrgsCreateResponse",
            "safeName": "revOrgsCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_response",
            "safeName": "rev_orgs_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_RESPONSE",
            "safeName": "REV_ORGS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateResponse",
            "safeName": "RevOrgsCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object for request to create a new Rev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-create-response_example_autogenerated": {
            "rev_org": {
              "id": "foo"
            }
          }
        }
      }
    },
    "rev-orgs-delete-request": {
      "name": {
        "typeId": "rev-orgs-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-delete-request",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequest",
            "safeName": "revOrgsDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request",
            "safeName": "rev_orgs_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST",
            "safeName": "REV_ORGS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequest",
            "safeName": "RevOrgsDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of Rev organization to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "RevOrgsDeleteRequestId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to delete a Rev organization.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-delete-request_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "rev-orgs-delete-response": {
      "name": {
        "typeId": "rev-orgs-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-delete-response",
          "camelCase": {
            "unsafeName": "revOrgsDeleteResponse",
            "safeName": "revOrgsDeleteResponse"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_response",
            "safeName": "rev_orgs_delete_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_RESPONSE",
            "safeName": "REV_ORGS_DELETE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteResponse",
            "safeName": "RevOrgsDeleteResponse"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to deleting a Rev organization.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-delete-response_example_autogenerated": {}
        }
      }
    },
    "rev-orgs-get-response": {
      "name": {
        "typeId": "rev-orgs-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-get-response",
          "camelCase": {
            "unsafeName": "revOrgsGetResponse",
            "safeName": "revOrgsGetResponse"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_response",
            "safeName": "rev_orgs_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_RESPONSE",
            "safeName": "REV_ORGS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetResponse",
            "safeName": "RevOrgsGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a Rev organization's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-get-response_example_autogenerated": {
            "rev_org": {
              "id": "foo"
            }
          }
        }
      }
    },
    "rev-orgs-list-response": {
      "name": {
        "typeId": "rev-orgs-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-list-response",
          "camelCase": {
            "unsafeName": "revOrgsListResponse",
            "safeName": "revOrgsListResponse"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_response",
            "safeName": "rev_orgs_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_RESPONSE",
            "safeName": "REV_ORGS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListResponse",
            "safeName": "RevOrgsListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_orgs",
                "camelCase": {
                  "unsafeName": "revOrgs",
                  "safeName": "revOrgs"
                },
                "snakeCase": {
                  "unsafeName": "rev_orgs",
                  "safeName": "rev_orgs"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORGS",
                  "safeName": "REV_ORGS"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgs",
                  "safeName": "RevOrgs"
                }
              },
              "wireValue": "rev_orgs"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-org",
                    "camelCase": {
                      "unsafeName": "revOrg",
                      "safeName": "revOrg"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_org",
                      "safeName": "rev_org"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORG",
                      "safeName": "REV_ORG"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrg",
                      "safeName": "RevOrg"
                    }
                  },
                  "typeId": "rev-org",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "List with all of the Rev organizations' information.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsListResponseRevOrgs_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a list of Rev organizations' information.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-list-response_example_autogenerated": {
            "rev_orgs": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "rev-orgs-update-request": {
      "name": {
        "typeId": "rev-orgs-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-update-request",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequest",
            "safeName": "revOrgsUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request",
            "safeName": "rev_orgs_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST",
            "safeName": "REV_ORGS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequest",
            "safeName": "RevOrgsUpdateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Description of the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Customer chosen name for the Rev organization.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domain",
                "camelCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "snakeCase": {
                  "unsafeName": "domain",
                  "safeName": "domain"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMAIN",
                  "safeName": "DOMAIN"
                },
                "pascalCase": {
                  "unsafeName": "Domain",
                  "safeName": "Domain"
                }
              },
              "wireValue": "domain"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestDomain_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "environment",
                "camelCase": {
                  "unsafeName": "environment",
                  "safeName": "environment"
                },
                "snakeCase": {
                  "unsafeName": "environment",
                  "safeName": "environment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENVIRONMENT",
                  "safeName": "ENVIRONMENT"
                },
                "pascalCase": {
                  "unsafeName": "Environment",
                  "safeName": "Environment"
                }
              },
              "wireValue": "environment"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "org-environment",
                    "camelCase": {
                      "unsafeName": "orgEnvironment",
                      "safeName": "orgEnvironment"
                    },
                    "snakeCase": {
                      "unsafeName": "org_environment",
                      "safeName": "org_environment"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ORG_ENVIRONMENT",
                      "safeName": "ORG_ENVIRONMENT"
                    },
                    "pascalCase": {
                      "unsafeName": "OrgEnvironment",
                      "safeName": "OrgEnvironment"
                    }
                  },
                  "typeId": "org-environment",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "external_ref",
                "camelCase": {
                  "unsafeName": "externalRef",
                  "safeName": "externalRef"
                },
                "snakeCase": {
                  "unsafeName": "external_ref",
                  "safeName": "external_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_REF",
                  "safeName": "EXTERNAL_REF"
                },
                "pascalCase": {
                  "unsafeName": "ExternalRef",
                  "safeName": "ExternalRef"
                }
              },
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestExternalRef_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of Rev organization to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "RevOrgsUpdateRequestId_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tier",
                "camelCase": {
                  "unsafeName": "tier",
                  "safeName": "tier"
                },
                "snakeCase": {
                  "unsafeName": "tier",
                  "safeName": "tier"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIER",
                  "safeName": "TIER"
                },
                "pascalCase": {
                  "unsafeName": "Tier",
                  "safeName": "Tier"
                }
              },
              "wireValue": "tier"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The tier of the RevOrg.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevOrgsUpdateRequestTier_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Request object to update information of the Rev organization.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-update-request_example_autogenerated": {
            "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
          }
        }
      }
    },
    "rev-orgs-update-response": {
      "name": {
        "typeId": "rev-orgs-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-orgs-update-response",
          "camelCase": {
            "unsafeName": "revOrgsUpdateResponse",
            "safeName": "revOrgsUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_response",
            "safeName": "rev_orgs_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_RESPONSE",
            "safeName": "REV_ORGS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateResponse",
            "safeName": "RevOrgsUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "typeId": "rev-org",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Response object to updating Rev organization's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-orgs-update-response_example_autogenerated": {
            "rev_org": {
              "id": "foo"
            }
          }
        }
      }
    },
    "rev-user-summary": {
      "name": {
        "typeId": "rev-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "rev-user-summary",
          "camelCase": {
            "unsafeName": "revUserSummary",
            "safeName": "revUserSummary"
          },
          "snakeCase": {
            "unsafeName": "rev_user_summary",
            "safeName": "rev_user_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_USER_SUMMARY",
            "safeName": "REV_USER_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "RevUserSummary",
            "safeName": "RevUserSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "external_ref",
                "camelCase": {
                  "unsafeName": "externalRef",
                  "safeName": "externalRef"
                },
                "snakeCase": {
                  "unsafeName": "external_ref",
                  "safeName": "external_ref"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_REF",
                  "safeName": "EXTERNAL_REF"
                },
                "pascalCase": {
                  "unsafeName": "ExternalRef",
                  "safeName": "ExternalRef"
                }
              },
              "wireValue": "external_ref"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "External ref is a mutable unique identifier for a user within the\nRev organization from your primary customer record. If none is\navailable, a good alternative is the email address/phone number\nwhich could uniquely identify the user. If none is specified, a\nsystem-generated identifier will be assigned to the user.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "RevUserSummaryExternalRef_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "org-summary",
                    "camelCase": {
                      "unsafeName": "orgSummary",
                      "safeName": "orgSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "org_summary",
                      "safeName": "org_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ORG_SUMMARY",
                      "safeName": "ORG_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "OrgSummary",
                      "safeName": "OrgSummary"
                    }
                  },
                  "typeId": "org-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "user-base-summary",
              "camelCase": {
                "unsafeName": "userBaseSummary",
                "safeName": "userBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "user_base_summary",
                "safeName": "user_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "USER_BASE_SUMMARY",
                "safeName": "USER_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "UserBaseSummary",
                "safeName": "UserBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "rev-user-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "set-tag-with-value": {
      "name": {
        "typeId": "set-tag-with-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "set-tag-with-value",
          "camelCase": {
            "unsafeName": "setTagWithValue",
            "safeName": "setTagWithValue"
          },
          "snakeCase": {
            "unsafeName": "set_tag_with_value",
            "safeName": "set_tag_with_value"
          },
          "screamingSnakeCase": {
            "unsafeName": "SET_TAG_WITH_VALUE",
            "safeName": "SET_TAG_WITH_VALUE"
          },
          "pascalCase": {
            "unsafeName": "SetTagWithValue",
            "safeName": "SetTagWithValue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "SetTagWithValueId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "value",
                "camelCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "snakeCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VALUE",
                  "safeName": "VALUE"
                },
                "pascalCase": {
                  "unsafeName": "Value",
                  "safeName": "Value"
                }
              },
              "wireValue": "value"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The value for the object's association with the tag. If specified,\nthe value must be one that's specified in the tag's allowed values.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "SetTagWithValueValue_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "set-tag-with-value_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "stage": {
      "name": {
        "typeId": "stage",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "stage",
          "camelCase": {
            "unsafeName": "stage",
            "safeName": "stage"
          },
          "snakeCase": {
            "unsafeName": "stage",
            "safeName": "stage"
          },
          "screamingSnakeCase": {
            "unsafeName": "STAGE",
            "safeName": "STAGE"
          },
          "pascalCase": {
            "unsafeName": "Stage",
            "safeName": "Stage"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Current stage name of the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes the current stage of a work item.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage_example_autogenerated": {
            "name": "foo"
          }
        }
      }
    },
    "stage-init": {
      "name": {
        "typeId": "stage-init",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "stage-init",
          "camelCase": {
            "unsafeName": "stageInit",
            "safeName": "stageInit"
          },
          "snakeCase": {
            "unsafeName": "stage_init",
            "safeName": "stage_init"
          },
          "screamingSnakeCase": {
            "unsafeName": "STAGE_INIT",
            "safeName": "STAGE_INIT"
          },
          "pascalCase": {
            "unsafeName": "StageInit",
            "safeName": "StageInit"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The name of the stage.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageInitName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Sets an object's initial stage.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage-init_example_autogenerated": {}
        }
      }
    },
    "stage-update": {
      "name": {
        "typeId": "stage-update",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "stage-update",
          "camelCase": {
            "unsafeName": "stageUpdate",
            "safeName": "stageUpdate"
          },
          "snakeCase": {
            "unsafeName": "stage_update",
            "safeName": "stage_update"
          },
          "screamingSnakeCase": {
            "unsafeName": "STAGE_UPDATE",
            "safeName": "STAGE_UPDATE"
          },
          "pascalCase": {
            "unsafeName": "StageUpdate",
            "safeName": "StageUpdate"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the stage, otherwise unchanged if not set.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "StageUpdateName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Updates an object's stage.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "stage-update_example_autogenerated": {}
        }
      }
    },
    "sys-user-summary": {
      "name": {
        "typeId": "sys-user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "sys-user-summary",
          "camelCase": {
            "unsafeName": "sysUserSummary",
            "safeName": "sysUserSummary"
          },
          "snakeCase": {
            "unsafeName": "sys_user_summary",
            "safeName": "sys_user_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "SYS_USER_SUMMARY",
            "safeName": "SYS_USER_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "SysUserSummary",
            "safeName": "SysUserSummary"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "user-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "user-base-summary",
              "camelCase": {
                "unsafeName": "userBaseSummary",
                "safeName": "userBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "user_base_summary",
                "safeName": "user_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "USER_BASE_SUMMARY",
                "safeName": "USER_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "UserBaseSummary",
                "safeName": "UserBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "sys-user-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "tag": {
      "name": {
        "typeId": "tag",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tag",
          "camelCase": {
            "unsafeName": "tag",
            "safeName": "tag"
          },
          "snakeCase": {
            "unsafeName": "tag",
            "safeName": "tag"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAG",
            "safeName": "TAG"
          },
          "pascalCase": {
            "unsafeName": "Tag",
            "safeName": "Tag"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "allowed_values",
                "camelCase": {
                  "unsafeName": "allowedValues",
                  "safeName": "allowedValues"
                },
                "snakeCase": {
                  "unsafeName": "allowed_values",
                  "safeName": "allowed_values"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ALLOWED_VALUES",
                  "safeName": "ALLOWED_VALUES"
                },
                "pascalCase": {
                  "unsafeName": "AllowedValues",
                  "safeName": "AllowedValues"
                }
              },
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The allowed values for the tag, where a value is provided when a\ntag is associated with an object. If empty, then no value should be\nprovided when the association is made.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagAllowedValues_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "An informative description for the tag that should provide context\non the tag's purpose and usage.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "tag-summary": {
      "name": {
        "typeId": "tag-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tag-summary",
          "camelCase": {
            "unsafeName": "tagSummary",
            "safeName": "tagSummary"
          },
          "snakeCase": {
            "unsafeName": "tag_summary",
            "safeName": "tag_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAG_SUMMARY",
            "safeName": "TAG_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "TagSummary",
            "safeName": "TagSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagSummaryName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag-summary_example_autogenerated": {
            "id": "foo",
            "name": "foo"
          }
        }
      }
    },
    "tag-with-value": {
      "name": {
        "typeId": "tag-with-value",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tag-with-value",
          "camelCase": {
            "unsafeName": "tagWithValue",
            "safeName": "tagWithValue"
          },
          "snakeCase": {
            "unsafeName": "tag_with_value",
            "safeName": "tag_with_value"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAG_WITH_VALUE",
            "safeName": "TAG_WITH_VALUE"
          },
          "pascalCase": {
            "unsafeName": "TagWithValue",
            "safeName": "TagWithValue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag-summary",
                "camelCase": {
                  "unsafeName": "tagSummary",
                  "safeName": "tagSummary"
                },
                "snakeCase": {
                  "unsafeName": "tag_summary",
                  "safeName": "tag_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_SUMMARY",
                  "safeName": "TAG_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "TagSummary",
                  "safeName": "TagSummary"
                }
              },
              "typeId": "tag-summary",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "value",
                "camelCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "snakeCase": {
                  "unsafeName": "value",
                  "safeName": "value"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VALUE",
                  "safeName": "VALUE"
                },
                "pascalCase": {
                  "unsafeName": "Value",
                  "safeName": "Value"
                }
              },
              "wireValue": "value"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The value for the object's association with the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagWithValueValue_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tag-with-value_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "tags-create-request": {
      "name": {
        "typeId": "tags-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-create-request",
          "camelCase": {
            "unsafeName": "tagsCreateRequest",
            "safeName": "tagsCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request",
            "safeName": "tags_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST",
            "safeName": "TAGS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequest",
            "safeName": "TagsCreateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "allowed_values",
                "camelCase": {
                  "unsafeName": "allowedValues",
                  "safeName": "allowedValues"
                },
                "snakeCase": {
                  "unsafeName": "allowed_values",
                  "safeName": "allowed_values"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ALLOWED_VALUES",
                  "safeName": "ALLOWED_VALUES"
                },
                "pascalCase": {
                  "unsafeName": "AllowedValues",
                  "safeName": "AllowedValues"
                }
              },
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The allowed values for the tag, or empty if no values are\npermitted.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestAllowedValues_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The description for the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The name for the tag, which must be unique across all tags.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsCreateRequestName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a new tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-create-request_example_autogenerated": {
            "name": "foo"
          }
        }
      }
    },
    "tags-create-response": {
      "name": {
        "typeId": "tags-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-create-response",
          "camelCase": {
            "unsafeName": "tagsCreateResponse",
            "safeName": "tagsCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "tags_create_response",
            "safeName": "tags_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_RESPONSE",
            "safeName": "TAGS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateResponse",
            "safeName": "TagsCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a new tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-create-response_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "tags-delete-request": {
      "name": {
        "typeId": "tags-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-delete-request",
          "camelCase": {
            "unsafeName": "tagsDeleteRequest",
            "safeName": "tagsDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request",
            "safeName": "tags_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST",
            "safeName": "TAGS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequest",
            "safeName": "TagsDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag to delete.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TagsDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "tags-delete-response": {
      "name": {
        "typeId": "tags-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-delete-response",
          "camelCase": {
            "unsafeName": "tagsDeleteResponse",
            "safeName": "tagsDeleteResponse"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_response",
            "safeName": "tags_delete_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_RESPONSE",
            "safeName": "TAGS_DELETE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteResponse",
            "safeName": "TagsDeleteResponse"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response for deleting a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-delete-response_example_autogenerated": {}
        }
      }
    },
    "tags-get-response": {
      "name": {
        "typeId": "tags-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-get-response",
          "camelCase": {
            "unsafeName": "tagsGetResponse",
            "safeName": "tagsGetResponse"
          },
          "snakeCase": {
            "unsafeName": "tags_get_response",
            "safeName": "tags_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_RESPONSE",
            "safeName": "TAGS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TagsGetResponse",
            "safeName": "TagsGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting a tag's information.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-get-response_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "tags-list-response": {
      "name": {
        "typeId": "tags-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-list-response",
          "camelCase": {
            "unsafeName": "tagsListResponse",
            "safeName": "tagsListResponse"
          },
          "snakeCase": {
            "unsafeName": "tags_list_response",
            "safeName": "tags_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_RESPONSE",
            "safeName": "TAGS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TagsListResponse",
            "safeName": "TagsListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tags",
                "camelCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "snakeCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS",
                  "safeName": "TAGS"
                },
                "pascalCase": {
                  "unsafeName": "Tags",
                  "safeName": "Tags"
                }
              },
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tag",
                    "camelCase": {
                      "unsafeName": "tag",
                      "safeName": "tag"
                    },
                    "snakeCase": {
                      "unsafeName": "tag",
                      "safeName": "tag"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAG",
                      "safeName": "TAG"
                    },
                    "pascalCase": {
                      "unsafeName": "Tag",
                      "safeName": "Tag"
                    }
                  },
                  "typeId": "tag",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of tags.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsListResponseTags_example_autogenerated": [
                  {
                    "id": "foo",
                    "name": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the tags.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-list-response_example_autogenerated": {
            "tags": [
              {
                "id": "foo",
                "name": "foo"
              }
            ]
          }
        }
      }
    },
    "tags-update-allowed-values": {
      "name": {
        "typeId": "tags-update-allowed-values",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-update-allowed-values",
          "camelCase": {
            "unsafeName": "tagsUpdateAllowedValues",
            "safeName": "tagsUpdateAllowedValues"
          },
          "snakeCase": {
            "unsafeName": "tags_update_allowed_values",
            "safeName": "tags_update_allowed_values"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_ALLOWED_VALUES",
            "safeName": "TAGS_UPDATE_ALLOWED_VALUES"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateAllowedValues",
            "safeName": "TagsUpdateAllowedValues"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the allowed values for the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateAllowedValuesSet_example_autogenerated": [
                  "foo"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Specifies an update to a tag's allowed values.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-allowed-values_example_autogenerated": {}
        }
      }
    },
    "tags-update-request": {
      "name": {
        "typeId": "tags-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-update-request",
          "camelCase": {
            "unsafeName": "tagsUpdateRequest",
            "safeName": "tagsUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request",
            "safeName": "tags_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST",
            "safeName": "TAGS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequest",
            "safeName": "TagsUpdateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "allowed_values",
                "camelCase": {
                  "unsafeName": "allowedValues",
                  "safeName": "allowedValues"
                },
                "snakeCase": {
                  "unsafeName": "allowed_values",
                  "safeName": "allowed_values"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ALLOWED_VALUES",
                  "safeName": "ALLOWED_VALUES"
                },
                "pascalCase": {
                  "unsafeName": "AllowedValues",
                  "safeName": "AllowedValues"
                }
              },
              "wireValue": "allowed_values"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-update-allowed-values",
                    "camelCase": {
                      "unsafeName": "tagsUpdateAllowedValues",
                      "safeName": "tagsUpdateAllowedValues"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_update_allowed_values",
                      "safeName": "tags_update_allowed_values"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_UPDATE_ALLOWED_VALUES",
                      "safeName": "TAGS_UPDATE_ALLOWED_VALUES"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsUpdateAllowedValues",
                      "safeName": "TagsUpdateAllowedValues"
                    }
                  },
                  "typeId": "tags-update-allowed-values",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated description of the tag.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateRequestDescription_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the tag to update.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TagsUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated name of the tag. The name must be unique across all\ntags.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TagsUpdateRequestName_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
          }
        }
      }
    },
    "tags-update-response": {
      "name": {
        "typeId": "tags-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "tags-update-response",
          "camelCase": {
            "unsafeName": "tagsUpdateResponse",
            "safeName": "tagsUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "tags_update_response",
            "safeName": "tags_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_RESPONSE",
            "safeName": "TAGS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateResponse",
            "safeName": "TagsUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "wireValue": "tag"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tag",
                "camelCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "snakeCase": {
                  "unsafeName": "tag",
                  "safeName": "tag"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG",
                  "safeName": "TAG"
                },
                "pascalCase": {
                  "unsafeName": "Tag",
                  "safeName": "Tag"
                }
              },
              "typeId": "tag",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response for updating a tag.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "tags-update-response_example_autogenerated": {
            "tag": {
              "id": "foo",
              "name": "foo"
            }
          }
        }
      }
    },
    "ticket": {
      "name": {
        "typeId": "ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "ticket",
          "camelCase": {
            "unsafeName": "ticket",
            "safeName": "ticket"
          },
          "snakeCase": {
            "unsafeName": "ticket",
            "safeName": "ticket"
          },
          "screamingSnakeCase": {
            "unsafeName": "TICKET",
            "safeName": "TICKET"
          },
          "pascalCase": {
            "unsafeName": "Ticket",
            "safeName": "Ticket"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "group",
                "camelCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "snakeCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GROUP",
                  "safeName": "GROUP"
                },
                "pascalCase": {
                  "unsafeName": "Group",
                  "safeName": "Group"
                }
              },
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "group-summary",
                    "camelCase": {
                      "unsafeName": "groupSummary",
                      "safeName": "groupSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "group_summary",
                      "safeName": "group_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "GROUP_SUMMARY",
                      "safeName": "GROUP_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "GroupSummary",
                      "safeName": "GroupSummary"
                    }
                  },
                  "typeId": "group-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "org-summary",
                    "camelCase": {
                      "unsafeName": "orgSummary",
                      "safeName": "orgSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "org_summary",
                      "safeName": "org_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ORG_SUMMARY",
                      "safeName": "ORG_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "OrgSummary",
                      "safeName": "OrgSummary"
                    }
                  },
                  "typeId": "org-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "severity",
                "camelCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "snakeCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SEVERITY",
                  "safeName": "SEVERITY"
                },
                "pascalCase": {
                  "unsafeName": "Severity",
                  "safeName": "Severity"
                }
              },
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "ticket-severity",
                    "camelCase": {
                      "unsafeName": "ticketSeverity",
                      "safeName": "ticketSeverity"
                    },
                    "snakeCase": {
                      "unsafeName": "ticket_severity",
                      "safeName": "ticket_severity"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TICKET_SEVERITY",
                      "safeName": "TICKET_SEVERITY"
                    },
                    "pascalCase": {
                      "unsafeName": "TicketSeverity",
                      "safeName": "TicketSeverity"
                    }
                  },
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "work-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "work-base",
              "camelCase": {
                "unsafeName": "workBase",
                "safeName": "workBase"
              },
              "snakeCase": {
                "unsafeName": "work_base",
                "safeName": "work_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "WORK_BASE",
                "safeName": "WORK_BASE"
              },
              "pascalCase": {
                "unsafeName": "WorkBase",
                "safeName": "WorkBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ticket_example_autogenerated": {
            "id": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ],
            "title": "foo"
          }
        }
      }
    },
    "ticket-severity": {
      "name": {
        "typeId": "ticket-severity",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "ticket-severity",
          "camelCase": {
            "unsafeName": "ticketSeverity",
            "safeName": "ticketSeverity"
          },
          "snakeCase": {
            "unsafeName": "ticket_severity",
            "safeName": "ticket_severity"
          },
          "screamingSnakeCase": {
            "unsafeName": "TICKET_SEVERITY",
            "safeName": "TICKET_SEVERITY"
          },
          "pascalCase": {
            "unsafeName": "TicketSeverity",
            "safeName": "TicketSeverity"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "blocker",
                "camelCase": {
                  "unsafeName": "blocker",
                  "safeName": "blocker"
                },
                "snakeCase": {
                  "unsafeName": "blocker",
                  "safeName": "blocker"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BLOCKER",
                  "safeName": "BLOCKER"
                },
                "pascalCase": {
                  "unsafeName": "Blocker",
                  "safeName": "Blocker"
                }
              },
              "wireValue": "blocker"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "high",
                "camelCase": {
                  "unsafeName": "high",
                  "safeName": "high"
                },
                "snakeCase": {
                  "unsafeName": "high",
                  "safeName": "high"
                },
                "screamingSnakeCase": {
                  "unsafeName": "HIGH",
                  "safeName": "HIGH"
                },
                "pascalCase": {
                  "unsafeName": "High",
                  "safeName": "High"
                }
              },
              "wireValue": "high"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "low",
                "camelCase": {
                  "unsafeName": "low",
                  "safeName": "low"
                },
                "snakeCase": {
                  "unsafeName": "low",
                  "safeName": "low"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOW",
                  "safeName": "LOW"
                },
                "pascalCase": {
                  "unsafeName": "Low",
                  "safeName": "Low"
                }
              },
              "wireValue": "low"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "medium",
                "camelCase": {
                  "unsafeName": "medium",
                  "safeName": "medium"
                },
                "snakeCase": {
                  "unsafeName": "medium",
                  "safeName": "medium"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MEDIUM",
                  "safeName": "MEDIUM"
                },
                "pascalCase": {
                  "unsafeName": "Medium",
                  "safeName": "Medium"
                }
              },
              "wireValue": "medium"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Severity of the ticket.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "ticket-severity_example_autogenerated": "blocker"
        }
      }
    },
    "TimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "TimelineCommentSnapKitBody",
          "camelCase": {
            "unsafeName": "timelineCommentSnapKitBody",
            "safeName": "timelineCommentSnapKitBody"
          },
          "snakeCase": {
            "unsafeName": "timeline_comment_snap_kit_body",
            "safeName": "timeline_comment_snap_kit_body"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_COMMENT_SNAP_KIT_BODY",
            "safeName": "TIMELINE_COMMENT_SNAP_KIT_BODY"
          },
          "pascalCase": {
            "unsafeName": "TimelineCommentSnapKitBody",
            "safeName": "TimelineCommentSnapKitBody"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit Body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-comment": {
      "name": {
        "typeId": "timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-comment",
          "camelCase": {
            "unsafeName": "timelineComment",
            "safeName": "timelineComment"
          },
          "snakeCase": {
            "unsafeName": "timeline_comment",
            "safeName": "timeline_comment"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_COMMENT",
            "safeName": "TIMELINE_COMMENT"
          },
          "pascalCase": {
            "unsafeName": "TimelineComment",
            "safeName": "TimelineComment"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "artifact-summary",
                        "camelCase": {
                          "unsafeName": "artifactSummary",
                          "safeName": "artifactSummary"
                        },
                        "snakeCase": {
                          "unsafeName": "artifact_summary",
                          "safeName": "artifact_summary"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "ARTIFACT_SUMMARY",
                          "safeName": "ARTIFACT_SUMMARY"
                        },
                        "pascalCase": {
                          "unsafeName": "ArtifactSummary",
                          "safeName": "ArtifactSummary"
                        }
                      },
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The artifacts for the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentArtifacts_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The comment's body. If the comment has been deleted, then no body\nwill appear in the response.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body_type",
                "camelCase": {
                  "unsafeName": "bodyType",
                  "safeName": "bodyType"
                },
                "snakeCase": {
                  "unsafeName": "body_type",
                  "safeName": "body_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY_TYPE",
                  "safeName": "BODY_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "BodyType",
                  "safeName": "BodyType"
                }
              },
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-comment-body-type",
                    "camelCase": {
                      "unsafeName": "timelineCommentBodyType",
                      "safeName": "timelineCommentBodyType"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_comment_body_type",
                      "safeName": "timeline_comment_body_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_COMMENT_BODY_TYPE",
                      "safeName": "TIMELINE_COMMENT_BODY_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineCommentBodyType",
                      "safeName": "TimelineCommentBodyType"
                    }
                  },
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "snap_kit_body",
                "camelCase": {
                  "unsafeName": "snapKitBody",
                  "safeName": "snapKitBody"
                },
                "snakeCase": {
                  "unsafeName": "snap_kit_body",
                  "safeName": "snap_kit_body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SNAP_KIT_BODY",
                  "safeName": "SNAP_KIT_BODY"
                },
                "pascalCase": {
                  "unsafeName": "SnapKitBody",
                  "safeName": "SnapKitBody"
                }
              },
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "TimelineCommentSnapKitBody",
                    "camelCase": {
                      "unsafeName": "timelineCommentSnapKitBody",
                      "safeName": "timelineCommentSnapKitBody"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_comment_snap_kit_body",
                      "safeName": "timeline_comment_snap_kit_body"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_COMMENT_SNAP_KIT_BODY",
                      "safeName": "TIMELINE_COMMENT_SNAP_KIT_BODY"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineCommentSnapKitBody",
                      "safeName": "TimelineCommentSnapKitBody"
                    }
                  },
                  "typeId": "TimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit Body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "timeline-entry-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "timeline-entry-base",
              "camelCase": {
                "unsafeName": "timelineEntryBase",
                "safeName": "timelineEntryBase"
              },
              "snakeCase": {
                "unsafeName": "timeline_entry_base",
                "safeName": "timeline_entry_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "TIMELINE_ENTRY_BASE",
                "safeName": "TIMELINE_ENTRY_BASE"
              },
              "pascalCase": {
                "unsafeName": "TimelineEntryBase",
                "safeName": "TimelineEntryBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-comment_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "timeline-comment-body-type": {
      "name": {
        "typeId": "timeline-comment-body-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-comment-body-type",
          "camelCase": {
            "unsafeName": "timelineCommentBodyType",
            "safeName": "timelineCommentBodyType"
          },
          "snakeCase": {
            "unsafeName": "timeline_comment_body_type",
            "safeName": "timeline_comment_body_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_COMMENT_BODY_TYPE",
            "safeName": "TIMELINE_COMMENT_BODY_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TimelineCommentBodyType",
            "safeName": "TimelineCommentBodyType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "snap_kit",
                "camelCase": {
                  "unsafeName": "snapKit",
                  "safeName": "snapKit"
                },
                "snakeCase": {
                  "unsafeName": "snap_kit",
                  "safeName": "snap_kit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SNAP_KIT",
                  "safeName": "SNAP_KIT"
                },
                "pascalCase": {
                  "unsafeName": "SnapKit",
                  "safeName": "SnapKit"
                }
              },
              "wireValue": "snap_kit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "text",
                "camelCase": {
                  "unsafeName": "text",
                  "safeName": "text"
                },
                "snakeCase": {
                  "unsafeName": "text",
                  "safeName": "text"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TEXT",
                  "safeName": "TEXT"
                },
                "pascalCase": {
                  "unsafeName": "Text",
                  "safeName": "Text"
                }
              },
              "wireValue": "text"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type of the body to use for the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-comment-body-type_example_autogenerated": "snap_kit"
        }
      }
    },
    "timeline-entries-create-request": {
      "name": {
        "typeId": "timeline-entries-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-create-request",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequest",
            "safeName": "timelineEntriesCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request",
            "safeName": "timeline_entries_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequest",
            "safeName": "TimelineEntriesCreateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "object",
                "camelCase": {
                  "unsafeName": "object",
                  "safeName": "object"
                },
                "snakeCase": {
                  "unsafeName": "object",
                  "safeName": "object"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OBJECT",
                  "safeName": "OBJECT"
                },
                "pascalCase": {
                  "unsafeName": "Object",
                  "safeName": "Object_"
                }
              },
              "wireValue": "object"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the object to create the timeline entry for.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesCreateRequestObject_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entries-create-request-type",
                "camelCase": {
                  "unsafeName": "timelineEntriesCreateRequestType",
                  "safeName": "timelineEntriesCreateRequestType"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_create_request_type",
                  "safeName": "timeline_entries_create_request_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TYPE",
                  "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesCreateRequestType",
                  "safeName": "TimelineEntriesCreateRequestType"
                }
              },
              "typeId": "timeline-entries-create-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "visibility",
                "camelCase": {
                  "unsafeName": "visibility",
                  "safeName": "visibility"
                },
                "snakeCase": {
                  "unsafeName": "visibility",
                  "safeName": "visibility"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VISIBILITY",
                  "safeName": "VISIBILITY"
                },
                "pascalCase": {
                  "unsafeName": "Visibility",
                  "safeName": "Visibility"
                }
              },
              "wireValue": "visibility"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entry-visibility",
                    "camelCase": {
                      "unsafeName": "timelineEntryVisibility",
                      "safeName": "timelineEntryVisibility"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entry_visibility",
                      "safeName": "timeline_entry_visibility"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRY_VISIBILITY",
                      "safeName": "TIMELINE_ENTRY_VISIBILITY"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntryVisibility",
                      "safeName": "TimelineEntryVisibility"
                    }
                  },
                  "typeId": "timeline-entry-visibility",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-entries-create-request-timeline-comment",
              "name": {
                "originalName": "timeline-entries-create-request-timeline-comment",
                "camelCase": {
                  "unsafeName": "timelineEntriesCreateRequestTimelineComment",
                  "safeName": "timelineEntriesCreateRequestTimelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_create_request_timeline_comment",
                  "safeName": "timeline_entries_create_request_timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT",
                  "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesCreateRequestTimelineComment",
                  "safeName": "TimelineEntriesCreateRequestTimelineComment"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a timeline entry for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request_example_autogenerated": {}
        }
      }
    },
    "TimelineEntriesCreateRequestTimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestTimelineCommentSnapKitBody",
            "safeName": "timelineEntriesCreateRequestTimelineCommentSnapKitBody"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_timeline_comment_snap_kit_body",
            "safeName": "timeline_entries_create_request_timeline_comment_snap_kit_body"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
            "safeName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineEntriesCreateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-create-request-timeline-comment": {
      "name": {
        "typeId": "timeline-entries-create-request-timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-create-request-timeline-comment",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestTimelineComment",
            "safeName": "timelineEntriesCreateRequestTimelineComment"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_timeline_comment",
            "safeName": "timeline_entries_create_request_timeline_comment"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestTimelineComment",
            "safeName": "TimelineEntriesCreateRequestTimelineComment"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The IDs of the artifacts attached to the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentArtifacts_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The comment's body.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body_type",
                "camelCase": {
                  "unsafeName": "bodyType",
                  "safeName": "bodyType"
                },
                "snakeCase": {
                  "unsafeName": "body_type",
                  "safeName": "body_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY_TYPE",
                  "safeName": "BODY_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "BodyType",
                  "safeName": "BodyType"
                }
              },
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-comment-body-type",
                    "camelCase": {
                      "unsafeName": "timelineCommentBodyType",
                      "safeName": "timelineCommentBodyType"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_comment_body_type",
                      "safeName": "timeline_comment_body_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_COMMENT_BODY_TYPE",
                      "safeName": "TIMELINE_COMMENT_BODY_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineCommentBodyType",
                      "safeName": "TimelineCommentBodyType"
                    }
                  },
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "snap_kit_body",
                "camelCase": {
                  "unsafeName": "snapKitBody",
                  "safeName": "snapKitBody"
                },
                "snakeCase": {
                  "unsafeName": "snap_kit_body",
                  "safeName": "snap_kit_body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SNAP_KIT_BODY",
                  "safeName": "SNAP_KIT_BODY"
                },
                "pascalCase": {
                  "unsafeName": "SnapKitBody",
                  "safeName": "SnapKitBody"
                }
              },
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
                    "camelCase": {
                      "unsafeName": "timelineEntriesCreateRequestTimelineCommentSnapKitBody",
                      "safeName": "timelineEntriesCreateRequestTimelineCommentSnapKitBody"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_create_request_timeline_comment_snap_kit_body",
                      "safeName": "timeline_entries_create_request_timeline_comment_snap_kit_body"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY",
                      "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
                      "safeName": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody"
                    }
                  },
                  "typeId": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesCreateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request-timeline-comment_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-create-request-type": {
      "name": {
        "typeId": "timeline-entries-create-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-create-request-type",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestType",
            "safeName": "timelineEntriesCreateRequestType"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_type",
            "safeName": "timeline_entries_create_request_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TYPE",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestType",
            "safeName": "TimelineEntriesCreateRequestType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-request-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entries-create-response": {
      "name": {
        "typeId": "timeline-entries-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-create-response",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateResponse",
            "safeName": "timelineEntriesCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_response",
            "safeName": "timeline_entries_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_RESPONSE",
            "safeName": "TIMELINE_ENTRIES_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateResponse",
            "safeName": "TimelineEntriesCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "timeline_entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a timeline entry for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-create-response_example_autogenerated": {
            "timeline_entry": {
              "id": "foo"
            }
          }
        }
      }
    },
    "timeline-entries-get-response": {
      "name": {
        "typeId": "timeline-entries-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-get-response",
          "camelCase": {
            "unsafeName": "timelineEntriesGetResponse",
            "safeName": "timelineEntriesGetResponse"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_response",
            "safeName": "timeline_entries_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_RESPONSE",
            "safeName": "TIMELINE_ENTRIES_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetResponse",
            "safeName": "TimelineEntriesGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "timeline_entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to getting a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-get-response_example_autogenerated": {
            "timeline_entry": {
              "id": "foo"
            }
          }
        }
      }
    },
    "timeline-entries-list-response": {
      "name": {
        "typeId": "timeline-entries-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-list-response",
          "camelCase": {
            "unsafeName": "timelineEntriesListResponse",
            "safeName": "timelineEntriesListResponse"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_response",
            "safeName": "timeline_entries_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_RESPONSE",
            "safeName": "TIMELINE_ENTRIES_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListResponse",
            "safeName": "TimelineEntriesListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entries",
                "camelCase": {
                  "unsafeName": "timelineEntries",
                  "safeName": "timelineEntries"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries",
                  "safeName": "timeline_entries"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES",
                  "safeName": "TIMELINE_ENTRIES"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntries",
                  "safeName": "TimelineEntries"
                }
              },
              "wireValue": "timeline_entries"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entry",
                    "camelCase": {
                      "unsafeName": "timelineEntry",
                      "safeName": "timelineEntry"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entry",
                      "safeName": "timeline_entry"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRY",
                      "safeName": "TIMELINE_ENTRY"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntry",
                      "safeName": "TimelineEntry"
                    }
                  },
                  "typeId": "timeline-entry",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The timeline entries for the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesListResponseTimelineEntries_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing timeline entries for an object.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-list-response_example_autogenerated": {
            "timeline_entries": [
              {
                "id": "foo"
              }
            ]
          }
        }
      }
    },
    "timeline-entries-update-request": {
      "name": {
        "typeId": "timeline-entries-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-update-request",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequest",
            "safeName": "timelineEntriesUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request",
            "safeName": "timeline_entries_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequest",
            "safeName": "TimelineEntriesUpdateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The ID of the timeline entry to update.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entries-update-request-type",
                "camelCase": {
                  "unsafeName": "timelineEntriesUpdateRequestType",
                  "safeName": "timelineEntriesUpdateRequestType"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_update_request_type",
                  "safeName": "timeline_entries_update_request_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TYPE",
                  "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesUpdateRequestType",
                  "safeName": "TimelineEntriesUpdateRequestType"
                }
              },
              "typeId": "timeline-entries-update-request-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-entries-update-request-timeline-comment",
              "name": {
                "originalName": "timeline-entries-update-request-timeline-comment",
                "camelCase": {
                  "unsafeName": "timelineEntriesUpdateRequestTimelineComment",
                  "safeName": "timelineEntriesUpdateRequestTimelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_update_request_timeline_comment",
                  "safeName": "timeline_entries_update_request_timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT",
                  "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesUpdateRequestTimelineComment",
                  "safeName": "TimelineEntriesUpdateRequestTimelineComment"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request_example_autogenerated": {}
        }
      }
    },
    "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody": {
      "name": {
        "typeId": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestTimelineCommentSnapKitBody",
            "safeName": "timelineEntriesUpdateRequestTimelineCommentSnapKitBody"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_timeline_comment_snap_kit_body",
            "safeName": "timeline_entries_update_request_timeline_comment_snap_kit_body"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
            "safeName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The SnapKit body of the comment.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-timeline-comment": {
      "name": {
        "typeId": "timeline-entries-update-request-timeline-comment",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-update-request-timeline-comment",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestTimelineComment",
            "safeName": "timelineEntriesUpdateRequestTimelineComment"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_timeline_comment",
            "safeName": "timeline_entries_update_request_timeline_comment"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestTimelineComment",
            "safeName": "TimelineEntriesUpdateRequestTimelineComment"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entries-update-request-timeline-comment-artifacts",
                    "camelCase": {
                      "unsafeName": "timelineEntriesUpdateRequestTimelineCommentArtifacts",
                      "safeName": "timelineEntriesUpdateRequestTimelineCommentArtifacts"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_update_request_timeline_comment_artifacts",
                      "safeName": "timeline_entries_update_request_timeline_comment_artifacts"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_ARTIFACTS",
                      "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_ARTIFACTS"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesUpdateRequestTimelineCommentArtifacts",
                      "safeName": "TimelineEntriesUpdateRequestTimelineCommentArtifacts"
                    }
                  },
                  "typeId": "timeline-entries-update-request-timeline-comment-artifacts",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated comment's body.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body_type",
                "camelCase": {
                  "unsafeName": "bodyType",
                  "safeName": "bodyType"
                },
                "snakeCase": {
                  "unsafeName": "body_type",
                  "safeName": "body_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY_TYPE",
                  "safeName": "BODY_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "BodyType",
                  "safeName": "BodyType"
                }
              },
              "wireValue": "body_type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-comment-body-type",
                    "camelCase": {
                      "unsafeName": "timelineCommentBodyType",
                      "safeName": "timelineCommentBodyType"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_comment_body_type",
                      "safeName": "timeline_comment_body_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_COMMENT_BODY_TYPE",
                      "safeName": "TIMELINE_COMMENT_BODY_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineCommentBodyType",
                      "safeName": "TimelineCommentBodyType"
                    }
                  },
                  "typeId": "timeline-comment-body-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "snap_kit_body",
                "camelCase": {
                  "unsafeName": "snapKitBody",
                  "safeName": "snapKitBody"
                },
                "snakeCase": {
                  "unsafeName": "snap_kit_body",
                  "safeName": "snap_kit_body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SNAP_KIT_BODY",
                  "safeName": "SNAP_KIT_BODY"
                },
                "pascalCase": {
                  "unsafeName": "SnapKitBody",
                  "safeName": "SnapKitBody"
                }
              },
              "wireValue": "snap_kit_body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                    "camelCase": {
                      "unsafeName": "timelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                      "safeName": "timelineEntriesUpdateRequestTimelineCommentSnapKitBody"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_update_request_timeline_comment_snap_kit_body",
                      "safeName": "timeline_entries_update_request_timeline_comment_snap_kit_body"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY",
                      "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_SNAP_KIT_BODY"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                      "safeName": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody"
                    }
                  },
                  "typeId": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The SnapKit body of the comment.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody_example_autogenerated": {}
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-timeline-comment_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-timeline-comment-artifacts": {
      "name": {
        "typeId": "timeline-entries-update-request-timeline-comment-artifacts",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-update-request-timeline-comment-artifacts",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestTimelineCommentArtifacts",
            "safeName": "timelineEntriesUpdateRequestTimelineCommentArtifacts"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_timeline_comment_artifacts",
            "safeName": "timeline_entries_update_request_timeline_comment_artifacts"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_ARTIFACTS",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TIMELINE_COMMENT_ARTIFACTS"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestTimelineCommentArtifacts",
            "safeName": "TimelineEntriesUpdateRequestTimelineCommentArtifacts"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "add",
                "camelCase": {
                  "unsafeName": "add",
                  "safeName": "add"
                },
                "snakeCase": {
                  "unsafeName": "add",
                  "safeName": "add"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ADD",
                  "safeName": "ADD"
                },
                "pascalCase": {
                  "unsafeName": "Add",
                  "safeName": "Add"
                }
              },
              "wireValue": "add"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Adds the provided artifacts to the comment. An artifact cannot be\nadded more than once, i.e. nothing is done if the artifact is\nalready attached. Mutually exclusive with `set`.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsAdd_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "remove",
                "camelCase": {
                  "unsafeName": "remove",
                  "safeName": "remove"
                },
                "snakeCase": {
                  "unsafeName": "remove",
                  "safeName": "remove"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REMOVE",
                  "safeName": "REMOVE"
                },
                "pascalCase": {
                  "unsafeName": "Remove",
                  "safeName": "Remove"
                }
              },
              "wireValue": "remove"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Removes the provided artifacts from the comment. If an artifact is\nnot present, then it's ignored. Mututally exclusive with `set`.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsRemove_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the field to the provided artifacts.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "TimelineEntriesUpdateRequestTimelineCommentArtifactsSet_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-timeline-comment-artifacts_example_autogenerated": {}
        }
      }
    },
    "timeline-entries-update-request-type": {
      "name": {
        "typeId": "timeline-entries-update-request-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-update-request-type",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestType",
            "safeName": "timelineEntriesUpdateRequestType"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_type",
            "safeName": "timeline_entries_update_request_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TYPE",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestType",
            "safeName": "TimelineEntriesUpdateRequestType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-request-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entries-update-response": {
      "name": {
        "typeId": "timeline-entries-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entries-update-response",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateResponse",
            "safeName": "timelineEntriesUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_response",
            "safeName": "timeline_entries_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_RESPONSE",
            "safeName": "TIMELINE_ENTRIES_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateResponse",
            "safeName": "TimelineEntriesUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "timeline_entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "wireValue": "timeline_entry"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry",
                "camelCase": {
                  "unsafeName": "timelineEntry",
                  "safeName": "timelineEntry"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry",
                  "safeName": "timeline_entry"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY",
                  "safeName": "TIMELINE_ENTRY"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntry",
                  "safeName": "TimelineEntry"
                }
              },
              "typeId": "timeline-entry",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to updating a timeline entry.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entries-update-response_example_autogenerated": {
            "timeline_entry": {
              "id": "foo"
            }
          }
        }
      }
    },
    "timeline-entry": {
      "name": {
        "typeId": "timeline-entry",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entry",
          "camelCase": {
            "unsafeName": "timelineEntry",
            "safeName": "timelineEntry"
          },
          "snakeCase": {
            "unsafeName": "timeline_entry",
            "safeName": "timeline_entry"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRY",
            "safeName": "TIMELINE_ENTRY"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntry",
            "safeName": "TimelineEntry"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entry-type",
                "camelCase": {
                  "unsafeName": "timelineEntryType",
                  "safeName": "timelineEntryType"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_type",
                  "safeName": "timeline_entry_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_TYPE",
                  "safeName": "TIMELINE_ENTRY_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryType",
                  "safeName": "TimelineEntryType"
                }
              },
              "typeId": "timeline-entry-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            },
            "displayName": "timeline_comment",
            "shape": {
              "typeId": "timeline-comment",
              "name": {
                "originalName": "timeline-comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "timeline_comment",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "timeline-entry-base": {
      "name": {
        "typeId": "timeline-entry-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entry-base",
          "camelCase": {
            "unsafeName": "timelineEntryBase",
            "safeName": "timelineEntryBase"
          },
          "snakeCase": {
            "unsafeName": "timeline_entry_base",
            "safeName": "timeline_entry_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRY_BASE",
            "safeName": "TIMELINE_ENTRY_BASE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntryBase",
            "safeName": "TimelineEntryBase"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-base_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "timeline-entry-type": {
      "name": {
        "typeId": "timeline-entry-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entry-type",
          "camelCase": {
            "unsafeName": "timelineEntryType",
            "safeName": "timelineEntryType"
          },
          "snakeCase": {
            "unsafeName": "timeline_entry_type",
            "safeName": "timeline_entry_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRY_TYPE",
            "safeName": "TIMELINE_ENTRY_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntryType",
            "safeName": "TimelineEntryType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "timeline_comment",
                "camelCase": {
                  "unsafeName": "timelineComment",
                  "safeName": "timelineComment"
                },
                "snakeCase": {
                  "unsafeName": "timeline_comment",
                  "safeName": "timeline_comment"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_COMMENT",
                  "safeName": "TIMELINE_COMMENT"
                },
                "pascalCase": {
                  "unsafeName": "TimelineComment",
                  "safeName": "TimelineComment"
                }
              },
              "wireValue": "timeline_comment"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-type_example_autogenerated": "timeline_comment"
        }
      }
    },
    "timeline-entry-visibility": {
      "name": {
        "typeId": "timeline-entry-visibility",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeline-entry-visibility",
          "camelCase": {
            "unsafeName": "timelineEntryVisibility",
            "safeName": "timelineEntryVisibility"
          },
          "snakeCase": {
            "unsafeName": "timeline_entry_visibility",
            "safeName": "timeline_entry_visibility"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRY_VISIBILITY",
            "safeName": "TIMELINE_ENTRY_VISIBILITY"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntryVisibility",
            "safeName": "TimelineEntryVisibility"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "private",
                "camelCase": {
                  "unsafeName": "private",
                  "safeName": "private_"
                },
                "snakeCase": {
                  "unsafeName": "private",
                  "safeName": "private_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRIVATE",
                  "safeName": "PRIVATE"
                },
                "pascalCase": {
                  "unsafeName": "Private",
                  "safeName": "Private"
                }
              },
              "wireValue": "private"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The visibility of the entry. If 'private', then the entry is only\nvisible to the creator, otherwise if not set, then the entry has\ndefault visibility.\n",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "timeline-entry-visibility_example_autogenerated": "private"
        }
      }
    },
    "user-base": {
      "name": {
        "typeId": "user-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "user-base",
          "camelCase": {
            "unsafeName": "userBase",
            "safeName": "userBase"
          },
          "snakeCase": {
            "unsafeName": "user_base",
            "safeName": "user_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "USER_BASE",
            "safeName": "USER_BASE"
          },
          "pascalCase": {
            "unsafeName": "UserBase",
            "safeName": "UserBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The user's display name. The name is non-unique and mutable.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "display_picture",
                "camelCase": {
                  "unsafeName": "displayPicture",
                  "safeName": "displayPicture"
                },
                "snakeCase": {
                  "unsafeName": "display_picture",
                  "safeName": "display_picture"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_PICTURE",
                  "safeName": "DISPLAY_PICTURE"
                },
                "pascalCase": {
                  "unsafeName": "DisplayPicture",
                  "safeName": "DisplayPicture"
                }
              },
              "wireValue": "display_picture"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "artifact-summary",
                    "camelCase": {
                      "unsafeName": "artifactSummary",
                      "safeName": "artifactSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "artifact_summary",
                      "safeName": "artifact_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ARTIFACT_SUMMARY",
                      "safeName": "ARTIFACT_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "ArtifactSummary",
                      "safeName": "ArtifactSummary"
                    }
                  },
                  "typeId": "artifact-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "email",
                "camelCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "snakeCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMAIL",
                  "safeName": "EMAIL"
                },
                "pascalCase": {
                  "unsafeName": "Email",
                  "safeName": "Email"
                }
              },
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Email address of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseEmail_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "full_name",
                "camelCase": {
                  "unsafeName": "fullName",
                  "safeName": "fullName"
                },
                "snakeCase": {
                  "unsafeName": "full_name",
                  "safeName": "full_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FULL_NAME",
                  "safeName": "FULL_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FullName",
                  "safeName": "FullName"
                }
              },
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Full name of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseFullName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "phone_numbers",
                "camelCase": {
                  "unsafeName": "phoneNumbers",
                  "safeName": "phoneNumbers"
                },
                "snakeCase": {
                  "unsafeName": "phone_numbers",
                  "safeName": "phone_numbers"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PHONE_NUMBERS",
                  "safeName": "PHONE_NUMBERS"
                },
                "pascalCase": {
                  "unsafeName": "PhoneNumbers",
                  "safeName": "PhoneNumbers"
                }
              },
              "wireValue": "phone_numbers"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Phone numbers of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBasePhoneNumbers_example_autogenerated": [
                  "foo"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "state",
                "camelCase": {
                  "unsafeName": "state",
                  "safeName": "state"
                },
                "snakeCase": {
                  "unsafeName": "state",
                  "safeName": "state"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STATE",
                  "safeName": "STATE"
                },
                "pascalCase": {
                  "unsafeName": "State",
                  "safeName": "State"
                }
              },
              "wireValue": "state"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-state",
                    "camelCase": {
                      "unsafeName": "userState",
                      "safeName": "userState"
                    },
                    "snakeCase": {
                      "unsafeName": "user_state",
                      "safeName": "user_state"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_STATE",
                      "safeName": "USER_STATE"
                    },
                    "pascalCase": {
                      "unsafeName": "UserState",
                      "safeName": "UserState"
                    }
                  },
                  "typeId": "user-state",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-base_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "user-base-summary": {
      "name": {
        "typeId": "user-base-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "user-base-summary",
          "camelCase": {
            "unsafeName": "userBaseSummary",
            "safeName": "userBaseSummary"
          },
          "snakeCase": {
            "unsafeName": "user_base_summary",
            "safeName": "user_base_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "USER_BASE_SUMMARY",
            "safeName": "USER_BASE_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "UserBaseSummary",
            "safeName": "UserBaseSummary"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "display_name",
                "camelCase": {
                  "unsafeName": "displayName",
                  "safeName": "displayName"
                },
                "snakeCase": {
                  "unsafeName": "display_name",
                  "safeName": "display_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_NAME",
                  "safeName": "DISPLAY_NAME"
                },
                "pascalCase": {
                  "unsafeName": "DisplayName",
                  "safeName": "DisplayName"
                }
              },
              "wireValue": "display_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The user's display name. The name is non-unique and mutable.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryDisplayName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "display_picture",
                "camelCase": {
                  "unsafeName": "displayPicture",
                  "safeName": "displayPicture"
                },
                "snakeCase": {
                  "unsafeName": "display_picture",
                  "safeName": "display_picture"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISPLAY_PICTURE",
                  "safeName": "DISPLAY_PICTURE"
                },
                "pascalCase": {
                  "unsafeName": "DisplayPicture",
                  "safeName": "DisplayPicture"
                }
              },
              "wireValue": "display_picture"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "artifact-summary",
                    "camelCase": {
                      "unsafeName": "artifactSummary",
                      "safeName": "artifactSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "artifact_summary",
                      "safeName": "artifact_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ARTIFACT_SUMMARY",
                      "safeName": "ARTIFACT_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "ArtifactSummary",
                      "safeName": "ArtifactSummary"
                    }
                  },
                  "typeId": "artifact-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "email",
                "camelCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "snakeCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMAIL",
                  "safeName": "EMAIL"
                },
                "pascalCase": {
                  "unsafeName": "Email",
                  "safeName": "Email"
                }
              },
              "wireValue": "email"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Email address of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryEmail_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "full_name",
                "camelCase": {
                  "unsafeName": "fullName",
                  "safeName": "fullName"
                },
                "snakeCase": {
                  "unsafeName": "full_name",
                  "safeName": "full_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FULL_NAME",
                  "safeName": "FULL_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FullName",
                  "safeName": "FullName"
                }
              },
              "wireValue": "full_name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Full name of the user.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "UserBaseSummaryFullName_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "state",
                "camelCase": {
                  "unsafeName": "state",
                  "safeName": "state"
                },
                "snakeCase": {
                  "unsafeName": "state",
                  "safeName": "state"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STATE",
                  "safeName": "STATE"
                },
                "pascalCase": {
                  "unsafeName": "State",
                  "safeName": "State"
                }
              },
              "wireValue": "state"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-state",
                    "camelCase": {
                      "unsafeName": "userState",
                      "safeName": "userState"
                    },
                    "snakeCase": {
                      "unsafeName": "user_state",
                      "safeName": "user_state"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_STATE",
                      "safeName": "USER_STATE"
                    },
                    "pascalCase": {
                      "unsafeName": "UserState",
                      "safeName": "UserState"
                    }
                  },
                  "typeId": "user-state",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base-summary",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base-summary",
              "camelCase": {
                "unsafeName": "atomBaseSummary",
                "safeName": "atomBaseSummary"
              },
              "snakeCase": {
                "unsafeName": "atom_base_summary",
                "safeName": "atom_base_summary"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE_SUMMARY",
                "safeName": "ATOM_BASE_SUMMARY"
              },
              "pascalCase": {
                "unsafeName": "AtomBaseSummary",
                "safeName": "AtomBaseSummary"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-base-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "user-state": {
      "name": {
        "typeId": "user-state",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "user-state",
          "camelCase": {
            "unsafeName": "userState",
            "safeName": "userState"
          },
          "snakeCase": {
            "unsafeName": "user_state",
            "safeName": "user_state"
          },
          "screamingSnakeCase": {
            "unsafeName": "USER_STATE",
            "safeName": "USER_STATE"
          },
          "pascalCase": {
            "unsafeName": "UserState",
            "safeName": "UserState"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "active",
                "camelCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "snakeCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACTIVE",
                  "safeName": "ACTIVE"
                },
                "pascalCase": {
                  "unsafeName": "Active",
                  "safeName": "Active"
                }
              },
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "deactivated",
                "camelCase": {
                  "unsafeName": "deactivated",
                  "safeName": "deactivated"
                },
                "snakeCase": {
                  "unsafeName": "deactivated",
                  "safeName": "deactivated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEACTIVATED",
                  "safeName": "DEACTIVATED"
                },
                "pascalCase": {
                  "unsafeName": "Deactivated",
                  "safeName": "Deactivated"
                }
              },
              "wireValue": "deactivated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "locked",
                "camelCase": {
                  "unsafeName": "locked",
                  "safeName": "locked"
                },
                "snakeCase": {
                  "unsafeName": "locked",
                  "safeName": "locked"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOCKED",
                  "safeName": "LOCKED"
                },
                "pascalCase": {
                  "unsafeName": "Locked",
                  "safeName": "Locked"
                }
              },
              "wireValue": "locked"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "shadow",
                "camelCase": {
                  "unsafeName": "shadow",
                  "safeName": "shadow"
                },
                "snakeCase": {
                  "unsafeName": "shadow",
                  "safeName": "shadow"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SHADOW",
                  "safeName": "SHADOW"
                },
                "pascalCase": {
                  "unsafeName": "Shadow",
                  "safeName": "Shadow"
                }
              },
              "wireValue": "shadow"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "unassigned",
                "camelCase": {
                  "unsafeName": "unassigned",
                  "safeName": "unassigned"
                },
                "snakeCase": {
                  "unsafeName": "unassigned",
                  "safeName": "unassigned"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UNASSIGNED",
                  "safeName": "UNASSIGNED"
                },
                "pascalCase": {
                  "unsafeName": "Unassigned",
                  "safeName": "Unassigned"
                }
              },
              "wireValue": "unassigned"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "State of the user.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-state_example_autogenerated": "active"
        }
      }
    },
    "user-summary": {
      "name": {
        "typeId": "user-summary",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "user-summary",
          "camelCase": {
            "unsafeName": "userSummary",
            "safeName": "userSummary"
          },
          "snakeCase": {
            "unsafeName": "user_summary",
            "safeName": "user_summary"
          },
          "screamingSnakeCase": {
            "unsafeName": "USER_SUMMARY",
            "safeName": "USER_SUMMARY"
          },
          "pascalCase": {
            "unsafeName": "UserSummary",
            "safeName": "UserSummary"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "user-type",
                "camelCase": {
                  "unsafeName": "userType",
                  "safeName": "userType"
                },
                "snakeCase": {
                  "unsafeName": "user_type",
                  "safeName": "user_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "USER_TYPE",
                  "safeName": "USER_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "UserType",
                  "safeName": "UserType"
                }
              },
              "typeId": "user-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "dev_user",
                "camelCase": {
                  "unsafeName": "devUser",
                  "safeName": "devUser"
                },
                "snakeCase": {
                  "unsafeName": "dev_user",
                  "safeName": "dev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USER",
                  "safeName": "DEV_USER"
                },
                "pascalCase": {
                  "unsafeName": "DevUser",
                  "safeName": "DevUser"
                }
              },
              "wireValue": "dev_user"
            },
            "displayName": "dev_user",
            "shape": {
              "typeId": "dev-user-summary",
              "name": {
                "originalName": "dev-user-summary",
                "camelCase": {
                  "unsafeName": "devUserSummary",
                  "safeName": "devUserSummary"
                },
                "snakeCase": {
                  "unsafeName": "dev_user_summary",
                  "safeName": "dev_user_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USER_SUMMARY",
                  "safeName": "DEV_USER_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "DevUserSummary",
                  "safeName": "DevUserSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "dev_user",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "rev_user",
                "camelCase": {
                  "unsafeName": "revUser",
                  "safeName": "revUser"
                },
                "snakeCase": {
                  "unsafeName": "rev_user",
                  "safeName": "rev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_USER",
                  "safeName": "REV_USER"
                },
                "pascalCase": {
                  "unsafeName": "RevUser",
                  "safeName": "RevUser"
                }
              },
              "wireValue": "rev_user"
            },
            "displayName": "rev_user",
            "shape": {
              "typeId": "rev-user-summary",
              "name": {
                "originalName": "rev-user-summary",
                "camelCase": {
                  "unsafeName": "revUserSummary",
                  "safeName": "revUserSummary"
                },
                "snakeCase": {
                  "unsafeName": "rev_user_summary",
                  "safeName": "rev_user_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_USER_SUMMARY",
                  "safeName": "REV_USER_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "RevUserSummary",
                  "safeName": "RevUserSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "rev_user",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "sys_user",
                "camelCase": {
                  "unsafeName": "sysUser",
                  "safeName": "sysUser"
                },
                "snakeCase": {
                  "unsafeName": "sys_user",
                  "safeName": "sys_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SYS_USER",
                  "safeName": "SYS_USER"
                },
                "pascalCase": {
                  "unsafeName": "SysUser",
                  "safeName": "SysUser"
                }
              },
              "wireValue": "sys_user"
            },
            "displayName": "sys_user",
            "shape": {
              "typeId": "sys-user-summary",
              "name": {
                "originalName": "sys-user-summary",
                "camelCase": {
                  "unsafeName": "sysUserSummary",
                  "safeName": "sysUserSummary"
                },
                "snakeCase": {
                  "unsafeName": "sys_user_summary",
                  "safeName": "sys_user_summary"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SYS_USER_SUMMARY",
                  "safeName": "SYS_USER_SUMMARY"
                },
                "pascalCase": {
                  "unsafeName": "SysUserSummary",
                  "safeName": "SysUserSummary"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "sys_user",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-summary_example_autogenerated": {
            "id": "foo"
          }
        }
      }
    },
    "user-type": {
      "name": {
        "typeId": "user-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "user-type",
          "camelCase": {
            "unsafeName": "userType",
            "safeName": "userType"
          },
          "snakeCase": {
            "unsafeName": "user_type",
            "safeName": "user_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "USER_TYPE",
            "safeName": "USER_TYPE"
          },
          "pascalCase": {
            "unsafeName": "UserType",
            "safeName": "UserType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "dev_user",
                "camelCase": {
                  "unsafeName": "devUser",
                  "safeName": "devUser"
                },
                "snakeCase": {
                  "unsafeName": "dev_user",
                  "safeName": "dev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_USER",
                  "safeName": "DEV_USER"
                },
                "pascalCase": {
                  "unsafeName": "DevUser",
                  "safeName": "DevUser"
                }
              },
              "wireValue": "dev_user"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_user",
                "camelCase": {
                  "unsafeName": "revUser",
                  "safeName": "revUser"
                },
                "snakeCase": {
                  "unsafeName": "rev_user",
                  "safeName": "rev_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_USER",
                  "safeName": "REV_USER"
                },
                "pascalCase": {
                  "unsafeName": "RevUser",
                  "safeName": "RevUser"
                }
              },
              "wireValue": "rev_user"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "sys_user",
                "camelCase": {
                  "unsafeName": "sysUser",
                  "safeName": "sysUser"
                },
                "snakeCase": {
                  "unsafeName": "sys_user",
                  "safeName": "sys_user"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SYS_USER",
                  "safeName": "SYS_USER"
                },
                "pascalCase": {
                  "unsafeName": "SysUser",
                  "safeName": "SysUser"
                }
              },
              "wireValue": "sys_user"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "user-type_example_autogenerated": "dev_user"
        }
      }
    },
    "webhook": {
      "name": {
        "typeId": "webhook",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook",
          "camelCase": {
            "unsafeName": "webhook",
            "safeName": "webhook"
          },
          "snakeCase": {
            "unsafeName": "webhook",
            "safeName": "webhook"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK",
            "safeName": "WEBHOOK"
          },
          "pascalCase": {
            "unsafeName": "Webhook",
            "safeName": "Webhook"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "event_types",
                "camelCase": {
                  "unsafeName": "eventTypes",
                  "safeName": "eventTypes"
                },
                "snakeCase": {
                  "unsafeName": "event_types",
                  "safeName": "event_types"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EVENT_TYPES",
                  "safeName": "EVENT_TYPES"
                },
                "pascalCase": {
                  "unsafeName": "EventTypes",
                  "safeName": "EventTypes"
                }
              },
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "webhook-event-type",
                        "camelCase": {
                          "unsafeName": "webhookEventType",
                          "safeName": "webhookEventType"
                        },
                        "snakeCase": {
                          "unsafeName": "webhook_event_type",
                          "safeName": "webhook_event_type"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "WEBHOOK_EVENT_TYPE",
                          "safeName": "WEBHOOK_EVENT_TYPE"
                        },
                        "pascalCase": {
                          "unsafeName": "WebhookEventType",
                          "safeName": "WebhookEventType"
                        }
                      },
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types that the webhook will receive.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventTypes_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "secret",
                "camelCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "snakeCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SECRET",
                  "safeName": "SECRET"
                },
                "pascalCase": {
                  "unsafeName": "Secret",
                  "safeName": "Secret"
                }
              },
              "wireValue": "secret"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "byte"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The secret to use for verifying webhook events.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "status",
                "camelCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "snakeCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STATUS",
                  "safeName": "STATUS"
                },
                "pascalCase": {
                  "unsafeName": "Status",
                  "safeName": "Status"
                }
              },
              "wireValue": "status"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook-status",
                "camelCase": {
                  "unsafeName": "webhookStatus",
                  "safeName": "webhookStatus"
                },
                "snakeCase": {
                  "unsafeName": "webhook_status",
                  "safeName": "webhook_status"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_STATUS",
                  "safeName": "WEBHOOK_STATUS"
                },
                "pascalCase": {
                  "unsafeName": "WebhookStatus",
                  "safeName": "WebhookStatus"
                }
              },
              "typeId": "webhook-status",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "url",
                "camelCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "snakeCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URL",
                  "safeName": "URL"
                },
                "pascalCase": {
                  "unsafeName": "Url",
                  "safeName": "Url"
                }
              },
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the webhook endpoint.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookUrl_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook_example_autogenerated": {
            "id": "foo",
            "secret": "foo",
            "status": "active",
            "url": "foo"
          }
        }
      }
    },
    "webhook-event-request": {
      "name": {
        "typeId": "webhook-event-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook-event-request",
          "camelCase": {
            "unsafeName": "webhookEventRequest",
            "safeName": "webhookEventRequest"
          },
          "snakeCase": {
            "unsafeName": "webhook_event_request",
            "safeName": "webhook_event_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK_EVENT_REQUEST",
            "safeName": "WEBHOOK_EVENT_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WebhookEventRequest",
            "safeName": "WebhookEventRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The event's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventRequestId_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "part_created",
                "camelCase": {
                  "unsafeName": "partCreated",
                  "safeName": "partCreated"
                },
                "snakeCase": {
                  "unsafeName": "part_created",
                  "safeName": "part_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_CREATED",
                  "safeName": "PART_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "PartCreated",
                  "safeName": "PartCreated"
                }
              },
              "wireValue": "part_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-part-created",
                    "camelCase": {
                      "unsafeName": "eventPartCreated",
                      "safeName": "eventPartCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_part_created",
                      "safeName": "event_part_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_PART_CREATED",
                      "safeName": "EVENT_PART_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventPartCreated",
                      "safeName": "EventPartCreated"
                    }
                  },
                  "typeId": "event-part-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "part_deleted",
                "camelCase": {
                  "unsafeName": "partDeleted",
                  "safeName": "partDeleted"
                },
                "snakeCase": {
                  "unsafeName": "part_deleted",
                  "safeName": "part_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_DELETED",
                  "safeName": "PART_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "PartDeleted",
                  "safeName": "PartDeleted"
                }
              },
              "wireValue": "part_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-part-deleted",
                    "camelCase": {
                      "unsafeName": "eventPartDeleted",
                      "safeName": "eventPartDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_part_deleted",
                      "safeName": "event_part_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_PART_DELETED",
                      "safeName": "EVENT_PART_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventPartDeleted",
                      "safeName": "EventPartDeleted"
                    }
                  },
                  "typeId": "event-part-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "part_updated",
                "camelCase": {
                  "unsafeName": "partUpdated",
                  "safeName": "partUpdated"
                },
                "snakeCase": {
                  "unsafeName": "part_updated",
                  "safeName": "part_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_UPDATED",
                  "safeName": "PART_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "PartUpdated",
                  "safeName": "PartUpdated"
                }
              },
              "wireValue": "part_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-part-updated",
                    "camelCase": {
                      "unsafeName": "eventPartUpdated",
                      "safeName": "eventPartUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_part_updated",
                      "safeName": "event_part_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_PART_UPDATED",
                      "safeName": "EVENT_PART_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventPartUpdated",
                      "safeName": "EventPartUpdated"
                    }
                  },
                  "typeId": "event-part-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_created",
                "camelCase": {
                  "unsafeName": "revOrgCreated",
                  "safeName": "revOrgCreated"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_created",
                  "safeName": "rev_org_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_CREATED",
                  "safeName": "REV_ORG_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgCreated",
                  "safeName": "RevOrgCreated"
                }
              },
              "wireValue": "rev_org_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-rev-org-created",
                    "camelCase": {
                      "unsafeName": "eventRevOrgCreated",
                      "safeName": "eventRevOrgCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_rev_org_created",
                      "safeName": "event_rev_org_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_REV_ORG_CREATED",
                      "safeName": "EVENT_REV_ORG_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventRevOrgCreated",
                      "safeName": "EventRevOrgCreated"
                    }
                  },
                  "typeId": "event-rev-org-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_deleted",
                "camelCase": {
                  "unsafeName": "revOrgDeleted",
                  "safeName": "revOrgDeleted"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_deleted",
                  "safeName": "rev_org_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_DELETED",
                  "safeName": "REV_ORG_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgDeleted",
                  "safeName": "RevOrgDeleted"
                }
              },
              "wireValue": "rev_org_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-rev-org-deleted",
                    "camelCase": {
                      "unsafeName": "eventRevOrgDeleted",
                      "safeName": "eventRevOrgDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_rev_org_deleted",
                      "safeName": "event_rev_org_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_REV_ORG_DELETED",
                      "safeName": "EVENT_REV_ORG_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventRevOrgDeleted",
                      "safeName": "EventRevOrgDeleted"
                    }
                  },
                  "typeId": "event-rev-org-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_updated",
                "camelCase": {
                  "unsafeName": "revOrgUpdated",
                  "safeName": "revOrgUpdated"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_updated",
                  "safeName": "rev_org_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_UPDATED",
                  "safeName": "REV_ORG_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgUpdated",
                  "safeName": "RevOrgUpdated"
                }
              },
              "wireValue": "rev_org_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-rev-org-updated",
                    "camelCase": {
                      "unsafeName": "eventRevOrgUpdated",
                      "safeName": "eventRevOrgUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_rev_org_updated",
                      "safeName": "event_rev_org_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_REV_ORG_UPDATED",
                      "safeName": "EVENT_REV_ORG_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventRevOrgUpdated",
                      "safeName": "EventRevOrgUpdated"
                    }
                  },
                  "typeId": "event-rev-org-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_created",
                "camelCase": {
                  "unsafeName": "tagCreated",
                  "safeName": "tagCreated"
                },
                "snakeCase": {
                  "unsafeName": "tag_created",
                  "safeName": "tag_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_CREATED",
                  "safeName": "TAG_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "TagCreated",
                  "safeName": "TagCreated"
                }
              },
              "wireValue": "tag_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-tag-created",
                    "camelCase": {
                      "unsafeName": "eventTagCreated",
                      "safeName": "eventTagCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_tag_created",
                      "safeName": "event_tag_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TAG_CREATED",
                      "safeName": "EVENT_TAG_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTagCreated",
                      "safeName": "EventTagCreated"
                    }
                  },
                  "typeId": "event-tag-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_deleted",
                "camelCase": {
                  "unsafeName": "tagDeleted",
                  "safeName": "tagDeleted"
                },
                "snakeCase": {
                  "unsafeName": "tag_deleted",
                  "safeName": "tag_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_DELETED",
                  "safeName": "TAG_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "TagDeleted",
                  "safeName": "TagDeleted"
                }
              },
              "wireValue": "tag_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-tag-deleted",
                    "camelCase": {
                      "unsafeName": "eventTagDeleted",
                      "safeName": "eventTagDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_tag_deleted",
                      "safeName": "event_tag_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TAG_DELETED",
                      "safeName": "EVENT_TAG_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTagDeleted",
                      "safeName": "EventTagDeleted"
                    }
                  },
                  "typeId": "event-tag-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_updated",
                "camelCase": {
                  "unsafeName": "tagUpdated",
                  "safeName": "tagUpdated"
                },
                "snakeCase": {
                  "unsafeName": "tag_updated",
                  "safeName": "tag_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_UPDATED",
                  "safeName": "TAG_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "TagUpdated",
                  "safeName": "TagUpdated"
                }
              },
              "wireValue": "tag_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-tag-updated",
                    "camelCase": {
                      "unsafeName": "eventTagUpdated",
                      "safeName": "eventTagUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_tag_updated",
                      "safeName": "event_tag_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TAG_UPDATED",
                      "safeName": "EVENT_TAG_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTagUpdated",
                      "safeName": "EventTagUpdated"
                    }
                  },
                  "typeId": "event-tag-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_created",
                "camelCase": {
                  "unsafeName": "timelineEntryCreated",
                  "safeName": "timelineEntryCreated"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_created",
                  "safeName": "timeline_entry_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_CREATED",
                  "safeName": "TIMELINE_ENTRY_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryCreated",
                  "safeName": "TimelineEntryCreated"
                }
              },
              "wireValue": "timeline_entry_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-timeline-entry-created",
                    "camelCase": {
                      "unsafeName": "eventTimelineEntryCreated",
                      "safeName": "eventTimelineEntryCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_timeline_entry_created",
                      "safeName": "event_timeline_entry_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TIMELINE_ENTRY_CREATED",
                      "safeName": "EVENT_TIMELINE_ENTRY_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTimelineEntryCreated",
                      "safeName": "EventTimelineEntryCreated"
                    }
                  },
                  "typeId": "event-timeline-entry-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_deleted",
                "camelCase": {
                  "unsafeName": "timelineEntryDeleted",
                  "safeName": "timelineEntryDeleted"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_deleted",
                  "safeName": "timeline_entry_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_DELETED",
                  "safeName": "TIMELINE_ENTRY_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryDeleted",
                  "safeName": "TimelineEntryDeleted"
                }
              },
              "wireValue": "timeline_entry_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-timeline-entry-deleted",
                    "camelCase": {
                      "unsafeName": "eventTimelineEntryDeleted",
                      "safeName": "eventTimelineEntryDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_timeline_entry_deleted",
                      "safeName": "event_timeline_entry_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TIMELINE_ENTRY_DELETED",
                      "safeName": "EVENT_TIMELINE_ENTRY_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTimelineEntryDeleted",
                      "safeName": "EventTimelineEntryDeleted"
                    }
                  },
                  "typeId": "event-timeline-entry-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_updated",
                "camelCase": {
                  "unsafeName": "timelineEntryUpdated",
                  "safeName": "timelineEntryUpdated"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_updated",
                  "safeName": "timeline_entry_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_UPDATED",
                  "safeName": "TIMELINE_ENTRY_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryUpdated",
                  "safeName": "TimelineEntryUpdated"
                }
              },
              "wireValue": "timeline_entry_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-timeline-entry-updated",
                    "camelCase": {
                      "unsafeName": "eventTimelineEntryUpdated",
                      "safeName": "eventTimelineEntryUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_timeline_entry_updated",
                      "safeName": "event_timeline_entry_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_TIMELINE_ENTRY_UPDATED",
                      "safeName": "EVENT_TIMELINE_ENTRY_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventTimelineEntryUpdated",
                      "safeName": "EventTimelineEntryUpdated"
                    }
                  },
                  "typeId": "event-timeline-entry-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timestamp",
                "camelCase": {
                  "unsafeName": "timestamp",
                  "safeName": "timestamp"
                },
                "snakeCase": {
                  "unsafeName": "timestamp",
                  "safeName": "timestamp"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMESTAMP",
                  "safeName": "TIMESTAMP"
                },
                "pascalCase": {
                  "unsafeName": "Timestamp",
                  "safeName": "Timestamp"
                }
              },
              "wireValue": "timestamp"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp of the webhook's invocation for the event. Note this\nshould be used to protect against replay attacks, where the event\nshould only be processed if the timestamp isn't stale by several\nseconds.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventRequestTimestamp_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhook-event-type",
                    "camelCase": {
                      "unsafeName": "webhookEventType",
                      "safeName": "webhookEventType"
                    },
                    "snakeCase": {
                      "unsafeName": "webhook_event_type",
                      "safeName": "webhook_event_type"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOK_EVENT_TYPE",
                      "safeName": "WEBHOOK_EVENT_TYPE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhookEventType",
                      "safeName": "WebhookEventType"
                    }
                  },
                  "typeId": "webhook-event-type",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "verify",
                "camelCase": {
                  "unsafeName": "verify",
                  "safeName": "verify"
                },
                "snakeCase": {
                  "unsafeName": "verify",
                  "safeName": "verify"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VERIFY",
                  "safeName": "VERIFY"
                },
                "pascalCase": {
                  "unsafeName": "Verify",
                  "safeName": "Verify"
                }
              },
              "wireValue": "verify"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhook-event-verify",
                    "camelCase": {
                      "unsafeName": "webhookEventVerify",
                      "safeName": "webhookEventVerify"
                    },
                    "snakeCase": {
                      "unsafeName": "webhook_event_verify",
                      "safeName": "webhook_event_verify"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOK_EVENT_VERIFY",
                      "safeName": "WEBHOOK_EVENT_VERIFY"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhookEventVerify",
                      "safeName": "WebhookEventVerify"
                    }
                  },
                  "typeId": "webhook-event-verify",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_created",
                "camelCase": {
                  "unsafeName": "webhookCreated",
                  "safeName": "webhookCreated"
                },
                "snakeCase": {
                  "unsafeName": "webhook_created",
                  "safeName": "webhook_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_CREATED",
                  "safeName": "WEBHOOK_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookCreated",
                  "safeName": "WebhookCreated"
                }
              },
              "wireValue": "webhook_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-webhook-created",
                    "camelCase": {
                      "unsafeName": "eventWebhookCreated",
                      "safeName": "eventWebhookCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_webhook_created",
                      "safeName": "event_webhook_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WEBHOOK_CREATED",
                      "safeName": "EVENT_WEBHOOK_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWebhookCreated",
                      "safeName": "EventWebhookCreated"
                    }
                  },
                  "typeId": "event-webhook-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_deleted",
                "camelCase": {
                  "unsafeName": "webhookDeleted",
                  "safeName": "webhookDeleted"
                },
                "snakeCase": {
                  "unsafeName": "webhook_deleted",
                  "safeName": "webhook_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_DELETED",
                  "safeName": "WEBHOOK_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookDeleted",
                  "safeName": "WebhookDeleted"
                }
              },
              "wireValue": "webhook_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-webhook-deleted",
                    "camelCase": {
                      "unsafeName": "eventWebhookDeleted",
                      "safeName": "eventWebhookDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_webhook_deleted",
                      "safeName": "event_webhook_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WEBHOOK_DELETED",
                      "safeName": "EVENT_WEBHOOK_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWebhookDeleted",
                      "safeName": "EventWebhookDeleted"
                    }
                  },
                  "typeId": "event-webhook-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_id",
                "camelCase": {
                  "unsafeName": "webhookId",
                  "safeName": "webhookId"
                },
                "snakeCase": {
                  "unsafeName": "webhook_id",
                  "safeName": "webhook_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_ID",
                  "safeName": "WEBHOOK_ID"
                },
                "pascalCase": {
                  "unsafeName": "WebhookId",
                  "safeName": "WebhookId"
                }
              },
              "wireValue": "webhook_id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID of the webhook for the event.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhookEventRequestWebhookId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_updated",
                "camelCase": {
                  "unsafeName": "webhookUpdated",
                  "safeName": "webhookUpdated"
                },
                "snakeCase": {
                  "unsafeName": "webhook_updated",
                  "safeName": "webhook_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_UPDATED",
                  "safeName": "WEBHOOK_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookUpdated",
                  "safeName": "WebhookUpdated"
                }
              },
              "wireValue": "webhook_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-webhook-updated",
                    "camelCase": {
                      "unsafeName": "eventWebhookUpdated",
                      "safeName": "eventWebhookUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_webhook_updated",
                      "safeName": "event_webhook_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WEBHOOK_UPDATED",
                      "safeName": "EVENT_WEBHOOK_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWebhookUpdated",
                      "safeName": "EventWebhookUpdated"
                    }
                  },
                  "typeId": "event-webhook-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_created",
                "camelCase": {
                  "unsafeName": "workCreated",
                  "safeName": "workCreated"
                },
                "snakeCase": {
                  "unsafeName": "work_created",
                  "safeName": "work_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_CREATED",
                  "safeName": "WORK_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "WorkCreated",
                  "safeName": "WorkCreated"
                }
              },
              "wireValue": "work_created"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-work-created",
                    "camelCase": {
                      "unsafeName": "eventWorkCreated",
                      "safeName": "eventWorkCreated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_work_created",
                      "safeName": "event_work_created"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WORK_CREATED",
                      "safeName": "EVENT_WORK_CREATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWorkCreated",
                      "safeName": "EventWorkCreated"
                    }
                  },
                  "typeId": "event-work-created",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_deleted",
                "camelCase": {
                  "unsafeName": "workDeleted",
                  "safeName": "workDeleted"
                },
                "snakeCase": {
                  "unsafeName": "work_deleted",
                  "safeName": "work_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_DELETED",
                  "safeName": "WORK_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "WorkDeleted",
                  "safeName": "WorkDeleted"
                }
              },
              "wireValue": "work_deleted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-work-deleted",
                    "camelCase": {
                      "unsafeName": "eventWorkDeleted",
                      "safeName": "eventWorkDeleted"
                    },
                    "snakeCase": {
                      "unsafeName": "event_work_deleted",
                      "safeName": "event_work_deleted"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WORK_DELETED",
                      "safeName": "EVENT_WORK_DELETED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWorkDeleted",
                      "safeName": "EventWorkDeleted"
                    }
                  },
                  "typeId": "event-work-deleted",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_updated",
                "camelCase": {
                  "unsafeName": "workUpdated",
                  "safeName": "workUpdated"
                },
                "snakeCase": {
                  "unsafeName": "work_updated",
                  "safeName": "work_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_UPDATED",
                  "safeName": "WORK_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "WorkUpdated",
                  "safeName": "WorkUpdated"
                }
              },
              "wireValue": "work_updated"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "event-work-updated",
                    "camelCase": {
                      "unsafeName": "eventWorkUpdated",
                      "safeName": "eventWorkUpdated"
                    },
                    "snakeCase": {
                      "unsafeName": "event_work_updated",
                      "safeName": "event_work_updated"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "EVENT_WORK_UPDATED",
                      "safeName": "EVENT_WORK_UPDATED"
                    },
                    "pascalCase": {
                      "unsafeName": "EventWorkUpdated",
                      "safeName": "EventWorkUpdated"
                    }
                  },
                  "typeId": "event-work-updated",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-request_example_autogenerated": {
            "id": "foo",
            "webhook_id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhook-event-response": {
      "name": {
        "typeId": "webhook-event-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook-event-response",
          "camelCase": {
            "unsafeName": "webhookEventResponse",
            "safeName": "webhookEventResponse"
          },
          "snakeCase": {
            "unsafeName": "webhook_event_response",
            "safeName": "webhook_event_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK_EVENT_RESPONSE",
            "safeName": "WEBHOOK_EVENT_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhookEventResponse",
            "safeName": "WebhookEventResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "challenge",
                "camelCase": {
                  "unsafeName": "challenge",
                  "safeName": "challenge"
                },
                "snakeCase": {
                  "unsafeName": "challenge",
                  "safeName": "challenge"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHALLENGE",
                  "safeName": "CHALLENGE"
                },
                "pascalCase": {
                  "unsafeName": "Challenge",
                  "safeName": "Challenge"
                }
              },
              "wireValue": "challenge"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The challenge from the \"verify\" request, otherwise this should not\nbe set for other request types.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventResponseChallenge_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-response_example_autogenerated": {}
        }
      }
    },
    "webhook-event-type": {
      "name": {
        "typeId": "webhook-event-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook-event-type",
          "camelCase": {
            "unsafeName": "webhookEventType",
            "safeName": "webhookEventType"
          },
          "snakeCase": {
            "unsafeName": "webhook_event_type",
            "safeName": "webhook_event_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK_EVENT_TYPE",
            "safeName": "WEBHOOK_EVENT_TYPE"
          },
          "pascalCase": {
            "unsafeName": "WebhookEventType",
            "safeName": "WebhookEventType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "part_created",
                "camelCase": {
                  "unsafeName": "partCreated",
                  "safeName": "partCreated"
                },
                "snakeCase": {
                  "unsafeName": "part_created",
                  "safeName": "part_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_CREATED",
                  "safeName": "PART_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "PartCreated",
                  "safeName": "PartCreated"
                }
              },
              "wireValue": "part_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "part_deleted",
                "camelCase": {
                  "unsafeName": "partDeleted",
                  "safeName": "partDeleted"
                },
                "snakeCase": {
                  "unsafeName": "part_deleted",
                  "safeName": "part_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_DELETED",
                  "safeName": "PART_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "PartDeleted",
                  "safeName": "PartDeleted"
                }
              },
              "wireValue": "part_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "part_updated",
                "camelCase": {
                  "unsafeName": "partUpdated",
                  "safeName": "partUpdated"
                },
                "snakeCase": {
                  "unsafeName": "part_updated",
                  "safeName": "part_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PART_UPDATED",
                  "safeName": "PART_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "PartUpdated",
                  "safeName": "PartUpdated"
                }
              },
              "wireValue": "part_updated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_created",
                "camelCase": {
                  "unsafeName": "revOrgCreated",
                  "safeName": "revOrgCreated"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_created",
                  "safeName": "rev_org_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_CREATED",
                  "safeName": "REV_ORG_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgCreated",
                  "safeName": "RevOrgCreated"
                }
              },
              "wireValue": "rev_org_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_deleted",
                "camelCase": {
                  "unsafeName": "revOrgDeleted",
                  "safeName": "revOrgDeleted"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_deleted",
                  "safeName": "rev_org_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_DELETED",
                  "safeName": "REV_ORG_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgDeleted",
                  "safeName": "RevOrgDeleted"
                }
              },
              "wireValue": "rev_org_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org_updated",
                "camelCase": {
                  "unsafeName": "revOrgUpdated",
                  "safeName": "revOrgUpdated"
                },
                "snakeCase": {
                  "unsafeName": "rev_org_updated",
                  "safeName": "rev_org_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG_UPDATED",
                  "safeName": "REV_ORG_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgUpdated",
                  "safeName": "RevOrgUpdated"
                }
              },
              "wireValue": "rev_org_updated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_created",
                "camelCase": {
                  "unsafeName": "tagCreated",
                  "safeName": "tagCreated"
                },
                "snakeCase": {
                  "unsafeName": "tag_created",
                  "safeName": "tag_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_CREATED",
                  "safeName": "TAG_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "TagCreated",
                  "safeName": "TagCreated"
                }
              },
              "wireValue": "tag_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_deleted",
                "camelCase": {
                  "unsafeName": "tagDeleted",
                  "safeName": "tagDeleted"
                },
                "snakeCase": {
                  "unsafeName": "tag_deleted",
                  "safeName": "tag_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_DELETED",
                  "safeName": "TAG_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "TagDeleted",
                  "safeName": "TagDeleted"
                }
              },
              "wireValue": "tag_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tag_updated",
                "camelCase": {
                  "unsafeName": "tagUpdated",
                  "safeName": "tagUpdated"
                },
                "snakeCase": {
                  "unsafeName": "tag_updated",
                  "safeName": "tag_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAG_UPDATED",
                  "safeName": "TAG_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "TagUpdated",
                  "safeName": "TagUpdated"
                }
              },
              "wireValue": "tag_updated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_created",
                "camelCase": {
                  "unsafeName": "timelineEntryCreated",
                  "safeName": "timelineEntryCreated"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_created",
                  "safeName": "timeline_entry_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_CREATED",
                  "safeName": "TIMELINE_ENTRY_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryCreated",
                  "safeName": "TimelineEntryCreated"
                }
              },
              "wireValue": "timeline_entry_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_deleted",
                "camelCase": {
                  "unsafeName": "timelineEntryDeleted",
                  "safeName": "timelineEntryDeleted"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_deleted",
                  "safeName": "timeline_entry_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_DELETED",
                  "safeName": "TIMELINE_ENTRY_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryDeleted",
                  "safeName": "TimelineEntryDeleted"
                }
              },
              "wireValue": "timeline_entry_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "timeline_entry_updated",
                "camelCase": {
                  "unsafeName": "timelineEntryUpdated",
                  "safeName": "timelineEntryUpdated"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entry_updated",
                  "safeName": "timeline_entry_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRY_UPDATED",
                  "safeName": "TIMELINE_ENTRY_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntryUpdated",
                  "safeName": "TimelineEntryUpdated"
                }
              },
              "wireValue": "timeline_entry_updated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "verify",
                "camelCase": {
                  "unsafeName": "verify",
                  "safeName": "verify"
                },
                "snakeCase": {
                  "unsafeName": "verify",
                  "safeName": "verify"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VERIFY",
                  "safeName": "VERIFY"
                },
                "pascalCase": {
                  "unsafeName": "Verify",
                  "safeName": "Verify"
                }
              },
              "wireValue": "verify"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_created",
                "camelCase": {
                  "unsafeName": "webhookCreated",
                  "safeName": "webhookCreated"
                },
                "snakeCase": {
                  "unsafeName": "webhook_created",
                  "safeName": "webhook_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_CREATED",
                  "safeName": "WEBHOOK_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookCreated",
                  "safeName": "WebhookCreated"
                }
              },
              "wireValue": "webhook_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_deleted",
                "camelCase": {
                  "unsafeName": "webhookDeleted",
                  "safeName": "webhookDeleted"
                },
                "snakeCase": {
                  "unsafeName": "webhook_deleted",
                  "safeName": "webhook_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_DELETED",
                  "safeName": "WEBHOOK_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookDeleted",
                  "safeName": "WebhookDeleted"
                }
              },
              "wireValue": "webhook_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "webhook_updated",
                "camelCase": {
                  "unsafeName": "webhookUpdated",
                  "safeName": "webhookUpdated"
                },
                "snakeCase": {
                  "unsafeName": "webhook_updated",
                  "safeName": "webhook_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK_UPDATED",
                  "safeName": "WEBHOOK_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "WebhookUpdated",
                  "safeName": "WebhookUpdated"
                }
              },
              "wireValue": "webhook_updated"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_created",
                "camelCase": {
                  "unsafeName": "workCreated",
                  "safeName": "workCreated"
                },
                "snakeCase": {
                  "unsafeName": "work_created",
                  "safeName": "work_created"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_CREATED",
                  "safeName": "WORK_CREATED"
                },
                "pascalCase": {
                  "unsafeName": "WorkCreated",
                  "safeName": "WorkCreated"
                }
              },
              "wireValue": "work_created"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_deleted",
                "camelCase": {
                  "unsafeName": "workDeleted",
                  "safeName": "workDeleted"
                },
                "snakeCase": {
                  "unsafeName": "work_deleted",
                  "safeName": "work_deleted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_DELETED",
                  "safeName": "WORK_DELETED"
                },
                "pascalCase": {
                  "unsafeName": "WorkDeleted",
                  "safeName": "WorkDeleted"
                }
              },
              "wireValue": "work_deleted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "work_updated",
                "camelCase": {
                  "unsafeName": "workUpdated",
                  "safeName": "workUpdated"
                },
                "snakeCase": {
                  "unsafeName": "work_updated",
                  "safeName": "work_updated"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_UPDATED",
                  "safeName": "WORK_UPDATED"
                },
                "pascalCase": {
                  "unsafeName": "WorkUpdated",
                  "safeName": "WorkUpdated"
                }
              },
              "wireValue": "work_updated"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The event types that the webhook will receive.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-type_example_autogenerated": "part_created"
        }
      }
    },
    "webhook-event-verify": {
      "name": {
        "typeId": "webhook-event-verify",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook-event-verify",
          "camelCase": {
            "unsafeName": "webhookEventVerify",
            "safeName": "webhookEventVerify"
          },
          "snakeCase": {
            "unsafeName": "webhook_event_verify",
            "safeName": "webhook_event_verify"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK_EVENT_VERIFY",
            "safeName": "WEBHOOK_EVENT_VERIFY"
          },
          "pascalCase": {
            "unsafeName": "WebhookEventVerify",
            "safeName": "WebhookEventVerify"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "challenge",
                "camelCase": {
                  "unsafeName": "challenge",
                  "safeName": "challenge"
                },
                "snakeCase": {
                  "unsafeName": "challenge",
                  "safeName": "challenge"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHALLENGE",
                  "safeName": "CHALLENGE"
                },
                "pascalCase": {
                  "unsafeName": "Challenge",
                  "safeName": "Challenge"
                }
              },
              "wireValue": "challenge"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "byte"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The challenge that must be echoed in the response.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhookEventVerifyChallenge_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-event-verify_example_autogenerated": {
            "challenge": "foo"
          }
        }
      }
    },
    "webhook-status": {
      "name": {
        "typeId": "webhook-status",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhook-status",
          "camelCase": {
            "unsafeName": "webhookStatus",
            "safeName": "webhookStatus"
          },
          "snakeCase": {
            "unsafeName": "webhook_status",
            "safeName": "webhook_status"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOK_STATUS",
            "safeName": "WEBHOOK_STATUS"
          },
          "pascalCase": {
            "unsafeName": "WebhookStatus",
            "safeName": "WebhookStatus"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "active",
                "camelCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "snakeCase": {
                  "unsafeName": "active",
                  "safeName": "active"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACTIVE",
                  "safeName": "ACTIVE"
                },
                "pascalCase": {
                  "unsafeName": "Active",
                  "safeName": "Active"
                }
              },
              "wireValue": "active"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "inactive",
                "camelCase": {
                  "unsafeName": "inactive",
                  "safeName": "inactive"
                },
                "snakeCase": {
                  "unsafeName": "inactive",
                  "safeName": "inactive"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INACTIVE",
                  "safeName": "INACTIVE"
                },
                "pascalCase": {
                  "unsafeName": "Inactive",
                  "safeName": "Inactive"
                }
              },
              "wireValue": "inactive"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "unverified",
                "camelCase": {
                  "unsafeName": "unverified",
                  "safeName": "unverified"
                },
                "snakeCase": {
                  "unsafeName": "unverified",
                  "safeName": "unverified"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UNVERIFIED",
                  "safeName": "UNVERIFIED"
                },
                "pascalCase": {
                  "unsafeName": "Unverified",
                  "safeName": "Unverified"
                }
              },
              "wireValue": "unverified"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The status of the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhook-status_example_autogenerated": "active"
        }
      }
    },
    "webhooks-create-request": {
      "name": {
        "typeId": "webhooks-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-create-request",
          "camelCase": {
            "unsafeName": "webhooksCreateRequest",
            "safeName": "webhooksCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request",
            "safeName": "webhooks_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST",
            "safeName": "WEBHOOKS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequest",
            "safeName": "WebhooksCreateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "event_types",
                "camelCase": {
                  "unsafeName": "eventTypes",
                  "safeName": "eventTypes"
                },
                "snakeCase": {
                  "unsafeName": "event_types",
                  "safeName": "event_types"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EVENT_TYPES",
                  "safeName": "EVENT_TYPES"
                },
                "pascalCase": {
                  "unsafeName": "EventTypes",
                  "safeName": "EventTypes"
                }
              },
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "webhook-event-type",
                        "camelCase": {
                          "unsafeName": "webhookEventType",
                          "safeName": "webhookEventType"
                        },
                        "snakeCase": {
                          "unsafeName": "webhook_event_type",
                          "safeName": "webhook_event_type"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "WEBHOOK_EVENT_TYPE",
                          "safeName": "WEBHOOK_EVENT_TYPE"
                        },
                        "pascalCase": {
                          "unsafeName": "WebhookEventType",
                          "safeName": "WebhookEventType"
                        }
                      },
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types that the webhook endpoint will receive.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestEventTypes_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "secret",
                "camelCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "snakeCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SECRET",
                  "safeName": "SECRET"
                },
                "pascalCase": {
                  "unsafeName": "Secret",
                  "safeName": "Secret"
                }
              },
              "wireValue": "secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The secret to use when verifying webhook events. If provided, the\nsecret must be between 8 and 32 bytes (inclusive). If not set, a\nsecret will be automatically generated and provided in the\nresponse.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "url",
                "camelCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "snakeCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URL",
                  "safeName": "URL"
                },
                "pascalCase": {
                  "unsafeName": "Url",
                  "safeName": "Url"
                }
              },
              "wireValue": "url"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The URL of the webhook endpoint.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksCreateRequestUrl_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to create a new webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-create-request_example_autogenerated": {
            "url": "foo"
          }
        }
      }
    },
    "webhooks-create-response": {
      "name": {
        "typeId": "webhooks-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-create-response",
          "camelCase": {
            "unsafeName": "webhooksCreateResponse",
            "safeName": "webhooksCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_response",
            "safeName": "webhooks_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_RESPONSE",
            "safeName": "WEBHOOKS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateResponse",
            "safeName": "WebhooksCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to creating a new webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-create-response_example_autogenerated": {
            "webhook": {
              "id": "foo",
              "secret": "foo",
              "status": "active",
              "url": "foo"
            }
          }
        }
      }
    },
    "webhooks-delete-request": {
      "name": {
        "typeId": "webhooks-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-delete-request",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequest",
            "safeName": "webhooksDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request",
            "safeName": "webhooks_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST",
            "safeName": "WEBHOOKS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequest",
            "safeName": "WebhooksDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID for the webhook.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhooksDeleteRequestId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to delete a webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-delete-request_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhooks-delete-response": {
      "name": {
        "typeId": "webhooks-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-delete-response",
          "camelCase": {
            "unsafeName": "webhooksDeleteResponse",
            "safeName": "webhooksDeleteResponse"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_response",
            "safeName": "webhooks_delete_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_RESPONSE",
            "safeName": "WEBHOOKS_DELETE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteResponse",
            "safeName": "WebhooksDeleteResponse"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to deleting the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-delete-response_example_autogenerated": {}
        }
      }
    },
    "webhooks-get-response": {
      "name": {
        "typeId": "webhooks-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-get-response",
          "camelCase": {
            "unsafeName": "webhooksGetResponse",
            "safeName": "webhooksGetResponse"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_response",
            "safeName": "webhooks_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_RESPONSE",
            "safeName": "WEBHOOKS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetResponse",
            "safeName": "WebhooksGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to getting the information for the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-get-response_example_autogenerated": {
            "webhook": {
              "id": "foo",
              "secret": "foo",
              "status": "active",
              "url": "foo"
            }
          }
        }
      }
    },
    "webhooks-list-response": {
      "name": {
        "typeId": "webhooks-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-list-response",
          "camelCase": {
            "unsafeName": "webhooksListResponse",
            "safeName": "webhooksListResponse"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_response",
            "safeName": "webhooks_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_RESPONSE",
            "safeName": "WEBHOOKS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListResponse",
            "safeName": "WebhooksListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhooks",
                "camelCase": {
                  "unsafeName": "webhooks",
                  "safeName": "webhooks"
                },
                "snakeCase": {
                  "unsafeName": "webhooks",
                  "safeName": "webhooks"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOKS",
                  "safeName": "WEBHOOKS"
                },
                "pascalCase": {
                  "unsafeName": "Webhooks",
                  "safeName": "Webhooks"
                }
              },
              "wireValue": "webhooks"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhook",
                    "camelCase": {
                      "unsafeName": "webhook",
                      "safeName": "webhook"
                    },
                    "snakeCase": {
                      "unsafeName": "webhook",
                      "safeName": "webhook"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOK",
                      "safeName": "WEBHOOK"
                    },
                    "pascalCase": {
                      "unsafeName": "Webhook",
                      "safeName": "Webhook"
                    }
                  },
                  "typeId": "webhook",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of webhooks.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksListResponseWebhooks_example_autogenerated": [
                  {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to listing the webhooks.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-list-response_example_autogenerated": {
            "webhooks": [
              {
                "id": "foo",
                "secret": "foo",
                "status": "active",
                "url": "foo"
              }
            ]
          }
        }
      }
    },
    "webhooks-update-action": {
      "name": {
        "typeId": "webhooks-update-action",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-update-action",
          "camelCase": {
            "unsafeName": "webhooksUpdateAction",
            "safeName": "webhooksUpdateAction"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_action",
            "safeName": "webhooks_update_action"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_ACTION",
            "safeName": "WEBHOOKS_UPDATE_ACTION"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateAction",
            "safeName": "WebhooksUpdateAction"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "activate",
                "camelCase": {
                  "unsafeName": "activate",
                  "safeName": "activate"
                },
                "snakeCase": {
                  "unsafeName": "activate",
                  "safeName": "activate"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACTIVATE",
                  "safeName": "ACTIVATE"
                },
                "pascalCase": {
                  "unsafeName": "Activate",
                  "safeName": "Activate"
                }
              },
              "wireValue": "activate"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "deactivate",
                "camelCase": {
                  "unsafeName": "deactivate",
                  "safeName": "deactivate"
                },
                "snakeCase": {
                  "unsafeName": "deactivate",
                  "safeName": "deactivate"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEACTIVATE",
                  "safeName": "DEACTIVATE"
                },
                "pascalCase": {
                  "unsafeName": "Deactivate",
                  "safeName": "Deactivate"
                }
              },
              "wireValue": "deactivate"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The action to update the webhook's status.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-action_example_autogenerated": "activate"
        }
      }
    },
    "webhooks-update-request": {
      "name": {
        "typeId": "webhooks-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-update-request",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequest",
            "safeName": "webhooksUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request",
            "safeName": "webhooks_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST",
            "safeName": "WEBHOOKS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequest",
            "safeName": "WebhooksUpdateRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "action",
                "camelCase": {
                  "unsafeName": "action",
                  "safeName": "action"
                },
                "snakeCase": {
                  "unsafeName": "action",
                  "safeName": "action"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACTION",
                  "safeName": "ACTION"
                },
                "pascalCase": {
                  "unsafeName": "Action",
                  "safeName": "Action"
                }
              },
              "wireValue": "action"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-update-action",
                    "camelCase": {
                      "unsafeName": "webhooksUpdateAction",
                      "safeName": "webhooksUpdateAction"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_update_action",
                      "safeName": "webhooks_update_action"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_UPDATE_ACTION",
                      "safeName": "WEBHOOKS_UPDATE_ACTION"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksUpdateAction",
                      "safeName": "WebhooksUpdateAction"
                    }
                  },
                  "typeId": "webhooks-update-action",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "event_types",
                "camelCase": {
                  "unsafeName": "eventTypes",
                  "safeName": "eventTypes"
                },
                "snakeCase": {
                  "unsafeName": "event_types",
                  "safeName": "event_types"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EVENT_TYPES",
                  "safeName": "EVENT_TYPES"
                },
                "pascalCase": {
                  "unsafeName": "EventTypes",
                  "safeName": "EventTypes"
                }
              },
              "wireValue": "event_types"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-update-request-event-types",
                    "camelCase": {
                      "unsafeName": "webhooksUpdateRequestEventTypes",
                      "safeName": "webhooksUpdateRequestEventTypes"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_update_request_event_types",
                      "safeName": "webhooks_update_request_event_types"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_UPDATE_REQUEST_EVENT_TYPES",
                      "safeName": "WEBHOOKS_UPDATE_REQUEST_EVENT_TYPES"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksUpdateRequestEventTypes",
                      "safeName": "WebhooksUpdateRequestEventTypes"
                    }
                  },
                  "typeId": "webhooks-update-request-event-types",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "ID for the webhook.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WebhooksUpdateRequestId_example_0": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "secret",
                "camelCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "snakeCase": {
                  "unsafeName": "secret",
                  "safeName": "secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SECRET",
                  "safeName": "SECRET"
                },
                "pascalCase": {
                  "unsafeName": "Secret",
                  "safeName": "Secret"
                }
              },
              "wireValue": "secret"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "byte"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "If provided, updates the secret that's used when verifying webhook\nevents, which must be between 8 and 32 bytes (inclusive). Otherwise\nif empty, then a new secret is generated. If the webhook is active,\nthen its status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestSecret_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "url",
                "camelCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "snakeCase": {
                  "unsafeName": "url",
                  "safeName": "url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "URL",
                  "safeName": "URL"
                },
                "pascalCase": {
                  "unsafeName": "Url",
                  "safeName": "Url"
                }
              },
              "wireValue": "url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The webhook's updated URL. If the webhook is active, then the\nwebhook's status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestUrl_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The request to update a webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-request_example_autogenerated": {
            "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        }
      }
    },
    "webhooks-update-request-event-types": {
      "name": {
        "typeId": "webhooks-update-request-event-types",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-update-request-event-types",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestEventTypes",
            "safeName": "webhooksUpdateRequestEventTypes"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_event_types",
            "safeName": "webhooks_update_request_event_types"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_EVENT_TYPES",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_EVENT_TYPES"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestEventTypes",
            "safeName": "WebhooksUpdateRequestEventTypes"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "add",
                "camelCase": {
                  "unsafeName": "add",
                  "safeName": "add"
                },
                "snakeCase": {
                  "unsafeName": "add",
                  "safeName": "add"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ADD",
                  "safeName": "ADD"
                },
                "pascalCase": {
                  "unsafeName": "Add",
                  "safeName": "Add"
                }
              },
              "wireValue": "add"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "webhook-event-type",
                        "camelCase": {
                          "unsafeName": "webhookEventType",
                          "safeName": "webhookEventType"
                        },
                        "snakeCase": {
                          "unsafeName": "webhook_event_type",
                          "safeName": "webhook_event_type"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "WEBHOOK_EVENT_TYPE",
                          "safeName": "WEBHOOK_EVENT_TYPE"
                        },
                        "pascalCase": {
                          "unsafeName": "WebhookEventType",
                          "safeName": "WebhookEventType"
                        }
                      },
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types to add. If a provided event type is already set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesAdd_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "remove",
                "camelCase": {
                  "unsafeName": "remove",
                  "safeName": "remove"
                },
                "snakeCase": {
                  "unsafeName": "remove",
                  "safeName": "remove"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REMOVE",
                  "safeName": "REMOVE"
                },
                "pascalCase": {
                  "unsafeName": "Remove",
                  "safeName": "Remove"
                }
              },
              "wireValue": "remove"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "webhook-event-type",
                        "camelCase": {
                          "unsafeName": "webhookEventType",
                          "safeName": "webhookEventType"
                        },
                        "snakeCase": {
                          "unsafeName": "webhook_event_type",
                          "safeName": "webhook_event_type"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "WEBHOOK_EVENT_TYPE",
                          "safeName": "WEBHOOK_EVENT_TYPE"
                        },
                        "pascalCase": {
                          "unsafeName": "WebhookEventType",
                          "safeName": "WebhookEventType"
                        }
                      },
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The event types to remove. If a provided event type isn't set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesRemove_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "webhook-event-type",
                        "camelCase": {
                          "unsafeName": "webhookEventType",
                          "safeName": "webhookEventType"
                        },
                        "snakeCase": {
                          "unsafeName": "webhook_event_type",
                          "safeName": "webhook_event_type"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "WEBHOOK_EVENT_TYPE",
                          "safeName": "WEBHOOK_EVENT_TYPE"
                        },
                        "pascalCase": {
                          "unsafeName": "WebhookEventType",
                          "safeName": "WebhookEventType"
                        }
                      },
                      "typeId": "webhook-event-type",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The updated event types, which will replace the webhook's current\nevent types. Note this is mutually exclusive with 'add' and\n'remove'.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WebhooksUpdateRequestEventTypesSet_example_autogenerated": [
                  "part_created"
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-request-event-types_example_autogenerated": {}
        }
      }
    },
    "webhooks-update-response": {
      "name": {
        "typeId": "webhooks-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "webhooks-update-response",
          "camelCase": {
            "unsafeName": "webhooksUpdateResponse",
            "safeName": "webhooksUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_response",
            "safeName": "webhooks_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_RESPONSE",
            "safeName": "WEBHOOKS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateResponse",
            "safeName": "WebhooksUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "wireValue": "webhook"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhook",
                "camelCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "snakeCase": {
                  "unsafeName": "webhook",
                  "safeName": "webhook"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOK",
                  "safeName": "WEBHOOK"
                },
                "pascalCase": {
                  "unsafeName": "Webhook",
                  "safeName": "Webhook"
                }
              },
              "typeId": "webhook",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The response to updating the webhook.",
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "webhooks-update-response_example_autogenerated": {
            "webhook": {
              "id": "foo",
              "secret": "foo",
              "status": "active",
              "url": "foo"
            }
          }
        }
      }
    },
    "work": {
      "name": {
        "typeId": "work",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "work",
          "camelCase": {
            "unsafeName": "work",
            "safeName": "work"
          },
          "snakeCase": {
            "unsafeName": "work",
            "safeName": "work"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORK",
            "safeName": "WORK"
          },
          "pascalCase": {
            "unsafeName": "Work",
            "safeName": "Work"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work-type",
                "camelCase": {
                  "unsafeName": "workType",
                  "safeName": "workType"
                },
                "snakeCase": {
                  "unsafeName": "work_type",
                  "safeName": "work_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_TYPE",
                  "safeName": "WORK_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "WorkType",
                  "safeName": "WorkType"
                }
              },
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "issue",
                "camelCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "snakeCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUE",
                  "safeName": "ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "Issue",
                  "safeName": "Issue"
                }
              },
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "issue",
              "name": {
                "originalName": "issue",
                "camelCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "snakeCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUE",
                  "safeName": "ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "Issue",
                  "safeName": "Issue"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "ticket",
                "camelCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "snakeCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TICKET",
                  "safeName": "TICKET"
                },
                "pascalCase": {
                  "unsafeName": "Ticket",
                  "safeName": "Ticket"
                }
              },
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "ticket",
              "name": {
                "originalName": "ticket",
                "camelCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "snakeCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TICKET",
                  "safeName": "TICKET"
                },
                "pascalCase": {
                  "unsafeName": "Ticket",
                  "safeName": "Ticket"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work_example_autogenerated": {
            "id": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ],
            "title": "foo"
          }
        }
      }
    },
    "work-base": {
      "name": {
        "typeId": "work-base",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "work-base",
          "camelCase": {
            "unsafeName": "workBase",
            "safeName": "workBase"
          },
          "snakeCase": {
            "unsafeName": "work_base",
            "safeName": "work_base"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORK_BASE",
            "safeName": "WORK_BASE"
          },
          "pascalCase": {
            "unsafeName": "WorkBase",
            "safeName": "WorkBase"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "applies_to_part",
                "camelCase": {
                  "unsafeName": "appliesToPart",
                  "safeName": "appliesToPart"
                },
                "snakeCase": {
                  "unsafeName": "applies_to_part",
                  "safeName": "applies_to_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "APPLIES_TO_PART",
                  "safeName": "APPLIES_TO_PART"
                },
                "pascalCase": {
                  "unsafeName": "AppliesToPart",
                  "safeName": "AppliesToPart"
                }
              },
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "part-summary",
                    "camelCase": {
                      "unsafeName": "partSummary",
                      "safeName": "partSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "part_summary",
                      "safeName": "part_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PART_SUMMARY",
                      "safeName": "PART_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "PartSummary",
                      "safeName": "PartSummary"
                    }
                  },
                  "typeId": "part-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "artifact-summary",
                        "camelCase": {
                          "unsafeName": "artifactSummary",
                          "safeName": "artifactSummary"
                        },
                        "snakeCase": {
                          "unsafeName": "artifact_summary",
                          "safeName": "artifact_summary"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "ARTIFACT_SUMMARY",
                          "safeName": "ARTIFACT_SUMMARY"
                        },
                        "pascalCase": {
                          "unsafeName": "ArtifactSummary",
                          "safeName": "ArtifactSummary"
                        }
                      },
                      "typeId": "artifact-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The artifacts attached to the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseArtifacts_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Body of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "user-summary",
                    "camelCase": {
                      "unsafeName": "userSummary",
                      "safeName": "userSummary"
                    },
                    "snakeCase": {
                      "unsafeName": "user_summary",
                      "safeName": "user_summary"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "USER_SUMMARY",
                      "safeName": "USER_SUMMARY"
                    },
                    "pascalCase": {
                      "unsafeName": "UserSummary",
                      "safeName": "UserSummary"
                    }
                  },
                  "typeId": "user-summary",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the work.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseOwnedBy_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "reported_by",
                "camelCase": {
                  "unsafeName": "reportedBy",
                  "safeName": "reportedBy"
                },
                "snakeCase": {
                  "unsafeName": "reported_by",
                  "safeName": "reported_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REPORTED_BY",
                  "safeName": "REPORTED_BY"
                },
                "pascalCase": {
                  "unsafeName": "ReportedBy",
                  "safeName": "ReportedBy"
                }
              },
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "user-summary",
                        "camelCase": {
                          "unsafeName": "userSummary",
                          "safeName": "userSummary"
                        },
                        "snakeCase": {
                          "unsafeName": "user_summary",
                          "safeName": "user_summary"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "USER_SUMMARY",
                          "safeName": "USER_SUMMARY"
                        },
                        "pascalCase": {
                          "unsafeName": "UserSummary",
                          "safeName": "UserSummary"
                        }
                      },
                      "typeId": "user-summary",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Users that reported the work.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseReportedBy_example_autogenerated": [
                  {
                    "id": "foo"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "stage",
                "camelCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "snakeCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STAGE",
                  "safeName": "STAGE"
                },
                "pascalCase": {
                  "unsafeName": "Stage",
                  "safeName": "Stage"
                }
              },
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "stage",
                    "camelCase": {
                      "unsafeName": "stage",
                      "safeName": "stage"
                    },
                    "snakeCase": {
                      "unsafeName": "stage",
                      "safeName": "stage"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "STAGE",
                      "safeName": "STAGE"
                    },
                    "pascalCase": {
                      "unsafeName": "Stage",
                      "safeName": "Stage"
                    }
                  },
                  "typeId": "stage",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tags",
                "camelCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "snakeCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS",
                  "safeName": "TAGS"
                },
                "pascalCase": {
                  "unsafeName": "Tags",
                  "safeName": "Tags"
                }
              },
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "tag-with-value",
                        "camelCase": {
                          "unsafeName": "tagWithValue",
                          "safeName": "tagWithValue"
                        },
                        "snakeCase": {
                          "unsafeName": "tag_with_value",
                          "safeName": "tag_with_value"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "TAG_WITH_VALUE",
                          "safeName": "TAG_WITH_VALUE"
                        },
                        "pascalCase": {
                          "unsafeName": "TagWithValue",
                          "safeName": "TagWithValue"
                        }
                      },
                      "typeId": "tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTags_example_autogenerated": [
                  {
                    "tag": {
                      "id": "foo",
                      "name": "foo"
                    }
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp when the work is expected to be complete.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTargetCloseDate_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "title",
                "camelCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "snakeCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TITLE",
                  "safeName": "TITLE"
                },
                "pascalCase": {
                  "unsafeName": "Title",
                  "safeName": "Title"
                }
              },
              "wireValue": "title"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Title of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorkBaseTitle_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [
          {
            "typeId": "atom-base",
            "fernFilepath": {
              "allParts": [],
              "packagePath": []
            },
            "name": {
              "originalName": "atom-base",
              "camelCase": {
                "unsafeName": "atomBase",
                "safeName": "atomBase"
              },
              "snakeCase": {
                "unsafeName": "atom_base",
                "safeName": "atom_base"
              },
              "screamingSnakeCase": {
                "unsafeName": "ATOM_BASE",
                "safeName": "ATOM_BASE"
              },
              "pascalCase": {
                "unsafeName": "AtomBase",
                "safeName": "AtomBase"
              }
            }
          }
        ],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work-base_example_autogenerated": {
            "id": "foo",
            "owned_by": [
              {
                "id": "foo"
              }
            ],
            "title": "foo"
          }
        }
      }
    },
    "work-type": {
      "name": {
        "typeId": "work-type",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "work-type",
          "camelCase": {
            "unsafeName": "workType",
            "safeName": "workType"
          },
          "snakeCase": {
            "unsafeName": "work_type",
            "safeName": "work_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORK_TYPE",
            "safeName": "WORK_TYPE"
          },
          "pascalCase": {
            "unsafeName": "WorkType",
            "safeName": "WorkType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "issue",
                "camelCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "snakeCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUE",
                  "safeName": "ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "Issue",
                  "safeName": "Issue"
                }
              },
              "wireValue": "issue"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ticket",
                "camelCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "snakeCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TICKET",
                  "safeName": "TICKET"
                },
                "pascalCase": {
                  "unsafeName": "Ticket",
                  "safeName": "Ticket"
                }
              },
              "wireValue": "ticket"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "work-type_example_autogenerated": "issue"
        }
      }
    },
    "works-create-request": {
      "name": {
        "typeId": "works-create-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-create-request",
          "camelCase": {
            "unsafeName": "worksCreateRequest",
            "safeName": "worksCreateRequest"
          },
          "snakeCase": {
            "unsafeName": "works_create_request",
            "safeName": "works_create_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST",
            "safeName": "WORKS_CREATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequest",
            "safeName": "WorksCreateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "applies_to_part",
                "camelCase": {
                  "unsafeName": "appliesToPart",
                  "safeName": "appliesToPart"
                },
                "snakeCase": {
                  "unsafeName": "applies_to_part",
                  "safeName": "applies_to_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "APPLIES_TO_PART",
                  "safeName": "APPLIES_TO_PART"
                },
                "pascalCase": {
                  "unsafeName": "AppliesToPart",
                  "safeName": "AppliesToPart"
                }
              },
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The [part](https://devrev.ai/docs/product/parts) that the work\napplies to. Specifying a part is required when creating tickets and\nissues.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestAppliesToPart_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The IDs of the artifacts to associate with the work item.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestArtifacts_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Body of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "list": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The users that own the work.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestOwnedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "reported_by",
                "camelCase": {
                  "unsafeName": "reportedBy",
                  "safeName": "reportedBy"
                },
                "snakeCase": {
                  "unsafeName": "reported_by",
                  "safeName": "reported_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REPORTED_BY",
                  "safeName": "REPORTED_BY"
                },
                "pascalCase": {
                  "unsafeName": "ReportedBy",
                  "safeName": "ReportedBy"
                }
              },
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The users that reported the work.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestReportedBy_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "stage",
                "camelCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "snakeCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STAGE",
                  "safeName": "STAGE"
                },
                "pascalCase": {
                  "unsafeName": "Stage",
                  "safeName": "Stage"
                }
              },
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "stage-init",
                    "camelCase": {
                      "unsafeName": "stageInit",
                      "safeName": "stageInit"
                    },
                    "snakeCase": {
                      "unsafeName": "stage_init",
                      "safeName": "stage_init"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "STAGE_INIT",
                      "safeName": "STAGE_INIT"
                    },
                    "pascalCase": {
                      "unsafeName": "StageInit",
                      "safeName": "StageInit"
                    }
                  },
                  "typeId": "stage-init",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tags",
                "camelCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "snakeCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS",
                  "safeName": "TAGS"
                },
                "pascalCase": {
                  "unsafeName": "Tags",
                  "safeName": "Tags"
                }
              },
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "set-tag-with-value",
                        "camelCase": {
                          "unsafeName": "setTagWithValue",
                          "safeName": "setTagWithValue"
                        },
                        "snakeCase": {
                          "unsafeName": "set_tag_with_value",
                          "safeName": "set_tag_with_value"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "SET_TAG_WITH_VALUE",
                          "safeName": "SET_TAG_WITH_VALUE"
                        },
                        "pascalCase": {
                          "unsafeName": "SetTagWithValue",
                          "safeName": "SetTagWithValue"
                        }
                      },
                      "typeId": "set-tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Tags associated with the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTags_example_autogenerated": [
                  {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                ]
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Timestamp for when the work is expected to be complete.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTargetCloseDate_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "title",
                "camelCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "snakeCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TITLE",
                  "safeName": "TITLE"
                },
                "pascalCase": {
                  "unsafeName": "Title",
                  "safeName": "Title"
                }
              },
              "wireValue": "title"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "Title of the work object.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTitle_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work-type",
                "camelCase": {
                  "unsafeName": "workType",
                  "safeName": "workType"
                },
                "snakeCase": {
                  "unsafeName": "work_type",
                  "safeName": "work_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_TYPE",
                  "safeName": "WORK_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "WorkType",
                  "safeName": "WorkType"
                }
              },
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "issue",
                "camelCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "snakeCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUE",
                  "safeName": "ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "Issue",
                  "safeName": "Issue"
                }
              },
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "works-create-request-issue",
              "name": {
                "originalName": "works-create-request-issue",
                "camelCase": {
                  "unsafeName": "worksCreateRequestIssue",
                  "safeName": "worksCreateRequestIssue"
                },
                "snakeCase": {
                  "unsafeName": "works_create_request_issue",
                  "safeName": "works_create_request_issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_CREATE_REQUEST_ISSUE",
                  "safeName": "WORKS_CREATE_REQUEST_ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "WorksCreateRequestIssue",
                  "safeName": "WorksCreateRequestIssue"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "ticket",
                "camelCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "snakeCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TICKET",
                  "safeName": "TICKET"
                },
                "pascalCase": {
                  "unsafeName": "Ticket",
                  "safeName": "Ticket"
                }
              },
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "works-create-request-ticket",
              "name": {
                "originalName": "works-create-request-ticket",
                "camelCase": {
                  "unsafeName": "worksCreateRequestTicket",
                  "safeName": "worksCreateRequestTicket"
                },
                "snakeCase": {
                  "unsafeName": "works_create_request_ticket",
                  "safeName": "works_create_request_ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_CREATE_REQUEST_TICKET",
                  "safeName": "WORKS_CREATE_REQUEST_TICKET"
                },
                "pascalCase": {
                  "unsafeName": "WorksCreateRequestTicket",
                  "safeName": "WorksCreateRequestTicket"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request_example_autogenerated": {}
        }
      }
    },
    "works-create-request-issue": {
      "name": {
        "typeId": "works-create-request-issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-create-request-issue",
          "camelCase": {
            "unsafeName": "worksCreateRequestIssue",
            "safeName": "worksCreateRequestIssue"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_issue",
            "safeName": "works_create_request_issue"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_ISSUE",
            "safeName": "WORKS_CREATE_REQUEST_ISSUE"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestIssue",
            "safeName": "WorksCreateRequestIssue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "priority",
                "camelCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "snakeCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRIORITY",
                  "safeName": "PRIORITY"
                },
                "pascalCase": {
                  "unsafeName": "Priority",
                  "safeName": "Priority"
                }
              },
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "issue-priority",
                    "camelCase": {
                      "unsafeName": "issuePriority",
                      "safeName": "issuePriority"
                    },
                    "snakeCase": {
                      "unsafeName": "issue_priority",
                      "safeName": "issue_priority"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ISSUE_PRIORITY",
                      "safeName": "ISSUE_PRIORITY"
                    },
                    "pascalCase": {
                      "unsafeName": "IssuePriority",
                      "safeName": "IssuePriority"
                    }
                  },
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "sprint",
                "camelCase": {
                  "unsafeName": "sprint",
                  "safeName": "sprint"
                },
                "snakeCase": {
                  "unsafeName": "sprint",
                  "safeName": "sprint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SPRINT",
                  "safeName": "SPRINT"
                },
                "pascalCase": {
                  "unsafeName": "Sprint",
                  "safeName": "Sprint"
                }
              },
              "wireValue": "sprint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The sprint that the issue belongs to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestIssueSprint_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request-issue_example_autogenerated": {}
        }
      }
    },
    "works-create-request-ticket": {
      "name": {
        "typeId": "works-create-request-ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-create-request-ticket",
          "camelCase": {
            "unsafeName": "worksCreateRequestTicket",
            "safeName": "worksCreateRequestTicket"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_ticket",
            "safeName": "works_create_request_ticket"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_TICKET",
            "safeName": "WORKS_CREATE_REQUEST_TICKET"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestTicket",
            "safeName": "WorksCreateRequestTicket"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "group",
                "camelCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "snakeCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GROUP",
                  "safeName": "GROUP"
                },
                "pascalCase": {
                  "unsafeName": "Group",
                  "safeName": "Group"
                }
              },
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The group that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksCreateRequestTicketGroup_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The Rev organization that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksCreateRequestTicketRevOrg_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "severity",
                "camelCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "snakeCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SEVERITY",
                  "safeName": "SEVERITY"
                },
                "pascalCase": {
                  "unsafeName": "Severity",
                  "safeName": "Severity"
                }
              },
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "ticket-severity",
                    "camelCase": {
                      "unsafeName": "ticketSeverity",
                      "safeName": "ticketSeverity"
                    },
                    "snakeCase": {
                      "unsafeName": "ticket_severity",
                      "safeName": "ticket_severity"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TICKET_SEVERITY",
                      "safeName": "TICKET_SEVERITY"
                    },
                    "pascalCase": {
                      "unsafeName": "TicketSeverity",
                      "safeName": "TicketSeverity"
                    }
                  },
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-request-ticket_example_autogenerated": {}
        }
      }
    },
    "works-create-response": {
      "name": {
        "typeId": "works-create-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-create-response",
          "camelCase": {
            "unsafeName": "worksCreateResponse",
            "safeName": "worksCreateResponse"
          },
          "snakeCase": {
            "unsafeName": "works_create_response",
            "safeName": "works_create_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_RESPONSE",
            "safeName": "WORKS_CREATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateResponse",
            "safeName": "WorksCreateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-create-response_example_autogenerated": {
            "work": {
              "id": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ],
              "title": "foo"
            }
          }
        }
      }
    },
    "works-delete-request": {
      "name": {
        "typeId": "works-delete-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-delete-request",
          "camelCase": {
            "unsafeName": "worksDeleteRequest",
            "safeName": "worksDeleteRequest"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request",
            "safeName": "works_delete_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST",
            "safeName": "WORKS_DELETE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequest",
            "safeName": "WorksDeleteRequest"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The work's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksDeleteRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-delete-request_example_autogenerated": {
            "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
          }
        }
      }
    },
    "works-delete-response": {
      "name": {
        "typeId": "works-delete-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-delete-response",
          "camelCase": {
            "unsafeName": "worksDeleteResponse",
            "safeName": "worksDeleteResponse"
          },
          "snakeCase": {
            "unsafeName": "works_delete_response",
            "safeName": "works_delete_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_RESPONSE",
            "safeName": "WORKS_DELETE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteResponse",
            "safeName": "WorksDeleteResponse"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-delete-response_example_autogenerated": {}
        }
      }
    },
    "works-export-response": {
      "name": {
        "typeId": "works-export-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-export-response",
          "camelCase": {
            "unsafeName": "worksExportResponse",
            "safeName": "worksExportResponse"
          },
          "snakeCase": {
            "unsafeName": "works_export_response",
            "safeName": "works_export_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_RESPONSE",
            "safeName": "WORKS_EXPORT_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksExportResponse",
            "safeName": "WorksExportResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "works",
                "camelCase": {
                  "unsafeName": "works",
                  "safeName": "works"
                },
                "snakeCase": {
                  "unsafeName": "works",
                  "safeName": "works"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS",
                  "safeName": "WORKS"
                },
                "pascalCase": {
                  "unsafeName": "Works",
                  "safeName": "Works"
                }
              },
              "wireValue": "works"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "work",
                    "camelCase": {
                      "unsafeName": "work",
                      "safeName": "work"
                    },
                    "snakeCase": {
                      "unsafeName": "work",
                      "safeName": "work"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORK",
                      "safeName": "WORK"
                    },
                    "pascalCase": {
                      "unsafeName": "Work",
                      "safeName": "Work"
                    }
                  },
                  "typeId": "work",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The resulting collection of work items.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksExportResponseWorks_example_autogenerated": [
                  {
                    "id": "foo",
                    "owned_by": [
                      {
                        "id": "foo"
                      }
                    ],
                    "title": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-export-response_example_autogenerated": {
            "works": [
              {
                "id": "foo",
                "owned_by": [
                  {
                    "id": "foo"
                  }
                ],
                "title": "foo"
              }
            ]
          }
        }
      }
    },
    "works-get-response": {
      "name": {
        "typeId": "works-get-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-get-response",
          "camelCase": {
            "unsafeName": "worksGetResponse",
            "safeName": "worksGetResponse"
          },
          "snakeCase": {
            "unsafeName": "works_get_response",
            "safeName": "works_get_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_RESPONSE",
            "safeName": "WORKS_GET_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksGetResponse",
            "safeName": "WorksGetResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-get-response_example_autogenerated": {
            "work": {
              "id": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ],
              "title": "foo"
            }
          }
        }
      }
    },
    "works-list-response": {
      "name": {
        "typeId": "works-list-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-list-response",
          "camelCase": {
            "unsafeName": "worksListResponse",
            "safeName": "worksListResponse"
          },
          "snakeCase": {
            "unsafeName": "works_list_response",
            "safeName": "works_list_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_RESPONSE",
            "safeName": "WORKS_LIST_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksListResponse",
            "safeName": "WorksListResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "next_cursor",
                "camelCase": {
                  "unsafeName": "nextCursor",
                  "safeName": "nextCursor"
                },
                "snakeCase": {
                  "unsafeName": "next_cursor",
                  "safeName": "next_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_CURSOR",
                  "safeName": "NEXT_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "NextCursor",
                  "safeName": "NextCursor"
                }
              },
              "wireValue": "next_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponseNextCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "prev_cursor",
                "camelCase": {
                  "unsafeName": "prevCursor",
                  "safeName": "prevCursor"
                },
                "snakeCase": {
                  "unsafeName": "prev_cursor",
                  "safeName": "prev_cursor"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PREV_CURSOR",
                  "safeName": "PREV_CURSOR"
                },
                "pascalCase": {
                  "unsafeName": "PrevCursor",
                  "safeName": "PrevCursor"
                }
              },
              "wireValue": "prev_cursor"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponsePrevCursor_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "works",
                "camelCase": {
                  "unsafeName": "works",
                  "safeName": "works"
                },
                "snakeCase": {
                  "unsafeName": "works",
                  "safeName": "works"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS",
                  "safeName": "WORKS"
                },
                "pascalCase": {
                  "unsafeName": "Works",
                  "safeName": "Works"
                }
              },
              "wireValue": "works"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "work",
                    "camelCase": {
                      "unsafeName": "work",
                      "safeName": "work"
                    },
                    "snakeCase": {
                      "unsafeName": "work",
                      "safeName": "work"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORK",
                      "safeName": "WORK"
                    },
                    "pascalCase": {
                      "unsafeName": "Work",
                      "safeName": "Work"
                    }
                  },
                  "typeId": "work",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The list of works.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksListResponseWorks_example_autogenerated": [
                  {
                    "id": "foo",
                    "owned_by": [
                      {
                        "id": "foo"
                      }
                    ],
                    "title": "foo"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-list-response_example_autogenerated": {
            "works": [
              {
                "id": "foo",
                "owned_by": [
                  {
                    "id": "foo"
                  }
                ],
                "title": "foo"
              }
            ]
          }
        }
      }
    },
    "works-update-request": {
      "name": {
        "typeId": "works-update-request",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request",
          "camelCase": {
            "unsafeName": "worksUpdateRequest",
            "safeName": "worksUpdateRequest"
          },
          "snakeCase": {
            "unsafeName": "works_update_request",
            "safeName": "works_update_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST",
            "safeName": "WORKS_UPDATE_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequest",
            "safeName": "WorksUpdateRequest"
          }
        }
      },
      "shape": {
        "baseProperties": [
          {
            "name": {
              "name": {
                "originalName": "applies_to_part",
                "camelCase": {
                  "unsafeName": "appliesToPart",
                  "safeName": "appliesToPart"
                },
                "snakeCase": {
                  "unsafeName": "applies_to_part",
                  "safeName": "applies_to_part"
                },
                "screamingSnakeCase": {
                  "unsafeName": "APPLIES_TO_PART",
                  "safeName": "APPLIES_TO_PART"
                },
                "pascalCase": {
                  "unsafeName": "AppliesToPart",
                  "safeName": "AppliesToPart"
                }
              },
              "wireValue": "applies_to_part"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the part that the work applies to.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestAppliesToPart_example_0": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "artifacts",
                "camelCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "snakeCase": {
                  "unsafeName": "artifacts",
                  "safeName": "artifacts"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS",
                  "safeName": "ARTIFACTS"
                },
                "pascalCase": {
                  "unsafeName": "Artifacts",
                  "safeName": "Artifacts"
                }
              },
              "wireValue": "artifacts"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-update-request-artifact-ids",
                    "camelCase": {
                      "unsafeName": "worksUpdateRequestArtifactIds",
                      "safeName": "worksUpdateRequestArtifactIds"
                    },
                    "snakeCase": {
                      "unsafeName": "works_update_request_artifact_ids",
                      "safeName": "works_update_request_artifact_ids"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_UPDATE_REQUEST_ARTIFACT_IDS",
                      "safeName": "WORKS_UPDATE_REQUEST_ARTIFACT_IDS"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksUpdateRequestArtifactIds",
                      "safeName": "WorksUpdateRequestArtifactIds"
                    }
                  },
                  "typeId": "works-update-request-artifact-ids",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "body",
                "camelCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "snakeCase": {
                  "unsafeName": "body",
                  "safeName": "body"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BODY",
                  "safeName": "BODY"
                },
                "pascalCase": {
                  "unsafeName": "Body",
                  "safeName": "Body"
                }
              },
              "wireValue": "body"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updated body of the work object, or unchanged if not provided.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestBody_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {},
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The work's ID.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestId_example_0": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "owned_by",
                "camelCase": {
                  "unsafeName": "ownedBy",
                  "safeName": "ownedBy"
                },
                "snakeCase": {
                  "unsafeName": "owned_by",
                  "safeName": "owned_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OWNED_BY",
                  "safeName": "OWNED_BY"
                },
                "pascalCase": {
                  "unsafeName": "OwnedBy",
                  "safeName": "OwnedBy"
                }
              },
              "wireValue": "owned_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-update-request-owned-by",
                    "camelCase": {
                      "unsafeName": "worksUpdateRequestOwnedBy",
                      "safeName": "worksUpdateRequestOwnedBy"
                    },
                    "snakeCase": {
                      "unsafeName": "works_update_request_owned_by",
                      "safeName": "works_update_request_owned_by"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_UPDATE_REQUEST_OWNED_BY",
                      "safeName": "WORKS_UPDATE_REQUEST_OWNED_BY"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksUpdateRequestOwnedBy",
                      "safeName": "WorksUpdateRequestOwnedBy"
                    }
                  },
                  "typeId": "works-update-request-owned-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "reported_by",
                "camelCase": {
                  "unsafeName": "reportedBy",
                  "safeName": "reportedBy"
                },
                "snakeCase": {
                  "unsafeName": "reported_by",
                  "safeName": "reported_by"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REPORTED_BY",
                  "safeName": "REPORTED_BY"
                },
                "pascalCase": {
                  "unsafeName": "ReportedBy",
                  "safeName": "ReportedBy"
                }
              },
              "wireValue": "reported_by"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-update-request-reported-by",
                    "camelCase": {
                      "unsafeName": "worksUpdateRequestReportedBy",
                      "safeName": "worksUpdateRequestReportedBy"
                    },
                    "snakeCase": {
                      "unsafeName": "works_update_request_reported_by",
                      "safeName": "works_update_request_reported_by"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_UPDATE_REQUEST_REPORTED_BY",
                      "safeName": "WORKS_UPDATE_REQUEST_REPORTED_BY"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksUpdateRequestReportedBy",
                      "safeName": "WorksUpdateRequestReportedBy"
                    }
                  },
                  "typeId": "works-update-request-reported-by",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "stage",
                "camelCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "snakeCase": {
                  "unsafeName": "stage",
                  "safeName": "stage"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STAGE",
                  "safeName": "STAGE"
                },
                "pascalCase": {
                  "unsafeName": "Stage",
                  "safeName": "Stage"
                }
              },
              "wireValue": "stage"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "stage-update",
                    "camelCase": {
                      "unsafeName": "stageUpdate",
                      "safeName": "stageUpdate"
                    },
                    "snakeCase": {
                      "unsafeName": "stage_update",
                      "safeName": "stage_update"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "STAGE_UPDATE",
                      "safeName": "STAGE_UPDATE"
                    },
                    "pascalCase": {
                      "unsafeName": "StageUpdate",
                      "safeName": "StageUpdate"
                    }
                  },
                  "typeId": "stage-update",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tags",
                "camelCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "snakeCase": {
                  "unsafeName": "tags",
                  "safeName": "tags"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS",
                  "safeName": "TAGS"
                },
                "pascalCase": {
                  "unsafeName": "Tags",
                  "safeName": "Tags"
                }
              },
              "wireValue": "tags"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-update-request-tags",
                    "camelCase": {
                      "unsafeName": "worksUpdateRequestTags",
                      "safeName": "worksUpdateRequestTags"
                    },
                    "snakeCase": {
                      "unsafeName": "works_update_request_tags",
                      "safeName": "works_update_request_tags"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_UPDATE_REQUEST_TAGS",
                      "safeName": "WORKS_UPDATE_REQUEST_TAGS"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksUpdateRequestTags",
                      "safeName": "WorksUpdateRequestTags"
                    }
                  },
                  "typeId": "works-update-request-tags",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "target_close_date",
                "camelCase": {
                  "unsafeName": "targetCloseDate",
                  "safeName": "targetCloseDate"
                },
                "snakeCase": {
                  "unsafeName": "target_close_date",
                  "safeName": "target_close_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_CLOSE_DATE",
                  "safeName": "TARGET_CLOSE_DATE"
                },
                "pascalCase": {
                  "unsafeName": "TargetCloseDate",
                  "safeName": "TargetCloseDate"
                }
              },
              "wireValue": "target_close_date"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the timestamp for when the work is expected to be complete.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTargetCloseDate_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "title",
                "camelCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "snakeCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TITLE",
                  "safeName": "TITLE"
                },
                "pascalCase": {
                  "unsafeName": "Title",
                  "safeName": "Title"
                }
              },
              "wireValue": "title"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updated title of the work object, or unchanged if not provided.\n",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTitle_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work-type",
                "camelCase": {
                  "unsafeName": "workType",
                  "safeName": "workType"
                },
                "snakeCase": {
                  "unsafeName": "work_type",
                  "safeName": "work_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK_TYPE",
                  "safeName": "WORK_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "WorkType",
                  "safeName": "WorkType"
                }
              },
              "typeId": "work-type",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "discriminant": {
          "name": {
            "originalName": "type",
            "camelCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "snakeCase": {
              "unsafeName": "type",
              "safeName": "type_"
            },
            "screamingSnakeCase": {
              "unsafeName": "TYPE",
              "safeName": "TYPE"
            },
            "pascalCase": {
              "unsafeName": "Type",
              "safeName": "Type"
            }
          },
          "wireValue": "type"
        },
        "extends": [],
        "types": [
          {
            "discriminantValue": {
              "name": {
                "originalName": "issue",
                "camelCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "snakeCase": {
                  "unsafeName": "issue",
                  "safeName": "issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ISSUE",
                  "safeName": "ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "Issue",
                  "safeName": "Issue"
                }
              },
              "wireValue": "issue"
            },
            "displayName": "issue",
            "shape": {
              "typeId": "works-update-request-issue",
              "name": {
                "originalName": "works-update-request-issue",
                "camelCase": {
                  "unsafeName": "worksUpdateRequestIssue",
                  "safeName": "worksUpdateRequestIssue"
                },
                "snakeCase": {
                  "unsafeName": "works_update_request_issue",
                  "safeName": "works_update_request_issue"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_UPDATE_REQUEST_ISSUE",
                  "safeName": "WORKS_UPDATE_REQUEST_ISSUE"
                },
                "pascalCase": {
                  "unsafeName": "WorksUpdateRequestIssue",
                  "safeName": "WorksUpdateRequestIssue"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "issue",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "none",
                "camelCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "snakeCase": {
                  "unsafeName": "none",
                  "safeName": "none"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NONE",
                  "safeName": "NONE"
                },
                "pascalCase": {
                  "unsafeName": "None",
                  "safeName": "None"
                }
              },
              "wireValue": "none"
            },
            "displayName": "none",
            "shape": {
              "typeId": "empty",
              "name": {
                "originalName": "empty",
                "camelCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "snakeCase": {
                  "unsafeName": "empty",
                  "safeName": "empty"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMPTY",
                  "safeName": "EMPTY"
                },
                "pascalCase": {
                  "unsafeName": "Empty",
                  "safeName": "Empty"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "none",
              "propertiesType": "samePropertiesAsObject"
            }
          },
          {
            "discriminantValue": {
              "name": {
                "originalName": "ticket",
                "camelCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "snakeCase": {
                  "unsafeName": "ticket",
                  "safeName": "ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TICKET",
                  "safeName": "TICKET"
                },
                "pascalCase": {
                  "unsafeName": "Ticket",
                  "safeName": "Ticket"
                }
              },
              "wireValue": "ticket"
            },
            "displayName": "ticket",
            "shape": {
              "typeId": "works-update-request-ticket",
              "name": {
                "originalName": "works-update-request-ticket",
                "camelCase": {
                  "unsafeName": "worksUpdateRequestTicket",
                  "safeName": "worksUpdateRequestTicket"
                },
                "snakeCase": {
                  "unsafeName": "works_update_request_ticket",
                  "safeName": "works_update_request_ticket"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_UPDATE_REQUEST_TICKET",
                  "safeName": "WORKS_UPDATE_REQUEST_TICKET"
                },
                "pascalCase": {
                  "unsafeName": "WorksUpdateRequestTicket",
                  "safeName": "WorksUpdateRequestTicket"
                }
              },
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "displayName": "ticket",
              "propertiesType": "samePropertiesAsObject"
            }
          }
        ],
        "type": "union"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request_example_autogenerated": {}
        }
      }
    },
    "works-update-request-artifact-ids": {
      "name": {
        "typeId": "works-update-request-artifact-ids",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-artifact-ids",
          "camelCase": {
            "unsafeName": "worksUpdateRequestArtifactIds",
            "safeName": "worksUpdateRequestArtifactIds"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_artifact_ids",
            "safeName": "works_update_request_artifact_ids"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_ARTIFACT_IDS",
            "safeName": "WORKS_UPDATE_REQUEST_ARTIFACT_IDS"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestArtifactIds",
            "safeName": "WorksUpdateRequestArtifactIds"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the IDs to the provided artifact IDs.",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestArtifactIdsSet_example_0": [
                  "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-artifact-ids_example_autogenerated": {}
        }
      }
    },
    "works-update-request-issue": {
      "name": {
        "typeId": "works-update-request-issue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-issue",
          "camelCase": {
            "unsafeName": "worksUpdateRequestIssue",
            "safeName": "worksUpdateRequestIssue"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_issue",
            "safeName": "works_update_request_issue"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_ISSUE",
            "safeName": "WORKS_UPDATE_REQUEST_ISSUE"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestIssue",
            "safeName": "WorksUpdateRequestIssue"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "priority",
                "camelCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "snakeCase": {
                  "unsafeName": "priority",
                  "safeName": "priority"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRIORITY",
                  "safeName": "PRIORITY"
                },
                "pascalCase": {
                  "unsafeName": "Priority",
                  "safeName": "Priority"
                }
              },
              "wireValue": "priority"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "issue-priority",
                    "camelCase": {
                      "unsafeName": "issuePriority",
                      "safeName": "issuePriority"
                    },
                    "snakeCase": {
                      "unsafeName": "issue_priority",
                      "safeName": "issue_priority"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ISSUE_PRIORITY",
                      "safeName": "ISSUE_PRIORITY"
                    },
                    "pascalCase": {
                      "unsafeName": "IssuePriority",
                      "safeName": "IssuePriority"
                    }
                  },
                  "typeId": "issue-priority",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "sprint",
                "camelCase": {
                  "unsafeName": "sprint",
                  "safeName": "sprint"
                },
                "snakeCase": {
                  "unsafeName": "sprint",
                  "safeName": "sprint"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SPRINT",
                  "safeName": "SPRINT"
                },
                "pascalCase": {
                  "unsafeName": "Sprint",
                  "safeName": "Sprint"
                }
              },
              "wireValue": "sprint"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the sprint that the issue belongs to.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestIssueSprint_example_autogenerated": "foo"
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-issue_example_autogenerated": {}
        }
      }
    },
    "works-update-request-owned-by": {
      "name": {
        "typeId": "works-update-request-owned-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-owned-by",
          "camelCase": {
            "unsafeName": "worksUpdateRequestOwnedBy",
            "safeName": "worksUpdateRequestOwnedBy"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_owned_by",
            "safeName": "works_update_request_owned_by"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_OWNED_BY",
            "safeName": "WORKS_UPDATE_REQUEST_OWNED_BY"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestOwnedBy",
            "safeName": "WorksUpdateRequestOwnedBy"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestOwnedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-owned-by_example_autogenerated": {}
        }
      }
    },
    "works-update-request-reported-by": {
      "name": {
        "typeId": "works-update-request-reported-by",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-reported-by",
          "camelCase": {
            "unsafeName": "worksUpdateRequestReportedBy",
            "safeName": "worksUpdateRequestReportedBy"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_reported_by",
            "safeName": "works_update_request_reported_by"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_REPORTED_BY",
            "safeName": "WORKS_UPDATE_REQUEST_REPORTED_BY"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestReportedBy",
            "safeName": "WorksUpdateRequestReportedBy"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the users that reported the work to the provided user IDs.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestReportedBySet_example_0": [
                  "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                ]
              },
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-reported-by_example_autogenerated": {}
        }
      }
    },
    "works-update-request-tags": {
      "name": {
        "typeId": "works-update-request-tags",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-tags",
          "camelCase": {
            "unsafeName": "worksUpdateRequestTags",
            "safeName": "worksUpdateRequestTags"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_tags",
            "safeName": "works_update_request_tags"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_TAGS",
            "safeName": "WORKS_UPDATE_REQUEST_TAGS"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestTags",
            "safeName": "WorksUpdateRequestTags"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "set",
                "camelCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "snakeCase": {
                  "unsafeName": "set",
                  "safeName": "set_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SET",
                  "safeName": "SET"
                },
                "pascalCase": {
                  "unsafeName": "Set",
                  "safeName": "Set"
                }
              },
              "wireValue": "set"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "set-tag-with-value",
                        "camelCase": {
                          "unsafeName": "setTagWithValue",
                          "safeName": "setTagWithValue"
                        },
                        "snakeCase": {
                          "unsafeName": "set_tag_with_value",
                          "safeName": "set_tag_with_value"
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "SET_TAG_WITH_VALUE",
                          "safeName": "SET_TAG_WITH_VALUE"
                        },
                        "pascalCase": {
                          "unsafeName": "SetTagWithValue",
                          "safeName": "SetTagWithValue"
                        }
                      },
                      "typeId": "set-tag-with-value",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Sets the provided tags on the work item.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTagsSet_example_autogenerated": [
                  {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                ]
              }
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-tags_example_autogenerated": {}
        }
      }
    },
    "works-update-request-ticket": {
      "name": {
        "typeId": "works-update-request-ticket",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-request-ticket",
          "camelCase": {
            "unsafeName": "worksUpdateRequestTicket",
            "safeName": "worksUpdateRequestTicket"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_ticket",
            "safeName": "works_update_request_ticket"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_TICKET",
            "safeName": "WORKS_UPDATE_REQUEST_TICKET"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestTicket",
            "safeName": "WorksUpdateRequestTicket"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "group",
                "camelCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "snakeCase": {
                  "unsafeName": "group",
                  "safeName": "group"
                },
                "screamingSnakeCase": {
                  "unsafeName": "GROUP",
                  "safeName": "GROUP"
                },
                "pascalCase": {
                  "unsafeName": "Group",
                  "safeName": "Group"
                }
              },
              "wireValue": "group"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The group that the ticket is associated with.",
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "WorksUpdateRequestTicketGroup_example_autogenerated": "foo"
              }
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rev_org",
                "camelCase": {
                  "unsafeName": "revOrg",
                  "safeName": "revOrg"
                },
                "snakeCase": {
                  "unsafeName": "rev_org",
                  "safeName": "rev_org"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORG",
                  "safeName": "REV_ORG"
                },
                "pascalCase": {
                  "unsafeName": "RevOrg",
                  "safeName": "RevOrg"
                }
              },
              "wireValue": "rev_org"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "nullable": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {},
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "nullable"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Updates the Rev organization that the ticket is associated with.\n",
            "v2Examples": {
              "userSpecifiedExamples": {
                "WorksUpdateRequestTicketRevOrg_example_0": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
              },
              "autogeneratedExamples": {}
            }
          },
          {
            "name": {
              "name": {
                "originalName": "severity",
                "camelCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "snakeCase": {
                  "unsafeName": "severity",
                  "safeName": "severity"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SEVERITY",
                  "safeName": "SEVERITY"
                },
                "pascalCase": {
                  "unsafeName": "Severity",
                  "safeName": "Severity"
                }
              },
              "wireValue": "severity"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "ticket-severity",
                    "camelCase": {
                      "unsafeName": "ticketSeverity",
                      "safeName": "ticketSeverity"
                    },
                    "snakeCase": {
                      "unsafeName": "ticket_severity",
                      "safeName": "ticket_severity"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TICKET_SEVERITY",
                      "safeName": "TICKET_SEVERITY"
                    },
                    "pascalCase": {
                      "unsafeName": "TicketSeverity",
                      "safeName": "TicketSeverity"
                    }
                  },
                  "typeId": "ticket-severity",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-request-ticket_example_autogenerated": {}
        }
      }
    },
    "works-update-response": {
      "name": {
        "typeId": "works-update-response",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "works-update-response",
          "camelCase": {
            "unsafeName": "worksUpdateResponse",
            "safeName": "worksUpdateResponse"
          },
          "snakeCase": {
            "unsafeName": "works_update_response",
            "safeName": "works_update_response"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_RESPONSE",
            "safeName": "WORKS_UPDATE_RESPONSE"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateResponse",
            "safeName": "WorksUpdateResponse"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "wireValue": "work"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "work",
                "camelCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "snakeCase": {
                  "unsafeName": "work",
                  "safeName": "work"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORK",
                  "safeName": "WORK"
                },
                "pascalCase": {
                  "unsafeName": "Work",
                  "safeName": "Work"
                }
              },
              "typeId": "work",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {}
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false,
      "v2Examples": {
        "userSpecifiedExamples": {},
        "autogeneratedExamples": {
          "works-update-response_example_autogenerated": {
            "work": {
              "id": "foo",
              "owned_by": [
                {
                  "id": "foo"
                }
              ],
              "title": "foo"
            }
          }
        }
      }
    }
  },
  "services": {
    "service_artifacts": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "artifacts",
              "camelCase": {
                "unsafeName": "artifacts",
                "safeName": "artifacts"
              },
              "snakeCase": {
                "unsafeName": "artifacts",
                "safeName": "artifacts"
              },
              "screamingSnakeCase": {
                "unsafeName": "ARTIFACTS",
                "safeName": "ARTIFACTS"
              },
              "pascalCase": {
                "unsafeName": "Artifacts",
                "safeName": "Artifacts"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "artifacts",
            "camelCase": {
              "unsafeName": "artifacts",
              "safeName": "artifacts"
            },
            "snakeCase": {
              "unsafeName": "artifacts",
              "safeName": "artifacts"
            },
            "screamingSnakeCase": {
              "unsafeName": "ARTIFACTS",
              "safeName": "ARTIFACTS"
            },
            "pascalCase": {
              "unsafeName": "Artifacts",
              "safeName": "Artifacts"
            }
          }
        }
      },
      "displayName": "artifacts",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/artifacts.locate",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The ID of the artifact to get the URL for.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestBadRequestError",
                    "safeName": "artifactsLocateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_bad_request_error",
                    "safeName": "artifacts_locate_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestBadRequestError",
                    "safeName": "ArtifactsLocateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestUnauthorizedError",
                    "safeName": "artifactsLocateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_unauthorized_error",
                    "safeName": "artifacts_locate_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestUnauthorizedError",
                    "safeName": "ArtifactsLocateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestForbiddenError",
                    "safeName": "artifactsLocateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_forbidden_error",
                    "safeName": "artifacts_locate_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestForbiddenError",
                    "safeName": "ArtifactsLocateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestNotFoundError",
                    "safeName": "artifactsLocateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_not_found_error",
                    "safeName": "artifacts_locate_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestNotFoundError",
                    "safeName": "ArtifactsLocateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestTooManyRequestsError",
                    "safeName": "artifactsLocateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_too_many_requests_error",
                    "safeName": "artifacts_locate_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestTooManyRequestsError",
                    "safeName": "ArtifactsLocateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestInternalServerError",
                    "safeName": "artifactsLocateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_internal_server_error",
                    "safeName": "artifacts_locate_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestInternalServerError",
                    "safeName": "ArtifactsLocateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-locateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "artifactsLocateRequestServiceUnavailableError",
                    "safeName": "artifactsLocateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_locate_request_service_unavailable_error",
                    "safeName": "artifacts_locate_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsLocateRequestServiceUnavailableError",
                    "safeName": "ArtifactsLocateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-locateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/artifacts.locate",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_artifacts.locate",
          "name": {
            "originalName": "locate",
            "camelCase": {
              "unsafeName": "locate",
              "safeName": "locate"
            },
            "snakeCase": {
              "unsafeName": "locate",
              "safeName": "locate"
            },
            "screamingSnakeCase": {
              "unsafeName": "LOCATE",
              "safeName": "LOCATE"
            },
            "pascalCase": {
              "unsafeName": "Locate",
              "safeName": "Locate"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "artifacts-locate-response",
                    "camelCase": {
                      "unsafeName": "artifactsLocateResponse",
                      "safeName": "artifactsLocateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "artifacts_locate_response",
                      "safeName": "artifacts_locate_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ARTIFACTS_LOCATE_RESPONSE",
                      "safeName": "ARTIFACTS_LOCATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "ArtifactsLocateResponse",
                      "safeName": "ArtifactsLocateResponse"
                    }
                  },
                  "typeId": "artifacts-locate-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "artifactsLocateExample": {
                      "expires_at": "foo",
                      "url": "foo"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the download URL for the artifact.",
          "v2Examples": {
            "autogeneratedExamples": {
              "locateExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/artifacts.locate"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "expires_at": "foo",
                      "url": "foo"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/artifacts.prepare",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestBadRequestError",
                    "safeName": "artifactsPrepareRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_bad_request_error",
                    "safeName": "artifacts_prepare_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestBadRequestError",
                    "safeName": "ArtifactsPrepareRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestUnauthorizedError",
                    "safeName": "artifactsPrepareRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_unauthorized_error",
                    "safeName": "artifacts_prepare_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestUnauthorizedError",
                    "safeName": "ArtifactsPrepareRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestForbiddenError",
                    "safeName": "artifactsPrepareRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_forbidden_error",
                    "safeName": "artifacts_prepare_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestForbiddenError",
                    "safeName": "ArtifactsPrepareRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestTooManyRequestsError",
                    "safeName": "artifactsPrepareRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_too_many_requests_error",
                    "safeName": "artifacts_prepare_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestTooManyRequestsError",
                    "safeName": "ArtifactsPrepareRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestInternalServerError",
                    "safeName": "artifactsPrepareRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_internal_server_error",
                    "safeName": "artifacts_prepare_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestInternalServerError",
                    "safeName": "ArtifactsPrepareRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Artifacts-prepareRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "artifactsPrepareRequestServiceUnavailableError",
                    "safeName": "artifactsPrepareRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "artifacts_prepare_request_service_unavailable_error",
                    "safeName": "artifacts_prepare_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "ArtifactsPrepareRequestServiceUnavailableError",
                    "safeName": "ArtifactsPrepareRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Artifacts-prepareRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/artifacts.prepare",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_artifacts.prepare",
          "name": {
            "originalName": "prepare",
            "camelCase": {
              "unsafeName": "prepare",
              "safeName": "prepare"
            },
            "snakeCase": {
              "unsafeName": "prepare",
              "safeName": "prepare"
            },
            "screamingSnakeCase": {
              "unsafeName": "PREPARE",
              "safeName": "PREPARE"
            },
            "pascalCase": {
              "unsafeName": "Prepare",
              "safeName": "Prepare"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "artifacts-prepare-request",
                "camelCase": {
                  "unsafeName": "artifactsPrepareRequest",
                  "safeName": "artifactsPrepareRequest"
                },
                "snakeCase": {
                  "unsafeName": "artifacts_prepare_request",
                  "safeName": "artifacts_prepare_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARTIFACTS_PREPARE_REQUEST",
                  "safeName": "ARTIFACTS_PREPARE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "ArtifactsPrepareRequest",
                  "safeName": "ArtifactsPrepareRequest"
                }
              },
              "typeId": "artifacts-prepare-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "artifactsPrepareExample": {
                  "file_name": "foo"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "artifacts-prepare-response",
                    "camelCase": {
                      "unsafeName": "artifactsPrepareResponse",
                      "safeName": "artifactsPrepareResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "artifacts_prepare_response",
                      "safeName": "artifacts_prepare_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "ARTIFACTS_PREPARE_RESPONSE",
                      "safeName": "ARTIFACTS_PREPARE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "ArtifactsPrepareResponse",
                      "safeName": "ArtifactsPrepareResponse"
                    }
                  },
                  "typeId": "artifacts-prepare-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "artifactsPrepareExample": {
                      "form_data": [
                        {
                          "key": "foo",
                          "value": "foo"
                        }
                      ],
                      "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                      "url": "foo"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates an artifact and generates an upload URL for its data.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "artifactsPrepareExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/artifacts.prepare"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "file_name": "foo"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "form_data": [
                        {
                          "key": "foo",
                          "value": "foo"
                        }
                      ],
                      "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                      "url": "foo"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_authTokens": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "auth-tokens",
              "camelCase": {
                "unsafeName": "authTokens",
                "safeName": "authTokens"
              },
              "snakeCase": {
                "unsafeName": "auth_tokens",
                "safeName": "auth_tokens"
              },
              "screamingSnakeCase": {
                "unsafeName": "AUTH_TOKENS",
                "safeName": "AUTH_TOKENS"
              },
              "pascalCase": {
                "unsafeName": "AuthTokens",
                "safeName": "AuthTokens"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "auth-tokens",
            "camelCase": {
              "unsafeName": "authTokens",
              "safeName": "authTokens"
            },
            "snakeCase": {
              "unsafeName": "auth_tokens",
              "safeName": "auth_tokens"
            },
            "screamingSnakeCase": {
              "unsafeName": "AUTH_TOKENS",
              "safeName": "AUTH_TOKENS"
            },
            "pascalCase": {
              "unsafeName": "AuthTokens",
              "safeName": "AuthTokens"
            }
          }
        }
      },
      "displayName": "auth-tokens",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestBadRequestError",
                    "safeName": "authTokensCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_bad_request_error",
                    "safeName": "auth_tokens_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestBadRequestError",
                    "safeName": "AuthTokensCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestUnauthorizedError",
                    "safeName": "authTokensCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_unauthorized_error",
                    "safeName": "auth_tokens_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestUnauthorizedError",
                    "safeName": "AuthTokensCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestForbiddenError",
                    "safeName": "authTokensCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_forbidden_error",
                    "safeName": "auth_tokens_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestForbiddenError",
                    "safeName": "AuthTokensCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestTooManyRequestsError",
                    "safeName": "authTokensCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_too_many_requests_error",
                    "safeName": "auth_tokens_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestTooManyRequestsError",
                    "safeName": "AuthTokensCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestInternalServerError",
                    "safeName": "authTokensCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_internal_server_error",
                    "safeName": "auth_tokens_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestInternalServerError",
                    "safeName": "AuthTokensCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensCreateRequestServiceUnavailableError",
                    "safeName": "authTokensCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_create_request_service_unavailable_error",
                    "safeName": "auth_tokens_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensCreateRequestServiceUnavailableError",
                    "safeName": "AuthTokensCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-tokens-create-request",
                "camelCase": {
                  "unsafeName": "authTokensCreateRequest",
                  "safeName": "authTokensCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "auth_tokens_create_request",
                  "safeName": "auth_tokens_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKENS_CREATE_REQUEST",
                  "safeName": "AUTH_TOKENS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "AuthTokensCreateRequest",
                  "safeName": "AuthTokensCreateRequest"
                }
              },
              "typeId": "auth-tokens-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensCreateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-create-response",
                    "camelCase": {
                      "unsafeName": "authTokensCreateResponse",
                      "safeName": "authTokensCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_create_response",
                      "safeName": "auth_tokens_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_CREATE_RESPONSE",
                      "safeName": "AUTH_TOKENS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensCreateResponse",
                      "safeName": "AuthTokensCreateResponse"
                    }
                  },
                  "typeId": "auth-tokens-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensCreateExample": {
                      "access_token": "foo",
                      "client_id": "foo",
                      "expires_in": 42,
                      "refresh_token": "foo",
                      "scope": "foo",
                      "token_type": "bearer"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a JWT corresponding to the requested token type for the\nauthenticated user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "access_token": "foo",
                      "client_id": "foo",
                      "expires_in": 42,
                      "refresh_token": "foo",
                      "scope": "foo",
                      "token_type": "bearer"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestBadRequestError",
                    "safeName": "authTokensDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_bad_request_error",
                    "safeName": "auth_tokens_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestBadRequestError",
                    "safeName": "AuthTokensDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestUnauthorizedError",
                    "safeName": "authTokensDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_unauthorized_error",
                    "safeName": "auth_tokens_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestUnauthorizedError",
                    "safeName": "AuthTokensDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestForbiddenError",
                    "safeName": "authTokensDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_forbidden_error",
                    "safeName": "auth_tokens_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestForbiddenError",
                    "safeName": "AuthTokensDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestNotFoundError",
                    "safeName": "authTokensDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_not_found_error",
                    "safeName": "auth_tokens_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestNotFoundError",
                    "safeName": "AuthTokensDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestTooManyRequestsError",
                    "safeName": "authTokensDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_too_many_requests_error",
                    "safeName": "auth_tokens_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestTooManyRequestsError",
                    "safeName": "AuthTokensDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestInternalServerError",
                    "safeName": "authTokensDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_internal_server_error",
                    "safeName": "auth_tokens_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestInternalServerError",
                    "safeName": "AuthTokensDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensDeleteRequestServiceUnavailableError",
                    "safeName": "authTokensDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_delete_request_service_unavailable_error",
                    "safeName": "auth_tokens_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensDeleteRequestServiceUnavailableError",
                    "safeName": "AuthTokensDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-tokens-delete-request",
                "camelCase": {
                  "unsafeName": "authTokensDeleteRequest",
                  "safeName": "authTokensDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "auth_tokens_delete_request",
                  "safeName": "auth_tokens_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKENS_DELETE_REQUEST",
                  "safeName": "AUTH_TOKENS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "AuthTokensDeleteRequest",
                  "safeName": "AuthTokensDeleteRequest"
                }
              },
              "typeId": "auth-tokens-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensDeleteExample": {}
              }
            },
            "type": "reference"
          },
          "docs": "Revokes the token that matches the given token ID issued under the\ngiven Dev organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {}
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "token_id",
                  "camelCase": {
                    "unsafeName": "tokenId",
                    "safeName": "tokenId"
                  },
                  "snakeCase": {
                    "unsafeName": "token_id",
                    "safeName": "token_id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TOKEN_ID",
                    "safeName": "TOKEN_ID"
                  },
                  "pascalCase": {
                    "unsafeName": "TokenId",
                    "safeName": "TokenId"
                  }
                },
                "wireValue": "token_id"
              },
              "docs": "The unique identifier of the token under a given Dev organization.\n",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "token_id_example": "token_id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestBadRequestError",
                    "safeName": "authTokensGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_bad_request_error",
                    "safeName": "auth_tokens_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestBadRequestError",
                    "safeName": "AuthTokensGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestUnauthorizedError",
                    "safeName": "authTokensGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_unauthorized_error",
                    "safeName": "auth_tokens_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestUnauthorizedError",
                    "safeName": "AuthTokensGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestForbiddenError",
                    "safeName": "authTokensGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_forbidden_error",
                    "safeName": "auth_tokens_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestForbiddenError",
                    "safeName": "AuthTokensGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestNotFoundError",
                    "safeName": "authTokensGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_not_found_error",
                    "safeName": "auth_tokens_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestNotFoundError",
                    "safeName": "AuthTokensGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestTooManyRequestsError",
                    "safeName": "authTokensGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_too_many_requests_error",
                    "safeName": "auth_tokens_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestTooManyRequestsError",
                    "safeName": "AuthTokensGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestInternalServerError",
                    "safeName": "authTokensGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_internal_server_error",
                    "safeName": "auth_tokens_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestInternalServerError",
                    "safeName": "AuthTokensGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensGetRequestServiceUnavailableError",
                    "safeName": "authTokensGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_get_request_service_unavailable_error",
                    "safeName": "auth_tokens_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensGetRequestServiceUnavailableError",
                    "safeName": "AuthTokensGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-get-response",
                    "camelCase": {
                      "unsafeName": "authTokensGetResponse",
                      "safeName": "authTokensGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_get_response",
                      "safeName": "auth_tokens_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_GET_RESPONSE",
                      "safeName": "AUTH_TOKENS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensGetResponse",
                      "safeName": "AuthTokensGetResponse"
                    }
                  },
                  "typeId": "auth-tokens-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensGetExample": {
                      "token": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "client_id": "foo",
                        "expires_at": "foo",
                        "issued_at": "foo",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "foo"
                        ],
                        "status": "active",
                        "subject": "foo",
                        "token_hint": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the token metadata corresponding to the given token ID under the\ngiven Dev organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/auth-tokens.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "token_id": "token_id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "token": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "client_id": "foo",
                        "expires_at": "foo",
                        "issued_at": "foo",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "foo"
                        ],
                        "status": "active",
                        "subject": "foo",
                        "token_hint": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "client_id",
                  "camelCase": {
                    "unsafeName": "clientId",
                    "safeName": "clientId"
                  },
                  "snakeCase": {
                    "unsafeName": "client_id",
                    "safeName": "client_id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CLIENT_ID",
                    "safeName": "CLIENT_ID"
                  },
                  "pascalCase": {
                    "unsafeName": "ClientId",
                    "safeName": "ClientId"
                  }
                },
                "wireValue": "client_id"
              },
              "docs": "An identifier that represents the application, which requested the\ntoken. Only relevant for application access tokens.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "client_id_example": "client_id"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "requested_token_type",
                  "camelCase": {
                    "unsafeName": "requestedTokenType",
                    "safeName": "requestedTokenType"
                  },
                  "snakeCase": {
                    "unsafeName": "requested_token_type",
                    "safeName": "requested_token_type"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REQUESTED_TOKEN_TYPE",
                    "safeName": "REQUESTED_TOKEN_TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "RequestedTokenType",
                    "safeName": "RequestedTokenType"
                  }
                },
                "wireValue": "requested_token_type"
              },
              "docs": "The type of the requested token. If no value is specified, the\nresponse will include tokens of all the types.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "auth-token-requested-token-type",
                      "camelCase": {
                        "unsafeName": "authTokenRequestedTokenType",
                        "safeName": "authTokenRequestedTokenType"
                      },
                      "snakeCase": {
                        "unsafeName": "auth_token_requested_token_type",
                        "safeName": "auth_token_requested_token_type"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE",
                        "safeName": "AUTH_TOKEN_REQUESTED_TOKEN_TYPE"
                      },
                      "pascalCase": {
                        "unsafeName": "AuthTokenRequestedTokenType",
                        "safeName": "AuthTokenRequestedTokenType"
                      }
                    },
                    "typeId": "auth-token-requested-token-type",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "requested_token_type_example": "urn:devrev:params:oauth:token-type:aat"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "subject",
                  "camelCase": {
                    "unsafeName": "subject",
                    "safeName": "subject"
                  },
                  "snakeCase": {
                    "unsafeName": "subject",
                    "safeName": "subject"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "SUBJECT",
                    "safeName": "SUBJECT"
                  },
                  "pascalCase": {
                    "unsafeName": "Subject",
                    "safeName": "Subject"
                  }
                },
                "wireValue": "subject"
              },
              "docs": "The subject associated with the token. In the absence of this\nparameter, the ID of the authenticated entity is treated as the\nsubject.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "subject_example": "subject"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestBadRequestError",
                    "safeName": "authTokensListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_bad_request_error",
                    "safeName": "auth_tokens_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestBadRequestError",
                    "safeName": "AuthTokensListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestUnauthorizedError",
                    "safeName": "authTokensListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_unauthorized_error",
                    "safeName": "auth_tokens_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestUnauthorizedError",
                    "safeName": "AuthTokensListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestForbiddenError",
                    "safeName": "authTokensListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_forbidden_error",
                    "safeName": "auth_tokens_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestForbiddenError",
                    "safeName": "AuthTokensListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestNotFoundError",
                    "safeName": "authTokensListRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_not_found_error",
                    "safeName": "auth_tokens_list_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestNotFoundError",
                    "safeName": "AuthTokensListRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestTooManyRequestsError",
                    "safeName": "authTokensListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_too_many_requests_error",
                    "safeName": "auth_tokens_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestTooManyRequestsError",
                    "safeName": "AuthTokensListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestInternalServerError",
                    "safeName": "authTokensListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_internal_server_error",
                    "safeName": "auth_tokens_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestInternalServerError",
                    "safeName": "AuthTokensListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensListRequestServiceUnavailableError",
                    "safeName": "authTokensListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_list_request_service_unavailable_error",
                    "safeName": "auth_tokens_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensListRequestServiceUnavailableError",
                    "safeName": "AuthTokensListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-list-response",
                    "camelCase": {
                      "unsafeName": "authTokensListResponse",
                      "safeName": "authTokensListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_list_response",
                      "safeName": "auth_tokens_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_LIST_RESPONSE",
                      "safeName": "AUTH_TOKENS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensListResponse",
                      "safeName": "AuthTokensListResponse"
                    }
                  },
                  "typeId": "auth-tokens-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensListExample": {
                      "tokens": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "client_id": "foo",
                          "expires_at": "foo",
                          "issued_at": "foo",
                          "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                          "scopes": [
                            "foo"
                          ],
                          "status": "active",
                          "subject": "foo",
                          "token_hint": "foo"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the token metadata for all the tokens corresponding to the given\ntoken type issued for a given subject.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/auth-tokens.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tokens": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "client_id": "foo",
                          "expires_at": "foo",
                          "issued_at": "foo",
                          "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                          "scopes": [
                            "foo"
                          ],
                          "status": "active",
                          "subject": "foo",
                          "token_hint": "foo"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.self.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestBadRequestError",
                    "safeName": "authTokensSelfDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_bad_request_error",
                    "safeName": "auth_tokens_self_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestBadRequestError",
                    "safeName": "AuthTokensSelfDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestUnauthorizedError",
                    "safeName": "authTokensSelfDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_unauthorized_error",
                    "safeName": "auth_tokens_self_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestUnauthorizedError",
                    "safeName": "AuthTokensSelfDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestForbiddenError",
                    "safeName": "authTokensSelfDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_forbidden_error",
                    "safeName": "auth_tokens_self_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestForbiddenError",
                    "safeName": "AuthTokensSelfDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestNotFoundError",
                    "safeName": "authTokensSelfDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_not_found_error",
                    "safeName": "auth_tokens_self_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestNotFoundError",
                    "safeName": "AuthTokensSelfDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestTooManyRequestsError",
                    "safeName": "authTokensSelfDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_too_many_requests_error",
                    "safeName": "auth_tokens_self_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestTooManyRequestsError",
                    "safeName": "AuthTokensSelfDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestInternalServerError",
                    "safeName": "authTokensSelfDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_internal_server_error",
                    "safeName": "auth_tokens_self_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestInternalServerError",
                    "safeName": "AuthTokensSelfDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-self-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensSelfDeleteRequestServiceUnavailableError",
                    "safeName": "authTokensSelfDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_self_delete_request_service_unavailable_error",
                    "safeName": "auth_tokens_self_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensSelfDeleteRequestServiceUnavailableError",
                    "safeName": "AuthTokensSelfDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-self-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.self.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.selfDelete",
          "name": {
            "originalName": "selfDelete",
            "camelCase": {
              "unsafeName": "selfDelete",
              "safeName": "selfDelete"
            },
            "snakeCase": {
              "unsafeName": "self_delete",
              "safeName": "self_delete"
            },
            "screamingSnakeCase": {
              "unsafeName": "SELF_DELETE",
              "safeName": "SELF_DELETE"
            },
            "pascalCase": {
              "unsafeName": "SelfDelete",
              "safeName": "SelfDelete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-tokens-self-delete-request",
                "camelCase": {
                  "unsafeName": "authTokensSelfDeleteRequest",
                  "safeName": "authTokensSelfDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "auth_tokens_self_delete_request",
                  "safeName": "auth_tokens_self_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST",
                  "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "AuthTokensSelfDeleteRequest",
                  "safeName": "AuthTokensSelfDeleteRequest"
                }
              },
              "typeId": "auth-tokens-self-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensSelfDeleteExample": {}
              }
            },
            "type": "reference"
          },
          "docs": "Revokes all the tokens that matches the given token type created by the\nauthenticated user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensSelfDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.self.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {}
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/auth-tokens.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestBadRequestError",
                    "safeName": "authTokensUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_bad_request_error",
                    "safeName": "auth_tokens_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestBadRequestError",
                    "safeName": "AuthTokensUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestUnauthorizedError",
                    "safeName": "authTokensUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_unauthorized_error",
                    "safeName": "auth_tokens_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestUnauthorizedError",
                    "safeName": "AuthTokensUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestForbiddenError",
                    "safeName": "authTokensUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_forbidden_error",
                    "safeName": "auth_tokens_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestForbiddenError",
                    "safeName": "AuthTokensUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestNotFoundError",
                    "safeName": "authTokensUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_not_found_error",
                    "safeName": "auth_tokens_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestNotFoundError",
                    "safeName": "AuthTokensUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestTooManyRequestsError",
                    "safeName": "authTokensUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_too_many_requests_error",
                    "safeName": "auth_tokens_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestTooManyRequestsError",
                    "safeName": "AuthTokensUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestInternalServerError",
                    "safeName": "authTokensUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_internal_server_error",
                    "safeName": "auth_tokens_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestInternalServerError",
                    "safeName": "AuthTokensUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Auth-tokens-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "authTokensUpdateRequestServiceUnavailableError",
                    "safeName": "authTokensUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "auth_tokens_update_request_service_unavailable_error",
                    "safeName": "auth_tokens_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "AuthTokensUpdateRequestServiceUnavailableError",
                    "safeName": "AuthTokensUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Auth-tokens-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/auth-tokens.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authTokens.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "auth-tokens-update-request",
                "camelCase": {
                  "unsafeName": "authTokensUpdateRequest",
                  "safeName": "authTokensUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "auth_tokens_update_request",
                  "safeName": "auth_tokens_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST",
                  "safeName": "AUTH_TOKENS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "AuthTokensUpdateRequest",
                  "safeName": "AuthTokensUpdateRequest"
                }
              },
              "typeId": "auth-tokens-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authTokensUpdateExample": {
                  "token_hint": "foo",
                  "token_id": "foo"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "auth-tokens-update-response",
                    "camelCase": {
                      "unsafeName": "authTokensUpdateResponse",
                      "safeName": "authTokensUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "auth_tokens_update_response",
                      "safeName": "auth_tokens_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "AUTH_TOKENS_UPDATE_RESPONSE",
                      "safeName": "AUTH_TOKENS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "AuthTokensUpdateResponse",
                      "safeName": "AuthTokensUpdateResponse"
                    }
                  },
                  "typeId": "auth-tokens-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authTokensUpdateExample": {
                      "token": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "client_id": "foo",
                        "expires_at": "foo",
                        "issued_at": "foo",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "foo"
                        ],
                        "status": "active",
                        "subject": "foo",
                        "token_hint": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates token metadata of a token issued under a given Dev\norganization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authTokensUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/auth-tokens.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "token_hint": "foo",
                    "token_id": "foo"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "token": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "client_id": "foo",
                        "expires_at": "foo",
                        "issued_at": "foo",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "foo"
                        ],
                        "status": "active",
                        "subject": "foo",
                        "token_hint": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_authConnection": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "auth-connection",
              "camelCase": {
                "unsafeName": "authConnection",
                "safeName": "authConnection"
              },
              "snakeCase": {
                "unsafeName": "auth_connection",
                "safeName": "auth_connection"
              },
              "screamingSnakeCase": {
                "unsafeName": "AUTH_CONNECTION",
                "safeName": "AUTH_CONNECTION"
              },
              "pascalCase": {
                "unsafeName": "AuthConnection",
                "safeName": "AuthConnection"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "auth-connection",
            "camelCase": {
              "unsafeName": "authConnection",
              "safeName": "authConnection"
            },
            "snakeCase": {
              "unsafeName": "auth_connection",
              "safeName": "auth_connection"
            },
            "screamingSnakeCase": {
              "unsafeName": "AUTH_CONNECTION",
              "safeName": "AUTH_CONNECTION"
            },
            "pascalCase": {
              "unsafeName": "AuthConnection",
              "safeName": "AuthConnection"
            }
          }
        }
      },
      "displayName": "auth-connection",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_create_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-create",
          "name": {
            "originalName": "dev-org-auth-connections-create",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsCreate",
              "safeName": "devOrgAuthConnectionsCreate"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_create",
              "safeName": "dev_org_auth_connections_create"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsCreate",
              "safeName": "DevOrgAuthConnectionsCreate"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-create-request",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsCreateRequest",
                  "safeName": "devOrgAuthConnectionsCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_create_request",
                  "safeName": "dev_org_auth_connections_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsCreateRequest",
                  "safeName": "DevOrgAuthConnectionsCreateRequest"
                }
              },
              "typeId": "dev-org-auth-connections-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsCreateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-org-auth-connections-create-response",
                    "camelCase": {
                      "unsafeName": "devOrgAuthConnectionsCreateResponse",
                      "safeName": "devOrgAuthConnectionsCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_org_auth_connections_create_response",
                      "safeName": "dev_org_auth_connections_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_RESPONSE",
                      "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevOrgAuthConnectionsCreateResponse",
                      "safeName": "DevOrgAuthConnectionsCreateResponse"
                    }
                  },
                  "typeId": "dev-org-auth-connections-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsCreateExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new enterprise authentication connection for a Dev\norganization. This authentication connection will not be enabled by\ndefault for the organization and the user will need to explicitly\nenable this. Keep in mind that at a time, only one authentication\nconnection can be enabled for a Dev organization. At present, only 5\nenterprise connections can be created by an organization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestNotFoundError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_not_found_error",
                    "safeName": "dev_org_auth_connections_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_delete_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-delete",
          "name": {
            "originalName": "dev-org-auth-connections-delete",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsDelete",
              "safeName": "devOrgAuthConnectionsDelete"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_delete",
              "safeName": "dev_org_auth_connections_delete"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsDelete",
              "safeName": "DevOrgAuthConnectionsDelete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-delete-request",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsDeleteRequest",
                  "safeName": "devOrgAuthConnectionsDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_delete_request",
                  "safeName": "dev_org_auth_connections_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsDeleteRequest",
                  "safeName": "DevOrgAuthConnectionsDeleteRequest"
                }
              },
              "typeId": "dev-org-auth-connections-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsDeleteExample": {
                  "id": "foo"
                }
              }
            },
            "type": "reference"
          },
          "docs": "Deletes an authentication connection. Only enterprise connections which\nare explicitly set up for a Dev organization can be deleted. Default\nconnections can not be deleted using this method.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "foo"
                  }
                },
                "response": {}
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "ID of the authentication connection.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestNotFoundError",
                    "safeName": "devOrgAuthConnectionsGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_not_found_error",
                    "safeName": "dev_org_auth_connections_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestNotFoundError",
                    "safeName": "DevOrgAuthConnectionsGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_get_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-get",
          "name": {
            "originalName": "dev-org-auth-connections-get",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsGet",
              "safeName": "devOrgAuthConnectionsGet"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_get",
              "safeName": "dev_org_auth_connections_get"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsGet",
              "safeName": "DevOrgAuthConnectionsGet"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-org-auth-connections-get-response",
                    "camelCase": {
                      "unsafeName": "devOrgAuthConnectionsGetResponse",
                      "safeName": "devOrgAuthConnectionsGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_org_auth_connections_get_response",
                      "safeName": "dev_org_auth_connections_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_RESPONSE",
                      "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevOrgAuthConnectionsGetResponse",
                      "safeName": "DevOrgAuthConnectionsGetResponse"
                    }
                  },
                  "typeId": "dev-org-auth-connections-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsGetExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieves the details for an authentication connection.",
          "v2Examples": {
            "autogeneratedExamples": {
              "devOrgAuthConnectionsGetExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-orgs.auth-connections.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsListRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_list_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-list",
          "name": {
            "originalName": "dev-org-auth-connections-list",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsList",
              "safeName": "devOrgAuthConnectionsList"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_list",
              "safeName": "dev_org_auth_connections_list"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsList",
              "safeName": "DevOrgAuthConnectionsList"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-org-auth-connections-list-response",
                    "camelCase": {
                      "unsafeName": "devOrgAuthConnectionsListResponse",
                      "safeName": "devOrgAuthConnectionsListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_org_auth_connections_list_response",
                      "safeName": "dev_org_auth_connections_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_RESPONSE",
                      "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevOrgAuthConnectionsListResponse",
                      "safeName": "DevOrgAuthConnectionsListResponse"
                    }
                  },
                  "typeId": "dev-org-auth-connections-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsListExample": {
                      "auth_connections": [
                        {}
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists all the authentication connections available for a Dev\norganization. This list will include both social and enterprise\nconnections which are either available by default or are explicitly\ncreated by the user.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "devOrgAuthConnectionsListExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-orgs.auth-connections.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "auth_connections": [
                        {}
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.toggle",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsToggleRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_toggle_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_toggle_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsToggleRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_toggle_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestNotFoundError",
                    "safeName": "devOrgAuthConnectionsToggleRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_not_found_error",
                    "safeName": "dev_org_auth_connections_toggle_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestNotFoundError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_toggle_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsToggleRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_toggle_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_toggle_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_toggle_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.toggle",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-toggle",
          "name": {
            "originalName": "dev-org-auth-connections-toggle",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsToggle",
              "safeName": "devOrgAuthConnectionsToggle"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_toggle",
              "safeName": "dev_org_auth_connections_toggle"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsToggle",
              "safeName": "DevOrgAuthConnectionsToggle"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-toggle-request",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsToggleRequest",
                  "safeName": "devOrgAuthConnectionsToggleRequest"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_toggle_request",
                  "safeName": "dev_org_auth_connections_toggle_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsToggleRequest",
                  "safeName": "DevOrgAuthConnectionsToggleRequest"
                }
              },
              "typeId": "dev-org-auth-connections-toggle-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsToggleExample": {
                  "id": "foo"
                }
              }
            },
            "type": "reference"
          },
          "docs": "Enable or disable an authentication connection for a Dev organization.\nCurrently, only 1 authentication connection can be enabled at a time.\nWhen a new authentication connection is enabled, the connection which\nis currently enabled for the Dev organization is automatically\ndisabled.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsToggleExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.toggle"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "foo"
                  }
                },
                "response": {}
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-orgs.auth-connections.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestBadRequestError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_bad_request_error",
                    "safeName": "dev_org_auth_connections_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_unauthorized_error",
                    "safeName": "dev_org_auth_connections_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestForbiddenError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_forbidden_error",
                    "safeName": "dev_org_auth_connections_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestNotFoundError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_not_found_error",
                    "safeName": "dev_org_auth_connections_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_too_many_requests_error",
                    "safeName": "dev_org_auth_connections_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestInternalServerError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_internal_server_error",
                    "safeName": "dev_org_auth_connections_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError",
                    "safeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_org_auth_connections_update_request_service_unavailable_error",
                    "safeName": "dev_org_auth_connections_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError",
                    "safeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-orgs.auth-connections.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_authConnection.dev-org-auth-connections-update",
          "name": {
            "originalName": "dev-org-auth-connections-update",
            "camelCase": {
              "unsafeName": "devOrgAuthConnectionsUpdate",
              "safeName": "devOrgAuthConnectionsUpdate"
            },
            "snakeCase": {
              "unsafeName": "dev_org_auth_connections_update",
              "safeName": "dev_org_auth_connections_update"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE",
              "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE"
            },
            "pascalCase": {
              "unsafeName": "DevOrgAuthConnectionsUpdate",
              "safeName": "DevOrgAuthConnectionsUpdate"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "dev-org-auth-connections-update-request",
                "camelCase": {
                  "unsafeName": "devOrgAuthConnectionsUpdateRequest",
                  "safeName": "devOrgAuthConnectionsUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "dev_org_auth_connections_update_request",
                  "safeName": "dev_org_auth_connections_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST",
                  "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "DevOrgAuthConnectionsUpdateRequest",
                  "safeName": "DevOrgAuthConnectionsUpdateRequest"
                }
              },
              "typeId": "dev-org-auth-connections-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "authConnectionDevOrgAuthConnectionsUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-org-auth-connections-update-response",
                    "camelCase": {
                      "unsafeName": "devOrgAuthConnectionsUpdateResponse",
                      "safeName": "devOrgAuthConnectionsUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_org_auth_connections_update_response",
                      "safeName": "dev_org_auth_connections_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_RESPONSE",
                      "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevOrgAuthConnectionsUpdateResponse",
                      "safeName": "DevOrgAuthConnectionsUpdateResponse"
                    }
                  },
                  "typeId": "dev-org-auth-connections-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "authConnectionDevOrgAuthConnectionsUpdateExample": {
                      "auth_connection": {}
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates an authentication connection.",
          "v2Examples": {
            "autogeneratedExamples": {
              "authConnectionDevOrgAuthConnectionsUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/dev-orgs.auth-connections.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "auth_connection": {}
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_devUsers": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "dev-users",
              "camelCase": {
                "unsafeName": "devUsers",
                "safeName": "devUsers"
              },
              "snakeCase": {
                "unsafeName": "dev_users",
                "safeName": "dev_users"
              },
              "screamingSnakeCase": {
                "unsafeName": "DEV_USERS",
                "safeName": "DEV_USERS"
              },
              "pascalCase": {
                "unsafeName": "DevUsers",
                "safeName": "DevUsers"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "dev-users",
            "camelCase": {
              "unsafeName": "devUsers",
              "safeName": "devUsers"
            },
            "snakeCase": {
              "unsafeName": "dev_users",
              "safeName": "dev_users"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_USERS",
              "safeName": "DEV_USERS"
            },
            "pascalCase": {
              "unsafeName": "DevUsers",
              "safeName": "DevUsers"
            }
          }
        }
      },
      "displayName": "dev-users",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-users.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "email",
                  "camelCase": {
                    "unsafeName": "email",
                    "safeName": "email"
                  },
                  "snakeCase": {
                    "unsafeName": "email",
                    "safeName": "email"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "EMAIL",
                    "safeName": "EMAIL"
                  },
                  "pascalCase": {
                    "unsafeName": "Email",
                    "safeName": "Email"
                  }
                },
                "wireValue": "email"
              },
              "docs": "Filters Dev users based on email addresses.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "email_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of Dev users to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "sort_by",
                  "camelCase": {
                    "unsafeName": "sortBy",
                    "safeName": "sortBy"
                  },
                  "snakeCase": {
                    "unsafeName": "sort_by",
                    "safeName": "sort_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "SORT_BY",
                    "safeName": "SORT_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "SortBy",
                    "safeName": "SortBy"
                  }
                },
                "wireValue": "sort_by"
              },
              "docs": "Fields to sort the Dev users by and the direction to sort them.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "sort_by_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "state",
                  "camelCase": {
                    "unsafeName": "state",
                    "safeName": "state"
                  },
                  "snakeCase": {
                    "unsafeName": "state",
                    "safeName": "state"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "STATE",
                    "safeName": "STATE"
                  },
                  "pascalCase": {
                    "unsafeName": "State",
                    "safeName": "State"
                  }
                },
                "wireValue": "state"
              },
              "docs": "Filters Dev users based on state.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "user-state",
                          "camelCase": {
                            "unsafeName": "userState",
                            "safeName": "userState"
                          },
                          "snakeCase": {
                            "unsafeName": "user_state",
                            "safeName": "user_state"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "USER_STATE",
                            "safeName": "USER_STATE"
                          },
                          "pascalCase": {
                            "unsafeName": "UserState",
                            "safeName": "UserState"
                          }
                        },
                        "typeId": "user-state",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "state_example": [
                    "active"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestBadRequestError",
                    "safeName": "devUsersListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_bad_request_error",
                    "safeName": "dev_users_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestBadRequestError",
                    "safeName": "DevUsersListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestUnauthorizedError",
                    "safeName": "devUsersListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_unauthorized_error",
                    "safeName": "dev_users_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestUnauthorizedError",
                    "safeName": "DevUsersListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestForbiddenError",
                    "safeName": "devUsersListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_forbidden_error",
                    "safeName": "dev_users_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestForbiddenError",
                    "safeName": "DevUsersListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestTooManyRequestsError",
                    "safeName": "devUsersListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_too_many_requests_error",
                    "safeName": "dev_users_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestTooManyRequestsError",
                    "safeName": "DevUsersListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestInternalServerError",
                    "safeName": "devUsersListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_internal_server_error",
                    "safeName": "dev_users_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestInternalServerError",
                    "safeName": "DevUsersListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devUsersListRequestServiceUnavailableError",
                    "safeName": "devUsersListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_list_request_service_unavailable_error",
                    "safeName": "dev_users_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersListRequestServiceUnavailableError",
                    "safeName": "DevUsersListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-users.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_devUsers.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-users-list-response",
                    "camelCase": {
                      "unsafeName": "devUsersListResponse",
                      "safeName": "devUsersListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_users_list_response",
                      "safeName": "dev_users_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_USERS_LIST_RESPONSE",
                      "safeName": "DEV_USERS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevUsersListResponse",
                      "safeName": "DevUsersListResponse"
                    }
                  },
                  "typeId": "dev-users-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "devUsersListExample": {
                      "dev_users": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "phone_numbers": [
                            "foo"
                          ],
                          "state": "active",
                          "external_identities": [
                            {}
                          ]
                        }
                      ],
                      "next_cursor": "foo",
                      "prev_cursor": "foo"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists users within your organization.",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-users.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "dev_users": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "phone_numbers": [
                            "foo"
                          ],
                          "state": "active",
                          "external_identities": [
                            {}
                          ]
                        }
                      ],
                      "next_cursor": "foo",
                      "prev_cursor": "foo"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/dev-users.self",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestBadRequestError",
                    "safeName": "devUsersSelfRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_bad_request_error",
                    "safeName": "dev_users_self_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestBadRequestError",
                    "safeName": "DevUsersSelfRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestUnauthorizedError",
                    "safeName": "devUsersSelfRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_unauthorized_error",
                    "safeName": "dev_users_self_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestUnauthorizedError",
                    "safeName": "DevUsersSelfRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestForbiddenError",
                    "safeName": "devUsersSelfRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_forbidden_error",
                    "safeName": "dev_users_self_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestForbiddenError",
                    "safeName": "DevUsersSelfRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestTooManyRequestsError",
                    "safeName": "devUsersSelfRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_too_many_requests_error",
                    "safeName": "dev_users_self_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestTooManyRequestsError",
                    "safeName": "DevUsersSelfRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestInternalServerError",
                    "safeName": "devUsersSelfRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_internal_server_error",
                    "safeName": "dev_users_self_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestInternalServerError",
                    "safeName": "DevUsersSelfRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Dev-users-selfRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "devUsersSelfRequestServiceUnavailableError",
                    "safeName": "devUsersSelfRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "dev_users_self_request_service_unavailable_error",
                    "safeName": "dev_users_self_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "DevUsersSelfRequestServiceUnavailableError",
                    "safeName": "DevUsersSelfRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Dev-users-selfRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/dev-users.self",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_devUsers.self",
          "name": {
            "originalName": "self",
            "camelCase": {
              "unsafeName": "self",
              "safeName": "self"
            },
            "snakeCase": {
              "unsafeName": "self",
              "safeName": "self"
            },
            "screamingSnakeCase": {
              "unsafeName": "SELF",
              "safeName": "SELF"
            },
            "pascalCase": {
              "unsafeName": "Self",
              "safeName": "Self"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "dev-users-self-response",
                    "camelCase": {
                      "unsafeName": "devUsersSelfResponse",
                      "safeName": "devUsersSelfResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "dev_users_self_response",
                      "safeName": "dev_users_self_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "DEV_USERS_SELF_RESPONSE",
                      "safeName": "DEV_USERS_SELF_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "DevUsersSelfResponse",
                      "safeName": "DevUsersSelfResponse"
                    }
                  },
                  "typeId": "dev-users-self-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "devUsersSelfExample": {
                      "dev_user": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "display_picture": {
                          "display_id": "foo",
                          "id": "foo"
                        },
                        "email": "foo",
                        "full_name": "foo",
                        "phone_numbers": [
                          "foo"
                        ],
                        "state": "active",
                        "external_identities": [
                          {}
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the authenticated user's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "selfExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/dev-users.self"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "dev_user": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "display_picture": {
                          "display_id": "foo",
                          "id": "foo"
                        },
                        "email": "foo",
                        "full_name": "foo",
                        "phone_numbers": [
                          "foo"
                        ],
                        "state": "active",
                        "external_identities": [
                          {}
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_parts": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "parts",
              "camelCase": {
                "unsafeName": "parts",
                "safeName": "parts"
              },
              "snakeCase": {
                "unsafeName": "parts",
                "safeName": "parts"
              },
              "screamingSnakeCase": {
                "unsafeName": "PARTS",
                "safeName": "PARTS"
              },
              "pascalCase": {
                "unsafeName": "Parts",
                "safeName": "Parts"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "parts",
            "camelCase": {
              "unsafeName": "parts",
              "safeName": "parts"
            },
            "snakeCase": {
              "unsafeName": "parts",
              "safeName": "parts"
            },
            "screamingSnakeCase": {
              "unsafeName": "PARTS",
              "safeName": "PARTS"
            },
            "pascalCase": {
              "unsafeName": "Parts",
              "safeName": "Parts"
            }
          }
        }
      },
      "displayName": "parts",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestBadRequestError",
                    "safeName": "partsCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_bad_request_error",
                    "safeName": "parts_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestBadRequestError",
                    "safeName": "PartsCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestUnauthorizedError",
                    "safeName": "partsCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_unauthorized_error",
                    "safeName": "parts_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestUnauthorizedError",
                    "safeName": "PartsCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestForbiddenError",
                    "safeName": "partsCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_forbidden_error",
                    "safeName": "parts_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestForbiddenError",
                    "safeName": "PartsCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestTooManyRequestsError",
                    "safeName": "partsCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_too_many_requests_error",
                    "safeName": "parts_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestTooManyRequestsError",
                    "safeName": "PartsCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestInternalServerError",
                    "safeName": "partsCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_internal_server_error",
                    "safeName": "parts_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestInternalServerError",
                    "safeName": "PartsCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "partsCreateRequestServiceUnavailableError",
                    "safeName": "partsCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_create_request_service_unavailable_error",
                    "safeName": "parts_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsCreateRequestServiceUnavailableError",
                    "safeName": "PartsCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "parts-create-request",
                "camelCase": {
                  "unsafeName": "partsCreateRequest",
                  "safeName": "partsCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "parts_create_request",
                  "safeName": "parts_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_CREATE_REQUEST",
                  "safeName": "PARTS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "PartsCreateRequest",
                  "safeName": "PartsCreateRequest"
                }
              },
              "typeId": "parts-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsCreateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-create-response",
                    "camelCase": {
                      "unsafeName": "partsCreateResponse",
                      "safeName": "partsCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_create_response",
                      "safeName": "parts_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_CREATE_RESPONSE",
                      "safeName": "PARTS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsCreateResponse",
                      "safeName": "PartsCreateResponse"
                    }
                  },
                  "typeId": "parts-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsCreateExample": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestBadRequestError",
                    "safeName": "partsDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_bad_request_error",
                    "safeName": "parts_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestBadRequestError",
                    "safeName": "PartsDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestUnauthorizedError",
                    "safeName": "partsDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_unauthorized_error",
                    "safeName": "parts_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestUnauthorizedError",
                    "safeName": "PartsDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestForbiddenError",
                    "safeName": "partsDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_forbidden_error",
                    "safeName": "parts_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestForbiddenError",
                    "safeName": "PartsDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestNotFoundError",
                    "safeName": "partsDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_not_found_error",
                    "safeName": "parts_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestNotFoundError",
                    "safeName": "PartsDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestTooManyRequestsError",
                    "safeName": "partsDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_too_many_requests_error",
                    "safeName": "parts_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestTooManyRequestsError",
                    "safeName": "PartsDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestInternalServerError",
                    "safeName": "partsDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_internal_server_error",
                    "safeName": "parts_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestInternalServerError",
                    "safeName": "PartsDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "partsDeleteRequestServiceUnavailableError",
                    "safeName": "partsDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_delete_request_service_unavailable_error",
                    "safeName": "parts_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsDeleteRequestServiceUnavailableError",
                    "safeName": "PartsDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "parts-delete-request",
                "camelCase": {
                  "unsafeName": "partsDeleteRequest",
                  "safeName": "partsDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "parts_delete_request",
                  "safeName": "parts_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_DELETE_REQUEST",
                  "safeName": "PARTS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "PartsDeleteRequest",
                  "safeName": "PartsDeleteRequest"
                }
              },
              "typeId": "parts-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-delete-response",
                    "camelCase": {
                      "unsafeName": "partsDeleteResponse",
                      "safeName": "partsDeleteResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_delete_response",
                      "safeName": "parts_delete_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_DELETE_RESPONSE",
                      "safeName": "PARTS_DELETE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsDeleteResponse",
                      "safeName": "PartsDeleteResponse"
                    }
                  },
                  "typeId": "parts-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The ID of the part to retrieve.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestBadRequestError",
                    "safeName": "partsGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_bad_request_error",
                    "safeName": "parts_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestBadRequestError",
                    "safeName": "PartsGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestUnauthorizedError",
                    "safeName": "partsGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_unauthorized_error",
                    "safeName": "parts_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestUnauthorizedError",
                    "safeName": "PartsGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestForbiddenError",
                    "safeName": "partsGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_forbidden_error",
                    "safeName": "parts_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestForbiddenError",
                    "safeName": "PartsGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestNotFoundError",
                    "safeName": "partsGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_not_found_error",
                    "safeName": "parts_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestNotFoundError",
                    "safeName": "PartsGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestTooManyRequestsError",
                    "safeName": "partsGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_too_many_requests_error",
                    "safeName": "parts_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestTooManyRequestsError",
                    "safeName": "PartsGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestInternalServerError",
                    "safeName": "partsGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_internal_server_error",
                    "safeName": "parts_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestInternalServerError",
                    "safeName": "PartsGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "partsGetRequestServiceUnavailableError",
                    "safeName": "partsGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_get_request_service_unavailable_error",
                    "safeName": "parts_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsGetRequestServiceUnavailableError",
                    "safeName": "PartsGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-get-response",
                    "camelCase": {
                      "unsafeName": "partsGetResponse",
                      "safeName": "partsGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_get_response",
                      "safeName": "parts_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_GET_RESPONSE",
                      "safeName": "PARTS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsGetResponse",
                      "safeName": "PartsGetResponse"
                    }
                  },
                  "typeId": "parts-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsGetExample": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/parts.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "created_by",
                  "camelCase": {
                    "unsafeName": "createdBy",
                    "safeName": "createdBy"
                  },
                  "snakeCase": {
                    "unsafeName": "created_by",
                    "safeName": "created_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_BY",
                    "safeName": "CREATED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedBy",
                    "safeName": "CreatedBy"
                  }
                },
                "wireValue": "created_by"
              },
              "docs": "Filters for parts created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of parts to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "name",
                  "camelCase": {
                    "unsafeName": "name",
                    "safeName": "name"
                  },
                  "snakeCase": {
                    "unsafeName": "name",
                    "safeName": "name"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "NAME",
                    "safeName": "NAME"
                  },
                  "pascalCase": {
                    "unsafeName": "Name",
                    "safeName": "Name"
                  }
                },
                "wireValue": "name"
              },
              "docs": "Filters for parts of the provided name(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "name_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "owned_by",
                  "camelCase": {
                    "unsafeName": "ownedBy",
                    "safeName": "ownedBy"
                  },
                  "snakeCase": {
                    "unsafeName": "owned_by",
                    "safeName": "owned_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "OWNED_BY",
                    "safeName": "OWNED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "OwnedBy",
                    "safeName": "OwnedBy"
                  }
                },
                "wireValue": "owned_by"
              },
              "docs": "Filters for parts owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TYPE",
                    "safeName": "TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Type",
                    "safeName": "Type"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for parts of the provided type(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "part-type",
                          "camelCase": {
                            "unsafeName": "partType",
                            "safeName": "partType"
                          },
                          "snakeCase": {
                            "unsafeName": "part_type",
                            "safeName": "part_type"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "PART_TYPE",
                            "safeName": "PART_TYPE"
                          },
                          "pascalCase": {
                            "unsafeName": "PartType",
                            "safeName": "PartType"
                          }
                        },
                        "typeId": "part-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "capability"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "partsListRequestBadRequestError",
                    "safeName": "partsListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_bad_request_error",
                    "safeName": "parts_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestBadRequestError",
                    "safeName": "PartsListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "partsListRequestUnauthorizedError",
                    "safeName": "partsListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_unauthorized_error",
                    "safeName": "parts_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestUnauthorizedError",
                    "safeName": "PartsListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "partsListRequestForbiddenError",
                    "safeName": "partsListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_forbidden_error",
                    "safeName": "parts_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestForbiddenError",
                    "safeName": "PartsListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "partsListRequestTooManyRequestsError",
                    "safeName": "partsListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_too_many_requests_error",
                    "safeName": "parts_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestTooManyRequestsError",
                    "safeName": "PartsListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "partsListRequestInternalServerError",
                    "safeName": "partsListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_internal_server_error",
                    "safeName": "parts_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestInternalServerError",
                    "safeName": "PartsListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "partsListRequestServiceUnavailableError",
                    "safeName": "partsListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_list_request_service_unavailable_error",
                    "safeName": "parts_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsListRequestServiceUnavailableError",
                    "safeName": "PartsListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-list-response",
                    "camelCase": {
                      "unsafeName": "partsListResponse",
                      "safeName": "partsListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_list_response",
                      "safeName": "parts_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_LIST_RESPONSE",
                      "safeName": "PARTS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsListResponse",
                      "safeName": "PartsListResponse"
                    }
                  },
                  "typeId": "parts-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsListExample": {
                      "next_cursor": "foo",
                      "parts": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "description": "foo",
                          "name": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ]
                        }
                      ],
                      "prev_cursor": "foo"
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/parts.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "foo",
                      "parts": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "description": "foo",
                          "name": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ]
                        }
                      ],
                      "prev_cursor": "foo"
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/parts.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestBadRequestError",
                    "safeName": "partsUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_bad_request_error",
                    "safeName": "parts_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestBadRequestError",
                    "safeName": "PartsUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestUnauthorizedError",
                    "safeName": "partsUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_unauthorized_error",
                    "safeName": "parts_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestUnauthorizedError",
                    "safeName": "PartsUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestForbiddenError",
                    "safeName": "partsUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_forbidden_error",
                    "safeName": "parts_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestForbiddenError",
                    "safeName": "PartsUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestNotFoundError",
                    "safeName": "partsUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_not_found_error",
                    "safeName": "parts_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestNotFoundError",
                    "safeName": "PartsUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestTooManyRequestsError",
                    "safeName": "partsUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_too_many_requests_error",
                    "safeName": "parts_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestTooManyRequestsError",
                    "safeName": "PartsUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestInternalServerError",
                    "safeName": "partsUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_internal_server_error",
                    "safeName": "parts_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestInternalServerError",
                    "safeName": "PartsUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Parts-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "partsUpdateRequestServiceUnavailableError",
                    "safeName": "partsUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "parts_update_request_service_unavailable_error",
                    "safeName": "parts_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "PartsUpdateRequestServiceUnavailableError",
                    "safeName": "PartsUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Parts-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/parts.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_parts.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "parts-update-request",
                "camelCase": {
                  "unsafeName": "partsUpdateRequest",
                  "safeName": "partsUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "parts_update_request",
                  "safeName": "parts_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PARTS_UPDATE_REQUEST",
                  "safeName": "PARTS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "PartsUpdateRequest",
                  "safeName": "PartsUpdateRequest"
                }
              },
              "typeId": "parts-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "partsUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "parts-update-response",
                    "camelCase": {
                      "unsafeName": "partsUpdateResponse",
                      "safeName": "partsUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "parts_update_response",
                      "safeName": "parts_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "PARTS_UPDATE_RESPONSE",
                      "safeName": "PARTS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "PartsUpdateResponse",
                      "safeName": "PartsUpdateResponse"
                    }
                  },
                  "typeId": "parts-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "partsUpdateExample": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "partsUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/parts.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "part": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "description": "foo",
                        "name": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ]
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_revOrgs": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "rev-orgs",
              "camelCase": {
                "unsafeName": "revOrgs",
                "safeName": "revOrgs"
              },
              "snakeCase": {
                "unsafeName": "rev_orgs",
                "safeName": "rev_orgs"
              },
              "screamingSnakeCase": {
                "unsafeName": "REV_ORGS",
                "safeName": "REV_ORGS"
              },
              "pascalCase": {
                "unsafeName": "RevOrgs",
                "safeName": "RevOrgs"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "rev-orgs",
            "camelCase": {
              "unsafeName": "revOrgs",
              "safeName": "revOrgs"
            },
            "snakeCase": {
              "unsafeName": "rev_orgs",
              "safeName": "rev_orgs"
            },
            "screamingSnakeCase": {
              "unsafeName": "REV_ORGS",
              "safeName": "REV_ORGS"
            },
            "pascalCase": {
              "unsafeName": "RevOrgs",
              "safeName": "RevOrgs"
            }
          }
        }
      },
      "displayName": "rev-orgs",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestBadRequestError",
                    "safeName": "revOrgsCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_bad_request_error",
                    "safeName": "rev_orgs_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestBadRequestError",
                    "safeName": "RevOrgsCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestUnauthorizedError",
                    "safeName": "revOrgsCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_unauthorized_error",
                    "safeName": "rev_orgs_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestUnauthorizedError",
                    "safeName": "RevOrgsCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestForbiddenError",
                    "safeName": "revOrgsCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_forbidden_error",
                    "safeName": "rev_orgs_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestForbiddenError",
                    "safeName": "RevOrgsCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestTooManyRequestsError",
                    "safeName": "revOrgsCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_too_many_requests_error",
                    "safeName": "rev_orgs_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestTooManyRequestsError",
                    "safeName": "RevOrgsCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestInternalServerError",
                    "safeName": "revOrgsCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_internal_server_error",
                    "safeName": "rev_orgs_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestInternalServerError",
                    "safeName": "RevOrgsCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "revOrgsCreateRequestServiceUnavailableError",
                    "safeName": "revOrgsCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_create_request_service_unavailable_error",
                    "safeName": "rev_orgs_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsCreateRequestServiceUnavailableError",
                    "safeName": "RevOrgsCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-orgs-create-request",
                "camelCase": {
                  "unsafeName": "revOrgsCreateRequest",
                  "safeName": "revOrgsCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "rev_orgs_create_request",
                  "safeName": "rev_orgs_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORGS_CREATE_REQUEST",
                  "safeName": "REV_ORGS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgsCreateRequest",
                  "safeName": "RevOrgsCreateRequest"
                }
              },
              "typeId": "rev-orgs-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsCreateExample": {
                  "display_name": "foo"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-orgs-create-response",
                    "camelCase": {
                      "unsafeName": "revOrgsCreateResponse",
                      "safeName": "revOrgsCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_orgs_create_response",
                      "safeName": "rev_orgs_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORGS_CREATE_RESPONSE",
                      "safeName": "REV_ORGS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrgsCreateResponse",
                      "safeName": "RevOrgsCreateResponse"
                    }
                  },
                  "typeId": "rev-orgs-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsCreateExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a Rev organization in the authenticated user's Dev\norganization.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "display_name": "foo"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestBadRequestError",
                    "safeName": "revOrgsDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_bad_request_error",
                    "safeName": "rev_orgs_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestBadRequestError",
                    "safeName": "RevOrgsDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestUnauthorizedError",
                    "safeName": "revOrgsDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_unauthorized_error",
                    "safeName": "rev_orgs_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestUnauthorizedError",
                    "safeName": "RevOrgsDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestForbiddenError",
                    "safeName": "revOrgsDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_forbidden_error",
                    "safeName": "rev_orgs_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestForbiddenError",
                    "safeName": "RevOrgsDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestNotFoundError",
                    "safeName": "revOrgsDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_not_found_error",
                    "safeName": "rev_orgs_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestNotFoundError",
                    "safeName": "RevOrgsDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestTooManyRequestsError",
                    "safeName": "revOrgsDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_too_many_requests_error",
                    "safeName": "rev_orgs_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestTooManyRequestsError",
                    "safeName": "RevOrgsDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestInternalServerError",
                    "safeName": "revOrgsDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_internal_server_error",
                    "safeName": "rev_orgs_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestInternalServerError",
                    "safeName": "RevOrgsDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "revOrgsDeleteRequestServiceUnavailableError",
                    "safeName": "revOrgsDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_delete_request_service_unavailable_error",
                    "safeName": "rev_orgs_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsDeleteRequestServiceUnavailableError",
                    "safeName": "RevOrgsDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-orgs-delete-request",
                "camelCase": {
                  "unsafeName": "revOrgsDeleteRequest",
                  "safeName": "revOrgsDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "rev_orgs_delete_request",
                  "safeName": "rev_orgs_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORGS_DELETE_REQUEST",
                  "safeName": "REV_ORGS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgsDeleteRequest",
                  "safeName": "RevOrgsDeleteRequest"
                }
              },
              "typeId": "rev-orgs-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsDeleteExample": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-orgs-delete-response",
                    "camelCase": {
                      "unsafeName": "revOrgsDeleteResponse",
                      "safeName": "revOrgsDeleteResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_orgs_delete_response",
                      "safeName": "rev_orgs_delete_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORGS_DELETE_RESPONSE",
                      "safeName": "REV_ORGS_DELETE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrgsDeleteResponse",
                      "safeName": "RevOrgsDeleteResponse"
                    }
                  },
                  "typeId": "rev-orgs-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes the Rev organization.",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The ID of the required Rev organization.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestBadRequestError",
                    "safeName": "revOrgsGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_bad_request_error",
                    "safeName": "rev_orgs_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestBadRequestError",
                    "safeName": "RevOrgsGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestUnauthorizedError",
                    "safeName": "revOrgsGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_unauthorized_error",
                    "safeName": "rev_orgs_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestUnauthorizedError",
                    "safeName": "RevOrgsGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestForbiddenError",
                    "safeName": "revOrgsGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_forbidden_error",
                    "safeName": "rev_orgs_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestForbiddenError",
                    "safeName": "RevOrgsGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestNotFoundError",
                    "safeName": "revOrgsGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_not_found_error",
                    "safeName": "rev_orgs_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestNotFoundError",
                    "safeName": "RevOrgsGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestTooManyRequestsError",
                    "safeName": "revOrgsGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_too_many_requests_error",
                    "safeName": "rev_orgs_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestTooManyRequestsError",
                    "safeName": "RevOrgsGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestInternalServerError",
                    "safeName": "revOrgsGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_internal_server_error",
                    "safeName": "rev_orgs_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestInternalServerError",
                    "safeName": "RevOrgsGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "revOrgsGetRequestServiceUnavailableError",
                    "safeName": "revOrgsGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_get_request_service_unavailable_error",
                    "safeName": "rev_orgs_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsGetRequestServiceUnavailableError",
                    "safeName": "RevOrgsGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-orgs-get-response",
                    "camelCase": {
                      "unsafeName": "revOrgsGetResponse",
                      "safeName": "revOrgsGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_orgs_get_response",
                      "safeName": "rev_orgs_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORGS_GET_RESPONSE",
                      "safeName": "REV_ORGS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrgsGetResponse",
                      "safeName": "RevOrgsGetResponse"
                    }
                  },
                  "typeId": "rev-orgs-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsGetExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Retrieves the Rev organization's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/rev-orgs.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "created_by",
                  "camelCase": {
                    "unsafeName": "createdBy",
                    "safeName": "createdBy"
                  },
                  "snakeCase": {
                    "unsafeName": "created_by",
                    "safeName": "created_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_BY",
                    "safeName": "CREATED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedBy",
                    "safeName": "CreatedBy"
                  }
                },
                "wireValue": "created_by"
              },
              "docs": "Filters by creator.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "created_date.after",
                  "camelCase": {
                    "unsafeName": "createdDateAfter",
                    "safeName": "createdDateAfter"
                  },
                  "snakeCase": {
                    "unsafeName": "created_date_after",
                    "safeName": "created_date_after"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_DATE_AFTER",
                    "safeName": "CREATED_DATE_AFTER"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedDateAfter",
                    "safeName": "CreatedDateAfter"
                  }
                },
                "wireValue": "created_date.after"
              },
              "docs": "Filters for objects created after the provided timestamp (inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_date.after_example": "created_date.after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "created_date.before",
                  "camelCase": {
                    "unsafeName": "createdDateBefore",
                    "safeName": "createdDateBefore"
                  },
                  "snakeCase": {
                    "unsafeName": "created_date_before",
                    "safeName": "created_date_before"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_DATE_BEFORE",
                    "safeName": "CREATED_DATE_BEFORE"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedDateBefore",
                    "safeName": "CreatedDateBefore"
                  }
                },
                "wireValue": "created_date.before"
              },
              "docs": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_date.before_example": "created_date.before"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "external_ref",
                  "camelCase": {
                    "unsafeName": "externalRef",
                    "safeName": "externalRef"
                  },
                  "snakeCase": {
                    "unsafeName": "external_ref",
                    "safeName": "external_ref"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "EXTERNAL_REF",
                    "safeName": "EXTERNAL_REF"
                  },
                  "pascalCase": {
                    "unsafeName": "ExternalRef",
                    "safeName": "ExternalRef"
                  }
                },
                "wireValue": "external_ref"
              },
              "docs": "List of external refs to filter Rev organizations for.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "external_ref_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of Rev organizations to be retrieved per page.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "modified_date.after",
                  "camelCase": {
                    "unsafeName": "modifiedDateAfter",
                    "safeName": "modifiedDateAfter"
                  },
                  "snakeCase": {
                    "unsafeName": "modified_date_after",
                    "safeName": "modified_date_after"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODIFIED_DATE_AFTER",
                    "safeName": "MODIFIED_DATE_AFTER"
                  },
                  "pascalCase": {
                    "unsafeName": "ModifiedDateAfter",
                    "safeName": "ModifiedDateAfter"
                  }
                },
                "wireValue": "modified_date.after"
              },
              "docs": "Filters for objects created after the provided timestamp (inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "modified_date.after_example": "modified_date.after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "modified_date.before",
                  "camelCase": {
                    "unsafeName": "modifiedDateBefore",
                    "safeName": "modifiedDateBefore"
                  },
                  "snakeCase": {
                    "unsafeName": "modified_date_before",
                    "safeName": "modified_date_before"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODIFIED_DATE_BEFORE",
                    "safeName": "MODIFIED_DATE_BEFORE"
                  },
                  "pascalCase": {
                    "unsafeName": "ModifiedDateBefore",
                    "safeName": "ModifiedDateBefore"
                  }
                },
                "wireValue": "modified_date.before"
              },
              "docs": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {
                          "format": "date-time"
                        },
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "modified_date.before_example": "modified_date.before"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "sort_by",
                  "camelCase": {
                    "unsafeName": "sortBy",
                    "safeName": "sortBy"
                  },
                  "snakeCase": {
                    "unsafeName": "sort_by",
                    "safeName": "sort_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "SORT_BY",
                    "safeName": "SORT_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "SortBy",
                    "safeName": "SortBy"
                  }
                },
                "wireValue": "sort_by"
              },
              "docs": "Fields to sort the Rev organizations by and the direction to sort\nthem.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "sort_by_example": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestBadRequestError",
                    "safeName": "revOrgsListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_bad_request_error",
                    "safeName": "rev_orgs_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestBadRequestError",
                    "safeName": "RevOrgsListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestUnauthorizedError",
                    "safeName": "revOrgsListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_unauthorized_error",
                    "safeName": "rev_orgs_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestUnauthorizedError",
                    "safeName": "RevOrgsListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestForbiddenError",
                    "safeName": "revOrgsListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_forbidden_error",
                    "safeName": "rev_orgs_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestForbiddenError",
                    "safeName": "RevOrgsListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestNotFoundError",
                    "safeName": "revOrgsListRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_not_found_error",
                    "safeName": "rev_orgs_list_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestNotFoundError",
                    "safeName": "RevOrgsListRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestTooManyRequestsError",
                    "safeName": "revOrgsListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_too_many_requests_error",
                    "safeName": "rev_orgs_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestTooManyRequestsError",
                    "safeName": "RevOrgsListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestInternalServerError",
                    "safeName": "revOrgsListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_internal_server_error",
                    "safeName": "rev_orgs_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestInternalServerError",
                    "safeName": "RevOrgsListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "revOrgsListRequestServiceUnavailableError",
                    "safeName": "revOrgsListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_list_request_service_unavailable_error",
                    "safeName": "rev_orgs_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsListRequestServiceUnavailableError",
                    "safeName": "RevOrgsListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-orgs-list-response",
                    "camelCase": {
                      "unsafeName": "revOrgsListResponse",
                      "safeName": "revOrgsListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_orgs_list_response",
                      "safeName": "rev_orgs_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORGS_LIST_RESPONSE",
                      "safeName": "REV_ORGS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrgsListResponse",
                      "safeName": "RevOrgsListResponse"
                    }
                  },
                  "typeId": "rev-orgs-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsListExample": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "rev_orgs": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "display_name": "foo",
                          "description": "foo",
                          "domain": "foo",
                          "external_ref": "foo"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the list of Rev organizations' information belonging to the\nauthenticated user's Dev Organization which the user is also authorized\nto access.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/rev-orgs.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "rev_orgs": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "display_name": "foo",
                          "description": "foo",
                          "domain": "foo",
                          "external_ref": "foo"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/rev-orgs.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestBadRequestError",
                    "safeName": "revOrgsUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_bad_request_error",
                    "safeName": "rev_orgs_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestBadRequestError",
                    "safeName": "RevOrgsUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestUnauthorizedError",
                    "safeName": "revOrgsUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_unauthorized_error",
                    "safeName": "rev_orgs_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestUnauthorizedError",
                    "safeName": "RevOrgsUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestForbiddenError",
                    "safeName": "revOrgsUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_forbidden_error",
                    "safeName": "rev_orgs_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestForbiddenError",
                    "safeName": "RevOrgsUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestNotFoundError",
                    "safeName": "revOrgsUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_not_found_error",
                    "safeName": "rev_orgs_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestNotFoundError",
                    "safeName": "RevOrgsUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestTooManyRequestsError",
                    "safeName": "revOrgsUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_too_many_requests_error",
                    "safeName": "rev_orgs_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestTooManyRequestsError",
                    "safeName": "RevOrgsUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestInternalServerError",
                    "safeName": "revOrgsUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_internal_server_error",
                    "safeName": "rev_orgs_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestInternalServerError",
                    "safeName": "RevOrgsUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Rev-orgs-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "revOrgsUpdateRequestServiceUnavailableError",
                    "safeName": "revOrgsUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "rev_orgs_update_request_service_unavailable_error",
                    "safeName": "rev_orgs_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "RevOrgsUpdateRequestServiceUnavailableError",
                    "safeName": "RevOrgsUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Rev-orgs-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/rev-orgs.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_revOrgs.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "rev-orgs-update-request",
                "camelCase": {
                  "unsafeName": "revOrgsUpdateRequest",
                  "safeName": "revOrgsUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "rev_orgs_update_request",
                  "safeName": "rev_orgs_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REV_ORGS_UPDATE_REQUEST",
                  "safeName": "REV_ORGS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "RevOrgsUpdateRequest",
                  "safeName": "RevOrgsUpdateRequest"
                }
              },
              "typeId": "rev-orgs-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "revOrgsUpdateExample": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "rev-orgs-update-response",
                    "camelCase": {
                      "unsafeName": "revOrgsUpdateResponse",
                      "safeName": "revOrgsUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "rev_orgs_update_response",
                      "safeName": "rev_orgs_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "REV_ORGS_UPDATE_RESPONSE",
                      "safeName": "REV_ORGS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "RevOrgsUpdateResponse",
                      "safeName": "RevOrgsUpdateResponse"
                    }
                  },
                  "typeId": "rev-orgs-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "revOrgsUpdateExample": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates the Rev organization's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "revOrgsUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/rev-orgs.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "display_name": "foo",
                        "description": "foo",
                        "domain": "foo",
                        "external_ref": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_tags": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "tags",
              "camelCase": {
                "unsafeName": "tags",
                "safeName": "tags"
              },
              "snakeCase": {
                "unsafeName": "tags",
                "safeName": "tags"
              },
              "screamingSnakeCase": {
                "unsafeName": "TAGS",
                "safeName": "TAGS"
              },
              "pascalCase": {
                "unsafeName": "Tags",
                "safeName": "Tags"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "tags",
            "camelCase": {
              "unsafeName": "tags",
              "safeName": "tags"
            },
            "snakeCase": {
              "unsafeName": "tags",
              "safeName": "tags"
            },
            "screamingSnakeCase": {
              "unsafeName": "TAGS",
              "safeName": "TAGS"
            },
            "pascalCase": {
              "unsafeName": "Tags",
              "safeName": "Tags"
            }
          }
        }
      },
      "displayName": "tags",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestBadRequestError",
                    "safeName": "tagsCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_bad_request_error",
                    "safeName": "tags_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestBadRequestError",
                    "safeName": "TagsCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestUnauthorizedError",
                    "safeName": "tagsCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_unauthorized_error",
                    "safeName": "tags_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestUnauthorizedError",
                    "safeName": "TagsCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestForbiddenError",
                    "safeName": "tagsCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_forbidden_error",
                    "safeName": "tags_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestForbiddenError",
                    "safeName": "TagsCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestTooManyRequestsError",
                    "safeName": "tagsCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_too_many_requests_error",
                    "safeName": "tags_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestTooManyRequestsError",
                    "safeName": "TagsCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestInternalServerError",
                    "safeName": "tagsCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_internal_server_error",
                    "safeName": "tags_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestInternalServerError",
                    "safeName": "TagsCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "tagsCreateRequestServiceUnavailableError",
                    "safeName": "tagsCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_create_request_service_unavailable_error",
                    "safeName": "tags_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsCreateRequestServiceUnavailableError",
                    "safeName": "TagsCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tags-create-request",
                "camelCase": {
                  "unsafeName": "tagsCreateRequest",
                  "safeName": "tagsCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "tags_create_request",
                  "safeName": "tags_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS_CREATE_REQUEST",
                  "safeName": "TAGS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "TagsCreateRequest",
                  "safeName": "TagsCreateRequest"
                }
              },
              "typeId": "tags-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsCreateExample": {
                  "name": "foo"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-create-response",
                    "camelCase": {
                      "unsafeName": "tagsCreateResponse",
                      "safeName": "tagsCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_create_response",
                      "safeName": "tags_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_CREATE_RESPONSE",
                      "safeName": "TAGS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsCreateResponse",
                      "safeName": "TagsCreateResponse"
                    }
                  },
                  "typeId": "tags-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsCreateExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new tag, which is used to create associations between objects\nand a logical concept denoted by the tag's name.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "name": "foo"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestBadRequestError",
                    "safeName": "tagsDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_bad_request_error",
                    "safeName": "tags_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestBadRequestError",
                    "safeName": "TagsDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestUnauthorizedError",
                    "safeName": "tagsDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_unauthorized_error",
                    "safeName": "tags_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestUnauthorizedError",
                    "safeName": "TagsDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestForbiddenError",
                    "safeName": "tagsDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_forbidden_error",
                    "safeName": "tags_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestForbiddenError",
                    "safeName": "TagsDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestNotFoundError",
                    "safeName": "tagsDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_not_found_error",
                    "safeName": "tags_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestNotFoundError",
                    "safeName": "TagsDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestTooManyRequestsError",
                    "safeName": "tagsDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_too_many_requests_error",
                    "safeName": "tags_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestTooManyRequestsError",
                    "safeName": "TagsDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestInternalServerError",
                    "safeName": "tagsDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_internal_server_error",
                    "safeName": "tags_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestInternalServerError",
                    "safeName": "TagsDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "tagsDeleteRequestServiceUnavailableError",
                    "safeName": "tagsDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_delete_request_service_unavailable_error",
                    "safeName": "tags_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsDeleteRequestServiceUnavailableError",
                    "safeName": "TagsDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tags-delete-request",
                "camelCase": {
                  "unsafeName": "tagsDeleteRequest",
                  "safeName": "tagsDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "tags_delete_request",
                  "safeName": "tags_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS_DELETE_REQUEST",
                  "safeName": "TAGS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "TagsDeleteRequest",
                  "safeName": "TagsDeleteRequest"
                }
              },
              "typeId": "tags-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-delete-response",
                    "camelCase": {
                      "unsafeName": "tagsDeleteResponse",
                      "safeName": "tagsDeleteResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_delete_response",
                      "safeName": "tags_delete_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_DELETE_RESPONSE",
                      "safeName": "TAGS_DELETE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsDeleteResponse",
                      "safeName": "TagsDeleteResponse"
                    }
                  },
                  "typeId": "tags-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a tag.",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The requested tag's ID.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestBadRequestError",
                    "safeName": "tagsGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_bad_request_error",
                    "safeName": "tags_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestBadRequestError",
                    "safeName": "TagsGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestUnauthorizedError",
                    "safeName": "tagsGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_unauthorized_error",
                    "safeName": "tags_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestUnauthorizedError",
                    "safeName": "TagsGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestForbiddenError",
                    "safeName": "tagsGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_forbidden_error",
                    "safeName": "tags_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestForbiddenError",
                    "safeName": "TagsGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestNotFoundError",
                    "safeName": "tagsGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_not_found_error",
                    "safeName": "tags_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestNotFoundError",
                    "safeName": "TagsGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestTooManyRequestsError",
                    "safeName": "tagsGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_too_many_requests_error",
                    "safeName": "tags_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestTooManyRequestsError",
                    "safeName": "TagsGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestInternalServerError",
                    "safeName": "tagsGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_internal_server_error",
                    "safeName": "tags_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestInternalServerError",
                    "safeName": "TagsGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "tagsGetRequestServiceUnavailableError",
                    "safeName": "tagsGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_get_request_service_unavailable_error",
                    "safeName": "tags_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsGetRequestServiceUnavailableError",
                    "safeName": "TagsGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-get-response",
                    "camelCase": {
                      "unsafeName": "tagsGetResponse",
                      "safeName": "tagsGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_get_response",
                      "safeName": "tags_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_GET_RESPONSE",
                      "safeName": "TAGS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsGetResponse",
                      "safeName": "TagsGetResponse"
                    }
                  },
                  "typeId": "tags-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsGetExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a tag's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/tags.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of tags to return. The default is '50'.",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestBadRequestError",
                    "safeName": "tagsListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_bad_request_error",
                    "safeName": "tags_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestBadRequestError",
                    "safeName": "TagsListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestUnauthorizedError",
                    "safeName": "tagsListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_unauthorized_error",
                    "safeName": "tags_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestUnauthorizedError",
                    "safeName": "TagsListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestForbiddenError",
                    "safeName": "tagsListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_forbidden_error",
                    "safeName": "tags_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestForbiddenError",
                    "safeName": "TagsListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestTooManyRequestsError",
                    "safeName": "tagsListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_too_many_requests_error",
                    "safeName": "tags_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestTooManyRequestsError",
                    "safeName": "TagsListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestInternalServerError",
                    "safeName": "tagsListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_internal_server_error",
                    "safeName": "tags_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestInternalServerError",
                    "safeName": "TagsListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "tagsListRequestServiceUnavailableError",
                    "safeName": "tagsListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_list_request_service_unavailable_error",
                    "safeName": "tags_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsListRequestServiceUnavailableError",
                    "safeName": "TagsListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-list-response",
                    "camelCase": {
                      "unsafeName": "tagsListResponse",
                      "safeName": "tagsListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_list_response",
                      "safeName": "tags_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_LIST_RESPONSE",
                      "safeName": "TAGS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsListResponse",
                      "safeName": "TagsListResponse"
                    }
                  },
                  "typeId": "tags-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsListExample": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "tags": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "allowed_values": [
                            "foo"
                          ],
                          "description": "foo",
                          "name": "foo"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the available tags.",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/tags.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "tags": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "allowed_values": [
                            "foo"
                          ],
                          "description": "foo",
                          "name": "foo"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/tags.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestBadRequestError",
                    "safeName": "tagsUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_bad_request_error",
                    "safeName": "tags_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestBadRequestError",
                    "safeName": "TagsUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestUnauthorizedError",
                    "safeName": "tagsUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_unauthorized_error",
                    "safeName": "tags_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestUnauthorizedError",
                    "safeName": "TagsUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestForbiddenError",
                    "safeName": "tagsUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_forbidden_error",
                    "safeName": "tags_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestForbiddenError",
                    "safeName": "TagsUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestNotFoundError",
                    "safeName": "tagsUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_not_found_error",
                    "safeName": "tags_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestNotFoundError",
                    "safeName": "TagsUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestTooManyRequestsError",
                    "safeName": "tagsUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_too_many_requests_error",
                    "safeName": "tags_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestTooManyRequestsError",
                    "safeName": "TagsUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestInternalServerError",
                    "safeName": "tagsUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_internal_server_error",
                    "safeName": "tags_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestInternalServerError",
                    "safeName": "TagsUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Tags-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "tagsUpdateRequestServiceUnavailableError",
                    "safeName": "tagsUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "tags_update_request_service_unavailable_error",
                    "safeName": "tags_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TagsUpdateRequestServiceUnavailableError",
                    "safeName": "TagsUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Tags-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/tags.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_tags.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "tags-update-request",
                "camelCase": {
                  "unsafeName": "tagsUpdateRequest",
                  "safeName": "tagsUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "tags_update_request",
                  "safeName": "tags_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAGS_UPDATE_REQUEST",
                  "safeName": "TAGS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "TagsUpdateRequest",
                  "safeName": "TagsUpdateRequest"
                }
              },
              "typeId": "tags-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "tagsUpdateExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "tags-update-response",
                    "camelCase": {
                      "unsafeName": "tagsUpdateResponse",
                      "safeName": "tagsUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "tags_update_response",
                      "safeName": "tags_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TAGS_UPDATE_RESPONSE",
                      "safeName": "TAGS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TagsUpdateResponse",
                      "safeName": "TagsUpdateResponse"
                    }
                  },
                  "typeId": "tags-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "tagsUpdateExample": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a tag's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "tagsUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/tags.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "tag": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "allowed_values": [
                          "foo"
                        ],
                        "description": "foo",
                        "name": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_timelineEntries": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "timeline-entries",
              "camelCase": {
                "unsafeName": "timelineEntries",
                "safeName": "timelineEntries"
              },
              "snakeCase": {
                "unsafeName": "timeline_entries",
                "safeName": "timeline_entries"
              },
              "screamingSnakeCase": {
                "unsafeName": "TIMELINE_ENTRIES",
                "safeName": "TIMELINE_ENTRIES"
              },
              "pascalCase": {
                "unsafeName": "TimelineEntries",
                "safeName": "TimelineEntries"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "timeline-entries",
            "camelCase": {
              "unsafeName": "timelineEntries",
              "safeName": "timelineEntries"
            },
            "snakeCase": {
              "unsafeName": "timeline_entries",
              "safeName": "timeline_entries"
            },
            "screamingSnakeCase": {
              "unsafeName": "TIMELINE_ENTRIES",
              "safeName": "TIMELINE_ENTRIES"
            },
            "pascalCase": {
              "unsafeName": "TimelineEntries",
              "safeName": "TimelineEntries"
            }
          }
        }
      },
      "displayName": "timeline-entries",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestBadRequestError",
                    "safeName": "timelineEntriesCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_bad_request_error",
                    "safeName": "timeline_entries_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestBadRequestError",
                    "safeName": "TimelineEntriesCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestUnauthorizedError",
                    "safeName": "timelineEntriesCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_unauthorized_error",
                    "safeName": "timeline_entries_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestUnauthorizedError",
                    "safeName": "TimelineEntriesCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestForbiddenError",
                    "safeName": "timelineEntriesCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_forbidden_error",
                    "safeName": "timeline_entries_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestForbiddenError",
                    "safeName": "TimelineEntriesCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestTooManyRequestsError",
                    "safeName": "timelineEntriesCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_too_many_requests_error",
                    "safeName": "timeline_entries_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestTooManyRequestsError",
                    "safeName": "TimelineEntriesCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestInternalServerError",
                    "safeName": "timelineEntriesCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_internal_server_error",
                    "safeName": "timeline_entries_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestInternalServerError",
                    "safeName": "TimelineEntriesCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesCreateRequestServiceUnavailableError",
                    "safeName": "timelineEntriesCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_create_request_service_unavailable_error",
                    "safeName": "timeline_entries_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesCreateRequestServiceUnavailableError",
                    "safeName": "TimelineEntriesCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entries-create-request",
                "camelCase": {
                  "unsafeName": "timelineEntriesCreateRequest",
                  "safeName": "timelineEntriesCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_create_request",
                  "safeName": "timeline_entries_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST",
                  "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesCreateRequest",
                  "safeName": "TimelineEntriesCreateRequest"
                }
              },
              "typeId": "timeline-entries-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "timelineEntriesCreateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entries-create-response",
                    "camelCase": {
                      "unsafeName": "timelineEntriesCreateResponse",
                      "safeName": "timelineEntriesCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_create_response",
                      "safeName": "timeline_entries_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_CREATE_RESPONSE",
                      "safeName": "TIMELINE_ENTRIES_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesCreateResponse",
                      "safeName": "TimelineEntriesCreateResponse"
                    }
                  },
                  "typeId": "timeline-entries-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesCreateExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "timelineEntriesCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/timeline-entries.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The ID of the timeline entry to get.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "id"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestBadRequestError",
                    "safeName": "timelineEntriesGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_bad_request_error",
                    "safeName": "timeline_entries_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestBadRequestError",
                    "safeName": "TimelineEntriesGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestUnauthorizedError",
                    "safeName": "timelineEntriesGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_unauthorized_error",
                    "safeName": "timeline_entries_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestUnauthorizedError",
                    "safeName": "TimelineEntriesGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestForbiddenError",
                    "safeName": "timelineEntriesGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_forbidden_error",
                    "safeName": "timeline_entries_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestForbiddenError",
                    "safeName": "TimelineEntriesGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestNotFoundError",
                    "safeName": "timelineEntriesGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_not_found_error",
                    "safeName": "timeline_entries_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestNotFoundError",
                    "safeName": "TimelineEntriesGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestTooManyRequestsError",
                    "safeName": "timelineEntriesGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_too_many_requests_error",
                    "safeName": "timeline_entries_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestTooManyRequestsError",
                    "safeName": "TimelineEntriesGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestInternalServerError",
                    "safeName": "timelineEntriesGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_internal_server_error",
                    "safeName": "timeline_entries_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestInternalServerError",
                    "safeName": "TimelineEntriesGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesGetRequestServiceUnavailableError",
                    "safeName": "timelineEntriesGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_get_request_service_unavailable_error",
                    "safeName": "timeline_entries_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesGetRequestServiceUnavailableError",
                    "safeName": "TimelineEntriesGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entries-get-response",
                    "camelCase": {
                      "unsafeName": "timelineEntriesGetResponse",
                      "safeName": "timelineEntriesGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_get_response",
                      "safeName": "timeline_entries_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_GET_RESPONSE",
                      "safeName": "TIMELINE_ENTRIES_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesGetResponse",
                      "safeName": "TimelineEntriesGetResponse"
                    }
                  },
                  "typeId": "timeline-entries-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesGetExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets an entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/timeline-entries.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "id"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "object",
                  "camelCase": {
                    "unsafeName": "object",
                    "safeName": "object"
                  },
                  "snakeCase": {
                    "unsafeName": "object",
                    "safeName": "object"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "OBJECT",
                    "safeName": "OBJECT"
                  },
                  "pascalCase": {
                    "unsafeName": "Object",
                    "safeName": "Object_"
                  }
                },
                "wireValue": "object"
              },
              "docs": "The ID of the object to list timeline entries for.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "object_example": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of entries to return. If not set, then this\ndefaults to `50`.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestBadRequestError",
                    "safeName": "timelineEntriesListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_bad_request_error",
                    "safeName": "timeline_entries_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestBadRequestError",
                    "safeName": "TimelineEntriesListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestUnauthorizedError",
                    "safeName": "timelineEntriesListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_unauthorized_error",
                    "safeName": "timeline_entries_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestUnauthorizedError",
                    "safeName": "TimelineEntriesListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestForbiddenError",
                    "safeName": "timelineEntriesListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_forbidden_error",
                    "safeName": "timeline_entries_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestForbiddenError",
                    "safeName": "TimelineEntriesListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestNotFoundError",
                    "safeName": "timelineEntriesListRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_not_found_error",
                    "safeName": "timeline_entries_list_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestNotFoundError",
                    "safeName": "TimelineEntriesListRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestTooManyRequestsError",
                    "safeName": "timelineEntriesListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_too_many_requests_error",
                    "safeName": "timeline_entries_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestTooManyRequestsError",
                    "safeName": "TimelineEntriesListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestInternalServerError",
                    "safeName": "timelineEntriesListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_internal_server_error",
                    "safeName": "timeline_entries_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestInternalServerError",
                    "safeName": "TimelineEntriesListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesListRequestServiceUnavailableError",
                    "safeName": "timelineEntriesListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_list_request_service_unavailable_error",
                    "safeName": "timeline_entries_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesListRequestServiceUnavailableError",
                    "safeName": "TimelineEntriesListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entries-list-response",
                    "camelCase": {
                      "unsafeName": "timelineEntriesListResponse",
                      "safeName": "timelineEntriesListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_list_response",
                      "safeName": "timeline_entries_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_LIST_RESPONSE",
                      "safeName": "TIMELINE_ENTRIES_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesListResponse",
                      "safeName": "TimelineEntriesListResponse"
                    }
                  },
                  "typeId": "timeline-entries-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesListExample": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "timeline_entries": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "body_type": "snap_kit",
                          "snap_kit_body": {}
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the timeline entries for an object.",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/timeline-entries.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "timeline_entries": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "body_type": "snap_kit",
                          "snap_kit_body": {}
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/timeline-entries.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestBadRequestError",
                    "safeName": "timelineEntriesUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_bad_request_error",
                    "safeName": "timeline_entries_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestBadRequestError",
                    "safeName": "TimelineEntriesUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestUnauthorizedError",
                    "safeName": "timelineEntriesUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_unauthorized_error",
                    "safeName": "timeline_entries_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestUnauthorizedError",
                    "safeName": "TimelineEntriesUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestForbiddenError",
                    "safeName": "timelineEntriesUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_forbidden_error",
                    "safeName": "timeline_entries_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestForbiddenError",
                    "safeName": "TimelineEntriesUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestTooManyRequestsError",
                    "safeName": "timelineEntriesUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_too_many_requests_error",
                    "safeName": "timeline_entries_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestTooManyRequestsError",
                    "safeName": "TimelineEntriesUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestInternalServerError",
                    "safeName": "timelineEntriesUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_internal_server_error",
                    "safeName": "timeline_entries_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestInternalServerError",
                    "safeName": "TimelineEntriesUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Timeline-entries-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "timelineEntriesUpdateRequestServiceUnavailableError",
                    "safeName": "timelineEntriesUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "timeline_entries_update_request_service_unavailable_error",
                    "safeName": "timeline_entries_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "TimelineEntriesUpdateRequestServiceUnavailableError",
                    "safeName": "TimelineEntriesUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Timeline-entries-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/timeline-entries.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_timelineEntries.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "timeline-entries-update-request",
                "camelCase": {
                  "unsafeName": "timelineEntriesUpdateRequest",
                  "safeName": "timelineEntriesUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "timeline_entries_update_request",
                  "safeName": "timeline_entries_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST",
                  "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "TimelineEntriesUpdateRequest",
                  "safeName": "TimelineEntriesUpdateRequest"
                }
              },
              "typeId": "timeline-entries-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "timelineEntriesUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "timeline-entries-update-response",
                    "camelCase": {
                      "unsafeName": "timelineEntriesUpdateResponse",
                      "safeName": "timelineEntriesUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "timeline_entries_update_response",
                      "safeName": "timeline_entries_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "TIMELINE_ENTRIES_UPDATE_RESPONSE",
                      "safeName": "TIMELINE_ENTRIES_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "TimelineEntriesUpdateResponse",
                      "safeName": "TimelineEntriesUpdateResponse"
                    }
                  },
                  "typeId": "timeline-entries-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "timelineEntriesUpdateExample": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates an entry on an object's timeline.",
          "v2Examples": {
            "autogeneratedExamples": {
              "timelineEntriesUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/timeline-entries.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "timeline_entry": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "body_type": "snap_kit",
                        "snap_kit_body": {}
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_webhooks": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "webhooks",
              "camelCase": {
                "unsafeName": "webhooks",
                "safeName": "webhooks"
              },
              "snakeCase": {
                "unsafeName": "webhooks",
                "safeName": "webhooks"
              },
              "screamingSnakeCase": {
                "unsafeName": "WEBHOOKS",
                "safeName": "WEBHOOKS"
              },
              "pascalCase": {
                "unsafeName": "Webhooks",
                "safeName": "Webhooks"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "webhooks",
            "camelCase": {
              "unsafeName": "webhooks",
              "safeName": "webhooks"
            },
            "snakeCase": {
              "unsafeName": "webhooks",
              "safeName": "webhooks"
            },
            "screamingSnakeCase": {
              "unsafeName": "WEBHOOKS",
              "safeName": "WEBHOOKS"
            },
            "pascalCase": {
              "unsafeName": "Webhooks",
              "safeName": "Webhooks"
            }
          }
        }
      },
      "displayName": "webhooks",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestBadRequestError",
                    "safeName": "webhooksCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_bad_request_error",
                    "safeName": "webhooks_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestBadRequestError",
                    "safeName": "WebhooksCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestUnauthorizedError",
                    "safeName": "webhooksCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_unauthorized_error",
                    "safeName": "webhooks_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestUnauthorizedError",
                    "safeName": "WebhooksCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestForbiddenError",
                    "safeName": "webhooksCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_forbidden_error",
                    "safeName": "webhooks_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestForbiddenError",
                    "safeName": "WebhooksCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestTooManyRequestsError",
                    "safeName": "webhooksCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_too_many_requests_error",
                    "safeName": "webhooks_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestTooManyRequestsError",
                    "safeName": "WebhooksCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestInternalServerError",
                    "safeName": "webhooksCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_internal_server_error",
                    "safeName": "webhooks_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestInternalServerError",
                    "safeName": "WebhooksCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "webhooksCreateRequestServiceUnavailableError",
                    "safeName": "webhooksCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_create_request_service_unavailable_error",
                    "safeName": "webhooks_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksCreateRequestServiceUnavailableError",
                    "safeName": "WebhooksCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhooks-create-request",
                "camelCase": {
                  "unsafeName": "webhooksCreateRequest",
                  "safeName": "webhooksCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "webhooks_create_request",
                  "safeName": "webhooks_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOKS_CREATE_REQUEST",
                  "safeName": "WEBHOOKS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WebhooksCreateRequest",
                  "safeName": "WebhooksCreateRequest"
                }
              },
              "typeId": "webhooks-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksCreateExample": {
                  "url": "foo"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-create-response",
                    "camelCase": {
                      "unsafeName": "webhooksCreateResponse",
                      "safeName": "webhooksCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_create_response",
                      "safeName": "webhooks_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_CREATE_RESPONSE",
                      "safeName": "WEBHOOKS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksCreateResponse",
                      "safeName": "WebhooksCreateResponse"
                    }
                  },
                  "typeId": "webhooks-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksCreateExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates a new webhook target.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "url": "foo"
                  }
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestBadRequestError",
                    "safeName": "webhooksDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_bad_request_error",
                    "safeName": "webhooks_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestBadRequestError",
                    "safeName": "WebhooksDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestUnauthorizedError",
                    "safeName": "webhooksDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_unauthorized_error",
                    "safeName": "webhooks_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestUnauthorizedError",
                    "safeName": "WebhooksDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestForbiddenError",
                    "safeName": "webhooksDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_forbidden_error",
                    "safeName": "webhooks_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestForbiddenError",
                    "safeName": "WebhooksDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestNotFoundError",
                    "safeName": "webhooksDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_not_found_error",
                    "safeName": "webhooks_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestNotFoundError",
                    "safeName": "WebhooksDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestTooManyRequestsError",
                    "safeName": "webhooksDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_too_many_requests_error",
                    "safeName": "webhooks_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestTooManyRequestsError",
                    "safeName": "WebhooksDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestInternalServerError",
                    "safeName": "webhooksDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_internal_server_error",
                    "safeName": "webhooks_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestInternalServerError",
                    "safeName": "WebhooksDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "webhooksDeleteRequestServiceUnavailableError",
                    "safeName": "webhooksDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_delete_request_service_unavailable_error",
                    "safeName": "webhooks_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksDeleteRequestServiceUnavailableError",
                    "safeName": "WebhooksDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhooks-delete-request",
                "camelCase": {
                  "unsafeName": "webhooksDeleteRequest",
                  "safeName": "webhooksDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "webhooks_delete_request",
                  "safeName": "webhooks_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOKS_DELETE_REQUEST",
                  "safeName": "WEBHOOKS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WebhooksDeleteRequest",
                  "safeName": "WebhooksDeleteRequest"
                }
              },
              "typeId": "webhooks-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksDeleteExample": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-delete-response",
                    "camelCase": {
                      "unsafeName": "webhooksDeleteResponse",
                      "safeName": "webhooksDeleteResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_delete_response",
                      "safeName": "webhooks_delete_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_DELETE_RESPONSE",
                      "safeName": "WEBHOOKS_DELETE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksDeleteResponse",
                      "safeName": "WebhooksDeleteResponse"
                    }
                  },
                  "typeId": "webhooks-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes the requested webhook.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "ID for the webhook.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestBadRequestError",
                    "safeName": "webhooksGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_bad_request_error",
                    "safeName": "webhooks_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestBadRequestError",
                    "safeName": "WebhooksGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestUnauthorizedError",
                    "safeName": "webhooksGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_unauthorized_error",
                    "safeName": "webhooks_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestUnauthorizedError",
                    "safeName": "WebhooksGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestForbiddenError",
                    "safeName": "webhooksGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_forbidden_error",
                    "safeName": "webhooks_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestForbiddenError",
                    "safeName": "WebhooksGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestNotFoundError",
                    "safeName": "webhooksGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_not_found_error",
                    "safeName": "webhooks_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestNotFoundError",
                    "safeName": "WebhooksGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestTooManyRequestsError",
                    "safeName": "webhooksGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_too_many_requests_error",
                    "safeName": "webhooks_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestTooManyRequestsError",
                    "safeName": "WebhooksGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestInternalServerError",
                    "safeName": "webhooksGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_internal_server_error",
                    "safeName": "webhooks_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestInternalServerError",
                    "safeName": "WebhooksGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "webhooksGetRequestServiceUnavailableError",
                    "safeName": "webhooksGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_get_request_service_unavailable_error",
                    "safeName": "webhooks_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksGetRequestServiceUnavailableError",
                    "safeName": "WebhooksGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-get-response",
                    "camelCase": {
                      "unsafeName": "webhooksGetResponse",
                      "safeName": "webhooksGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_get_response",
                      "safeName": "webhooks_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_GET_RESPONSE",
                      "safeName": "WEBHOOKS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksGetResponse",
                      "safeName": "WebhooksGetResponse"
                    }
                  },
                  "typeId": "webhooks-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksGetExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets the requested webhook's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/webhooks.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestBadRequestError",
                    "safeName": "webhooksListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_bad_request_error",
                    "safeName": "webhooks_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestBadRequestError",
                    "safeName": "WebhooksListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestUnauthorizedError",
                    "safeName": "webhooksListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_unauthorized_error",
                    "safeName": "webhooks_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestUnauthorizedError",
                    "safeName": "WebhooksListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestForbiddenError",
                    "safeName": "webhooksListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_forbidden_error",
                    "safeName": "webhooks_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestForbiddenError",
                    "safeName": "WebhooksListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestTooManyRequestsError",
                    "safeName": "webhooksListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_too_many_requests_error",
                    "safeName": "webhooks_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestTooManyRequestsError",
                    "safeName": "WebhooksListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestInternalServerError",
                    "safeName": "webhooksListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_internal_server_error",
                    "safeName": "webhooks_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestInternalServerError",
                    "safeName": "WebhooksListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "webhooksListRequestServiceUnavailableError",
                    "safeName": "webhooksListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_list_request_service_unavailable_error",
                    "safeName": "webhooks_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksListRequestServiceUnavailableError",
                    "safeName": "WebhooksListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-list-response",
                    "camelCase": {
                      "unsafeName": "webhooksListResponse",
                      "safeName": "webhooksListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_list_response",
                      "safeName": "webhooks_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_LIST_RESPONSE",
                      "safeName": "WEBHOOKS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksListResponse",
                      "safeName": "WebhooksListResponse"
                    }
                  },
                  "typeId": "webhooks-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksListExample": {
                      "webhooks": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "event_types": [
                            "part_created"
                          ],
                          "secret": "foo",
                          "status": "active",
                          "url": "foo"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists the webhooks.",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/webhooks.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhooks": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "event_types": [
                            "part_created"
                          ],
                          "secret": "foo",
                          "status": "active",
                          "url": "foo"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/webhooks.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestBadRequestError",
                    "safeName": "webhooksUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_bad_request_error",
                    "safeName": "webhooks_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestBadRequestError",
                    "safeName": "WebhooksUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestUnauthorizedError",
                    "safeName": "webhooksUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_unauthorized_error",
                    "safeName": "webhooks_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestUnauthorizedError",
                    "safeName": "WebhooksUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestForbiddenError",
                    "safeName": "webhooksUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_forbidden_error",
                    "safeName": "webhooks_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestForbiddenError",
                    "safeName": "WebhooksUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestNotFoundError",
                    "safeName": "webhooksUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_not_found_error",
                    "safeName": "webhooks_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestNotFoundError",
                    "safeName": "WebhooksUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestTooManyRequestsError",
                    "safeName": "webhooksUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_too_many_requests_error",
                    "safeName": "webhooks_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestTooManyRequestsError",
                    "safeName": "WebhooksUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestInternalServerError",
                    "safeName": "webhooksUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_internal_server_error",
                    "safeName": "webhooks_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestInternalServerError",
                    "safeName": "WebhooksUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Webhooks-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "webhooksUpdateRequestServiceUnavailableError",
                    "safeName": "webhooksUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "webhooks_update_request_service_unavailable_error",
                    "safeName": "webhooks_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WebhooksUpdateRequestServiceUnavailableError",
                    "safeName": "WebhooksUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Webhooks-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/webhooks.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_webhooks.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "webhooks-update-request",
                "camelCase": {
                  "unsafeName": "webhooksUpdateRequest",
                  "safeName": "webhooksUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "webhooks_update_request",
                  "safeName": "webhooks_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBHOOKS_UPDATE_REQUEST",
                  "safeName": "WEBHOOKS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WebhooksUpdateRequest",
                  "safeName": "WebhooksUpdateRequest"
                }
              },
              "typeId": "webhooks-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "webhooksUpdateExample": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "webhooks-update-response",
                    "camelCase": {
                      "unsafeName": "webhooksUpdateResponse",
                      "safeName": "webhooksUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "webhooks_update_response",
                      "safeName": "webhooks_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WEBHOOKS_UPDATE_RESPONSE",
                      "safeName": "WEBHOOKS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WebhooksUpdateResponse",
                      "safeName": "WebhooksUpdateResponse"
                    }
                  },
                  "typeId": "webhooks-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "webhooksUpdateExample": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates the requested webhook.",
          "v2Examples": {
            "autogeneratedExamples": {
              "webhooksUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/webhooks.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "webhook": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "event_types": [
                          "part_created"
                        ],
                        "secret": "foo",
                        "status": "active",
                        "url": "foo"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    },
    "service_works": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "works",
              "camelCase": {
                "unsafeName": "works",
                "safeName": "works"
              },
              "snakeCase": {
                "unsafeName": "works",
                "safeName": "works"
              },
              "screamingSnakeCase": {
                "unsafeName": "WORKS",
                "safeName": "WORKS"
              },
              "pascalCase": {
                "unsafeName": "Works",
                "safeName": "Works"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "works",
            "camelCase": {
              "unsafeName": "works",
              "safeName": "works"
            },
            "snakeCase": {
              "unsafeName": "works",
              "safeName": "works"
            },
            "screamingSnakeCase": {
              "unsafeName": "WORKS",
              "safeName": "WORKS"
            },
            "pascalCase": {
              "unsafeName": "Works",
              "safeName": "Works"
            }
          }
        }
      },
      "displayName": "works",
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.create",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestBadRequestError",
                    "safeName": "worksCreateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_bad_request_error",
                    "safeName": "works_create_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestBadRequestError",
                    "safeName": "WorksCreateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestUnauthorizedError",
                    "safeName": "worksCreateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_unauthorized_error",
                    "safeName": "works_create_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestUnauthorizedError",
                    "safeName": "WorksCreateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestForbiddenError",
                    "safeName": "worksCreateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_forbidden_error",
                    "safeName": "works_create_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestForbiddenError",
                    "safeName": "WorksCreateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestTooManyRequestsError",
                    "safeName": "worksCreateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_too_many_requests_error",
                    "safeName": "works_create_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestTooManyRequestsError",
                    "safeName": "WorksCreateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestInternalServerError",
                    "safeName": "worksCreateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_internal_server_error",
                    "safeName": "works_create_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestInternalServerError",
                    "safeName": "WorksCreateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-createRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksCreateRequestServiceUnavailableError",
                    "safeName": "worksCreateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_create_request_service_unavailable_error",
                    "safeName": "works_create_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksCreateRequestServiceUnavailableError",
                    "safeName": "WorksCreateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-createRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.create",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.create",
          "name": {
            "originalName": "create",
            "camelCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "snakeCase": {
              "unsafeName": "create",
              "safeName": "create"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE",
              "safeName": "CREATE"
            },
            "pascalCase": {
              "unsafeName": "Create",
              "safeName": "Create"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "works-create-request",
                "camelCase": {
                  "unsafeName": "worksCreateRequest",
                  "safeName": "worksCreateRequest"
                },
                "snakeCase": {
                  "unsafeName": "works_create_request",
                  "safeName": "works_create_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_CREATE_REQUEST",
                  "safeName": "WORKS_CREATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WorksCreateRequest",
                  "safeName": "WorksCreateRequest"
                }
              },
              "typeId": "works-create-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksCreateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-create-response",
                    "camelCase": {
                      "unsafeName": "worksCreateResponse",
                      "safeName": "worksCreateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_create_response",
                      "safeName": "works_create_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_CREATE_RESPONSE",
                      "safeName": "WORKS_CREATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksCreateResponse",
                      "safeName": "WorksCreateResponse"
                    }
                  },
                  "typeId": "works-create-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksCreateExample": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),\n[ticket](https://devrev.ai/docs/product/support)) item.\n",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksCreateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.create"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 201,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.delete",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestBadRequestError",
                    "safeName": "worksDeleteRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_bad_request_error",
                    "safeName": "works_delete_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestBadRequestError",
                    "safeName": "WorksDeleteRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestUnauthorizedError",
                    "safeName": "worksDeleteRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_unauthorized_error",
                    "safeName": "works_delete_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestUnauthorizedError",
                    "safeName": "WorksDeleteRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestForbiddenError",
                    "safeName": "worksDeleteRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_forbidden_error",
                    "safeName": "works_delete_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestForbiddenError",
                    "safeName": "WorksDeleteRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestNotFoundError",
                    "safeName": "worksDeleteRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_not_found_error",
                    "safeName": "works_delete_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestNotFoundError",
                    "safeName": "WorksDeleteRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestTooManyRequestsError",
                    "safeName": "worksDeleteRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_too_many_requests_error",
                    "safeName": "works_delete_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestTooManyRequestsError",
                    "safeName": "WorksDeleteRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestInternalServerError",
                    "safeName": "worksDeleteRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_internal_server_error",
                    "safeName": "works_delete_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestInternalServerError",
                    "safeName": "WorksDeleteRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-deleteRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksDeleteRequestServiceUnavailableError",
                    "safeName": "worksDeleteRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_delete_request_service_unavailable_error",
                    "safeName": "works_delete_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksDeleteRequestServiceUnavailableError",
                    "safeName": "WorksDeleteRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-deleteRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.delete",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.delete",
          "name": {
            "originalName": "delete",
            "camelCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "snakeCase": {
              "unsafeName": "delete",
              "safeName": "delete_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE",
              "safeName": "DELETE"
            },
            "pascalCase": {
              "unsafeName": "Delete",
              "safeName": "Delete"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "works-delete-request",
                "camelCase": {
                  "unsafeName": "worksDeleteRequest",
                  "safeName": "worksDeleteRequest"
                },
                "snakeCase": {
                  "unsafeName": "works_delete_request",
                  "safeName": "works_delete_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_DELETE_REQUEST",
                  "safeName": "WORKS_DELETE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WorksDeleteRequest",
                  "safeName": "WorksDeleteRequest"
                }
              },
              "typeId": "works-delete-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksDeleteExample": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                }
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-delete-response",
                    "camelCase": {
                      "unsafeName": "worksDeleteResponse",
                      "safeName": "worksDeleteResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_delete_response",
                      "safeName": "works_delete_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_DELETE_RESPONSE",
                      "safeName": "WORKS_DELETE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksDeleteResponse",
                      "safeName": "WorksDeleteResponse"
                    }
                  },
                  "typeId": "works-delete-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksDeleteExample": {}
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Deletes a work item.",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksDeleteExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.delete"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                  }
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {},
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.export",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "applies_to_part",
                  "camelCase": {
                    "unsafeName": "appliesToPart",
                    "safeName": "appliesToPart"
                  },
                  "snakeCase": {
                    "unsafeName": "applies_to_part",
                    "safeName": "applies_to_part"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "APPLIES_TO_PART",
                    "safeName": "APPLIES_TO_PART"
                  },
                  "pascalCase": {
                    "unsafeName": "AppliesToPart",
                    "safeName": "AppliesToPart"
                  }
                },
                "wireValue": "applies_to_part"
              },
              "docs": "Filters for work belonging to any of the provided parts.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "applies_to_part_example": [
                    "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "created_by",
                  "camelCase": {
                    "unsafeName": "createdBy",
                    "safeName": "createdBy"
                  },
                  "snakeCase": {
                    "unsafeName": "created_by",
                    "safeName": "created_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_BY",
                    "safeName": "CREATED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedBy",
                    "safeName": "CreatedBy"
                  }
                },
                "wireValue": "created_by"
              },
              "docs": "Filters for work created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "first",
                  "camelCase": {
                    "unsafeName": "first",
                    "safeName": "first"
                  },
                  "snakeCase": {
                    "unsafeName": "first",
                    "safeName": "first"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "FIRST",
                    "safeName": "FIRST"
                  },
                  "pascalCase": {
                    "unsafeName": "First",
                    "safeName": "First"
                  }
                },
                "wireValue": "first"
              },
              "docs": "The number of work items to return. The default is '50', the maximum\nis '5000'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "first_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "issue.priority",
                  "camelCase": {
                    "unsafeName": "issuePriority",
                    "safeName": "issuePriority"
                  },
                  "snakeCase": {
                    "unsafeName": "issue_priority",
                    "safeName": "issue_priority"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ISSUE_PRIORITY",
                    "safeName": "ISSUE_PRIORITY"
                  },
                  "pascalCase": {
                    "unsafeName": "IssuePriority",
                    "safeName": "IssuePriority"
                  }
                },
                "wireValue": "issue.priority"
              },
              "docs": "Filters for issues with any of the provided priorities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "issue-priority",
                          "camelCase": {
                            "unsafeName": "issuePriority",
                            "safeName": "issuePriority"
                          },
                          "snakeCase": {
                            "unsafeName": "issue_priority",
                            "safeName": "issue_priority"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "ISSUE_PRIORITY",
                            "safeName": "ISSUE_PRIORITY"
                          },
                          "pascalCase": {
                            "unsafeName": "IssuePriority",
                            "safeName": "IssuePriority"
                          }
                        },
                        "typeId": "issue-priority",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.priority_example": [
                    "p0"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "issue.rev_orgs",
                  "camelCase": {
                    "unsafeName": "issueRevOrgs",
                    "safeName": "issueRevOrgs"
                  },
                  "snakeCase": {
                    "unsafeName": "issue_rev_orgs",
                    "safeName": "issue_rev_orgs"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ISSUE_REV_ORGS",
                    "safeName": "ISSUE_REV_ORGS"
                  },
                  "pascalCase": {
                    "unsafeName": "IssueRevOrgs",
                    "safeName": "IssueRevOrgs"
                  }
                },
                "wireValue": "issue.rev_orgs"
              },
              "docs": "Filters for issues with any of the provided Rev organizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.rev_orgs_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "owned_by",
                  "camelCase": {
                    "unsafeName": "ownedBy",
                    "safeName": "ownedBy"
                  },
                  "snakeCase": {
                    "unsafeName": "owned_by",
                    "safeName": "owned_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "OWNED_BY",
                    "safeName": "OWNED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "OwnedBy",
                    "safeName": "OwnedBy"
                  }
                },
                "wireValue": "owned_by"
              },
              "docs": "Filters for work owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "stage.name",
                  "camelCase": {
                    "unsafeName": "stageName",
                    "safeName": "stageName"
                  },
                  "snakeCase": {
                    "unsafeName": "stage_name",
                    "safeName": "stage_name"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "STAGE_NAME",
                    "safeName": "STAGE_NAME"
                  },
                  "pascalCase": {
                    "unsafeName": "StageName",
                    "safeName": "StageName"
                  }
                },
                "wireValue": "stage.name"
              },
              "docs": "Filters for records in the provided stage(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "stage.name_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "ticket.rev_org",
                  "camelCase": {
                    "unsafeName": "ticketRevOrg",
                    "safeName": "ticketRevOrg"
                  },
                  "snakeCase": {
                    "unsafeName": "ticket_rev_org",
                    "safeName": "ticket_rev_org"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TICKET_REV_ORG",
                    "safeName": "TICKET_REV_ORG"
                  },
                  "pascalCase": {
                    "unsafeName": "TicketRevOrg",
                    "safeName": "TicketRevOrg"
                  }
                },
                "wireValue": "ticket.rev_org"
              },
              "docs": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.rev_org_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "ticket.severity",
                  "camelCase": {
                    "unsafeName": "ticketSeverity",
                    "safeName": "ticketSeverity"
                  },
                  "snakeCase": {
                    "unsafeName": "ticket_severity",
                    "safeName": "ticket_severity"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TICKET_SEVERITY",
                    "safeName": "TICKET_SEVERITY"
                  },
                  "pascalCase": {
                    "unsafeName": "TicketSeverity",
                    "safeName": "TicketSeverity"
                  }
                },
                "wireValue": "ticket.severity"
              },
              "docs": "Filters for tickets with any of the provided severities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "ticket-severity",
                          "camelCase": {
                            "unsafeName": "ticketSeverity",
                            "safeName": "ticketSeverity"
                          },
                          "snakeCase": {
                            "unsafeName": "ticket_severity",
                            "safeName": "ticket_severity"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "TICKET_SEVERITY",
                            "safeName": "TICKET_SEVERITY"
                          },
                          "pascalCase": {
                            "unsafeName": "TicketSeverity",
                            "safeName": "TicketSeverity"
                          }
                        },
                        "typeId": "ticket-severity",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.severity_example": [
                    "blocker"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TYPE",
                    "safeName": "TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Type",
                    "safeName": "Type"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for work of the provided types.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "work-type",
                          "camelCase": {
                            "unsafeName": "workType",
                            "safeName": "workType"
                          },
                          "snakeCase": {
                            "unsafeName": "work_type",
                            "safeName": "work_type"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "WORK_TYPE",
                            "safeName": "WORK_TYPE"
                          },
                          "pascalCase": {
                            "unsafeName": "WorkType",
                            "safeName": "WorkType"
                          }
                        },
                        "typeId": "work-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "issue"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestBadRequestError",
                    "safeName": "worksExportRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_bad_request_error",
                    "safeName": "works_export_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestBadRequestError",
                    "safeName": "WorksExportRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestUnauthorizedError",
                    "safeName": "worksExportRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_unauthorized_error",
                    "safeName": "works_export_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestUnauthorizedError",
                    "safeName": "WorksExportRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestForbiddenError",
                    "safeName": "worksExportRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_forbidden_error",
                    "safeName": "works_export_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestForbiddenError",
                    "safeName": "WorksExportRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestTooManyRequestsError",
                    "safeName": "worksExportRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_too_many_requests_error",
                    "safeName": "works_export_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestTooManyRequestsError",
                    "safeName": "WorksExportRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestInternalServerError",
                    "safeName": "worksExportRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_internal_server_error",
                    "safeName": "works_export_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestInternalServerError",
                    "safeName": "WorksExportRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-exportRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksExportRequestServiceUnavailableError",
                    "safeName": "worksExportRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_export_request_service_unavailable_error",
                    "safeName": "works_export_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksExportRequestServiceUnavailableError",
                    "safeName": "WorksExportRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-exportRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.export",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.export",
          "name": {
            "originalName": "export",
            "camelCase": {
              "unsafeName": "export",
              "safeName": "export_"
            },
            "snakeCase": {
              "unsafeName": "export",
              "safeName": "export_"
            },
            "screamingSnakeCase": {
              "unsafeName": "EXPORT",
              "safeName": "EXPORT"
            },
            "pascalCase": {
              "unsafeName": "Export",
              "safeName": "Export"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-export-response",
                    "camelCase": {
                      "unsafeName": "worksExportResponse",
                      "safeName": "worksExportResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_export_response",
                      "safeName": "works_export_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_EXPORT_RESPONSE",
                      "safeName": "WORKS_EXPORT_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksExportResponse",
                      "safeName": "WorksExportResponse"
                    }
                  },
                  "typeId": "works-export-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksExportExample": {
                      "works": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "applies_to_part": {
                            "display_id": "foo",
                            "id": "foo",
                            "name": "foo"
                          },
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "foo"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ],
                          "target_close_date": "foo",
                          "title": "foo",
                          "priority": "p0"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Exports a collection of work items.",
          "v2Examples": {
            "autogeneratedExamples": {
              "exportExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.export"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "works": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "applies_to_part": {
                            "display_id": "foo",
                            "id": "foo",
                            "name": "foo"
                          },
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "foo"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ],
                          "target_close_date": "foo",
                          "title": "foo",
                          "priority": "p0"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.get",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "id",
                  "camelCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "snakeCase": {
                    "unsafeName": "id",
                    "safeName": "id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ID",
                    "safeName": "ID"
                  },
                  "pascalCase": {
                    "unsafeName": "Id",
                    "safeName": "Id"
                  }
                },
                "wireValue": "id"
              },
              "docs": "The work's ID.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {},
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "id_example": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestBadRequestError",
                    "safeName": "worksGetRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_bad_request_error",
                    "safeName": "works_get_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestBadRequestError",
                    "safeName": "WorksGetRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestUnauthorizedError",
                    "safeName": "worksGetRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_unauthorized_error",
                    "safeName": "works_get_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestUnauthorizedError",
                    "safeName": "WorksGetRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestForbiddenError",
                    "safeName": "worksGetRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_forbidden_error",
                    "safeName": "works_get_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestForbiddenError",
                    "safeName": "WorksGetRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestNotFoundError",
                    "safeName": "worksGetRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_not_found_error",
                    "safeName": "works_get_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestNotFoundError",
                    "safeName": "WorksGetRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestTooManyRequestsError",
                    "safeName": "worksGetRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_too_many_requests_error",
                    "safeName": "works_get_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestTooManyRequestsError",
                    "safeName": "WorksGetRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestInternalServerError",
                    "safeName": "worksGetRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_internal_server_error",
                    "safeName": "works_get_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestInternalServerError",
                    "safeName": "WorksGetRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-getRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksGetRequestServiceUnavailableError",
                    "safeName": "worksGetRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_get_request_service_unavailable_error",
                    "safeName": "works_get_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksGetRequestServiceUnavailableError",
                    "safeName": "WorksGetRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-getRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.get",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.get",
          "name": {
            "originalName": "get",
            "camelCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "snakeCase": {
              "unsafeName": "get",
              "safeName": "get_"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET",
              "safeName": "GET"
            },
            "pascalCase": {
              "unsafeName": "Get",
              "safeName": "Get"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-get-response",
                    "camelCase": {
                      "unsafeName": "worksGetResponse",
                      "safeName": "worksGetResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_get_response",
                      "safeName": "works_get_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_GET_RESPONSE",
                      "safeName": "WORKS_GET_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksGetResponse",
                      "safeName": "WorksGetResponse"
                    }
                  },
                  "typeId": "works-get-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksGetExample": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Gets a work item's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "getExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.get"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>"
                  },
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "GET",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.list",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "applies_to_part",
                  "camelCase": {
                    "unsafeName": "appliesToPart",
                    "safeName": "appliesToPart"
                  },
                  "snakeCase": {
                    "unsafeName": "applies_to_part",
                    "safeName": "applies_to_part"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "APPLIES_TO_PART",
                    "safeName": "APPLIES_TO_PART"
                  },
                  "pascalCase": {
                    "unsafeName": "AppliesToPart",
                    "safeName": "AppliesToPart"
                  }
                },
                "wireValue": "applies_to_part"
              },
              "docs": "Filters for work belonging to any of the provided parts.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "applies_to_part_example": [
                    "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "created_by",
                  "camelCase": {
                    "unsafeName": "createdBy",
                    "safeName": "createdBy"
                  },
                  "snakeCase": {
                    "unsafeName": "created_by",
                    "safeName": "created_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_BY",
                    "safeName": "CREATED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedBy",
                    "safeName": "CreatedBy"
                  }
                },
                "wireValue": "created_by"
              },
              "docs": "Filters for work created by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "created_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "cursor",
                  "camelCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "snakeCase": {
                    "unsafeName": "cursor",
                    "safeName": "cursor"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CURSOR",
                    "safeName": "CURSOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Cursor",
                    "safeName": "Cursor"
                  }
                },
                "wireValue": "cursor"
              },
              "docs": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "STRING",
                      "v2": {
                        "validation": {},
                        "type": "string"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "cursor_example": "cursor"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "issue.priority",
                  "camelCase": {
                    "unsafeName": "issuePriority",
                    "safeName": "issuePriority"
                  },
                  "snakeCase": {
                    "unsafeName": "issue_priority",
                    "safeName": "issue_priority"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ISSUE_PRIORITY",
                    "safeName": "ISSUE_PRIORITY"
                  },
                  "pascalCase": {
                    "unsafeName": "IssuePriority",
                    "safeName": "IssuePriority"
                  }
                },
                "wireValue": "issue.priority"
              },
              "docs": "Filters for issues with any of the provided priorities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "issue-priority",
                          "camelCase": {
                            "unsafeName": "issuePriority",
                            "safeName": "issuePriority"
                          },
                          "snakeCase": {
                            "unsafeName": "issue_priority",
                            "safeName": "issue_priority"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "ISSUE_PRIORITY",
                            "safeName": "ISSUE_PRIORITY"
                          },
                          "pascalCase": {
                            "unsafeName": "IssuePriority",
                            "safeName": "IssuePriority"
                          }
                        },
                        "typeId": "issue-priority",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.priority_example": [
                    "p0"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "issue.rev_orgs",
                  "camelCase": {
                    "unsafeName": "issueRevOrgs",
                    "safeName": "issueRevOrgs"
                  },
                  "snakeCase": {
                    "unsafeName": "issue_rev_orgs",
                    "safeName": "issue_rev_orgs"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ISSUE_REV_ORGS",
                    "safeName": "ISSUE_REV_ORGS"
                  },
                  "pascalCase": {
                    "unsafeName": "IssueRevOrgs",
                    "safeName": "IssueRevOrgs"
                  }
                },
                "wireValue": "issue.rev_orgs"
              },
              "docs": "Filters for issues with any of the provided Rev organizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "issue.rev_orgs_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of works to return. The default is '50'.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "primitive": {
                      "v1": "INTEGER",
                      "v2": {
                        "validation": {},
                        "type": "integer"
                      }
                    },
                    "type": "primitive"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "limit_example": 42
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "mode",
                  "camelCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "snakeCase": {
                    "unsafeName": "mode",
                    "safeName": "mode"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "MODE",
                    "safeName": "MODE"
                  },
                  "pascalCase": {
                    "unsafeName": "Mode",
                    "safeName": "Mode"
                  }
                },
                "wireValue": "mode"
              },
              "docs": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "list-mode",
                      "camelCase": {
                        "unsafeName": "listMode",
                        "safeName": "listMode"
                      },
                      "snakeCase": {
                        "unsafeName": "list_mode",
                        "safeName": "list_mode"
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "LIST_MODE",
                        "safeName": "LIST_MODE"
                      },
                      "pascalCase": {
                        "unsafeName": "ListMode",
                        "safeName": "ListMode"
                      }
                    },
                    "typeId": "list-mode",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "mode_example": "after"
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "owned_by",
                  "camelCase": {
                    "unsafeName": "ownedBy",
                    "safeName": "ownedBy"
                  },
                  "snakeCase": {
                    "unsafeName": "owned_by",
                    "safeName": "owned_by"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "OWNED_BY",
                    "safeName": "OWNED_BY"
                  },
                  "pascalCase": {
                    "unsafeName": "OwnedBy",
                    "safeName": "OwnedBy"
                  }
                },
                "wireValue": "owned_by"
              },
              "docs": "Filters for work owned by any of these users.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "owned_by_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "stage.name",
                  "camelCase": {
                    "unsafeName": "stageName",
                    "safeName": "stageName"
                  },
                  "snakeCase": {
                    "unsafeName": "stage_name",
                    "safeName": "stage_name"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "STAGE_NAME",
                    "safeName": "STAGE_NAME"
                  },
                  "pascalCase": {
                    "unsafeName": "StageName",
                    "safeName": "StageName"
                  }
                },
                "wireValue": "stage.name"
              },
              "docs": "Filters for records in the provided stage(s).",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "stage.name_example": [
                    "foo"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "ticket.rev_org",
                  "camelCase": {
                    "unsafeName": "ticketRevOrg",
                    "safeName": "ticketRevOrg"
                  },
                  "snakeCase": {
                    "unsafeName": "ticket_rev_org",
                    "safeName": "ticket_rev_org"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TICKET_REV_ORG",
                    "safeName": "TICKET_REV_ORG"
                  },
                  "pascalCase": {
                    "unsafeName": "TicketRevOrg",
                    "safeName": "TicketRevOrg"
                  }
                },
                "wireValue": "ticket.rev_org"
              },
              "docs": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "primitive": {
                          "v1": "STRING",
                          "v2": {
                            "validation": {},
                            "type": "string"
                          }
                        },
                        "type": "primitive"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.rev_org_example": [
                    "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "ticket.severity",
                  "camelCase": {
                    "unsafeName": "ticketSeverity",
                    "safeName": "ticketSeverity"
                  },
                  "snakeCase": {
                    "unsafeName": "ticket_severity",
                    "safeName": "ticket_severity"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TICKET_SEVERITY",
                    "safeName": "TICKET_SEVERITY"
                  },
                  "pascalCase": {
                    "unsafeName": "TicketSeverity",
                    "safeName": "TicketSeverity"
                  }
                },
                "wireValue": "ticket.severity"
              },
              "docs": "Filters for tickets with any of the provided severities.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "ticket-severity",
                          "camelCase": {
                            "unsafeName": "ticketSeverity",
                            "safeName": "ticketSeverity"
                          },
                          "snakeCase": {
                            "unsafeName": "ticket_severity",
                            "safeName": "ticket_severity"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "TICKET_SEVERITY",
                            "safeName": "TICKET_SEVERITY"
                          },
                          "pascalCase": {
                            "unsafeName": "TicketSeverity",
                            "safeName": "TicketSeverity"
                          }
                        },
                        "typeId": "ticket-severity",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "ticket.severity_example": [
                    "blocker"
                  ]
                }
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TYPE",
                    "safeName": "TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Type",
                    "safeName": "Type"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filters for work of the provided types.",
              "valueType": {
                "container": {
                  "optional": {
                    "container": {
                      "list": {
                        "fernFilepath": {
                          "allParts": [],
                          "packagePath": []
                        },
                        "name": {
                          "originalName": "work-type",
                          "camelCase": {
                            "unsafeName": "workType",
                            "safeName": "workType"
                          },
                          "snakeCase": {
                            "unsafeName": "work_type",
                            "safeName": "work_type"
                          },
                          "screamingSnakeCase": {
                            "unsafeName": "WORK_TYPE",
                            "safeName": "WORK_TYPE"
                          },
                          "pascalCase": {
                            "unsafeName": "WorkType",
                            "safeName": "WorkType"
                          }
                        },
                        "typeId": "work-type",
                        "inline": false,
                        "type": "named"
                      },
                      "type": "list"
                    },
                    "type": "container"
                  },
                  "type": "optional"
                },
                "type": "container"
              },
              "allowMultiple": false,
              "v2Examples": {
                "userSpecifiedExamples": {},
                "autogeneratedExamples": {
                  "type_example": [
                    "issue"
                  ]
                }
              }
            }
          ],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksListRequestBadRequestError",
                    "safeName": "worksListRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_bad_request_error",
                    "safeName": "works_list_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestBadRequestError",
                    "safeName": "WorksListRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksListRequestUnauthorizedError",
                    "safeName": "worksListRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_unauthorized_error",
                    "safeName": "works_list_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestUnauthorizedError",
                    "safeName": "WorksListRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksListRequestForbiddenError",
                    "safeName": "worksListRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_forbidden_error",
                    "safeName": "works_list_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestForbiddenError",
                    "safeName": "WorksListRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksListRequestTooManyRequestsError",
                    "safeName": "worksListRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_too_many_requests_error",
                    "safeName": "works_list_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestTooManyRequestsError",
                    "safeName": "WorksListRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksListRequestInternalServerError",
                    "safeName": "worksListRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_internal_server_error",
                    "safeName": "works_list_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestInternalServerError",
                    "safeName": "WorksListRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-listRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksListRequestServiceUnavailableError",
                    "safeName": "worksListRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_list_request_service_unavailable_error",
                    "safeName": "works_list_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksListRequestServiceUnavailableError",
                    "safeName": "WorksListRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-listRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.list",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.list",
          "name": {
            "originalName": "list",
            "camelCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "snakeCase": {
              "unsafeName": "list",
              "safeName": "list"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST",
              "safeName": "LIST"
            },
            "pascalCase": {
              "unsafeName": "List",
              "safeName": "List"
            }
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-list-response",
                    "camelCase": {
                      "unsafeName": "worksListResponse",
                      "safeName": "worksListResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_list_response",
                      "safeName": "works_list_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_LIST_RESPONSE",
                      "safeName": "WORKS_LIST_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksListResponse",
                      "safeName": "WorksListResponse"
                    }
                  },
                  "typeId": "works-list-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksListExample": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "works": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "applies_to_part": {
                            "display_id": "foo",
                            "id": "foo",
                            "name": "foo"
                          },
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "foo"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ],
                          "target_close_date": "foo",
                          "title": "foo",
                          "priority": "p0"
                        }
                      ]
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Lists a collection of work items.",
          "v2Examples": {
            "autogeneratedExamples": {
              "listExample": {
                "request": {
                  "endpoint": {
                    "method": "GET",
                    "path": "/works.list"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "next_cursor": "foo",
                      "prev_cursor": "foo",
                      "works": [
                        {
                          "created_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "created_date": "foo",
                          "display_id": "foo",
                          "id": "foo",
                          "modified_by": {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          },
                          "modified_date": "foo",
                          "applies_to_part": {
                            "display_id": "foo",
                            "id": "foo",
                            "name": "foo"
                          },
                          "artifacts": [
                            {
                              "display_id": "foo",
                              "id": "foo"
                            }
                          ],
                          "body": "foo",
                          "owned_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "reported_by": [
                            {
                              "display_id": "foo",
                              "id": "foo",
                              "display_name": "foo",
                              "display_picture": {
                                "display_id": "foo",
                                "id": "foo"
                              },
                              "email": "foo",
                              "full_name": "foo",
                              "state": "active"
                            }
                          ],
                          "stage": {
                            "name": "foo"
                          },
                          "tags": [
                            {
                              "tag": {
                                "display_id": "foo",
                                "id": "foo",
                                "name": "foo"
                              },
                              "value": "foo"
                            }
                          ],
                          "target_close_date": "foo",
                          "title": "foo",
                          "priority": "p0"
                        }
                      ]
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        },
        {
          "method": "POST",
          "baseUrl": "DevRev API endpoint.",
          "path": {
            "head": "/works.update",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestBadRequestError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestBadRequestError",
                    "safeName": "worksUpdateRequestBadRequestError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_bad_request_error",
                    "safeName": "works_update_request_bad_request_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestBadRequestError",
                    "safeName": "WorksUpdateRequestBadRequestError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestBadRequestError"
              },
              "docs": "400 Bad Request."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestUnauthorizedError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestUnauthorizedError",
                    "safeName": "worksUpdateRequestUnauthorizedError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_unauthorized_error",
                    "safeName": "works_update_request_unauthorized_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestUnauthorizedError",
                    "safeName": "WorksUpdateRequestUnauthorizedError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestUnauthorizedError"
              },
              "docs": "401 Unauthorized."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestForbiddenError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestForbiddenError",
                    "safeName": "worksUpdateRequestForbiddenError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_forbidden_error",
                    "safeName": "works_update_request_forbidden_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestForbiddenError",
                    "safeName": "WorksUpdateRequestForbiddenError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestForbiddenError"
              },
              "docs": "403 Forbidden."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestNotFoundError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestNotFoundError",
                    "safeName": "worksUpdateRequestNotFoundError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_not_found_error",
                    "safeName": "works_update_request_not_found_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestNotFoundError",
                    "safeName": "WorksUpdateRequestNotFoundError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestNotFoundError"
              },
              "docs": "404 Not Found."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestTooManyRequestsError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestTooManyRequestsError",
                    "safeName": "worksUpdateRequestTooManyRequestsError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_too_many_requests_error",
                    "safeName": "works_update_request_too_many_requests_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestTooManyRequestsError",
                    "safeName": "WorksUpdateRequestTooManyRequestsError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestTooManyRequestsError"
              },
              "docs": "429 Too Many Requests."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestInternalServerError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestInternalServerError",
                    "safeName": "worksUpdateRequestInternalServerError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_internal_server_error",
                    "safeName": "works_update_request_internal_server_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestInternalServerError",
                    "safeName": "WorksUpdateRequestInternalServerError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestInternalServerError"
              },
              "docs": "500 Internal Server Error."
            },
            {
              "error": {
                "name": {
                  "originalName": "Works-updateRequestServiceUnavailableError",
                  "camelCase": {
                    "unsafeName": "worksUpdateRequestServiceUnavailableError",
                    "safeName": "worksUpdateRequestServiceUnavailableError"
                  },
                  "snakeCase": {
                    "unsafeName": "works_update_request_service_unavailable_error",
                    "safeName": "works_update_request_service_unavailable_error"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
                    "safeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
                  },
                  "pascalCase": {
                    "unsafeName": "WorksUpdateRequestServiceUnavailableError",
                    "safeName": "WorksUpdateRequestServiceUnavailableError"
                  }
                },
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "errorId": "Works-updateRequestServiceUnavailableError"
              },
              "docs": "503 Service Unavailable."
            }
          ],
          "auth": true,
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/works.update",
            "parts": []
          },
          "allPathParameters": [],
          "source": {
            "type": "openapi"
          },
          "audiences": [],
          "id": "endpoint_works.update",
          "name": {
            "originalName": "update",
            "camelCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "snakeCase": {
              "unsafeName": "update",
              "safeName": "update"
            },
            "screamingSnakeCase": {
              "unsafeName": "UPDATE",
              "safeName": "UPDATE"
            },
            "pascalCase": {
              "unsafeName": "Update",
              "safeName": "Update"
            }
          },
          "requestBody": {
            "contentType": "application/json",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "works-update-request",
                "camelCase": {
                  "unsafeName": "worksUpdateRequest",
                  "safeName": "worksUpdateRequest"
                },
                "snakeCase": {
                  "unsafeName": "works_update_request",
                  "safeName": "works_update_request"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WORKS_UPDATE_REQUEST",
                  "safeName": "WORKS_UPDATE_REQUEST"
                },
                "pascalCase": {
                  "unsafeName": "WorksUpdateRequest",
                  "safeName": "WorksUpdateRequest"
                }
              },
              "typeId": "works-update-request",
              "inline": false,
              "type": "named"
            },
            "v2Examples": {
              "userSpecifiedExamples": {},
              "autogeneratedExamples": {
                "worksUpdateExample": {}
              }
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "works-update-response",
                    "camelCase": {
                      "unsafeName": "worksUpdateResponse",
                      "safeName": "worksUpdateResponse"
                    },
                    "snakeCase": {
                      "unsafeName": "works_update_response",
                      "safeName": "works_update_response"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "WORKS_UPDATE_RESPONSE",
                      "safeName": "WORKS_UPDATE_RESPONSE"
                    },
                    "pascalCase": {
                      "unsafeName": "WorksUpdateResponse",
                      "safeName": "WorksUpdateResponse"
                    }
                  },
                  "typeId": "works-update-response",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Success.",
                "v2Examples": {
                  "userSpecifiedExamples": {},
                  "autogeneratedExamples": {
                    "worksUpdateExample": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    }
                  }
                },
                "type": "response"
              },
              "type": "json"
            }
          },
          "docs": "Updates a work item's information.",
          "v2Examples": {
            "autogeneratedExamples": {
              "worksUpdateExample": {
                "request": {
                  "endpoint": {
                    "method": "POST",
                    "path": "/works.update"
                  },
                  "environment": "DevRev API endpoint.",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {}
                },
                "response": {
                  "statusCode": 200,
                  "body": {
                    "value": {
                      "work": {
                        "created_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "created_date": "foo",
                        "display_id": "foo",
                        "id": "foo",
                        "modified_by": {
                          "display_id": "foo",
                          "id": "foo",
                          "display_name": "foo",
                          "display_picture": {
                            "display_id": "foo",
                            "id": "foo"
                          },
                          "email": "foo",
                          "full_name": "foo",
                          "state": "active"
                        },
                        "modified_date": "foo",
                        "applies_to_part": {
                          "display_id": "foo",
                          "id": "foo",
                          "name": "foo"
                        },
                        "artifacts": [
                          {
                            "display_id": "foo",
                            "id": "foo"
                          }
                        ],
                        "body": "foo",
                        "owned_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "reported_by": [
                          {
                            "display_id": "foo",
                            "id": "foo",
                            "display_name": "foo",
                            "display_picture": {
                              "display_id": "foo",
                              "id": "foo"
                            },
                            "email": "foo",
                            "full_name": "foo",
                            "state": "active"
                          }
                        ],
                        "stage": {
                          "name": "foo"
                        },
                        "tags": [
                          {
                            "tag": {
                              "display_id": "foo",
                              "id": "foo",
                              "name": "foo"
                            },
                            "value": "foo"
                          }
                        ],
                        "target_close_date": "foo",
                        "title": "foo",
                        "priority": "p0"
                      }
                    },
                    "type": "json"
                  }
                }
              }
            },
            "userSpecifiedExamples": {}
          }
        }
      ]
    }
  },
  "errors": {
    "Artifacts-locateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestBadRequestError",
            "safeName": "artifactsLocateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_bad_request_error",
            "safeName": "artifacts_locate_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestBadRequestError",
            "safeName": "ArtifactsLocateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestBadRequestError",
            "safeName": "artifactsLocateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_bad_request_error",
            "safeName": "artifacts_locate_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestBadRequestError",
            "safeName": "ArtifactsLocateRequestBadRequestError"
          }
        },
        "wireValue": "Artifacts-locateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Artifacts-locateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestUnauthorizedError",
            "safeName": "artifactsLocateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_unauthorized_error",
            "safeName": "artifacts_locate_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestUnauthorizedError",
            "safeName": "ArtifactsLocateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestUnauthorizedError",
            "safeName": "artifactsLocateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_unauthorized_error",
            "safeName": "artifacts_locate_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestUnauthorizedError",
            "safeName": "ArtifactsLocateRequestUnauthorizedError"
          }
        },
        "wireValue": "Artifacts-locateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Artifacts-locateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestForbiddenError",
            "safeName": "artifactsLocateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_forbidden_error",
            "safeName": "artifacts_locate_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestForbiddenError",
            "safeName": "ArtifactsLocateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestForbiddenError",
            "safeName": "artifactsLocateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_forbidden_error",
            "safeName": "artifacts_locate_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestForbiddenError",
            "safeName": "ArtifactsLocateRequestForbiddenError"
          }
        },
        "wireValue": "Artifacts-locateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Artifacts-locateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestNotFoundError",
            "safeName": "artifactsLocateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_not_found_error",
            "safeName": "artifacts_locate_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestNotFoundError",
            "safeName": "ArtifactsLocateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestNotFoundError",
            "safeName": "artifactsLocateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_not_found_error",
            "safeName": "artifacts_locate_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestNotFoundError",
            "safeName": "ArtifactsLocateRequestNotFoundError"
          }
        },
        "wireValue": "Artifacts-locateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Artifacts-locateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestTooManyRequestsError",
            "safeName": "artifactsLocateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_too_many_requests_error",
            "safeName": "artifacts_locate_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestTooManyRequestsError",
            "safeName": "ArtifactsLocateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestTooManyRequestsError",
            "safeName": "artifactsLocateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_too_many_requests_error",
            "safeName": "artifacts_locate_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestTooManyRequestsError",
            "safeName": "ArtifactsLocateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Artifacts-locateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Artifacts-locateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestInternalServerError",
            "safeName": "artifactsLocateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_internal_server_error",
            "safeName": "artifacts_locate_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestInternalServerError",
            "safeName": "ArtifactsLocateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestInternalServerError",
            "safeName": "artifactsLocateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_internal_server_error",
            "safeName": "artifacts_locate_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestInternalServerError",
            "safeName": "ArtifactsLocateRequestInternalServerError"
          }
        },
        "wireValue": "Artifacts-locateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Artifacts-locateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Artifacts-locateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestServiceUnavailableError",
            "safeName": "artifactsLocateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_service_unavailable_error",
            "safeName": "artifacts_locate_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestServiceUnavailableError",
            "safeName": "ArtifactsLocateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-locateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-locateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "artifactsLocateRequestServiceUnavailableError",
            "safeName": "artifactsLocateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_locate_request_service_unavailable_error",
            "safeName": "artifacts_locate_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "ARTIFACTS_LOCATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsLocateRequestServiceUnavailableError",
            "safeName": "ArtifactsLocateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Artifacts-locateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Artifacts-prepareRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestBadRequestError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestBadRequestError",
            "safeName": "artifactsPrepareRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_bad_request_error",
            "safeName": "artifacts_prepare_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestBadRequestError",
            "safeName": "ArtifactsPrepareRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestBadRequestError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestBadRequestError",
            "safeName": "artifactsPrepareRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_bad_request_error",
            "safeName": "artifacts_prepare_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestBadRequestError",
            "safeName": "ArtifactsPrepareRequestBadRequestError"
          }
        },
        "wireValue": "Artifacts-prepareRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Artifacts-prepareRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestUnauthorizedError",
            "safeName": "artifactsPrepareRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_unauthorized_error",
            "safeName": "artifacts_prepare_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestUnauthorizedError",
            "safeName": "ArtifactsPrepareRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestUnauthorizedError",
            "safeName": "artifactsPrepareRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_unauthorized_error",
            "safeName": "artifacts_prepare_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestUnauthorizedError",
            "safeName": "ArtifactsPrepareRequestUnauthorizedError"
          }
        },
        "wireValue": "Artifacts-prepareRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Artifacts-prepareRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestForbiddenError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestForbiddenError",
            "safeName": "artifactsPrepareRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_forbidden_error",
            "safeName": "artifacts_prepare_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestForbiddenError",
            "safeName": "ArtifactsPrepareRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestForbiddenError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestForbiddenError",
            "safeName": "artifactsPrepareRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_forbidden_error",
            "safeName": "artifacts_prepare_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestForbiddenError",
            "safeName": "ArtifactsPrepareRequestForbiddenError"
          }
        },
        "wireValue": "Artifacts-prepareRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Artifacts-prepareRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestTooManyRequestsError",
            "safeName": "artifactsPrepareRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_too_many_requests_error",
            "safeName": "artifacts_prepare_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestTooManyRequestsError",
            "safeName": "ArtifactsPrepareRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestTooManyRequestsError",
            "safeName": "artifactsPrepareRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_too_many_requests_error",
            "safeName": "artifacts_prepare_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestTooManyRequestsError",
            "safeName": "ArtifactsPrepareRequestTooManyRequestsError"
          }
        },
        "wireValue": "Artifacts-prepareRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Artifacts-prepareRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestInternalServerError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestInternalServerError",
            "safeName": "artifactsPrepareRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_internal_server_error",
            "safeName": "artifacts_prepare_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestInternalServerError",
            "safeName": "ArtifactsPrepareRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestInternalServerError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestInternalServerError",
            "safeName": "artifactsPrepareRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_internal_server_error",
            "safeName": "artifacts_prepare_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestInternalServerError",
            "safeName": "ArtifactsPrepareRequestInternalServerError"
          }
        },
        "wireValue": "Artifacts-prepareRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Artifacts-prepareRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Artifacts-prepareRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestServiceUnavailableError",
            "safeName": "artifactsPrepareRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_service_unavailable_error",
            "safeName": "artifacts_prepare_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestServiceUnavailableError",
            "safeName": "ArtifactsPrepareRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Artifacts-prepareRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Artifacts-prepareRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "artifactsPrepareRequestServiceUnavailableError",
            "safeName": "artifactsPrepareRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "artifacts_prepare_request_service_unavailable_error",
            "safeName": "artifacts_prepare_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "ARTIFACTS_PREPARE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ArtifactsPrepareRequestServiceUnavailableError",
            "safeName": "ArtifactsPrepareRequestServiceUnavailableError"
          }
        },
        "wireValue": "Artifacts-prepareRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestBadRequestError",
            "safeName": "authTokensCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_bad_request_error",
            "safeName": "auth_tokens_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestBadRequestError",
            "safeName": "AuthTokensCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestBadRequestError",
            "safeName": "authTokensCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_bad_request_error",
            "safeName": "auth_tokens_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestBadRequestError",
            "safeName": "AuthTokensCreateRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestUnauthorizedError",
            "safeName": "authTokensCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_unauthorized_error",
            "safeName": "auth_tokens_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestUnauthorizedError",
            "safeName": "AuthTokensCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestUnauthorizedError",
            "safeName": "authTokensCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_unauthorized_error",
            "safeName": "auth_tokens_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestUnauthorizedError",
            "safeName": "AuthTokensCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestForbiddenError",
            "safeName": "authTokensCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_forbidden_error",
            "safeName": "auth_tokens_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestForbiddenError",
            "safeName": "AuthTokensCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestForbiddenError",
            "safeName": "authTokensCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_forbidden_error",
            "safeName": "auth_tokens_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestForbiddenError",
            "safeName": "AuthTokensCreateRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestTooManyRequestsError",
            "safeName": "authTokensCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_too_many_requests_error",
            "safeName": "auth_tokens_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestTooManyRequestsError",
            "safeName": "AuthTokensCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestTooManyRequestsError",
            "safeName": "authTokensCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_too_many_requests_error",
            "safeName": "auth_tokens_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestTooManyRequestsError",
            "safeName": "AuthTokensCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestInternalServerError",
            "safeName": "authTokensCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_internal_server_error",
            "safeName": "auth_tokens_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestInternalServerError",
            "safeName": "AuthTokensCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestInternalServerError",
            "safeName": "authTokensCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_internal_server_error",
            "safeName": "auth_tokens_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestInternalServerError",
            "safeName": "AuthTokensCreateRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestServiceUnavailableError",
            "safeName": "authTokensCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_service_unavailable_error",
            "safeName": "auth_tokens_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestServiceUnavailableError",
            "safeName": "AuthTokensCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensCreateRequestServiceUnavailableError",
            "safeName": "authTokensCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_create_request_service_unavailable_error",
            "safeName": "auth_tokens_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensCreateRequestServiceUnavailableError",
            "safeName": "AuthTokensCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestBadRequestError",
            "safeName": "authTokensDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_bad_request_error",
            "safeName": "auth_tokens_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestBadRequestError",
            "safeName": "AuthTokensDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestBadRequestError",
            "safeName": "authTokensDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_bad_request_error",
            "safeName": "auth_tokens_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestBadRequestError",
            "safeName": "AuthTokensDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestUnauthorizedError",
            "safeName": "authTokensDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_unauthorized_error",
            "safeName": "auth_tokens_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestUnauthorizedError",
            "safeName": "AuthTokensDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestUnauthorizedError",
            "safeName": "authTokensDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_unauthorized_error",
            "safeName": "auth_tokens_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestUnauthorizedError",
            "safeName": "AuthTokensDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestForbiddenError",
            "safeName": "authTokensDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_forbidden_error",
            "safeName": "auth_tokens_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestForbiddenError",
            "safeName": "AuthTokensDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestForbiddenError",
            "safeName": "authTokensDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_forbidden_error",
            "safeName": "auth_tokens_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestForbiddenError",
            "safeName": "AuthTokensDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestNotFoundError",
            "safeName": "authTokensDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_not_found_error",
            "safeName": "auth_tokens_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestNotFoundError",
            "safeName": "AuthTokensDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestNotFoundError",
            "safeName": "authTokensDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_not_found_error",
            "safeName": "auth_tokens_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestNotFoundError",
            "safeName": "AuthTokensDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Auth-tokens-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestTooManyRequestsError",
            "safeName": "authTokensDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_too_many_requests_error",
            "safeName": "auth_tokens_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestTooManyRequestsError",
            "safeName": "AuthTokensDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestTooManyRequestsError",
            "safeName": "authTokensDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_too_many_requests_error",
            "safeName": "auth_tokens_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestTooManyRequestsError",
            "safeName": "AuthTokensDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestInternalServerError",
            "safeName": "authTokensDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_internal_server_error",
            "safeName": "auth_tokens_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestInternalServerError",
            "safeName": "AuthTokensDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestInternalServerError",
            "safeName": "authTokensDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_internal_server_error",
            "safeName": "auth_tokens_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestInternalServerError",
            "safeName": "AuthTokensDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestServiceUnavailableError",
            "safeName": "authTokensDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_service_unavailable_error",
            "safeName": "auth_tokens_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestServiceUnavailableError",
            "safeName": "AuthTokensDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensDeleteRequestServiceUnavailableError",
            "safeName": "authTokensDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_delete_request_service_unavailable_error",
            "safeName": "auth_tokens_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensDeleteRequestServiceUnavailableError",
            "safeName": "AuthTokensDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestBadRequestError",
            "safeName": "authTokensGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_bad_request_error",
            "safeName": "auth_tokens_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestBadRequestError",
            "safeName": "AuthTokensGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestBadRequestError",
            "safeName": "authTokensGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_bad_request_error",
            "safeName": "auth_tokens_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestBadRequestError",
            "safeName": "AuthTokensGetRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestUnauthorizedError",
            "safeName": "authTokensGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_unauthorized_error",
            "safeName": "auth_tokens_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestUnauthorizedError",
            "safeName": "AuthTokensGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestUnauthorizedError",
            "safeName": "authTokensGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_unauthorized_error",
            "safeName": "auth_tokens_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestUnauthorizedError",
            "safeName": "AuthTokensGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestForbiddenError",
            "safeName": "authTokensGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_forbidden_error",
            "safeName": "auth_tokens_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestForbiddenError",
            "safeName": "AuthTokensGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestForbiddenError",
            "safeName": "authTokensGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_forbidden_error",
            "safeName": "auth_tokens_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestForbiddenError",
            "safeName": "AuthTokensGetRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestNotFoundError",
            "safeName": "authTokensGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_not_found_error",
            "safeName": "auth_tokens_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestNotFoundError",
            "safeName": "AuthTokensGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestNotFoundError",
            "safeName": "authTokensGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_not_found_error",
            "safeName": "auth_tokens_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestNotFoundError",
            "safeName": "AuthTokensGetRequestNotFoundError"
          }
        },
        "wireValue": "Auth-tokens-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Auth-tokens-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestTooManyRequestsError",
            "safeName": "authTokensGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_too_many_requests_error",
            "safeName": "auth_tokens_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestTooManyRequestsError",
            "safeName": "AuthTokensGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestTooManyRequestsError",
            "safeName": "authTokensGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_too_many_requests_error",
            "safeName": "auth_tokens_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestTooManyRequestsError",
            "safeName": "AuthTokensGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestInternalServerError",
            "safeName": "authTokensGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_internal_server_error",
            "safeName": "auth_tokens_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestInternalServerError",
            "safeName": "AuthTokensGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestInternalServerError",
            "safeName": "authTokensGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_internal_server_error",
            "safeName": "auth_tokens_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestInternalServerError",
            "safeName": "AuthTokensGetRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestServiceUnavailableError",
            "safeName": "authTokensGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_service_unavailable_error",
            "safeName": "auth_tokens_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestServiceUnavailableError",
            "safeName": "AuthTokensGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensGetRequestServiceUnavailableError",
            "safeName": "authTokensGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_get_request_service_unavailable_error",
            "safeName": "auth_tokens_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensGetRequestServiceUnavailableError",
            "safeName": "AuthTokensGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensListRequestBadRequestError",
            "safeName": "authTokensListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_bad_request_error",
            "safeName": "auth_tokens_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestBadRequestError",
            "safeName": "AuthTokensListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensListRequestBadRequestError",
            "safeName": "authTokensListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_bad_request_error",
            "safeName": "auth_tokens_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestBadRequestError",
            "safeName": "AuthTokensListRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensListRequestUnauthorizedError",
            "safeName": "authTokensListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_unauthorized_error",
            "safeName": "auth_tokens_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestUnauthorizedError",
            "safeName": "AuthTokensListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensListRequestUnauthorizedError",
            "safeName": "authTokensListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_unauthorized_error",
            "safeName": "auth_tokens_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestUnauthorizedError",
            "safeName": "AuthTokensListRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensListRequestForbiddenError",
            "safeName": "authTokensListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_forbidden_error",
            "safeName": "auth_tokens_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestForbiddenError",
            "safeName": "AuthTokensListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensListRequestForbiddenError",
            "safeName": "authTokensListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_forbidden_error",
            "safeName": "auth_tokens_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestForbiddenError",
            "safeName": "AuthTokensListRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-listRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensListRequestNotFoundError",
            "safeName": "authTokensListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_not_found_error",
            "safeName": "auth_tokens_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestNotFoundError",
            "safeName": "AuthTokensListRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensListRequestNotFoundError",
            "safeName": "authTokensListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_not_found_error",
            "safeName": "auth_tokens_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestNotFoundError",
            "safeName": "AuthTokensListRequestNotFoundError"
          }
        },
        "wireValue": "Auth-tokens-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Auth-tokens-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensListRequestTooManyRequestsError",
            "safeName": "authTokensListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_too_many_requests_error",
            "safeName": "auth_tokens_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestTooManyRequestsError",
            "safeName": "AuthTokensListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensListRequestTooManyRequestsError",
            "safeName": "authTokensListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_too_many_requests_error",
            "safeName": "auth_tokens_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestTooManyRequestsError",
            "safeName": "AuthTokensListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensListRequestInternalServerError",
            "safeName": "authTokensListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_internal_server_error",
            "safeName": "auth_tokens_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestInternalServerError",
            "safeName": "AuthTokensListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensListRequestInternalServerError",
            "safeName": "authTokensListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_internal_server_error",
            "safeName": "auth_tokens_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestInternalServerError",
            "safeName": "AuthTokensListRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensListRequestServiceUnavailableError",
            "safeName": "authTokensListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_service_unavailable_error",
            "safeName": "auth_tokens_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestServiceUnavailableError",
            "safeName": "AuthTokensListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensListRequestServiceUnavailableError",
            "safeName": "authTokensListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_list_request_service_unavailable_error",
            "safeName": "auth_tokens_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensListRequestServiceUnavailableError",
            "safeName": "AuthTokensListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestBadRequestError",
            "safeName": "authTokensSelfDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_bad_request_error",
            "safeName": "auth_tokens_self_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestBadRequestError",
            "safeName": "AuthTokensSelfDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestBadRequestError",
            "safeName": "authTokensSelfDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_bad_request_error",
            "safeName": "auth_tokens_self_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestBadRequestError",
            "safeName": "AuthTokensSelfDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestUnauthorizedError",
            "safeName": "authTokensSelfDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_unauthorized_error",
            "safeName": "auth_tokens_self_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestUnauthorizedError",
            "safeName": "AuthTokensSelfDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestUnauthorizedError",
            "safeName": "authTokensSelfDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_unauthorized_error",
            "safeName": "auth_tokens_self_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestUnauthorizedError",
            "safeName": "AuthTokensSelfDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestForbiddenError",
            "safeName": "authTokensSelfDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_forbidden_error",
            "safeName": "auth_tokens_self_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestForbiddenError",
            "safeName": "AuthTokensSelfDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestForbiddenError",
            "safeName": "authTokensSelfDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_forbidden_error",
            "safeName": "auth_tokens_self_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestForbiddenError",
            "safeName": "AuthTokensSelfDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestNotFoundError",
            "safeName": "authTokensSelfDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_not_found_error",
            "safeName": "auth_tokens_self_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestNotFoundError",
            "safeName": "AuthTokensSelfDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestNotFoundError",
            "safeName": "authTokensSelfDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_not_found_error",
            "safeName": "auth_tokens_self_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestNotFoundError",
            "safeName": "AuthTokensSelfDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestTooManyRequestsError",
            "safeName": "authTokensSelfDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_too_many_requests_error",
            "safeName": "auth_tokens_self_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestTooManyRequestsError",
            "safeName": "AuthTokensSelfDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestTooManyRequestsError",
            "safeName": "authTokensSelfDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_too_many_requests_error",
            "safeName": "auth_tokens_self_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestTooManyRequestsError",
            "safeName": "AuthTokensSelfDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestInternalServerError",
            "safeName": "authTokensSelfDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_internal_server_error",
            "safeName": "auth_tokens_self_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestInternalServerError",
            "safeName": "AuthTokensSelfDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestInternalServerError",
            "safeName": "authTokensSelfDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_internal_server_error",
            "safeName": "auth_tokens_self_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestInternalServerError",
            "safeName": "AuthTokensSelfDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-self-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestServiceUnavailableError",
            "safeName": "authTokensSelfDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_service_unavailable_error",
            "safeName": "auth_tokens_self_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestServiceUnavailableError",
            "safeName": "AuthTokensSelfDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-self-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-self-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensSelfDeleteRequestServiceUnavailableError",
            "safeName": "authTokensSelfDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_self_delete_request_service_unavailable_error",
            "safeName": "auth_tokens_self_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_SELF_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensSelfDeleteRequestServiceUnavailableError",
            "safeName": "AuthTokensSelfDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-self-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Auth-tokens-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestBadRequestError",
            "safeName": "authTokensUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_bad_request_error",
            "safeName": "auth_tokens_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestBadRequestError",
            "safeName": "AuthTokensUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestBadRequestError",
            "safeName": "authTokensUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_bad_request_error",
            "safeName": "auth_tokens_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestBadRequestError",
            "safeName": "AuthTokensUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Auth-tokens-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestUnauthorizedError",
            "safeName": "authTokensUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_unauthorized_error",
            "safeName": "auth_tokens_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestUnauthorizedError",
            "safeName": "AuthTokensUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestUnauthorizedError",
            "safeName": "authTokensUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_unauthorized_error",
            "safeName": "auth_tokens_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestUnauthorizedError",
            "safeName": "AuthTokensUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Auth-tokens-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestForbiddenError",
            "safeName": "authTokensUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_forbidden_error",
            "safeName": "auth_tokens_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestForbiddenError",
            "safeName": "AuthTokensUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestForbiddenError",
            "safeName": "authTokensUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_forbidden_error",
            "safeName": "auth_tokens_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestForbiddenError",
            "safeName": "AuthTokensUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Auth-tokens-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestNotFoundError",
            "safeName": "authTokensUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_not_found_error",
            "safeName": "auth_tokens_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestNotFoundError",
            "safeName": "AuthTokensUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestNotFoundError",
            "safeName": "authTokensUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_not_found_error",
            "safeName": "auth_tokens_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestNotFoundError",
            "safeName": "AuthTokensUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Auth-tokens-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestTooManyRequestsError",
            "safeName": "authTokensUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_too_many_requests_error",
            "safeName": "auth_tokens_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestTooManyRequestsError",
            "safeName": "AuthTokensUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestTooManyRequestsError",
            "safeName": "authTokensUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_too_many_requests_error",
            "safeName": "auth_tokens_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestTooManyRequestsError",
            "safeName": "AuthTokensUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Auth-tokens-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestInternalServerError",
            "safeName": "authTokensUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_internal_server_error",
            "safeName": "auth_tokens_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestInternalServerError",
            "safeName": "AuthTokensUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestInternalServerError",
            "safeName": "authTokensUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_internal_server_error",
            "safeName": "auth_tokens_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestInternalServerError",
            "safeName": "AuthTokensUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Auth-tokens-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Auth-tokens-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestServiceUnavailableError",
            "safeName": "authTokensUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_service_unavailable_error",
            "safeName": "auth_tokens_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestServiceUnavailableError",
            "safeName": "AuthTokensUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Auth-tokens-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Auth-tokens-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "authTokensUpdateRequestServiceUnavailableError",
            "safeName": "authTokensUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens_update_request_service_unavailable_error",
            "safeName": "auth_tokens_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "AUTH_TOKENS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "AuthTokensUpdateRequestServiceUnavailableError",
            "safeName": "AuthTokensUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Auth-tokens-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_bad_request_error",
            "safeName": "dev_org_auth_connections_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_bad_request_error",
            "safeName": "dev_org_auth_connections_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsCreateRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_forbidden_error",
            "safeName": "dev_org_auth_connections_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_forbidden_error",
            "safeName": "dev_org_auth_connections_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsCreateRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_internal_server_error",
            "safeName": "dev_org_auth_connections_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_internal_server_error",
            "safeName": "dev_org_auth_connections_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsCreateRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_create_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_bad_request_error",
            "safeName": "dev_org_auth_connections_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_bad_request_error",
            "safeName": "dev_org_auth_connections_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_forbidden_error",
            "safeName": "dev_org_auth_connections_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_forbidden_error",
            "safeName": "dev_org_auth_connections_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_not_found_error",
            "safeName": "dev_org_auth_connections_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_not_found_error",
            "safeName": "dev_org_auth_connections_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_internal_server_error",
            "safeName": "dev_org_auth_connections_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_internal_server_error",
            "safeName": "dev_org_auth_connections_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_delete_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_bad_request_error",
            "safeName": "dev_org_auth_connections_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_bad_request_error",
            "safeName": "dev_org_auth_connections_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsGetRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_forbidden_error",
            "safeName": "dev_org_auth_connections_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_forbidden_error",
            "safeName": "dev_org_auth_connections_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsGetRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_not_found_error",
            "safeName": "dev_org_auth_connections_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_not_found_error",
            "safeName": "dev_org_auth_connections_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsGetRequestNotFoundError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_internal_server_error",
            "safeName": "dev_org_auth_connections_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_internal_server_error",
            "safeName": "dev_org_auth_connections_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsGetRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_get_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_bad_request_error",
            "safeName": "dev_org_auth_connections_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_bad_request_error",
            "safeName": "dev_org_auth_connections_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsListRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsListRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_forbidden_error",
            "safeName": "dev_org_auth_connections_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_forbidden_error",
            "safeName": "dev_org_auth_connections_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsListRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_internal_server_error",
            "safeName": "dev_org_auth_connections_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_internal_server_error",
            "safeName": "dev_org_auth_connections_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsListRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsListRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_list_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsToggleRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_bad_request_error",
            "safeName": "dev_org_auth_connections_toggle_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsToggleRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsToggleRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_bad_request_error",
            "safeName": "dev_org_auth_connections_toggle_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsToggleRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_toggle_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsToggleRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_toggle_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsToggleRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsToggleRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_forbidden_error",
            "safeName": "dev_org_auth_connections_toggle_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsToggleRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsToggleRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_forbidden_error",
            "safeName": "dev_org_auth_connections_toggle_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsToggleRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsToggleRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_not_found_error",
            "safeName": "dev_org_auth_connections_toggle_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsToggleRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsToggleRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_not_found_error",
            "safeName": "dev_org_auth_connections_toggle_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsToggleRequestNotFoundError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_toggle_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsToggleRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_toggle_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsToggleRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsToggleRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_internal_server_error",
            "safeName": "dev_org_auth_connections_toggle_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsToggleRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsToggleRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_internal_server_error",
            "safeName": "dev_org_auth_connections_toggle_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsToggleRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-toggleRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_toggle_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-toggleRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsToggleRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_toggle_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_toggle_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_TOGGLE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsToggleRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-toggleRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_bad_request_error",
            "safeName": "dev_org_auth_connections_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestBadRequestError",
            "safeName": "devOrgAuthConnectionsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_bad_request_error",
            "safeName": "dev_org_auth_connections_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError",
            "safeName": "devOrgAuthConnectionsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_unauthorized_error",
            "safeName": "dev_org_auth_connections_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_forbidden_error",
            "safeName": "dev_org_auth_connections_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestForbiddenError",
            "safeName": "devOrgAuthConnectionsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_forbidden_error",
            "safeName": "dev_org_auth_connections_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_not_found_error",
            "safeName": "dev_org_auth_connections_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestNotFoundError",
            "safeName": "devOrgAuthConnectionsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_not_found_error",
            "safeName": "dev_org_auth_connections_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError",
            "safeName": "devOrgAuthConnectionsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_too_many_requests_error",
            "safeName": "dev_org_auth_connections_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_internal_server_error",
            "safeName": "dev_org_auth_connections_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestInternalServerError",
            "safeName": "devOrgAuthConnectionsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_internal_server_error",
            "safeName": "dev_org_auth_connections_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-org-auth-connections-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-org-auth-connections-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError",
            "safeName": "devOrgAuthConnectionsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_org_auth_connections_update_request_service_unavailable_error",
            "safeName": "dev_org_auth_connections_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_ORG_AUTH_CONNECTIONS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError",
            "safeName": "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-org-auth-connections-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-users-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devUsersListRequestBadRequestError",
            "safeName": "devUsersListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_bad_request_error",
            "safeName": "dev_users_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestBadRequestError",
            "safeName": "DevUsersListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devUsersListRequestBadRequestError",
            "safeName": "devUsersListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_bad_request_error",
            "safeName": "dev_users_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestBadRequestError",
            "safeName": "DevUsersListRequestBadRequestError"
          }
        },
        "wireValue": "Dev-users-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-users-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devUsersListRequestUnauthorizedError",
            "safeName": "devUsersListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_unauthorized_error",
            "safeName": "dev_users_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestUnauthorizedError",
            "safeName": "DevUsersListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devUsersListRequestUnauthorizedError",
            "safeName": "devUsersListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_unauthorized_error",
            "safeName": "dev_users_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestUnauthorizedError",
            "safeName": "DevUsersListRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-users-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-users-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devUsersListRequestForbiddenError",
            "safeName": "devUsersListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_forbidden_error",
            "safeName": "dev_users_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestForbiddenError",
            "safeName": "DevUsersListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devUsersListRequestForbiddenError",
            "safeName": "devUsersListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_forbidden_error",
            "safeName": "dev_users_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestForbiddenError",
            "safeName": "DevUsersListRequestForbiddenError"
          }
        },
        "wireValue": "Dev-users-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-users-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devUsersListRequestTooManyRequestsError",
            "safeName": "devUsersListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_too_many_requests_error",
            "safeName": "dev_users_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestTooManyRequestsError",
            "safeName": "DevUsersListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devUsersListRequestTooManyRequestsError",
            "safeName": "devUsersListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_too_many_requests_error",
            "safeName": "dev_users_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestTooManyRequestsError",
            "safeName": "DevUsersListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-users-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-users-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devUsersListRequestInternalServerError",
            "safeName": "devUsersListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_internal_server_error",
            "safeName": "dev_users_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestInternalServerError",
            "safeName": "DevUsersListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devUsersListRequestInternalServerError",
            "safeName": "devUsersListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_internal_server_error",
            "safeName": "dev_users_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestInternalServerError",
            "safeName": "DevUsersListRequestInternalServerError"
          }
        },
        "wireValue": "Dev-users-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-users-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-users-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devUsersListRequestServiceUnavailableError",
            "safeName": "devUsersListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_service_unavailable_error",
            "safeName": "dev_users_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestServiceUnavailableError",
            "safeName": "DevUsersListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devUsersListRequestServiceUnavailableError",
            "safeName": "devUsersListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_list_request_service_unavailable_error",
            "safeName": "dev_users_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_USERS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersListRequestServiceUnavailableError",
            "safeName": "DevUsersListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-users-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Dev-users-selfRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestBadRequestError",
            "safeName": "devUsersSelfRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_bad_request_error",
            "safeName": "dev_users_self_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestBadRequestError",
            "safeName": "DevUsersSelfRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestBadRequestError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestBadRequestError",
            "safeName": "devUsersSelfRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_bad_request_error",
            "safeName": "dev_users_self_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestBadRequestError",
            "safeName": "DevUsersSelfRequestBadRequestError"
          }
        },
        "wireValue": "Dev-users-selfRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Dev-users-selfRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestUnauthorizedError",
            "safeName": "devUsersSelfRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_unauthorized_error",
            "safeName": "dev_users_self_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestUnauthorizedError",
            "safeName": "DevUsersSelfRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestUnauthorizedError",
            "safeName": "devUsersSelfRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_unauthorized_error",
            "safeName": "dev_users_self_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestUnauthorizedError",
            "safeName": "DevUsersSelfRequestUnauthorizedError"
          }
        },
        "wireValue": "Dev-users-selfRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Dev-users-selfRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestForbiddenError",
            "safeName": "devUsersSelfRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_forbidden_error",
            "safeName": "dev_users_self_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestForbiddenError",
            "safeName": "DevUsersSelfRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestForbiddenError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestForbiddenError",
            "safeName": "devUsersSelfRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_forbidden_error",
            "safeName": "dev_users_self_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestForbiddenError",
            "safeName": "DevUsersSelfRequestForbiddenError"
          }
        },
        "wireValue": "Dev-users-selfRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Dev-users-selfRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestTooManyRequestsError",
            "safeName": "devUsersSelfRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_too_many_requests_error",
            "safeName": "dev_users_self_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestTooManyRequestsError",
            "safeName": "DevUsersSelfRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestTooManyRequestsError",
            "safeName": "devUsersSelfRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_too_many_requests_error",
            "safeName": "dev_users_self_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestTooManyRequestsError",
            "safeName": "DevUsersSelfRequestTooManyRequestsError"
          }
        },
        "wireValue": "Dev-users-selfRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Dev-users-selfRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestInternalServerError",
            "safeName": "devUsersSelfRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_internal_server_error",
            "safeName": "dev_users_self_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestInternalServerError",
            "safeName": "DevUsersSelfRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestInternalServerError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestInternalServerError",
            "safeName": "devUsersSelfRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_internal_server_error",
            "safeName": "dev_users_self_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestInternalServerError",
            "safeName": "DevUsersSelfRequestInternalServerError"
          }
        },
        "wireValue": "Dev-users-selfRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Dev-users-selfRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Dev-users-selfRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestServiceUnavailableError",
            "safeName": "devUsersSelfRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_service_unavailable_error",
            "safeName": "dev_users_self_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestServiceUnavailableError",
            "safeName": "DevUsersSelfRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Dev-users-selfRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Dev-users-selfRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "devUsersSelfRequestServiceUnavailableError",
            "safeName": "devUsersSelfRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "dev_users_self_request_service_unavailable_error",
            "safeName": "dev_users_self_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "DEV_USERS_SELF_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "DevUsersSelfRequestServiceUnavailableError",
            "safeName": "DevUsersSelfRequestServiceUnavailableError"
          }
        },
        "wireValue": "Dev-users-selfRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Parts-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsCreateRequestBadRequestError",
            "safeName": "partsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_bad_request_error",
            "safeName": "parts_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestBadRequestError",
            "safeName": "PartsCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsCreateRequestBadRequestError",
            "safeName": "partsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_bad_request_error",
            "safeName": "parts_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestBadRequestError",
            "safeName": "PartsCreateRequestBadRequestError"
          }
        },
        "wireValue": "Parts-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Parts-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsCreateRequestUnauthorizedError",
            "safeName": "partsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_unauthorized_error",
            "safeName": "parts_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestUnauthorizedError",
            "safeName": "PartsCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsCreateRequestUnauthorizedError",
            "safeName": "partsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_unauthorized_error",
            "safeName": "parts_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestUnauthorizedError",
            "safeName": "PartsCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Parts-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Parts-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsCreateRequestForbiddenError",
            "safeName": "partsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_forbidden_error",
            "safeName": "parts_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestForbiddenError",
            "safeName": "PartsCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsCreateRequestForbiddenError",
            "safeName": "partsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_forbidden_error",
            "safeName": "parts_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestForbiddenError",
            "safeName": "PartsCreateRequestForbiddenError"
          }
        },
        "wireValue": "Parts-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Parts-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsCreateRequestTooManyRequestsError",
            "safeName": "partsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_too_many_requests_error",
            "safeName": "parts_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestTooManyRequestsError",
            "safeName": "PartsCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsCreateRequestTooManyRequestsError",
            "safeName": "partsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_too_many_requests_error",
            "safeName": "parts_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestTooManyRequestsError",
            "safeName": "PartsCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Parts-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Parts-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsCreateRequestInternalServerError",
            "safeName": "partsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_internal_server_error",
            "safeName": "parts_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestInternalServerError",
            "safeName": "PartsCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsCreateRequestInternalServerError",
            "safeName": "partsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_internal_server_error",
            "safeName": "parts_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestInternalServerError",
            "safeName": "PartsCreateRequestInternalServerError"
          }
        },
        "wireValue": "Parts-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Parts-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Parts-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsCreateRequestServiceUnavailableError",
            "safeName": "partsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_service_unavailable_error",
            "safeName": "parts_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestServiceUnavailableError",
            "safeName": "PartsCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsCreateRequestServiceUnavailableError",
            "safeName": "partsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_create_request_service_unavailable_error",
            "safeName": "parts_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsCreateRequestServiceUnavailableError",
            "safeName": "PartsCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Parts-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Parts-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestBadRequestError",
            "safeName": "partsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_bad_request_error",
            "safeName": "parts_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestBadRequestError",
            "safeName": "PartsDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestBadRequestError",
            "safeName": "partsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_bad_request_error",
            "safeName": "parts_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestBadRequestError",
            "safeName": "PartsDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Parts-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Parts-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestUnauthorizedError",
            "safeName": "partsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_unauthorized_error",
            "safeName": "parts_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestUnauthorizedError",
            "safeName": "PartsDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestUnauthorizedError",
            "safeName": "partsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_unauthorized_error",
            "safeName": "parts_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestUnauthorizedError",
            "safeName": "PartsDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Parts-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Parts-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestForbiddenError",
            "safeName": "partsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_forbidden_error",
            "safeName": "parts_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestForbiddenError",
            "safeName": "PartsDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestForbiddenError",
            "safeName": "partsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_forbidden_error",
            "safeName": "parts_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestForbiddenError",
            "safeName": "PartsDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Parts-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Parts-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestNotFoundError",
            "safeName": "partsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_not_found_error",
            "safeName": "parts_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestNotFoundError",
            "safeName": "PartsDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestNotFoundError",
            "safeName": "partsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_not_found_error",
            "safeName": "parts_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestNotFoundError",
            "safeName": "PartsDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Parts-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Parts-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestTooManyRequestsError",
            "safeName": "partsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_too_many_requests_error",
            "safeName": "parts_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestTooManyRequestsError",
            "safeName": "PartsDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestTooManyRequestsError",
            "safeName": "partsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_too_many_requests_error",
            "safeName": "parts_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestTooManyRequestsError",
            "safeName": "PartsDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Parts-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Parts-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestInternalServerError",
            "safeName": "partsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_internal_server_error",
            "safeName": "parts_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestInternalServerError",
            "safeName": "PartsDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestInternalServerError",
            "safeName": "partsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_internal_server_error",
            "safeName": "parts_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestInternalServerError",
            "safeName": "PartsDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Parts-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Parts-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Parts-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestServiceUnavailableError",
            "safeName": "partsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_service_unavailable_error",
            "safeName": "parts_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestServiceUnavailableError",
            "safeName": "PartsDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsDeleteRequestServiceUnavailableError",
            "safeName": "partsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_delete_request_service_unavailable_error",
            "safeName": "parts_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsDeleteRequestServiceUnavailableError",
            "safeName": "PartsDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Parts-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Parts-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsGetRequestBadRequestError",
            "safeName": "partsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_bad_request_error",
            "safeName": "parts_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestBadRequestError",
            "safeName": "PartsGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsGetRequestBadRequestError",
            "safeName": "partsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_bad_request_error",
            "safeName": "parts_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestBadRequestError",
            "safeName": "PartsGetRequestBadRequestError"
          }
        },
        "wireValue": "Parts-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Parts-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsGetRequestUnauthorizedError",
            "safeName": "partsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_unauthorized_error",
            "safeName": "parts_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestUnauthorizedError",
            "safeName": "PartsGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsGetRequestUnauthorizedError",
            "safeName": "partsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_unauthorized_error",
            "safeName": "parts_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestUnauthorizedError",
            "safeName": "PartsGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Parts-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Parts-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsGetRequestForbiddenError",
            "safeName": "partsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_forbidden_error",
            "safeName": "parts_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestForbiddenError",
            "safeName": "PartsGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsGetRequestForbiddenError",
            "safeName": "partsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_forbidden_error",
            "safeName": "parts_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestForbiddenError",
            "safeName": "PartsGetRequestForbiddenError"
          }
        },
        "wireValue": "Parts-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Parts-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsGetRequestNotFoundError",
            "safeName": "partsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_not_found_error",
            "safeName": "parts_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestNotFoundError",
            "safeName": "PartsGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsGetRequestNotFoundError",
            "safeName": "partsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_not_found_error",
            "safeName": "parts_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestNotFoundError",
            "safeName": "PartsGetRequestNotFoundError"
          }
        },
        "wireValue": "Parts-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Parts-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsGetRequestTooManyRequestsError",
            "safeName": "partsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_too_many_requests_error",
            "safeName": "parts_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestTooManyRequestsError",
            "safeName": "PartsGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsGetRequestTooManyRequestsError",
            "safeName": "partsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_too_many_requests_error",
            "safeName": "parts_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestTooManyRequestsError",
            "safeName": "PartsGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Parts-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Parts-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsGetRequestInternalServerError",
            "safeName": "partsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_internal_server_error",
            "safeName": "parts_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestInternalServerError",
            "safeName": "PartsGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsGetRequestInternalServerError",
            "safeName": "partsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_internal_server_error",
            "safeName": "parts_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestInternalServerError",
            "safeName": "PartsGetRequestInternalServerError"
          }
        },
        "wireValue": "Parts-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Parts-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Parts-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsGetRequestServiceUnavailableError",
            "safeName": "partsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_service_unavailable_error",
            "safeName": "parts_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestServiceUnavailableError",
            "safeName": "PartsGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsGetRequestServiceUnavailableError",
            "safeName": "partsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_get_request_service_unavailable_error",
            "safeName": "parts_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsGetRequestServiceUnavailableError",
            "safeName": "PartsGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Parts-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Parts-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsListRequestBadRequestError",
            "safeName": "partsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_bad_request_error",
            "safeName": "parts_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestBadRequestError",
            "safeName": "PartsListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsListRequestBadRequestError",
            "safeName": "partsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_bad_request_error",
            "safeName": "parts_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestBadRequestError",
            "safeName": "PartsListRequestBadRequestError"
          }
        },
        "wireValue": "Parts-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Parts-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsListRequestUnauthorizedError",
            "safeName": "partsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_unauthorized_error",
            "safeName": "parts_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestUnauthorizedError",
            "safeName": "PartsListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsListRequestUnauthorizedError",
            "safeName": "partsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_unauthorized_error",
            "safeName": "parts_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestUnauthorizedError",
            "safeName": "PartsListRequestUnauthorizedError"
          }
        },
        "wireValue": "Parts-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Parts-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsListRequestForbiddenError",
            "safeName": "partsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_forbidden_error",
            "safeName": "parts_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestForbiddenError",
            "safeName": "PartsListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsListRequestForbiddenError",
            "safeName": "partsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_forbidden_error",
            "safeName": "parts_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestForbiddenError",
            "safeName": "PartsListRequestForbiddenError"
          }
        },
        "wireValue": "Parts-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Parts-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsListRequestTooManyRequestsError",
            "safeName": "partsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_too_many_requests_error",
            "safeName": "parts_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestTooManyRequestsError",
            "safeName": "PartsListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsListRequestTooManyRequestsError",
            "safeName": "partsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_too_many_requests_error",
            "safeName": "parts_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestTooManyRequestsError",
            "safeName": "PartsListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Parts-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Parts-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsListRequestInternalServerError",
            "safeName": "partsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_internal_server_error",
            "safeName": "parts_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestInternalServerError",
            "safeName": "PartsListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsListRequestInternalServerError",
            "safeName": "partsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_internal_server_error",
            "safeName": "parts_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestInternalServerError",
            "safeName": "PartsListRequestInternalServerError"
          }
        },
        "wireValue": "Parts-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Parts-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Parts-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsListRequestServiceUnavailableError",
            "safeName": "partsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_service_unavailable_error",
            "safeName": "parts_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestServiceUnavailableError",
            "safeName": "PartsListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsListRequestServiceUnavailableError",
            "safeName": "partsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_list_request_service_unavailable_error",
            "safeName": "parts_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsListRequestServiceUnavailableError",
            "safeName": "PartsListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Parts-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Parts-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestBadRequestError",
            "safeName": "partsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_bad_request_error",
            "safeName": "parts_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestBadRequestError",
            "safeName": "PartsUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestBadRequestError",
            "safeName": "partsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_bad_request_error",
            "safeName": "parts_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestBadRequestError",
            "safeName": "PartsUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Parts-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Parts-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestUnauthorizedError",
            "safeName": "partsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_unauthorized_error",
            "safeName": "parts_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestUnauthorizedError",
            "safeName": "PartsUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestUnauthorizedError",
            "safeName": "partsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_unauthorized_error",
            "safeName": "parts_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestUnauthorizedError",
            "safeName": "PartsUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Parts-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Parts-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestForbiddenError",
            "safeName": "partsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_forbidden_error",
            "safeName": "parts_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestForbiddenError",
            "safeName": "PartsUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestForbiddenError",
            "safeName": "partsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_forbidden_error",
            "safeName": "parts_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestForbiddenError",
            "safeName": "PartsUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Parts-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Parts-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestNotFoundError",
            "safeName": "partsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_not_found_error",
            "safeName": "parts_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestNotFoundError",
            "safeName": "PartsUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestNotFoundError",
            "safeName": "partsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_not_found_error",
            "safeName": "parts_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestNotFoundError",
            "safeName": "PartsUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Parts-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Parts-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestTooManyRequestsError",
            "safeName": "partsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_too_many_requests_error",
            "safeName": "parts_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestTooManyRequestsError",
            "safeName": "PartsUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestTooManyRequestsError",
            "safeName": "partsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_too_many_requests_error",
            "safeName": "parts_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestTooManyRequestsError",
            "safeName": "PartsUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Parts-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Parts-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestInternalServerError",
            "safeName": "partsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_internal_server_error",
            "safeName": "parts_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestInternalServerError",
            "safeName": "PartsUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestInternalServerError",
            "safeName": "partsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_internal_server_error",
            "safeName": "parts_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestInternalServerError",
            "safeName": "PartsUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Parts-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Parts-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Parts-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestServiceUnavailableError",
            "safeName": "partsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_service_unavailable_error",
            "safeName": "parts_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestServiceUnavailableError",
            "safeName": "PartsUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Parts-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Parts-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "partsUpdateRequestServiceUnavailableError",
            "safeName": "partsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "parts_update_request_service_unavailable_error",
            "safeName": "parts_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "PARTS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "PartsUpdateRequestServiceUnavailableError",
            "safeName": "PartsUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Parts-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Rev-orgs-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestBadRequestError",
            "safeName": "revOrgsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_bad_request_error",
            "safeName": "rev_orgs_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestBadRequestError",
            "safeName": "RevOrgsCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestBadRequestError",
            "safeName": "revOrgsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_bad_request_error",
            "safeName": "rev_orgs_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestBadRequestError",
            "safeName": "RevOrgsCreateRequestBadRequestError"
          }
        },
        "wireValue": "Rev-orgs-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Rev-orgs-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestUnauthorizedError",
            "safeName": "revOrgsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_unauthorized_error",
            "safeName": "rev_orgs_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestUnauthorizedError",
            "safeName": "RevOrgsCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestUnauthorizedError",
            "safeName": "revOrgsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_unauthorized_error",
            "safeName": "rev_orgs_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestUnauthorizedError",
            "safeName": "RevOrgsCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Rev-orgs-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Rev-orgs-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestForbiddenError",
            "safeName": "revOrgsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_forbidden_error",
            "safeName": "rev_orgs_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestForbiddenError",
            "safeName": "RevOrgsCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestForbiddenError",
            "safeName": "revOrgsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_forbidden_error",
            "safeName": "rev_orgs_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestForbiddenError",
            "safeName": "RevOrgsCreateRequestForbiddenError"
          }
        },
        "wireValue": "Rev-orgs-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Rev-orgs-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestTooManyRequestsError",
            "safeName": "revOrgsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_too_many_requests_error",
            "safeName": "rev_orgs_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestTooManyRequestsError",
            "safeName": "RevOrgsCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestTooManyRequestsError",
            "safeName": "revOrgsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_too_many_requests_error",
            "safeName": "rev_orgs_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestTooManyRequestsError",
            "safeName": "RevOrgsCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Rev-orgs-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Rev-orgs-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestInternalServerError",
            "safeName": "revOrgsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_internal_server_error",
            "safeName": "rev_orgs_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestInternalServerError",
            "safeName": "RevOrgsCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestInternalServerError",
            "safeName": "revOrgsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_internal_server_error",
            "safeName": "rev_orgs_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestInternalServerError",
            "safeName": "RevOrgsCreateRequestInternalServerError"
          }
        },
        "wireValue": "Rev-orgs-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Rev-orgs-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestServiceUnavailableError",
            "safeName": "revOrgsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_service_unavailable_error",
            "safeName": "rev_orgs_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestServiceUnavailableError",
            "safeName": "RevOrgsCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsCreateRequestServiceUnavailableError",
            "safeName": "revOrgsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_create_request_service_unavailable_error",
            "safeName": "rev_orgs_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsCreateRequestServiceUnavailableError",
            "safeName": "RevOrgsCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Rev-orgs-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Rev-orgs-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestBadRequestError",
            "safeName": "revOrgsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_bad_request_error",
            "safeName": "rev_orgs_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestBadRequestError",
            "safeName": "RevOrgsDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestBadRequestError",
            "safeName": "revOrgsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_bad_request_error",
            "safeName": "rev_orgs_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestBadRequestError",
            "safeName": "RevOrgsDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Rev-orgs-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestUnauthorizedError",
            "safeName": "revOrgsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_unauthorized_error",
            "safeName": "rev_orgs_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestUnauthorizedError",
            "safeName": "RevOrgsDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestUnauthorizedError",
            "safeName": "revOrgsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_unauthorized_error",
            "safeName": "rev_orgs_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestUnauthorizedError",
            "safeName": "RevOrgsDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Rev-orgs-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestForbiddenError",
            "safeName": "revOrgsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_forbidden_error",
            "safeName": "rev_orgs_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestForbiddenError",
            "safeName": "RevOrgsDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestForbiddenError",
            "safeName": "revOrgsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_forbidden_error",
            "safeName": "rev_orgs_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestForbiddenError",
            "safeName": "RevOrgsDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Rev-orgs-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestNotFoundError",
            "safeName": "revOrgsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_not_found_error",
            "safeName": "rev_orgs_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestNotFoundError",
            "safeName": "RevOrgsDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestNotFoundError",
            "safeName": "revOrgsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_not_found_error",
            "safeName": "rev_orgs_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestNotFoundError",
            "safeName": "RevOrgsDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Rev-orgs-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestTooManyRequestsError",
            "safeName": "revOrgsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_too_many_requests_error",
            "safeName": "rev_orgs_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestTooManyRequestsError",
            "safeName": "RevOrgsDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestTooManyRequestsError",
            "safeName": "revOrgsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_too_many_requests_error",
            "safeName": "rev_orgs_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestTooManyRequestsError",
            "safeName": "RevOrgsDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Rev-orgs-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestInternalServerError",
            "safeName": "revOrgsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_internal_server_error",
            "safeName": "rev_orgs_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestInternalServerError",
            "safeName": "RevOrgsDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestInternalServerError",
            "safeName": "revOrgsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_internal_server_error",
            "safeName": "rev_orgs_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestInternalServerError",
            "safeName": "RevOrgsDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Rev-orgs-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestServiceUnavailableError",
            "safeName": "revOrgsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_service_unavailable_error",
            "safeName": "rev_orgs_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestServiceUnavailableError",
            "safeName": "RevOrgsDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsDeleteRequestServiceUnavailableError",
            "safeName": "revOrgsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_delete_request_service_unavailable_error",
            "safeName": "rev_orgs_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsDeleteRequestServiceUnavailableError",
            "safeName": "RevOrgsDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Rev-orgs-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Rev-orgs-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestBadRequestError",
            "safeName": "revOrgsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_bad_request_error",
            "safeName": "rev_orgs_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestBadRequestError",
            "safeName": "RevOrgsGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestBadRequestError",
            "safeName": "revOrgsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_bad_request_error",
            "safeName": "rev_orgs_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestBadRequestError",
            "safeName": "RevOrgsGetRequestBadRequestError"
          }
        },
        "wireValue": "Rev-orgs-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Rev-orgs-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestUnauthorizedError",
            "safeName": "revOrgsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_unauthorized_error",
            "safeName": "rev_orgs_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestUnauthorizedError",
            "safeName": "RevOrgsGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestUnauthorizedError",
            "safeName": "revOrgsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_unauthorized_error",
            "safeName": "rev_orgs_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestUnauthorizedError",
            "safeName": "RevOrgsGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Rev-orgs-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Rev-orgs-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestForbiddenError",
            "safeName": "revOrgsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_forbidden_error",
            "safeName": "rev_orgs_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestForbiddenError",
            "safeName": "RevOrgsGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestForbiddenError",
            "safeName": "revOrgsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_forbidden_error",
            "safeName": "rev_orgs_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestForbiddenError",
            "safeName": "RevOrgsGetRequestForbiddenError"
          }
        },
        "wireValue": "Rev-orgs-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Rev-orgs-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestNotFoundError",
            "safeName": "revOrgsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_not_found_error",
            "safeName": "rev_orgs_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestNotFoundError",
            "safeName": "RevOrgsGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestNotFoundError",
            "safeName": "revOrgsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_not_found_error",
            "safeName": "rev_orgs_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestNotFoundError",
            "safeName": "RevOrgsGetRequestNotFoundError"
          }
        },
        "wireValue": "Rev-orgs-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Rev-orgs-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestTooManyRequestsError",
            "safeName": "revOrgsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_too_many_requests_error",
            "safeName": "rev_orgs_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestTooManyRequestsError",
            "safeName": "RevOrgsGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestTooManyRequestsError",
            "safeName": "revOrgsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_too_many_requests_error",
            "safeName": "rev_orgs_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestTooManyRequestsError",
            "safeName": "RevOrgsGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Rev-orgs-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Rev-orgs-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestInternalServerError",
            "safeName": "revOrgsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_internal_server_error",
            "safeName": "rev_orgs_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestInternalServerError",
            "safeName": "RevOrgsGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestInternalServerError",
            "safeName": "revOrgsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_internal_server_error",
            "safeName": "rev_orgs_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestInternalServerError",
            "safeName": "RevOrgsGetRequestInternalServerError"
          }
        },
        "wireValue": "Rev-orgs-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Rev-orgs-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestServiceUnavailableError",
            "safeName": "revOrgsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_service_unavailable_error",
            "safeName": "rev_orgs_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestServiceUnavailableError",
            "safeName": "RevOrgsGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsGetRequestServiceUnavailableError",
            "safeName": "revOrgsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_get_request_service_unavailable_error",
            "safeName": "rev_orgs_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsGetRequestServiceUnavailableError",
            "safeName": "RevOrgsGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Rev-orgs-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Rev-orgs-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestBadRequestError",
            "safeName": "revOrgsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_bad_request_error",
            "safeName": "rev_orgs_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestBadRequestError",
            "safeName": "RevOrgsListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestBadRequestError",
            "safeName": "revOrgsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_bad_request_error",
            "safeName": "rev_orgs_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestBadRequestError",
            "safeName": "RevOrgsListRequestBadRequestError"
          }
        },
        "wireValue": "Rev-orgs-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Rev-orgs-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestUnauthorizedError",
            "safeName": "revOrgsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_unauthorized_error",
            "safeName": "rev_orgs_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestUnauthorizedError",
            "safeName": "RevOrgsListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestUnauthorizedError",
            "safeName": "revOrgsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_unauthorized_error",
            "safeName": "rev_orgs_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestUnauthorizedError",
            "safeName": "RevOrgsListRequestUnauthorizedError"
          }
        },
        "wireValue": "Rev-orgs-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Rev-orgs-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestForbiddenError",
            "safeName": "revOrgsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_forbidden_error",
            "safeName": "rev_orgs_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestForbiddenError",
            "safeName": "RevOrgsListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestForbiddenError",
            "safeName": "revOrgsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_forbidden_error",
            "safeName": "rev_orgs_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestForbiddenError",
            "safeName": "RevOrgsListRequestForbiddenError"
          }
        },
        "wireValue": "Rev-orgs-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Rev-orgs-listRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestNotFoundError",
            "safeName": "revOrgsListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_not_found_error",
            "safeName": "rev_orgs_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestNotFoundError",
            "safeName": "RevOrgsListRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestNotFoundError",
            "safeName": "revOrgsListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_not_found_error",
            "safeName": "rev_orgs_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestNotFoundError",
            "safeName": "RevOrgsListRequestNotFoundError"
          }
        },
        "wireValue": "Rev-orgs-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Rev-orgs-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestTooManyRequestsError",
            "safeName": "revOrgsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_too_many_requests_error",
            "safeName": "rev_orgs_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestTooManyRequestsError",
            "safeName": "RevOrgsListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestTooManyRequestsError",
            "safeName": "revOrgsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_too_many_requests_error",
            "safeName": "rev_orgs_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestTooManyRequestsError",
            "safeName": "RevOrgsListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Rev-orgs-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Rev-orgs-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestInternalServerError",
            "safeName": "revOrgsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_internal_server_error",
            "safeName": "rev_orgs_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestInternalServerError",
            "safeName": "RevOrgsListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestInternalServerError",
            "safeName": "revOrgsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_internal_server_error",
            "safeName": "rev_orgs_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestInternalServerError",
            "safeName": "RevOrgsListRequestInternalServerError"
          }
        },
        "wireValue": "Rev-orgs-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Rev-orgs-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestServiceUnavailableError",
            "safeName": "revOrgsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_service_unavailable_error",
            "safeName": "rev_orgs_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestServiceUnavailableError",
            "safeName": "RevOrgsListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsListRequestServiceUnavailableError",
            "safeName": "revOrgsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_list_request_service_unavailable_error",
            "safeName": "rev_orgs_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsListRequestServiceUnavailableError",
            "safeName": "RevOrgsListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Rev-orgs-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Rev-orgs-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestBadRequestError",
            "safeName": "revOrgsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_bad_request_error",
            "safeName": "rev_orgs_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestBadRequestError",
            "safeName": "RevOrgsUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestBadRequestError",
            "safeName": "revOrgsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_bad_request_error",
            "safeName": "rev_orgs_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestBadRequestError",
            "safeName": "RevOrgsUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Rev-orgs-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestUnauthorizedError",
            "safeName": "revOrgsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_unauthorized_error",
            "safeName": "rev_orgs_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestUnauthorizedError",
            "safeName": "RevOrgsUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestUnauthorizedError",
            "safeName": "revOrgsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_unauthorized_error",
            "safeName": "rev_orgs_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestUnauthorizedError",
            "safeName": "RevOrgsUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Rev-orgs-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestForbiddenError",
            "safeName": "revOrgsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_forbidden_error",
            "safeName": "rev_orgs_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestForbiddenError",
            "safeName": "RevOrgsUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestForbiddenError",
            "safeName": "revOrgsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_forbidden_error",
            "safeName": "rev_orgs_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestForbiddenError",
            "safeName": "RevOrgsUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Rev-orgs-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestNotFoundError",
            "safeName": "revOrgsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_not_found_error",
            "safeName": "rev_orgs_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestNotFoundError",
            "safeName": "RevOrgsUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestNotFoundError",
            "safeName": "revOrgsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_not_found_error",
            "safeName": "rev_orgs_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestNotFoundError",
            "safeName": "RevOrgsUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Rev-orgs-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestTooManyRequestsError",
            "safeName": "revOrgsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_too_many_requests_error",
            "safeName": "rev_orgs_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestTooManyRequestsError",
            "safeName": "RevOrgsUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestTooManyRequestsError",
            "safeName": "revOrgsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_too_many_requests_error",
            "safeName": "rev_orgs_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestTooManyRequestsError",
            "safeName": "RevOrgsUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Rev-orgs-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestInternalServerError",
            "safeName": "revOrgsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_internal_server_error",
            "safeName": "rev_orgs_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestInternalServerError",
            "safeName": "RevOrgsUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestInternalServerError",
            "safeName": "revOrgsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_internal_server_error",
            "safeName": "rev_orgs_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestInternalServerError",
            "safeName": "RevOrgsUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Rev-orgs-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Rev-orgs-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestServiceUnavailableError",
            "safeName": "revOrgsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_service_unavailable_error",
            "safeName": "rev_orgs_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestServiceUnavailableError",
            "safeName": "RevOrgsUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Rev-orgs-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Rev-orgs-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "revOrgsUpdateRequestServiceUnavailableError",
            "safeName": "revOrgsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs_update_request_service_unavailable_error",
            "safeName": "rev_orgs_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "REV_ORGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "RevOrgsUpdateRequestServiceUnavailableError",
            "safeName": "RevOrgsUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Rev-orgs-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Tags-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestBadRequestError",
            "safeName": "tagsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_bad_request_error",
            "safeName": "tags_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestBadRequestError",
            "safeName": "TagsCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestBadRequestError",
            "safeName": "tagsCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_bad_request_error",
            "safeName": "tags_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestBadRequestError",
            "safeName": "TagsCreateRequestBadRequestError"
          }
        },
        "wireValue": "Tags-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Tags-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestUnauthorizedError",
            "safeName": "tagsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_unauthorized_error",
            "safeName": "tags_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestUnauthorizedError",
            "safeName": "TagsCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestUnauthorizedError",
            "safeName": "tagsCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_unauthorized_error",
            "safeName": "tags_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestUnauthorizedError",
            "safeName": "TagsCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Tags-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Tags-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestForbiddenError",
            "safeName": "tagsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_forbidden_error",
            "safeName": "tags_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestForbiddenError",
            "safeName": "TagsCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestForbiddenError",
            "safeName": "tagsCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_forbidden_error",
            "safeName": "tags_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestForbiddenError",
            "safeName": "TagsCreateRequestForbiddenError"
          }
        },
        "wireValue": "Tags-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Tags-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestTooManyRequestsError",
            "safeName": "tagsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_too_many_requests_error",
            "safeName": "tags_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestTooManyRequestsError",
            "safeName": "TagsCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestTooManyRequestsError",
            "safeName": "tagsCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_too_many_requests_error",
            "safeName": "tags_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestTooManyRequestsError",
            "safeName": "TagsCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Tags-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Tags-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestInternalServerError",
            "safeName": "tagsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_internal_server_error",
            "safeName": "tags_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestInternalServerError",
            "safeName": "TagsCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestInternalServerError",
            "safeName": "tagsCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_internal_server_error",
            "safeName": "tags_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestInternalServerError",
            "safeName": "TagsCreateRequestInternalServerError"
          }
        },
        "wireValue": "Tags-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Tags-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Tags-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestServiceUnavailableError",
            "safeName": "tagsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_service_unavailable_error",
            "safeName": "tags_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestServiceUnavailableError",
            "safeName": "TagsCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsCreateRequestServiceUnavailableError",
            "safeName": "tagsCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_create_request_service_unavailable_error",
            "safeName": "tags_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsCreateRequestServiceUnavailableError",
            "safeName": "TagsCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Tags-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Tags-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestBadRequestError",
            "safeName": "tagsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_bad_request_error",
            "safeName": "tags_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestBadRequestError",
            "safeName": "TagsDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestBadRequestError",
            "safeName": "tagsDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_bad_request_error",
            "safeName": "tags_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestBadRequestError",
            "safeName": "TagsDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Tags-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Tags-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestUnauthorizedError",
            "safeName": "tagsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_unauthorized_error",
            "safeName": "tags_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestUnauthorizedError",
            "safeName": "TagsDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestUnauthorizedError",
            "safeName": "tagsDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_unauthorized_error",
            "safeName": "tags_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestUnauthorizedError",
            "safeName": "TagsDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Tags-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Tags-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestForbiddenError",
            "safeName": "tagsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_forbidden_error",
            "safeName": "tags_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestForbiddenError",
            "safeName": "TagsDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestForbiddenError",
            "safeName": "tagsDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_forbidden_error",
            "safeName": "tags_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestForbiddenError",
            "safeName": "TagsDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Tags-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Tags-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestNotFoundError",
            "safeName": "tagsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_not_found_error",
            "safeName": "tags_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestNotFoundError",
            "safeName": "TagsDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestNotFoundError",
            "safeName": "tagsDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_not_found_error",
            "safeName": "tags_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestNotFoundError",
            "safeName": "TagsDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Tags-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Tags-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestTooManyRequestsError",
            "safeName": "tagsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_too_many_requests_error",
            "safeName": "tags_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestTooManyRequestsError",
            "safeName": "TagsDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestTooManyRequestsError",
            "safeName": "tagsDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_too_many_requests_error",
            "safeName": "tags_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestTooManyRequestsError",
            "safeName": "TagsDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Tags-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Tags-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestInternalServerError",
            "safeName": "tagsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_internal_server_error",
            "safeName": "tags_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestInternalServerError",
            "safeName": "TagsDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestInternalServerError",
            "safeName": "tagsDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_internal_server_error",
            "safeName": "tags_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestInternalServerError",
            "safeName": "TagsDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Tags-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Tags-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Tags-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestServiceUnavailableError",
            "safeName": "tagsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_service_unavailable_error",
            "safeName": "tags_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestServiceUnavailableError",
            "safeName": "TagsDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsDeleteRequestServiceUnavailableError",
            "safeName": "tagsDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_delete_request_service_unavailable_error",
            "safeName": "tags_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsDeleteRequestServiceUnavailableError",
            "safeName": "TagsDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Tags-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Tags-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsGetRequestBadRequestError",
            "safeName": "tagsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_bad_request_error",
            "safeName": "tags_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestBadRequestError",
            "safeName": "TagsGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsGetRequestBadRequestError",
            "safeName": "tagsGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_bad_request_error",
            "safeName": "tags_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestBadRequestError",
            "safeName": "TagsGetRequestBadRequestError"
          }
        },
        "wireValue": "Tags-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Tags-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsGetRequestUnauthorizedError",
            "safeName": "tagsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_unauthorized_error",
            "safeName": "tags_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestUnauthorizedError",
            "safeName": "TagsGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsGetRequestUnauthorizedError",
            "safeName": "tagsGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_unauthorized_error",
            "safeName": "tags_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestUnauthorizedError",
            "safeName": "TagsGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Tags-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Tags-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsGetRequestForbiddenError",
            "safeName": "tagsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_forbidden_error",
            "safeName": "tags_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestForbiddenError",
            "safeName": "TagsGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsGetRequestForbiddenError",
            "safeName": "tagsGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_forbidden_error",
            "safeName": "tags_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestForbiddenError",
            "safeName": "TagsGetRequestForbiddenError"
          }
        },
        "wireValue": "Tags-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Tags-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsGetRequestNotFoundError",
            "safeName": "tagsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_not_found_error",
            "safeName": "tags_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestNotFoundError",
            "safeName": "TagsGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsGetRequestNotFoundError",
            "safeName": "tagsGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_not_found_error",
            "safeName": "tags_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestNotFoundError",
            "safeName": "TagsGetRequestNotFoundError"
          }
        },
        "wireValue": "Tags-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Tags-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsGetRequestTooManyRequestsError",
            "safeName": "tagsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_too_many_requests_error",
            "safeName": "tags_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestTooManyRequestsError",
            "safeName": "TagsGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsGetRequestTooManyRequestsError",
            "safeName": "tagsGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_too_many_requests_error",
            "safeName": "tags_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestTooManyRequestsError",
            "safeName": "TagsGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Tags-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Tags-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsGetRequestInternalServerError",
            "safeName": "tagsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_internal_server_error",
            "safeName": "tags_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestInternalServerError",
            "safeName": "TagsGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsGetRequestInternalServerError",
            "safeName": "tagsGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_internal_server_error",
            "safeName": "tags_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestInternalServerError",
            "safeName": "TagsGetRequestInternalServerError"
          }
        },
        "wireValue": "Tags-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Tags-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Tags-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsGetRequestServiceUnavailableError",
            "safeName": "tagsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_service_unavailable_error",
            "safeName": "tags_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestServiceUnavailableError",
            "safeName": "TagsGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsGetRequestServiceUnavailableError",
            "safeName": "tagsGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_get_request_service_unavailable_error",
            "safeName": "tags_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsGetRequestServiceUnavailableError",
            "safeName": "TagsGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Tags-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Tags-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsListRequestBadRequestError",
            "safeName": "tagsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_bad_request_error",
            "safeName": "tags_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestBadRequestError",
            "safeName": "TagsListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsListRequestBadRequestError",
            "safeName": "tagsListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_bad_request_error",
            "safeName": "tags_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestBadRequestError",
            "safeName": "TagsListRequestBadRequestError"
          }
        },
        "wireValue": "Tags-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Tags-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsListRequestUnauthorizedError",
            "safeName": "tagsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_unauthorized_error",
            "safeName": "tags_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestUnauthorizedError",
            "safeName": "TagsListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsListRequestUnauthorizedError",
            "safeName": "tagsListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_unauthorized_error",
            "safeName": "tags_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestUnauthorizedError",
            "safeName": "TagsListRequestUnauthorizedError"
          }
        },
        "wireValue": "Tags-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Tags-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsListRequestForbiddenError",
            "safeName": "tagsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_forbidden_error",
            "safeName": "tags_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestForbiddenError",
            "safeName": "TagsListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsListRequestForbiddenError",
            "safeName": "tagsListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_forbidden_error",
            "safeName": "tags_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestForbiddenError",
            "safeName": "TagsListRequestForbiddenError"
          }
        },
        "wireValue": "Tags-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Tags-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsListRequestTooManyRequestsError",
            "safeName": "tagsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_too_many_requests_error",
            "safeName": "tags_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestTooManyRequestsError",
            "safeName": "TagsListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsListRequestTooManyRequestsError",
            "safeName": "tagsListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_too_many_requests_error",
            "safeName": "tags_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestTooManyRequestsError",
            "safeName": "TagsListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Tags-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Tags-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsListRequestInternalServerError",
            "safeName": "tagsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_internal_server_error",
            "safeName": "tags_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestInternalServerError",
            "safeName": "TagsListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsListRequestInternalServerError",
            "safeName": "tagsListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_internal_server_error",
            "safeName": "tags_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestInternalServerError",
            "safeName": "TagsListRequestInternalServerError"
          }
        },
        "wireValue": "Tags-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Tags-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Tags-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsListRequestServiceUnavailableError",
            "safeName": "tagsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_service_unavailable_error",
            "safeName": "tags_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestServiceUnavailableError",
            "safeName": "TagsListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsListRequestServiceUnavailableError",
            "safeName": "tagsListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_list_request_service_unavailable_error",
            "safeName": "tags_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsListRequestServiceUnavailableError",
            "safeName": "TagsListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Tags-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Tags-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestBadRequestError",
            "safeName": "tagsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_bad_request_error",
            "safeName": "tags_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestBadRequestError",
            "safeName": "TagsUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestBadRequestError",
            "safeName": "tagsUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_bad_request_error",
            "safeName": "tags_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestBadRequestError",
            "safeName": "TagsUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Tags-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Tags-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestUnauthorizedError",
            "safeName": "tagsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_unauthorized_error",
            "safeName": "tags_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestUnauthorizedError",
            "safeName": "TagsUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestUnauthorizedError",
            "safeName": "tagsUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_unauthorized_error",
            "safeName": "tags_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestUnauthorizedError",
            "safeName": "TagsUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Tags-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Tags-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestForbiddenError",
            "safeName": "tagsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_forbidden_error",
            "safeName": "tags_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestForbiddenError",
            "safeName": "TagsUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestForbiddenError",
            "safeName": "tagsUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_forbidden_error",
            "safeName": "tags_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestForbiddenError",
            "safeName": "TagsUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Tags-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Tags-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestNotFoundError",
            "safeName": "tagsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_not_found_error",
            "safeName": "tags_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestNotFoundError",
            "safeName": "TagsUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestNotFoundError",
            "safeName": "tagsUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_not_found_error",
            "safeName": "tags_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestNotFoundError",
            "safeName": "TagsUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Tags-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Tags-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestTooManyRequestsError",
            "safeName": "tagsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_too_many_requests_error",
            "safeName": "tags_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestTooManyRequestsError",
            "safeName": "TagsUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestTooManyRequestsError",
            "safeName": "tagsUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_too_many_requests_error",
            "safeName": "tags_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestTooManyRequestsError",
            "safeName": "TagsUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Tags-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Tags-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestInternalServerError",
            "safeName": "tagsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_internal_server_error",
            "safeName": "tags_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestInternalServerError",
            "safeName": "TagsUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestInternalServerError",
            "safeName": "tagsUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_internal_server_error",
            "safeName": "tags_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestInternalServerError",
            "safeName": "TagsUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Tags-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Tags-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Tags-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestServiceUnavailableError",
            "safeName": "tagsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_service_unavailable_error",
            "safeName": "tags_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestServiceUnavailableError",
            "safeName": "TagsUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Tags-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Tags-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "tagsUpdateRequestServiceUnavailableError",
            "safeName": "tagsUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "tags_update_request_service_unavailable_error",
            "safeName": "tags_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TAGS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TagsUpdateRequestServiceUnavailableError",
            "safeName": "TagsUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Tags-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Timeline-entries-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestBadRequestError",
            "safeName": "timelineEntriesCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_bad_request_error",
            "safeName": "timeline_entries_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestBadRequestError",
            "safeName": "TimelineEntriesCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestBadRequestError",
            "safeName": "timelineEntriesCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_bad_request_error",
            "safeName": "timeline_entries_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestBadRequestError",
            "safeName": "TimelineEntriesCreateRequestBadRequestError"
          }
        },
        "wireValue": "Timeline-entries-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Timeline-entries-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestUnauthorizedError",
            "safeName": "timelineEntriesCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_unauthorized_error",
            "safeName": "timeline_entries_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestUnauthorizedError",
            "safeName": "TimelineEntriesCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestUnauthorizedError",
            "safeName": "timelineEntriesCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_unauthorized_error",
            "safeName": "timeline_entries_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestUnauthorizedError",
            "safeName": "TimelineEntriesCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Timeline-entries-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Timeline-entries-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestForbiddenError",
            "safeName": "timelineEntriesCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_forbidden_error",
            "safeName": "timeline_entries_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestForbiddenError",
            "safeName": "TimelineEntriesCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestForbiddenError",
            "safeName": "timelineEntriesCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_forbidden_error",
            "safeName": "timeline_entries_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestForbiddenError",
            "safeName": "TimelineEntriesCreateRequestForbiddenError"
          }
        },
        "wireValue": "Timeline-entries-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Timeline-entries-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestTooManyRequestsError",
            "safeName": "timelineEntriesCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_too_many_requests_error",
            "safeName": "timeline_entries_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestTooManyRequestsError",
            "safeName": "TimelineEntriesCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestTooManyRequestsError",
            "safeName": "timelineEntriesCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_too_many_requests_error",
            "safeName": "timeline_entries_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestTooManyRequestsError",
            "safeName": "TimelineEntriesCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Timeline-entries-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Timeline-entries-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestInternalServerError",
            "safeName": "timelineEntriesCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_internal_server_error",
            "safeName": "timeline_entries_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestInternalServerError",
            "safeName": "TimelineEntriesCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestInternalServerError",
            "safeName": "timelineEntriesCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_internal_server_error",
            "safeName": "timeline_entries_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestInternalServerError",
            "safeName": "TimelineEntriesCreateRequestInternalServerError"
          }
        },
        "wireValue": "Timeline-entries-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Timeline-entries-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestServiceUnavailableError",
            "safeName": "timelineEntriesCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_service_unavailable_error",
            "safeName": "timeline_entries_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestServiceUnavailableError",
            "safeName": "TimelineEntriesCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesCreateRequestServiceUnavailableError",
            "safeName": "timelineEntriesCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_create_request_service_unavailable_error",
            "safeName": "timeline_entries_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesCreateRequestServiceUnavailableError",
            "safeName": "TimelineEntriesCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Timeline-entries-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Timeline-entries-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestBadRequestError",
            "safeName": "timelineEntriesGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_bad_request_error",
            "safeName": "timeline_entries_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestBadRequestError",
            "safeName": "TimelineEntriesGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestBadRequestError",
            "safeName": "timelineEntriesGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_bad_request_error",
            "safeName": "timeline_entries_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestBadRequestError",
            "safeName": "TimelineEntriesGetRequestBadRequestError"
          }
        },
        "wireValue": "Timeline-entries-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Timeline-entries-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestUnauthorizedError",
            "safeName": "timelineEntriesGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_unauthorized_error",
            "safeName": "timeline_entries_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestUnauthorizedError",
            "safeName": "TimelineEntriesGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestUnauthorizedError",
            "safeName": "timelineEntriesGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_unauthorized_error",
            "safeName": "timeline_entries_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestUnauthorizedError",
            "safeName": "TimelineEntriesGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Timeline-entries-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Timeline-entries-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestForbiddenError",
            "safeName": "timelineEntriesGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_forbidden_error",
            "safeName": "timeline_entries_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestForbiddenError",
            "safeName": "TimelineEntriesGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestForbiddenError",
            "safeName": "timelineEntriesGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_forbidden_error",
            "safeName": "timeline_entries_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestForbiddenError",
            "safeName": "TimelineEntriesGetRequestForbiddenError"
          }
        },
        "wireValue": "Timeline-entries-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Timeline-entries-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestNotFoundError",
            "safeName": "timelineEntriesGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_not_found_error",
            "safeName": "timeline_entries_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestNotFoundError",
            "safeName": "TimelineEntriesGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestNotFoundError",
            "safeName": "timelineEntriesGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_not_found_error",
            "safeName": "timeline_entries_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestNotFoundError",
            "safeName": "TimelineEntriesGetRequestNotFoundError"
          }
        },
        "wireValue": "Timeline-entries-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Timeline-entries-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestTooManyRequestsError",
            "safeName": "timelineEntriesGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_too_many_requests_error",
            "safeName": "timeline_entries_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestTooManyRequestsError",
            "safeName": "TimelineEntriesGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestTooManyRequestsError",
            "safeName": "timelineEntriesGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_too_many_requests_error",
            "safeName": "timeline_entries_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestTooManyRequestsError",
            "safeName": "TimelineEntriesGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Timeline-entries-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Timeline-entries-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestInternalServerError",
            "safeName": "timelineEntriesGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_internal_server_error",
            "safeName": "timeline_entries_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestInternalServerError",
            "safeName": "TimelineEntriesGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestInternalServerError",
            "safeName": "timelineEntriesGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_internal_server_error",
            "safeName": "timeline_entries_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestInternalServerError",
            "safeName": "TimelineEntriesGetRequestInternalServerError"
          }
        },
        "wireValue": "Timeline-entries-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Timeline-entries-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestServiceUnavailableError",
            "safeName": "timelineEntriesGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_service_unavailable_error",
            "safeName": "timeline_entries_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestServiceUnavailableError",
            "safeName": "TimelineEntriesGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesGetRequestServiceUnavailableError",
            "safeName": "timelineEntriesGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_get_request_service_unavailable_error",
            "safeName": "timeline_entries_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesGetRequestServiceUnavailableError",
            "safeName": "TimelineEntriesGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Timeline-entries-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Timeline-entries-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestBadRequestError",
            "safeName": "timelineEntriesListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_bad_request_error",
            "safeName": "timeline_entries_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestBadRequestError",
            "safeName": "TimelineEntriesListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestBadRequestError",
            "safeName": "timelineEntriesListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_bad_request_error",
            "safeName": "timeline_entries_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestBadRequestError",
            "safeName": "TimelineEntriesListRequestBadRequestError"
          }
        },
        "wireValue": "Timeline-entries-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Timeline-entries-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestUnauthorizedError",
            "safeName": "timelineEntriesListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_unauthorized_error",
            "safeName": "timeline_entries_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestUnauthorizedError",
            "safeName": "TimelineEntriesListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestUnauthorizedError",
            "safeName": "timelineEntriesListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_unauthorized_error",
            "safeName": "timeline_entries_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestUnauthorizedError",
            "safeName": "TimelineEntriesListRequestUnauthorizedError"
          }
        },
        "wireValue": "Timeline-entries-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Timeline-entries-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestForbiddenError",
            "safeName": "timelineEntriesListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_forbidden_error",
            "safeName": "timeline_entries_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestForbiddenError",
            "safeName": "TimelineEntriesListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestForbiddenError",
            "safeName": "timelineEntriesListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_forbidden_error",
            "safeName": "timeline_entries_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestForbiddenError",
            "safeName": "TimelineEntriesListRequestForbiddenError"
          }
        },
        "wireValue": "Timeline-entries-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Timeline-entries-listRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestNotFoundError",
            "safeName": "timelineEntriesListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_not_found_error",
            "safeName": "timeline_entries_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestNotFoundError",
            "safeName": "TimelineEntriesListRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestNotFoundError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestNotFoundError",
            "safeName": "timelineEntriesListRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_not_found_error",
            "safeName": "timeline_entries_list_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestNotFoundError",
            "safeName": "TimelineEntriesListRequestNotFoundError"
          }
        },
        "wireValue": "Timeline-entries-listRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Timeline-entries-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestTooManyRequestsError",
            "safeName": "timelineEntriesListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_too_many_requests_error",
            "safeName": "timeline_entries_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestTooManyRequestsError",
            "safeName": "TimelineEntriesListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestTooManyRequestsError",
            "safeName": "timelineEntriesListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_too_many_requests_error",
            "safeName": "timeline_entries_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestTooManyRequestsError",
            "safeName": "TimelineEntriesListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Timeline-entries-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Timeline-entries-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestInternalServerError",
            "safeName": "timelineEntriesListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_internal_server_error",
            "safeName": "timeline_entries_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestInternalServerError",
            "safeName": "TimelineEntriesListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestInternalServerError",
            "safeName": "timelineEntriesListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_internal_server_error",
            "safeName": "timeline_entries_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestInternalServerError",
            "safeName": "TimelineEntriesListRequestInternalServerError"
          }
        },
        "wireValue": "Timeline-entries-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Timeline-entries-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestServiceUnavailableError",
            "safeName": "timelineEntriesListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_service_unavailable_error",
            "safeName": "timeline_entries_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestServiceUnavailableError",
            "safeName": "TimelineEntriesListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesListRequestServiceUnavailableError",
            "safeName": "timelineEntriesListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_list_request_service_unavailable_error",
            "safeName": "timeline_entries_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesListRequestServiceUnavailableError",
            "safeName": "TimelineEntriesListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Timeline-entries-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Timeline-entries-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestBadRequestError",
            "safeName": "timelineEntriesUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_bad_request_error",
            "safeName": "timeline_entries_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestBadRequestError",
            "safeName": "TimelineEntriesUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestBadRequestError",
            "safeName": "timelineEntriesUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_bad_request_error",
            "safeName": "timeline_entries_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestBadRequestError",
            "safeName": "TimelineEntriesUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Timeline-entries-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestUnauthorizedError",
            "safeName": "timelineEntriesUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_unauthorized_error",
            "safeName": "timeline_entries_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestUnauthorizedError",
            "safeName": "TimelineEntriesUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestUnauthorizedError",
            "safeName": "timelineEntriesUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_unauthorized_error",
            "safeName": "timeline_entries_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestUnauthorizedError",
            "safeName": "TimelineEntriesUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Timeline-entries-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestForbiddenError",
            "safeName": "timelineEntriesUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_forbidden_error",
            "safeName": "timeline_entries_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestForbiddenError",
            "safeName": "TimelineEntriesUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestForbiddenError",
            "safeName": "timelineEntriesUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_forbidden_error",
            "safeName": "timeline_entries_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestForbiddenError",
            "safeName": "TimelineEntriesUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Timeline-entries-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestTooManyRequestsError",
            "safeName": "timelineEntriesUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_too_many_requests_error",
            "safeName": "timeline_entries_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestTooManyRequestsError",
            "safeName": "TimelineEntriesUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestTooManyRequestsError",
            "safeName": "timelineEntriesUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_too_many_requests_error",
            "safeName": "timeline_entries_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestTooManyRequestsError",
            "safeName": "TimelineEntriesUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Timeline-entries-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestInternalServerError",
            "safeName": "timelineEntriesUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_internal_server_error",
            "safeName": "timeline_entries_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestInternalServerError",
            "safeName": "TimelineEntriesUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestInternalServerError",
            "safeName": "timelineEntriesUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_internal_server_error",
            "safeName": "timeline_entries_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestInternalServerError",
            "safeName": "TimelineEntriesUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Timeline-entries-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Timeline-entries-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestServiceUnavailableError",
            "safeName": "timelineEntriesUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_service_unavailable_error",
            "safeName": "timeline_entries_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestServiceUnavailableError",
            "safeName": "TimelineEntriesUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Timeline-entries-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Timeline-entries-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "timelineEntriesUpdateRequestServiceUnavailableError",
            "safeName": "timelineEntriesUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries_update_request_service_unavailable_error",
            "safeName": "timeline_entries_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "TIMELINE_ENTRIES_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntriesUpdateRequestServiceUnavailableError",
            "safeName": "TimelineEntriesUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Timeline-entries-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Webhooks-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestBadRequestError",
            "safeName": "webhooksCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_bad_request_error",
            "safeName": "webhooks_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestBadRequestError",
            "safeName": "WebhooksCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestBadRequestError",
            "safeName": "webhooksCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_bad_request_error",
            "safeName": "webhooks_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestBadRequestError",
            "safeName": "WebhooksCreateRequestBadRequestError"
          }
        },
        "wireValue": "Webhooks-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Webhooks-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestUnauthorizedError",
            "safeName": "webhooksCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_unauthorized_error",
            "safeName": "webhooks_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestUnauthorizedError",
            "safeName": "WebhooksCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestUnauthorizedError",
            "safeName": "webhooksCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_unauthorized_error",
            "safeName": "webhooks_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestUnauthorizedError",
            "safeName": "WebhooksCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Webhooks-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Webhooks-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestForbiddenError",
            "safeName": "webhooksCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_forbidden_error",
            "safeName": "webhooks_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestForbiddenError",
            "safeName": "WebhooksCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestForbiddenError",
            "safeName": "webhooksCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_forbidden_error",
            "safeName": "webhooks_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestForbiddenError",
            "safeName": "WebhooksCreateRequestForbiddenError"
          }
        },
        "wireValue": "Webhooks-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Webhooks-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestTooManyRequestsError",
            "safeName": "webhooksCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_too_many_requests_error",
            "safeName": "webhooks_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestTooManyRequestsError",
            "safeName": "WebhooksCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestTooManyRequestsError",
            "safeName": "webhooksCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_too_many_requests_error",
            "safeName": "webhooks_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestTooManyRequestsError",
            "safeName": "WebhooksCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Webhooks-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Webhooks-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestInternalServerError",
            "safeName": "webhooksCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_internal_server_error",
            "safeName": "webhooks_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestInternalServerError",
            "safeName": "WebhooksCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestInternalServerError",
            "safeName": "webhooksCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_internal_server_error",
            "safeName": "webhooks_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestInternalServerError",
            "safeName": "WebhooksCreateRequestInternalServerError"
          }
        },
        "wireValue": "Webhooks-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Webhooks-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Webhooks-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestServiceUnavailableError",
            "safeName": "webhooksCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_service_unavailable_error",
            "safeName": "webhooks_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestServiceUnavailableError",
            "safeName": "WebhooksCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksCreateRequestServiceUnavailableError",
            "safeName": "webhooksCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_create_request_service_unavailable_error",
            "safeName": "webhooks_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksCreateRequestServiceUnavailableError",
            "safeName": "WebhooksCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Webhooks-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Webhooks-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestBadRequestError",
            "safeName": "webhooksDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_bad_request_error",
            "safeName": "webhooks_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestBadRequestError",
            "safeName": "WebhooksDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestBadRequestError",
            "safeName": "webhooksDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_bad_request_error",
            "safeName": "webhooks_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestBadRequestError",
            "safeName": "WebhooksDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Webhooks-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Webhooks-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestUnauthorizedError",
            "safeName": "webhooksDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_unauthorized_error",
            "safeName": "webhooks_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestUnauthorizedError",
            "safeName": "WebhooksDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestUnauthorizedError",
            "safeName": "webhooksDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_unauthorized_error",
            "safeName": "webhooks_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestUnauthorizedError",
            "safeName": "WebhooksDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Webhooks-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Webhooks-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestForbiddenError",
            "safeName": "webhooksDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_forbidden_error",
            "safeName": "webhooks_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestForbiddenError",
            "safeName": "WebhooksDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestForbiddenError",
            "safeName": "webhooksDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_forbidden_error",
            "safeName": "webhooks_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestForbiddenError",
            "safeName": "WebhooksDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Webhooks-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Webhooks-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestNotFoundError",
            "safeName": "webhooksDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_not_found_error",
            "safeName": "webhooks_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestNotFoundError",
            "safeName": "WebhooksDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestNotFoundError",
            "safeName": "webhooksDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_not_found_error",
            "safeName": "webhooks_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestNotFoundError",
            "safeName": "WebhooksDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Webhooks-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Webhooks-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestTooManyRequestsError",
            "safeName": "webhooksDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_too_many_requests_error",
            "safeName": "webhooks_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestTooManyRequestsError",
            "safeName": "WebhooksDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestTooManyRequestsError",
            "safeName": "webhooksDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_too_many_requests_error",
            "safeName": "webhooks_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestTooManyRequestsError",
            "safeName": "WebhooksDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Webhooks-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Webhooks-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestInternalServerError",
            "safeName": "webhooksDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_internal_server_error",
            "safeName": "webhooks_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestInternalServerError",
            "safeName": "WebhooksDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestInternalServerError",
            "safeName": "webhooksDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_internal_server_error",
            "safeName": "webhooks_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestInternalServerError",
            "safeName": "WebhooksDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Webhooks-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Webhooks-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Webhooks-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestServiceUnavailableError",
            "safeName": "webhooksDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_service_unavailable_error",
            "safeName": "webhooks_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestServiceUnavailableError",
            "safeName": "WebhooksDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksDeleteRequestServiceUnavailableError",
            "safeName": "webhooksDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_delete_request_service_unavailable_error",
            "safeName": "webhooks_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksDeleteRequestServiceUnavailableError",
            "safeName": "WebhooksDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Webhooks-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Webhooks-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestBadRequestError",
            "safeName": "webhooksGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_bad_request_error",
            "safeName": "webhooks_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestBadRequestError",
            "safeName": "WebhooksGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestBadRequestError",
            "safeName": "webhooksGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_bad_request_error",
            "safeName": "webhooks_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestBadRequestError",
            "safeName": "WebhooksGetRequestBadRequestError"
          }
        },
        "wireValue": "Webhooks-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Webhooks-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestUnauthorizedError",
            "safeName": "webhooksGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_unauthorized_error",
            "safeName": "webhooks_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestUnauthorizedError",
            "safeName": "WebhooksGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestUnauthorizedError",
            "safeName": "webhooksGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_unauthorized_error",
            "safeName": "webhooks_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestUnauthorizedError",
            "safeName": "WebhooksGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Webhooks-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Webhooks-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestForbiddenError",
            "safeName": "webhooksGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_forbidden_error",
            "safeName": "webhooks_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestForbiddenError",
            "safeName": "WebhooksGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestForbiddenError",
            "safeName": "webhooksGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_forbidden_error",
            "safeName": "webhooks_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestForbiddenError",
            "safeName": "WebhooksGetRequestForbiddenError"
          }
        },
        "wireValue": "Webhooks-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Webhooks-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestNotFoundError",
            "safeName": "webhooksGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_not_found_error",
            "safeName": "webhooks_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestNotFoundError",
            "safeName": "WebhooksGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestNotFoundError",
            "safeName": "webhooksGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_not_found_error",
            "safeName": "webhooks_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestNotFoundError",
            "safeName": "WebhooksGetRequestNotFoundError"
          }
        },
        "wireValue": "Webhooks-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Webhooks-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestTooManyRequestsError",
            "safeName": "webhooksGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_too_many_requests_error",
            "safeName": "webhooks_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestTooManyRequestsError",
            "safeName": "WebhooksGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestTooManyRequestsError",
            "safeName": "webhooksGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_too_many_requests_error",
            "safeName": "webhooks_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestTooManyRequestsError",
            "safeName": "WebhooksGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Webhooks-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Webhooks-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestInternalServerError",
            "safeName": "webhooksGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_internal_server_error",
            "safeName": "webhooks_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestInternalServerError",
            "safeName": "WebhooksGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestInternalServerError",
            "safeName": "webhooksGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_internal_server_error",
            "safeName": "webhooks_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestInternalServerError",
            "safeName": "WebhooksGetRequestInternalServerError"
          }
        },
        "wireValue": "Webhooks-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Webhooks-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Webhooks-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestServiceUnavailableError",
            "safeName": "webhooksGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_service_unavailable_error",
            "safeName": "webhooks_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestServiceUnavailableError",
            "safeName": "WebhooksGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksGetRequestServiceUnavailableError",
            "safeName": "webhooksGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_get_request_service_unavailable_error",
            "safeName": "webhooks_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksGetRequestServiceUnavailableError",
            "safeName": "WebhooksGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Webhooks-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Webhooks-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksListRequestBadRequestError",
            "safeName": "webhooksListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_bad_request_error",
            "safeName": "webhooks_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestBadRequestError",
            "safeName": "WebhooksListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksListRequestBadRequestError",
            "safeName": "webhooksListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_bad_request_error",
            "safeName": "webhooks_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestBadRequestError",
            "safeName": "WebhooksListRequestBadRequestError"
          }
        },
        "wireValue": "Webhooks-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Webhooks-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksListRequestUnauthorizedError",
            "safeName": "webhooksListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_unauthorized_error",
            "safeName": "webhooks_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestUnauthorizedError",
            "safeName": "WebhooksListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksListRequestUnauthorizedError",
            "safeName": "webhooksListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_unauthorized_error",
            "safeName": "webhooks_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestUnauthorizedError",
            "safeName": "WebhooksListRequestUnauthorizedError"
          }
        },
        "wireValue": "Webhooks-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Webhooks-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksListRequestForbiddenError",
            "safeName": "webhooksListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_forbidden_error",
            "safeName": "webhooks_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestForbiddenError",
            "safeName": "WebhooksListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksListRequestForbiddenError",
            "safeName": "webhooksListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_forbidden_error",
            "safeName": "webhooks_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestForbiddenError",
            "safeName": "WebhooksListRequestForbiddenError"
          }
        },
        "wireValue": "Webhooks-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Webhooks-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksListRequestTooManyRequestsError",
            "safeName": "webhooksListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_too_many_requests_error",
            "safeName": "webhooks_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestTooManyRequestsError",
            "safeName": "WebhooksListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksListRequestTooManyRequestsError",
            "safeName": "webhooksListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_too_many_requests_error",
            "safeName": "webhooks_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestTooManyRequestsError",
            "safeName": "WebhooksListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Webhooks-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Webhooks-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksListRequestInternalServerError",
            "safeName": "webhooksListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_internal_server_error",
            "safeName": "webhooks_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestInternalServerError",
            "safeName": "WebhooksListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksListRequestInternalServerError",
            "safeName": "webhooksListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_internal_server_error",
            "safeName": "webhooks_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestInternalServerError",
            "safeName": "WebhooksListRequestInternalServerError"
          }
        },
        "wireValue": "Webhooks-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Webhooks-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Webhooks-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksListRequestServiceUnavailableError",
            "safeName": "webhooksListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_service_unavailable_error",
            "safeName": "webhooks_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestServiceUnavailableError",
            "safeName": "WebhooksListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksListRequestServiceUnavailableError",
            "safeName": "webhooksListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_list_request_service_unavailable_error",
            "safeName": "webhooks_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksListRequestServiceUnavailableError",
            "safeName": "WebhooksListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Webhooks-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Webhooks-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestBadRequestError",
            "safeName": "webhooksUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_bad_request_error",
            "safeName": "webhooks_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestBadRequestError",
            "safeName": "WebhooksUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestBadRequestError",
            "safeName": "webhooksUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_bad_request_error",
            "safeName": "webhooks_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestBadRequestError",
            "safeName": "WebhooksUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Webhooks-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Webhooks-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestUnauthorizedError",
            "safeName": "webhooksUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_unauthorized_error",
            "safeName": "webhooks_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestUnauthorizedError",
            "safeName": "WebhooksUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestUnauthorizedError",
            "safeName": "webhooksUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_unauthorized_error",
            "safeName": "webhooks_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestUnauthorizedError",
            "safeName": "WebhooksUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Webhooks-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Webhooks-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestForbiddenError",
            "safeName": "webhooksUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_forbidden_error",
            "safeName": "webhooks_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestForbiddenError",
            "safeName": "WebhooksUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestForbiddenError",
            "safeName": "webhooksUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_forbidden_error",
            "safeName": "webhooks_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestForbiddenError",
            "safeName": "WebhooksUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Webhooks-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Webhooks-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestNotFoundError",
            "safeName": "webhooksUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_not_found_error",
            "safeName": "webhooks_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestNotFoundError",
            "safeName": "WebhooksUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestNotFoundError",
            "safeName": "webhooksUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_not_found_error",
            "safeName": "webhooks_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestNotFoundError",
            "safeName": "WebhooksUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Webhooks-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Webhooks-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestTooManyRequestsError",
            "safeName": "webhooksUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_too_many_requests_error",
            "safeName": "webhooks_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestTooManyRequestsError",
            "safeName": "WebhooksUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestTooManyRequestsError",
            "safeName": "webhooksUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_too_many_requests_error",
            "safeName": "webhooks_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestTooManyRequestsError",
            "safeName": "WebhooksUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Webhooks-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Webhooks-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestInternalServerError",
            "safeName": "webhooksUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_internal_server_error",
            "safeName": "webhooks_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestInternalServerError",
            "safeName": "WebhooksUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestInternalServerError",
            "safeName": "webhooksUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_internal_server_error",
            "safeName": "webhooks_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestInternalServerError",
            "safeName": "WebhooksUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Webhooks-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Webhooks-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Webhooks-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestServiceUnavailableError",
            "safeName": "webhooksUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_service_unavailable_error",
            "safeName": "webhooks_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestServiceUnavailableError",
            "safeName": "WebhooksUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Webhooks-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Webhooks-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "webhooksUpdateRequestServiceUnavailableError",
            "safeName": "webhooksUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "webhooks_update_request_service_unavailable_error",
            "safeName": "webhooks_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WEBHOOKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WebhooksUpdateRequestServiceUnavailableError",
            "safeName": "WebhooksUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Webhooks-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-createRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksCreateRequestBadRequestError",
            "safeName": "worksCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_bad_request_error",
            "safeName": "works_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestBadRequestError",
            "safeName": "WorksCreateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksCreateRequestBadRequestError",
            "safeName": "worksCreateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_bad_request_error",
            "safeName": "works_create_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestBadRequestError",
            "safeName": "WorksCreateRequestBadRequestError"
          }
        },
        "wireValue": "Works-createRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-createRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksCreateRequestUnauthorizedError",
            "safeName": "worksCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_unauthorized_error",
            "safeName": "works_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestUnauthorizedError",
            "safeName": "WorksCreateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksCreateRequestUnauthorizedError",
            "safeName": "worksCreateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_unauthorized_error",
            "safeName": "works_create_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestUnauthorizedError",
            "safeName": "WorksCreateRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-createRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-createRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksCreateRequestForbiddenError",
            "safeName": "worksCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_forbidden_error",
            "safeName": "works_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestForbiddenError",
            "safeName": "WorksCreateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksCreateRequestForbiddenError",
            "safeName": "worksCreateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_forbidden_error",
            "safeName": "works_create_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestForbiddenError",
            "safeName": "WorksCreateRequestForbiddenError"
          }
        },
        "wireValue": "Works-createRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-createRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksCreateRequestTooManyRequestsError",
            "safeName": "worksCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_too_many_requests_error",
            "safeName": "works_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestTooManyRequestsError",
            "safeName": "WorksCreateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksCreateRequestTooManyRequestsError",
            "safeName": "worksCreateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_too_many_requests_error",
            "safeName": "works_create_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestTooManyRequestsError",
            "safeName": "WorksCreateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-createRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-createRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksCreateRequestInternalServerError",
            "safeName": "worksCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_internal_server_error",
            "safeName": "works_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestInternalServerError",
            "safeName": "WorksCreateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksCreateRequestInternalServerError",
            "safeName": "worksCreateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_internal_server_error",
            "safeName": "works_create_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestInternalServerError",
            "safeName": "WorksCreateRequestInternalServerError"
          }
        },
        "wireValue": "Works-createRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-createRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksCreateRequestServiceUnavailableError",
            "safeName": "worksCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_service_unavailable_error",
            "safeName": "works_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestServiceUnavailableError",
            "safeName": "WorksCreateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-createRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-createRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksCreateRequestServiceUnavailableError",
            "safeName": "worksCreateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_create_request_service_unavailable_error",
            "safeName": "works_create_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_CREATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksCreateRequestServiceUnavailableError",
            "safeName": "WorksCreateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-createRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-deleteRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestBadRequestError",
            "safeName": "worksDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_bad_request_error",
            "safeName": "works_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestBadRequestError",
            "safeName": "WorksDeleteRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestBadRequestError",
            "safeName": "worksDeleteRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_bad_request_error",
            "safeName": "works_delete_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestBadRequestError",
            "safeName": "WorksDeleteRequestBadRequestError"
          }
        },
        "wireValue": "Works-deleteRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-deleteRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestUnauthorizedError",
            "safeName": "worksDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_unauthorized_error",
            "safeName": "works_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestUnauthorizedError",
            "safeName": "WorksDeleteRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestUnauthorizedError",
            "safeName": "worksDeleteRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_unauthorized_error",
            "safeName": "works_delete_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestUnauthorizedError",
            "safeName": "WorksDeleteRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-deleteRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-deleteRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestForbiddenError",
            "safeName": "worksDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_forbidden_error",
            "safeName": "works_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestForbiddenError",
            "safeName": "WorksDeleteRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestForbiddenError",
            "safeName": "worksDeleteRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_forbidden_error",
            "safeName": "works_delete_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestForbiddenError",
            "safeName": "WorksDeleteRequestForbiddenError"
          }
        },
        "wireValue": "Works-deleteRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-deleteRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestNotFoundError",
            "safeName": "worksDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_not_found_error",
            "safeName": "works_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestNotFoundError",
            "safeName": "WorksDeleteRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestNotFoundError",
            "safeName": "worksDeleteRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_not_found_error",
            "safeName": "works_delete_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestNotFoundError",
            "safeName": "WorksDeleteRequestNotFoundError"
          }
        },
        "wireValue": "Works-deleteRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Works-deleteRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestTooManyRequestsError",
            "safeName": "worksDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_too_many_requests_error",
            "safeName": "works_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestTooManyRequestsError",
            "safeName": "WorksDeleteRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestTooManyRequestsError",
            "safeName": "worksDeleteRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_too_many_requests_error",
            "safeName": "works_delete_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestTooManyRequestsError",
            "safeName": "WorksDeleteRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-deleteRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-deleteRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestInternalServerError",
            "safeName": "worksDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_internal_server_error",
            "safeName": "works_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestInternalServerError",
            "safeName": "WorksDeleteRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestInternalServerError",
            "safeName": "worksDeleteRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_internal_server_error",
            "safeName": "works_delete_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestInternalServerError",
            "safeName": "WorksDeleteRequestInternalServerError"
          }
        },
        "wireValue": "Works-deleteRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-deleteRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestServiceUnavailableError",
            "safeName": "worksDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_service_unavailable_error",
            "safeName": "works_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestServiceUnavailableError",
            "safeName": "WorksDeleteRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-deleteRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-deleteRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksDeleteRequestServiceUnavailableError",
            "safeName": "worksDeleteRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_delete_request_service_unavailable_error",
            "safeName": "works_delete_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_DELETE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksDeleteRequestServiceUnavailableError",
            "safeName": "WorksDeleteRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-deleteRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-exportRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksExportRequestBadRequestError",
            "safeName": "worksExportRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_bad_request_error",
            "safeName": "works_export_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestBadRequestError",
            "safeName": "WorksExportRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksExportRequestBadRequestError",
            "safeName": "worksExportRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_bad_request_error",
            "safeName": "works_export_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestBadRequestError",
            "safeName": "WorksExportRequestBadRequestError"
          }
        },
        "wireValue": "Works-exportRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-exportRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksExportRequestUnauthorizedError",
            "safeName": "worksExportRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_unauthorized_error",
            "safeName": "works_export_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestUnauthorizedError",
            "safeName": "WorksExportRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksExportRequestUnauthorizedError",
            "safeName": "worksExportRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_unauthorized_error",
            "safeName": "works_export_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestUnauthorizedError",
            "safeName": "WorksExportRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-exportRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-exportRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksExportRequestForbiddenError",
            "safeName": "worksExportRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_forbidden_error",
            "safeName": "works_export_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestForbiddenError",
            "safeName": "WorksExportRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksExportRequestForbiddenError",
            "safeName": "worksExportRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_forbidden_error",
            "safeName": "works_export_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestForbiddenError",
            "safeName": "WorksExportRequestForbiddenError"
          }
        },
        "wireValue": "Works-exportRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-exportRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksExportRequestTooManyRequestsError",
            "safeName": "worksExportRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_too_many_requests_error",
            "safeName": "works_export_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestTooManyRequestsError",
            "safeName": "WorksExportRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksExportRequestTooManyRequestsError",
            "safeName": "worksExportRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_too_many_requests_error",
            "safeName": "works_export_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestTooManyRequestsError",
            "safeName": "WorksExportRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-exportRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-exportRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksExportRequestInternalServerError",
            "safeName": "worksExportRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_internal_server_error",
            "safeName": "works_export_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestInternalServerError",
            "safeName": "WorksExportRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksExportRequestInternalServerError",
            "safeName": "worksExportRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_internal_server_error",
            "safeName": "works_export_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestInternalServerError",
            "safeName": "WorksExportRequestInternalServerError"
          }
        },
        "wireValue": "Works-exportRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-exportRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-exportRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksExportRequestServiceUnavailableError",
            "safeName": "worksExportRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_service_unavailable_error",
            "safeName": "works_export_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestServiceUnavailableError",
            "safeName": "WorksExportRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-exportRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-exportRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksExportRequestServiceUnavailableError",
            "safeName": "worksExportRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_export_request_service_unavailable_error",
            "safeName": "works_export_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_EXPORT_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksExportRequestServiceUnavailableError",
            "safeName": "WorksExportRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-exportRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-getRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksGetRequestBadRequestError",
            "safeName": "worksGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_bad_request_error",
            "safeName": "works_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestBadRequestError",
            "safeName": "WorksGetRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksGetRequestBadRequestError",
            "safeName": "worksGetRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_bad_request_error",
            "safeName": "works_get_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_GET_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestBadRequestError",
            "safeName": "WorksGetRequestBadRequestError"
          }
        },
        "wireValue": "Works-getRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-getRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksGetRequestUnauthorizedError",
            "safeName": "worksGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_unauthorized_error",
            "safeName": "works_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestUnauthorizedError",
            "safeName": "WorksGetRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksGetRequestUnauthorizedError",
            "safeName": "worksGetRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_unauthorized_error",
            "safeName": "works_get_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_GET_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestUnauthorizedError",
            "safeName": "WorksGetRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-getRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-getRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksGetRequestForbiddenError",
            "safeName": "worksGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_forbidden_error",
            "safeName": "works_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestForbiddenError",
            "safeName": "WorksGetRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksGetRequestForbiddenError",
            "safeName": "worksGetRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_forbidden_error",
            "safeName": "works_get_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_GET_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestForbiddenError",
            "safeName": "WorksGetRequestForbiddenError"
          }
        },
        "wireValue": "Works-getRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-getRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksGetRequestNotFoundError",
            "safeName": "worksGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_not_found_error",
            "safeName": "works_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestNotFoundError",
            "safeName": "WorksGetRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksGetRequestNotFoundError",
            "safeName": "worksGetRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_not_found_error",
            "safeName": "works_get_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_GET_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestNotFoundError",
            "safeName": "WorksGetRequestNotFoundError"
          }
        },
        "wireValue": "Works-getRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Works-getRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksGetRequestTooManyRequestsError",
            "safeName": "worksGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_too_many_requests_error",
            "safeName": "works_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestTooManyRequestsError",
            "safeName": "WorksGetRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksGetRequestTooManyRequestsError",
            "safeName": "worksGetRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_too_many_requests_error",
            "safeName": "works_get_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_GET_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestTooManyRequestsError",
            "safeName": "WorksGetRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-getRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-getRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksGetRequestInternalServerError",
            "safeName": "worksGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_internal_server_error",
            "safeName": "works_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestInternalServerError",
            "safeName": "WorksGetRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksGetRequestInternalServerError",
            "safeName": "worksGetRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_internal_server_error",
            "safeName": "works_get_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_GET_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestInternalServerError",
            "safeName": "WorksGetRequestInternalServerError"
          }
        },
        "wireValue": "Works-getRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-getRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksGetRequestServiceUnavailableError",
            "safeName": "worksGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_service_unavailable_error",
            "safeName": "works_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestServiceUnavailableError",
            "safeName": "WorksGetRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-getRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-getRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksGetRequestServiceUnavailableError",
            "safeName": "worksGetRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_get_request_service_unavailable_error",
            "safeName": "works_get_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_GET_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksGetRequestServiceUnavailableError",
            "safeName": "WorksGetRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-getRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-listRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksListRequestBadRequestError",
            "safeName": "worksListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_bad_request_error",
            "safeName": "works_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestBadRequestError",
            "safeName": "WorksListRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksListRequestBadRequestError",
            "safeName": "worksListRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_bad_request_error",
            "safeName": "works_list_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_LIST_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestBadRequestError",
            "safeName": "WorksListRequestBadRequestError"
          }
        },
        "wireValue": "Works-listRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-listRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksListRequestUnauthorizedError",
            "safeName": "worksListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_unauthorized_error",
            "safeName": "works_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestUnauthorizedError",
            "safeName": "WorksListRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksListRequestUnauthorizedError",
            "safeName": "worksListRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_unauthorized_error",
            "safeName": "works_list_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_LIST_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestUnauthorizedError",
            "safeName": "WorksListRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-listRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-listRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksListRequestForbiddenError",
            "safeName": "worksListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_forbidden_error",
            "safeName": "works_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestForbiddenError",
            "safeName": "WorksListRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksListRequestForbiddenError",
            "safeName": "worksListRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_forbidden_error",
            "safeName": "works_list_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_LIST_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestForbiddenError",
            "safeName": "WorksListRequestForbiddenError"
          }
        },
        "wireValue": "Works-listRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-listRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksListRequestTooManyRequestsError",
            "safeName": "worksListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_too_many_requests_error",
            "safeName": "works_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestTooManyRequestsError",
            "safeName": "WorksListRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksListRequestTooManyRequestsError",
            "safeName": "worksListRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_too_many_requests_error",
            "safeName": "works_list_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_LIST_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestTooManyRequestsError",
            "safeName": "WorksListRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-listRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-listRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksListRequestInternalServerError",
            "safeName": "worksListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_internal_server_error",
            "safeName": "works_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestInternalServerError",
            "safeName": "WorksListRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksListRequestInternalServerError",
            "safeName": "worksListRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_internal_server_error",
            "safeName": "works_list_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_LIST_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestInternalServerError",
            "safeName": "WorksListRequestInternalServerError"
          }
        },
        "wireValue": "Works-listRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-listRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksListRequestServiceUnavailableError",
            "safeName": "worksListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_service_unavailable_error",
            "safeName": "works_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestServiceUnavailableError",
            "safeName": "WorksListRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-listRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-listRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksListRequestServiceUnavailableError",
            "safeName": "worksListRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_list_request_service_unavailable_error",
            "safeName": "works_list_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_LIST_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksListRequestServiceUnavailableError",
            "safeName": "WorksListRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-listRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    },
    "Works-updateRequestBadRequestError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestBadRequestError",
            "safeName": "worksUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_bad_request_error",
            "safeName": "works_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestBadRequestError",
            "safeName": "WorksUpdateRequestBadRequestError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestBadRequestError"
      },
      "displayName": "BadRequestError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestBadRequestError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestBadRequestError",
            "safeName": "worksUpdateRequestBadRequestError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_bad_request_error",
            "safeName": "works_update_request_bad_request_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_BAD_REQUEST_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestBadRequestError",
            "safeName": "WorksUpdateRequestBadRequestError"
          }
        },
        "wireValue": "Works-updateRequestBadRequestError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-bad-request",
          "camelCase": {
            "unsafeName": "errorBadRequest",
            "safeName": "errorBadRequest"
          },
          "snakeCase": {
            "unsafeName": "error_bad_request",
            "safeName": "error_bad_request"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_BAD_REQUEST",
            "safeName": "ERROR_BAD_REQUEST"
          },
          "pascalCase": {
            "unsafeName": "ErrorBadRequest",
            "safeName": "ErrorBadRequest"
          }
        },
        "typeId": "error-bad-request",
        "inline": false,
        "type": "named"
      },
      "statusCode": 400,
      "docs": "400 Bad Request.",
      "examples": []
    },
    "Works-updateRequestUnauthorizedError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestUnauthorizedError",
            "safeName": "worksUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_unauthorized_error",
            "safeName": "works_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestUnauthorizedError",
            "safeName": "WorksUpdateRequestUnauthorizedError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestUnauthorizedError"
      },
      "displayName": "UnauthorizedError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestUnauthorizedError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestUnauthorizedError",
            "safeName": "worksUpdateRequestUnauthorizedError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_unauthorized_error",
            "safeName": "works_update_request_unauthorized_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_UNAUTHORIZED_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestUnauthorizedError",
            "safeName": "WorksUpdateRequestUnauthorizedError"
          }
        },
        "wireValue": "Works-updateRequestUnauthorizedError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-unauthorized",
          "camelCase": {
            "unsafeName": "errorUnauthorized",
            "safeName": "errorUnauthorized"
          },
          "snakeCase": {
            "unsafeName": "error_unauthorized",
            "safeName": "error_unauthorized"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_UNAUTHORIZED",
            "safeName": "ERROR_UNAUTHORIZED"
          },
          "pascalCase": {
            "unsafeName": "ErrorUnauthorized",
            "safeName": "ErrorUnauthorized"
          }
        },
        "typeId": "error-unauthorized",
        "inline": false,
        "type": "named"
      },
      "statusCode": 401,
      "docs": "401 Unauthorized.",
      "examples": []
    },
    "Works-updateRequestForbiddenError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestForbiddenError",
            "safeName": "worksUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_forbidden_error",
            "safeName": "works_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestForbiddenError",
            "safeName": "WorksUpdateRequestForbiddenError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestForbiddenError"
      },
      "displayName": "ForbiddenError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestForbiddenError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestForbiddenError",
            "safeName": "worksUpdateRequestForbiddenError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_forbidden_error",
            "safeName": "works_update_request_forbidden_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_FORBIDDEN_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestForbiddenError",
            "safeName": "WorksUpdateRequestForbiddenError"
          }
        },
        "wireValue": "Works-updateRequestForbiddenError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-forbidden",
          "camelCase": {
            "unsafeName": "errorForbidden",
            "safeName": "errorForbidden"
          },
          "snakeCase": {
            "unsafeName": "error_forbidden",
            "safeName": "error_forbidden"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_FORBIDDEN",
            "safeName": "ERROR_FORBIDDEN"
          },
          "pascalCase": {
            "unsafeName": "ErrorForbidden",
            "safeName": "ErrorForbidden"
          }
        },
        "typeId": "error-forbidden",
        "inline": false,
        "type": "named"
      },
      "statusCode": 403,
      "docs": "403 Forbidden.",
      "examples": []
    },
    "Works-updateRequestNotFoundError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestNotFoundError",
            "safeName": "worksUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_not_found_error",
            "safeName": "works_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestNotFoundError",
            "safeName": "WorksUpdateRequestNotFoundError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestNotFoundError"
      },
      "displayName": "NotFoundError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestNotFoundError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestNotFoundError",
            "safeName": "worksUpdateRequestNotFoundError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_not_found_error",
            "safeName": "works_update_request_not_found_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_NOT_FOUND_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestNotFoundError",
            "safeName": "WorksUpdateRequestNotFoundError"
          }
        },
        "wireValue": "Works-updateRequestNotFoundError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-not-found",
          "camelCase": {
            "unsafeName": "errorNotFound",
            "safeName": "errorNotFound"
          },
          "snakeCase": {
            "unsafeName": "error_not_found",
            "safeName": "error_not_found"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_NOT_FOUND",
            "safeName": "ERROR_NOT_FOUND"
          },
          "pascalCase": {
            "unsafeName": "ErrorNotFound",
            "safeName": "ErrorNotFound"
          }
        },
        "typeId": "error-not-found",
        "inline": false,
        "type": "named"
      },
      "statusCode": 404,
      "docs": "404 Not Found.",
      "examples": []
    },
    "Works-updateRequestTooManyRequestsError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestTooManyRequestsError",
            "safeName": "worksUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_too_many_requests_error",
            "safeName": "works_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestTooManyRequestsError",
            "safeName": "WorksUpdateRequestTooManyRequestsError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestTooManyRequestsError"
      },
      "displayName": "TooManyRequestsError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestTooManyRequestsError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestTooManyRequestsError",
            "safeName": "worksUpdateRequestTooManyRequestsError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_too_many_requests_error",
            "safeName": "works_update_request_too_many_requests_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_TOO_MANY_REQUESTS_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestTooManyRequestsError",
            "safeName": "WorksUpdateRequestTooManyRequestsError"
          }
        },
        "wireValue": "Works-updateRequestTooManyRequestsError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-too-many-requests",
          "camelCase": {
            "unsafeName": "errorTooManyRequests",
            "safeName": "errorTooManyRequests"
          },
          "snakeCase": {
            "unsafeName": "error_too_many_requests",
            "safeName": "error_too_many_requests"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_TOO_MANY_REQUESTS",
            "safeName": "ERROR_TOO_MANY_REQUESTS"
          },
          "pascalCase": {
            "unsafeName": "ErrorTooManyRequests",
            "safeName": "ErrorTooManyRequests"
          }
        },
        "typeId": "error-too-many-requests",
        "inline": false,
        "type": "named"
      },
      "statusCode": 429,
      "docs": "429 Too Many Requests.",
      "examples": []
    },
    "Works-updateRequestInternalServerError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestInternalServerError",
            "safeName": "worksUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_internal_server_error",
            "safeName": "works_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestInternalServerError",
            "safeName": "WorksUpdateRequestInternalServerError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestInternalServerError"
      },
      "displayName": "InternalServerError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestInternalServerError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestInternalServerError",
            "safeName": "worksUpdateRequestInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_internal_server_error",
            "safeName": "works_update_request_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestInternalServerError",
            "safeName": "WorksUpdateRequestInternalServerError"
          }
        },
        "wireValue": "Works-updateRequestInternalServerError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-internal-server-error",
          "camelCase": {
            "unsafeName": "errorInternalServerError",
            "safeName": "errorInternalServerError"
          },
          "snakeCase": {
            "unsafeName": "error_internal_server_error",
            "safeName": "error_internal_server_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_INTERNAL_SERVER_ERROR",
            "safeName": "ERROR_INTERNAL_SERVER_ERROR"
          },
          "pascalCase": {
            "unsafeName": "ErrorInternalServerError",
            "safeName": "ErrorInternalServerError"
          }
        },
        "typeId": "error-internal-server-error",
        "inline": false,
        "type": "named"
      },
      "statusCode": 500,
      "docs": "500 Internal Server Error.",
      "examples": []
    },
    "Works-updateRequestServiceUnavailableError": {
      "name": {
        "name": {
          "originalName": "Works-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestServiceUnavailableError",
            "safeName": "worksUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_service_unavailable_error",
            "safeName": "works_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestServiceUnavailableError",
            "safeName": "WorksUpdateRequestServiceUnavailableError"
          }
        },
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "errorId": "Works-updateRequestServiceUnavailableError"
      },
      "displayName": "ServiceUnavailableError",
      "discriminantValue": {
        "name": {
          "originalName": "Works-updateRequestServiceUnavailableError",
          "camelCase": {
            "unsafeName": "worksUpdateRequestServiceUnavailableError",
            "safeName": "worksUpdateRequestServiceUnavailableError"
          },
          "snakeCase": {
            "unsafeName": "works_update_request_service_unavailable_error",
            "safeName": "works_update_request_service_unavailable_error"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR",
            "safeName": "WORKS_UPDATE_REQUEST_SERVICE_UNAVAILABLE_ERROR"
          },
          "pascalCase": {
            "unsafeName": "WorksUpdateRequestServiceUnavailableError",
            "safeName": "WorksUpdateRequestServiceUnavailableError"
          }
        },
        "wireValue": "Works-updateRequestServiceUnavailableError"
      },
      "type": {
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "error-service-unavailable",
          "camelCase": {
            "unsafeName": "errorServiceUnavailable",
            "safeName": "errorServiceUnavailable"
          },
          "snakeCase": {
            "unsafeName": "error_service_unavailable",
            "safeName": "error_service_unavailable"
          },
          "screamingSnakeCase": {
            "unsafeName": "ERROR_SERVICE_UNAVAILABLE",
            "safeName": "ERROR_SERVICE_UNAVAILABLE"
          },
          "pascalCase": {
            "unsafeName": "ErrorServiceUnavailable",
            "safeName": "ErrorServiceUnavailable"
          }
        },
        "typeId": "error-service-unavailable",
        "inline": false,
        "type": "named"
      },
      "statusCode": 503,
      "docs": "503 Service Unavailable.",
      "examples": []
    }
  },
  "webhookGroups": {},
  "headers": [],
  "idempotencyHeaders": [],
  "pathParameters": [],
  "errorDiscriminationStrategy": {
    "type": "statusCode"
  },
  "variables": [],
  "serviceTypeReferenceInfo": {
    "sharedTypes": [],
    "typesReferencedOnlyByService": {}
  },
  "environments": {
    "defaultEnvironment": "DevRev API endpoint.",
    "environments": {
      "environments": [
        {
          "id": "DevRev API endpoint.",
          "name": {
            "originalName": "DevRev API endpoint.",
            "camelCase": {
              "unsafeName": "devRevApiEndpoint",
              "safeName": "devRevApiEndpoint"
            },
            "snakeCase": {
              "unsafeName": "dev_rev_api_endpoint",
              "safeName": "dev_rev_api_endpoint"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_REV_API_ENDPOINT",
              "safeName": "DEV_REV_API_ENDPOINT"
            },
            "pascalCase": {
              "unsafeName": "DevRevApiEndpoint",
              "safeName": "DevRevApiEndpoint"
            }
          },
          "url": "https://api.devrev.ai",
          "docs": "DevRev API endpoint."
        }
      ],
      "type": "singleBaseUrl"
    }
  },
  "rootPackage": {
    "fernFilepath": {
      "allParts": [],
      "packagePath": []
    },
    "types": [
      "artifact-summary",
      "artifacts-locate-response",
      "artifacts-prepare-request",
      "artifacts-prepare-response",
      "artifacts-prepare-response-form-data",
      "atom-base",
      "atom-base-summary",
      "auth-connection",
      "auth-connection-options-azure-ad",
      "auth-connection-options-google-apps",
      "auth-connection-options-oidc",
      "auth-connection-options-saml",
      "auth-connection-options-social",
      "auth-connection-toggle",
      "auth-connection-type",
      "auth-token",
      "auth-token-grant-type",
      "auth-token-requested-token-type",
      "auth-token-status",
      "auth-token-subject-token-type",
      "auth-token-token-type",
      "auth-tokens-create-request",
      "auth-tokens-create-response",
      "auth-tokens-delete-request",
      "auth-tokens-get-response",
      "auth-tokens-list-response",
      "auth-tokens-org-traits",
      "auth-tokens-rev-info",
      "auth-tokens-self-delete-request",
      "auth-tokens-update-request",
      "auth-tokens-update-response",
      "auth-tokens-user-traits",
      "capability",
      "capability-summary",
      "dev-org-auth-connections-create-request",
      "dev-org-auth-connections-create-request-type",
      "dev-org-auth-connections-create-response",
      "dev-org-auth-connections-delete-request",
      "dev-org-auth-connections-get-response",
      "dev-org-auth-connections-list-response",
      "dev-org-auth-connections-toggle-request",
      "dev-org-auth-connections-update-request",
      "dev-org-auth-connections-update-request-type",
      "dev-org-auth-connections-update-response",
      "dev-user",
      "dev-user-summary",
      "dev-users-list-response",
      "dev-users-self-response",
      "empty",
      "enhancement",
      "enhancement-summary",
      "error-bad-request",
      "error-bad-request-bad-request",
      "error-bad-request-invalid-enum-value",
      "error-bad-request-missing-required-field",
      "error-bad-request-parse-error",
      "error-bad-request-type",
      "error-bad-request-value-not-permitted",
      "error-base",
      "error-forbidden",
      "error-forbidden-forbidden",
      "error-forbidden-type",
      "error-internal-server-error",
      "error-internal-server-error-internal-error",
      "error-internal-server-error-type",
      "error-not-found",
      "error-not-found-not-found",
      "error-not-found-type",
      "error-service-unavailable",
      "error-service-unavailable-service-unavailable",
      "error-service-unavailable-type",
      "error-too-many-requests",
      "error-too-many-requests-too-many-requests",
      "error-too-many-requests-type",
      "error-unauthorized",
      "error-unauthorized-type",
      "error-unauthorized-unauthenticated",
      "event-part-created",
      "event-part-deleted",
      "event-part-updated",
      "event-rev-org-created",
      "event-rev-org-deleted",
      "event-rev-org-updated",
      "event-tag-created",
      "event-tag-deleted",
      "event-tag-updated",
      "event-timeline-entry-created",
      "event-timeline-entry-deleted",
      "event-timeline-entry-updated",
      "event-webhook-created",
      "event-webhook-deleted",
      "event-webhook-updated",
      "event-work-created",
      "event-work-deleted",
      "event-work-updated",
      "external-identity",
      "feature",
      "feature-summary",
      "group-summary",
      "issue",
      "issue-priority",
      "list-mode",
      "org-base",
      "org-base-summary",
      "org-environment",
      "org-summary",
      "org-type",
      "part",
      "part-base",
      "part-base-summary",
      "part-summary",
      "part-type",
      "parts-create-request",
      "parts-create-request-capability",
      "parts-create-request-enhancement",
      "parts-create-request-feature",
      "parts-create-request-product",
      "parts-create-response",
      "parts-delete-request",
      "parts-delete-response",
      "parts-get-response",
      "parts-list-response",
      "parts-update-request",
      "parts-update-request-capability",
      "parts-update-request-enhancement",
      "parts-update-request-feature",
      "parts-update-request-owned-by",
      "parts-update-request-product",
      "parts-update-response",
      "product",
      "product-summary",
      "rev-org",
      "rev-org-summary",
      "rev-orgs-create-request",
      "rev-orgs-create-response",
      "rev-orgs-delete-request",
      "rev-orgs-delete-response",
      "rev-orgs-get-response",
      "rev-orgs-list-response",
      "rev-orgs-update-request",
      "rev-orgs-update-response",
      "rev-user-summary",
      "set-tag-with-value",
      "stage",
      "stage-init",
      "stage-update",
      "sys-user-summary",
      "tag",
      "tag-summary",
      "tag-with-value",
      "tags-create-request",
      "tags-create-response",
      "tags-delete-request",
      "tags-delete-response",
      "tags-get-response",
      "tags-list-response",
      "tags-update-allowed-values",
      "tags-update-request",
      "tags-update-response",
      "ticket",
      "ticket-severity",
      "timeline-comment",
      "timeline-comment-body-type",
      "timeline-entries-create-request",
      "timeline-entries-create-request-timeline-comment",
      "timeline-entries-create-request-type",
      "timeline-entries-create-response",
      "timeline-entries-get-response",
      "timeline-entries-list-response",
      "timeline-entries-update-request",
      "timeline-entries-update-request-timeline-comment",
      "timeline-entries-update-request-timeline-comment-artifacts",
      "timeline-entries-update-request-type",
      "timeline-entries-update-response",
      "timeline-entry",
      "timeline-entry-base",
      "timeline-entry-type",
      "timeline-entry-visibility",
      "user-base",
      "user-base-summary",
      "user-state",
      "user-summary",
      "user-type",
      "webhook",
      "webhook-event-request",
      "webhook-event-response",
      "webhook-event-type",
      "webhook-event-verify",
      "webhook-status",
      "webhooks-create-request",
      "webhooks-create-response",
      "webhooks-delete-request",
      "webhooks-delete-response",
      "webhooks-get-response",
      "webhooks-list-response",
      "webhooks-update-action",
      "webhooks-update-request",
      "webhooks-update-request-event-types",
      "webhooks-update-response",
      "work",
      "work-base",
      "work-type",
      "works-create-request",
      "works-create-request-issue",
      "works-create-request-ticket",
      "works-create-response",
      "works-delete-request",
      "works-delete-response",
      "works-export-response",
      "works-get-response",
      "works-list-response",
      "works-update-request",
      "works-update-request-artifact-ids",
      "works-update-request-issue",
      "works-update-request-owned-by",
      "works-update-request-reported-by",
      "works-update-request-tags",
      "works-update-request-ticket",
      "works-update-response"
    ],
    "errors": [],
    "subpackages": [
      "subpackage_artifacts",
      "subpackage_authTokens",
      "subpackage_authConnection",
      "subpackage_devUsers",
      "subpackage_parts",
      "subpackage_revOrgs",
      "subpackage_tags",
      "subpackage_timelineEntries",
      "subpackage_webhooks",
      "subpackage_works"
    ],
    "hasEndpointsInTree": false
  },
  "subpackages": {
    "subpackage_artifacts": {
      "name": {
        "originalName": "artifacts",
        "camelCase": {
          "unsafeName": "artifacts",
          "safeName": "artifacts"
        },
        "snakeCase": {
          "unsafeName": "artifacts",
          "safeName": "artifacts"
        },
        "screamingSnakeCase": {
          "unsafeName": "ARTIFACTS",
          "safeName": "ARTIFACTS"
        },
        "pascalCase": {
          "unsafeName": "Artifacts",
          "safeName": "Artifacts"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "artifacts",
            "camelCase": {
              "unsafeName": "artifacts",
              "safeName": "artifacts"
            },
            "snakeCase": {
              "unsafeName": "artifacts",
              "safeName": "artifacts"
            },
            "screamingSnakeCase": {
              "unsafeName": "ARTIFACTS",
              "safeName": "ARTIFACTS"
            },
            "pascalCase": {
              "unsafeName": "Artifacts",
              "safeName": "Artifacts"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "artifacts",
          "camelCase": {
            "unsafeName": "artifacts",
            "safeName": "artifacts"
          },
          "snakeCase": {
            "unsafeName": "artifacts",
            "safeName": "artifacts"
          },
          "screamingSnakeCase": {
            "unsafeName": "ARTIFACTS",
            "safeName": "ARTIFACTS"
          },
          "pascalCase": {
            "unsafeName": "Artifacts",
            "safeName": "Artifacts"
          }
        }
      },
      "service": "service_artifacts",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_authTokens": {
      "name": {
        "originalName": "authTokens",
        "camelCase": {
          "unsafeName": "authTokens",
          "safeName": "authTokens"
        },
        "snakeCase": {
          "unsafeName": "auth_tokens",
          "safeName": "auth_tokens"
        },
        "screamingSnakeCase": {
          "unsafeName": "AUTH_TOKENS",
          "safeName": "AUTH_TOKENS"
        },
        "pascalCase": {
          "unsafeName": "AuthTokens",
          "safeName": "AuthTokens"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "authTokens",
            "camelCase": {
              "unsafeName": "authTokens",
              "safeName": "authTokens"
            },
            "snakeCase": {
              "unsafeName": "auth_tokens",
              "safeName": "auth_tokens"
            },
            "screamingSnakeCase": {
              "unsafeName": "AUTH_TOKENS",
              "safeName": "AUTH_TOKENS"
            },
            "pascalCase": {
              "unsafeName": "AuthTokens",
              "safeName": "AuthTokens"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "authTokens",
          "camelCase": {
            "unsafeName": "authTokens",
            "safeName": "authTokens"
          },
          "snakeCase": {
            "unsafeName": "auth_tokens",
            "safeName": "auth_tokens"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_TOKENS",
            "safeName": "AUTH_TOKENS"
          },
          "pascalCase": {
            "unsafeName": "AuthTokens",
            "safeName": "AuthTokens"
          }
        }
      },
      "service": "service_authTokens",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_authConnection": {
      "name": {
        "originalName": "authConnection",
        "camelCase": {
          "unsafeName": "authConnection",
          "safeName": "authConnection"
        },
        "snakeCase": {
          "unsafeName": "auth_connection",
          "safeName": "auth_connection"
        },
        "screamingSnakeCase": {
          "unsafeName": "AUTH_CONNECTION",
          "safeName": "AUTH_CONNECTION"
        },
        "pascalCase": {
          "unsafeName": "AuthConnection",
          "safeName": "AuthConnection"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "authConnection",
            "camelCase": {
              "unsafeName": "authConnection",
              "safeName": "authConnection"
            },
            "snakeCase": {
              "unsafeName": "auth_connection",
              "safeName": "auth_connection"
            },
            "screamingSnakeCase": {
              "unsafeName": "AUTH_CONNECTION",
              "safeName": "AUTH_CONNECTION"
            },
            "pascalCase": {
              "unsafeName": "AuthConnection",
              "safeName": "AuthConnection"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "authConnection",
          "camelCase": {
            "unsafeName": "authConnection",
            "safeName": "authConnection"
          },
          "snakeCase": {
            "unsafeName": "auth_connection",
            "safeName": "auth_connection"
          },
          "screamingSnakeCase": {
            "unsafeName": "AUTH_CONNECTION",
            "safeName": "AUTH_CONNECTION"
          },
          "pascalCase": {
            "unsafeName": "AuthConnection",
            "safeName": "AuthConnection"
          }
        }
      },
      "service": "service_authConnection",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_devUsers": {
      "name": {
        "originalName": "devUsers",
        "camelCase": {
          "unsafeName": "devUsers",
          "safeName": "devUsers"
        },
        "snakeCase": {
          "unsafeName": "dev_users",
          "safeName": "dev_users"
        },
        "screamingSnakeCase": {
          "unsafeName": "DEV_USERS",
          "safeName": "DEV_USERS"
        },
        "pascalCase": {
          "unsafeName": "DevUsers",
          "safeName": "DevUsers"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "devUsers",
            "camelCase": {
              "unsafeName": "devUsers",
              "safeName": "devUsers"
            },
            "snakeCase": {
              "unsafeName": "dev_users",
              "safeName": "dev_users"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEV_USERS",
              "safeName": "DEV_USERS"
            },
            "pascalCase": {
              "unsafeName": "DevUsers",
              "safeName": "DevUsers"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "devUsers",
          "camelCase": {
            "unsafeName": "devUsers",
            "safeName": "devUsers"
          },
          "snakeCase": {
            "unsafeName": "dev_users",
            "safeName": "dev_users"
          },
          "screamingSnakeCase": {
            "unsafeName": "DEV_USERS",
            "safeName": "DEV_USERS"
          },
          "pascalCase": {
            "unsafeName": "DevUsers",
            "safeName": "DevUsers"
          }
        }
      },
      "service": "service_devUsers",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_parts": {
      "name": {
        "originalName": "parts",
        "camelCase": {
          "unsafeName": "parts",
          "safeName": "parts"
        },
        "snakeCase": {
          "unsafeName": "parts",
          "safeName": "parts"
        },
        "screamingSnakeCase": {
          "unsafeName": "PARTS",
          "safeName": "PARTS"
        },
        "pascalCase": {
          "unsafeName": "Parts",
          "safeName": "Parts"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "parts",
            "camelCase": {
              "unsafeName": "parts",
              "safeName": "parts"
            },
            "snakeCase": {
              "unsafeName": "parts",
              "safeName": "parts"
            },
            "screamingSnakeCase": {
              "unsafeName": "PARTS",
              "safeName": "PARTS"
            },
            "pascalCase": {
              "unsafeName": "Parts",
              "safeName": "Parts"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "parts",
          "camelCase": {
            "unsafeName": "parts",
            "safeName": "parts"
          },
          "snakeCase": {
            "unsafeName": "parts",
            "safeName": "parts"
          },
          "screamingSnakeCase": {
            "unsafeName": "PARTS",
            "safeName": "PARTS"
          },
          "pascalCase": {
            "unsafeName": "Parts",
            "safeName": "Parts"
          }
        }
      },
      "service": "service_parts",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_revOrgs": {
      "name": {
        "originalName": "revOrgs",
        "camelCase": {
          "unsafeName": "revOrgs",
          "safeName": "revOrgs"
        },
        "snakeCase": {
          "unsafeName": "rev_orgs",
          "safeName": "rev_orgs"
        },
        "screamingSnakeCase": {
          "unsafeName": "REV_ORGS",
          "safeName": "REV_ORGS"
        },
        "pascalCase": {
          "unsafeName": "RevOrgs",
          "safeName": "RevOrgs"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "revOrgs",
            "camelCase": {
              "unsafeName": "revOrgs",
              "safeName": "revOrgs"
            },
            "snakeCase": {
              "unsafeName": "rev_orgs",
              "safeName": "rev_orgs"
            },
            "screamingSnakeCase": {
              "unsafeName": "REV_ORGS",
              "safeName": "REV_ORGS"
            },
            "pascalCase": {
              "unsafeName": "RevOrgs",
              "safeName": "RevOrgs"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "revOrgs",
          "camelCase": {
            "unsafeName": "revOrgs",
            "safeName": "revOrgs"
          },
          "snakeCase": {
            "unsafeName": "rev_orgs",
            "safeName": "rev_orgs"
          },
          "screamingSnakeCase": {
            "unsafeName": "REV_ORGS",
            "safeName": "REV_ORGS"
          },
          "pascalCase": {
            "unsafeName": "RevOrgs",
            "safeName": "RevOrgs"
          }
        }
      },
      "service": "service_revOrgs",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_tags": {
      "name": {
        "originalName": "tags",
        "camelCase": {
          "unsafeName": "tags",
          "safeName": "tags"
        },
        "snakeCase": {
          "unsafeName": "tags",
          "safeName": "tags"
        },
        "screamingSnakeCase": {
          "unsafeName": "TAGS",
          "safeName": "TAGS"
        },
        "pascalCase": {
          "unsafeName": "Tags",
          "safeName": "Tags"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "tags",
            "camelCase": {
              "unsafeName": "tags",
              "safeName": "tags"
            },
            "snakeCase": {
              "unsafeName": "tags",
              "safeName": "tags"
            },
            "screamingSnakeCase": {
              "unsafeName": "TAGS",
              "safeName": "TAGS"
            },
            "pascalCase": {
              "unsafeName": "Tags",
              "safeName": "Tags"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "tags",
          "camelCase": {
            "unsafeName": "tags",
            "safeName": "tags"
          },
          "snakeCase": {
            "unsafeName": "tags",
            "safeName": "tags"
          },
          "screamingSnakeCase": {
            "unsafeName": "TAGS",
            "safeName": "TAGS"
          },
          "pascalCase": {
            "unsafeName": "Tags",
            "safeName": "Tags"
          }
        }
      },
      "service": "service_tags",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_timelineEntries": {
      "name": {
        "originalName": "timelineEntries",
        "camelCase": {
          "unsafeName": "timelineEntries",
          "safeName": "timelineEntries"
        },
        "snakeCase": {
          "unsafeName": "timeline_entries",
          "safeName": "timeline_entries"
        },
        "screamingSnakeCase": {
          "unsafeName": "TIMELINE_ENTRIES",
          "safeName": "TIMELINE_ENTRIES"
        },
        "pascalCase": {
          "unsafeName": "TimelineEntries",
          "safeName": "TimelineEntries"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "timelineEntries",
            "camelCase": {
              "unsafeName": "timelineEntries",
              "safeName": "timelineEntries"
            },
            "snakeCase": {
              "unsafeName": "timeline_entries",
              "safeName": "timeline_entries"
            },
            "screamingSnakeCase": {
              "unsafeName": "TIMELINE_ENTRIES",
              "safeName": "TIMELINE_ENTRIES"
            },
            "pascalCase": {
              "unsafeName": "TimelineEntries",
              "safeName": "TimelineEntries"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "timelineEntries",
          "camelCase": {
            "unsafeName": "timelineEntries",
            "safeName": "timelineEntries"
          },
          "snakeCase": {
            "unsafeName": "timeline_entries",
            "safeName": "timeline_entries"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMELINE_ENTRIES",
            "safeName": "TIMELINE_ENTRIES"
          },
          "pascalCase": {
            "unsafeName": "TimelineEntries",
            "safeName": "TimelineEntries"
          }
        }
      },
      "service": "service_timelineEntries",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_webhooks": {
      "name": {
        "originalName": "webhooks",
        "camelCase": {
          "unsafeName": "webhooks",
          "safeName": "webhooks"
        },
        "snakeCase": {
          "unsafeName": "webhooks",
          "safeName": "webhooks"
        },
        "screamingSnakeCase": {
          "unsafeName": "WEBHOOKS",
          "safeName": "WEBHOOKS"
        },
        "pascalCase": {
          "unsafeName": "Webhooks",
          "safeName": "Webhooks"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "webhooks",
            "camelCase": {
              "unsafeName": "webhooks",
              "safeName": "webhooks"
            },
            "snakeCase": {
              "unsafeName": "webhooks",
              "safeName": "webhooks"
            },
            "screamingSnakeCase": {
              "unsafeName": "WEBHOOKS",
              "safeName": "WEBHOOKS"
            },
            "pascalCase": {
              "unsafeName": "Webhooks",
              "safeName": "Webhooks"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "webhooks",
          "camelCase": {
            "unsafeName": "webhooks",
            "safeName": "webhooks"
          },
          "snakeCase": {
            "unsafeName": "webhooks",
            "safeName": "webhooks"
          },
          "screamingSnakeCase": {
            "unsafeName": "WEBHOOKS",
            "safeName": "WEBHOOKS"
          },
          "pascalCase": {
            "unsafeName": "Webhooks",
            "safeName": "Webhooks"
          }
        }
      },
      "service": "service_webhooks",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "subpackage_works": {
      "name": {
        "originalName": "works",
        "camelCase": {
          "unsafeName": "works",
          "safeName": "works"
        },
        "snakeCase": {
          "unsafeName": "works",
          "safeName": "works"
        },
        "screamingSnakeCase": {
          "unsafeName": "WORKS",
          "safeName": "WORKS"
        },
        "pascalCase": {
          "unsafeName": "Works",
          "safeName": "Works"
        }
      },
      "fernFilepath": {
        "allParts": [
          {
            "originalName": "works",
            "camelCase": {
              "unsafeName": "works",
              "safeName": "works"
            },
            "snakeCase": {
              "unsafeName": "works",
              "safeName": "works"
            },
            "screamingSnakeCase": {
              "unsafeName": "WORKS",
              "safeName": "WORKS"
            },
            "pascalCase": {
              "unsafeName": "Works",
              "safeName": "Works"
            }
          }
        ],
        "packagePath": [],
        "file": {
          "originalName": "works",
          "camelCase": {
            "unsafeName": "works",
            "safeName": "works"
          },
          "snakeCase": {
            "unsafeName": "works",
            "safeName": "works"
          },
          "screamingSnakeCase": {
            "unsafeName": "WORKS",
            "safeName": "WORKS"
          },
          "pascalCase": {
            "unsafeName": "Works",
            "safeName": "Works"
          }
        }
      },
      "service": "service_works",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    }
  },
  "sdkConfig": {
    "hasFileDownloadEndpoints": false,
    "hasPaginatedEndpoints": false,
    "hasStreamingEndpoints": false,
    "isAuthMandatory": true,
    "platformHeaders": {
      "language": "",
      "sdkName": "",
      "sdkVersion": ""
    }
  },
  "apiName": {
    "originalName": "",
    "camelCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "snakeCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "screamingSnakeCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "pascalCase": {
      "unsafeName": "",
      "safeName": ""
    }
  },
  "constants": {
    "errorInstanceIdKey": {
      "name": {
        "originalName": "errorInstanceId",
        "camelCase": {
          "unsafeName": "errorInstanceId",
          "safeName": "errorInstanceId"
        },
        "snakeCase": {
          "unsafeName": "error_instance_id",
          "safeName": "error_instance_id"
        },
        "screamingSnakeCase": {
          "unsafeName": "ERROR_INSTANCE_ID",
          "safeName": "ERROR_INSTANCE_ID"
        },
        "pascalCase": {
          "unsafeName": "ErrorInstanceId",
          "safeName": "ErrorInstanceId"
        }
      },
      "wireValue": "errorInstanceId"
    }
  }
}