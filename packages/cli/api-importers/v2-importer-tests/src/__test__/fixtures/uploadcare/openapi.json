{
    "openapi": "3.0.0",
    "info": {
        "title": "Upload API Reference",
        "version": "2024-02-12",
        "description": "### Summary\nUpload API provides several ways of uploading files to Uploadcare servers in a\nsecure and reliable way.\n\n### API endpoints\nUpload API's root is located at `https://upload.uploadcare.com/`.\n**Note**: All API endpoints end with a forward slash `/`. Please do not forget to include it.\n\n### API clients\nPlease checkout [API clients](https://uploadcare.com/docs/integrations/) page for a\nlist of official and third party Upload API clients.\n\n### File storage\nEvery uploaded file is **temporary** by nature and subject to be deleted within a\n24-hour period. **Mark the file as stored** to make it permanent:\n* On upload via the [`UPLOADCARE_STORE` flag](/api-refs/upload-api/#operation/baseUpload)\n* [Store](/api-refs/rest-api/v0.6.0/#operation/storeFile) or\n  [copy](/api-refs/rest-api/v0.6.0/#operation/createLocalCopy) an already uploaded\n  file via [REST API](/api-refs/rest-api/v0.6.0/).\n\n**Note**: `UPLOADCARE_STORE=auto` parameter delegates the choice of the\nfile storing behavior to a project\n[auto-store](https://app.uploadcare.com/projects/-/settings/#storage)\nsetting (which is enabled by default). \n\n### File delivery\nOnce uploaded, your files become available via our [CDN](https://uploadcare.com/docs/delivery/).\nThe CDN includes on the fly image processing features and can work as a proxy.\nPlease check the referenced page to learn more.\n",
        "contact": {
            "name": "API support",
            "email": "help@uploadcare.com"
        },
        "x-logo": {
            "url": "https://ucarecdn.com/a539fa00-92d4-475d-a475-f14782e87422/logouploadapi.svg",
            "backgroundColor": "#fafafa",
            "altText": "Uploadcare Upload API Reference"
        },
        "x-meta": {
            "title": "Upload API Reference â€” Uploadcare",
            "description": "Complete reference documentation for the Uploadcare's Upload API. Covers endpoints, requests, their parameters, and response examples."
        }
    },
    "servers": [
        {
            "url": "https://upload.uploadcare.com",
            "description": "Production server"
        }
    ],
    "tags": [
        {
            "name": "Integrations",
            "description": "You don't have to code most of the low-level API interactions.\nWe have high-level [libraries](https://uploadcare.com/docs/integrations/) for all popular platforms:\n* [JavaScript](https://uploadcare.com/docs/integrations/javascript/)\n* [PHP](https://uploadcare.com/docs/integrations/php/)\n* [Python](https://uploadcare.com/docs/integrations/python/) (including Django)\n* [Ruby](https://uploadcare.com/docs/integrations/ruby/) and [Rails](https://uploadcare.com/docs/integrations/rails/)\n* [Swift](https://uploadcare.com/docs/integrations/swift/) (iOS, iPadOS, macOS, tvOS, Linux)\n* [Kotlin](https://uploadcare.com/docs/integrations/android/) (Android)\n* [Java](https://uploadcare.com/docs/integrations/java/)\n* [Golang](https://uploadcare.com/docs/integrations/golang/)\n* [Rust](https://uploadcare.com/docs/integrations/rust/)\n\nIn this API reference, you will see request examples in different languages.\nKeep in mind that running sample queries requires our libraries to be installed and initialized.\n"
        },
        {
            "name": "Upload"
        },
        {
            "name": "Groups"
        },
        {
            "name": "Errors",
            "description": "If the request fails, Upload API returns an error response.\nError responses are returned in the form of a JSON object with an error code, an HTTP status code and an error message.\nThe following errors are possible.\n<table>\n  <tr>\n    <th>Error code</th>\n    <th>HTTP status code</th>\n    <th>Error message</th>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">Base upload errors:</td>\n  </tr>\n  <tr>\n    <td>AccountBlockedError</td>\n    <td>403</td>\n    <td>Account has been blocked.</td>\n  </tr>\n  <tr>\n    <td>AccountLimitsExceededError</td>\n    <td>403</td>\n    <td>Account has reached its limits.</td>\n  </tr>\n  <tr>\n    <td>AccountUnpaidError</td>\n    <td>403</td>\n    <td>Account has been blocked for non payment.</td>\n  </tr>\n  <tr>\n    <td>AutostoreDisabledError</td>\n    <td>403</td>\n    <td>Autostore is disabled.</td>\n  </tr>\n  <tr>\n    <td>BaseViewsError</td>\n    <td>400</td>\n    <td>Request processing failed.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyDuplicatedError</td>\n    <td>400</td>\n    <td>File's metadata key `%s` has a duplicate.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyEmptyError</td>\n    <td>400</td>\n    <td>File's metadata key can not be empty.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyForbiddenError</td>\n    <td>400</td>\n    <td>File's metadata key `%s` contains symbols not allowed by the metadata key format.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyLengthTooBigError</td>\n    <td>400</td>\n    <td>Length of file metadata key `%s` can not be more than %d symbols.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeysNumberTooBigError</td>\n    <td>400</td>\n    <td>A file can not have more than %d metadata keys.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueEmptyError</td>\n    <td>400</td>\n    <td>Value of the file metadata key `%s` can not be empty.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueForbiddenError</td>\n    <td>400</td>\n    <td>Value of file metadata key `%s` contains symbols not allowed by the metadata value format.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueLengthTooBigError</td>\n    <td>400</td>\n    <td>Value of file metadata's key `%s` can not be more than %d symbols in length.</td>\n  </tr>\n  <tr>\n    <td>FileSizeLimitExceededError</td>\n    <td>400</td>\n    <td>File is too large.</td>\n  </tr>\n  <tr>\n    <td>MethodNotAllowedError</td>\n    <td>405</td>\n    <td>HTTP method %s is not allowed for %s</td>\n  </tr>\n  <tr>\n    <td>NullCharactersForbiddenError</td>\n    <td>400</td>\n    <td>Null characters are not allowed.</td>\n  </tr>\n  <tr>\n    <td>PostRequestParserFailedError</td>\n    <td>400</td>\n    <td>HTTP POST request parsing failed.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyInvalidError</td>\n    <td>403</td>\n    <td>%s is invalid.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyRemovedError</td>\n    <td>403</td>\n    <td>Project %s is marked as removed.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyRequiredError</td>\n    <td>403</td>\n    <td>%s is required.</td>\n  </tr>\n  <tr>\n    <td>RequestFileNumberLimitExceededError</td>\n    <td>400</td>\n    <td>The request contains too many files.</td>\n  </tr>\n  <tr>\n    <td>RequestFiledsNumberLimitExceededError</td>\n    <td>400</td>\n    <td>The request contains too many HTTP POST fields.</td>\n  </tr>\n  <tr>\n    <td>RequestSizeLimitExceededError</td>\n    <td>413</td>\n    <td>The size of the request is too large.</td>\n  </tr>\n  <tr>\n    <td>RequestThrottledError</td>\n    <td>429</td>\n    <td>Request was throttled.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationError</td>\n    <td>403</td>\n    <td>Expired signature.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationInvalidError</td>\n    <td>400</td>\n    <td>`expire` must be a UNIX timestamp.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationRequiredError</td>\n    <td>400</td>\n    <td>`expire` is required.</td>\n  </tr>\n  <tr>\n    <td>SignatureInvalidError</td>\n    <td>403</td>\n    <td>Invalid signature.</td>\n  </tr>\n  <tr>\n    <td>SignatureRequiredError</td>\n    <td>400</td>\n    <td>`signature` is required.</td>\n  </tr>\n  <tr>\n    <td>UploadAPIError</td>\n    <td>500</td>\n    <td>Internal error.</td>\n  </tr>\n  <tr>\n    <td>UploadFailedError</td>\n    <td>403</td>\n    <td>Upload failed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">FromURL upload errors:</td>\n  </tr>\n  <tr>\n    <td>DownloadFileError</td>\n    <td>500</td>\n    <td>Failed to download the file.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPClientError</td>\n    <td>500</td>\n    <td>HTTP client error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPNetworkError</td>\n    <td>500</td>\n    <td>HTTP network error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPServerError</td>\n    <td>500</td>\n    <td>HTTP server error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPURLValidationError</td>\n    <td>500</td>\n    <td>HTTP URL validation error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileInternalServerError</td>\n    <td>500</td>\n    <td>Internal server error.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileNotFoundError</td>\n    <td>500</td>\n    <td>downloaded file not found.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileSizeLimitExceededError</td>\n    <td>500</td>\n    <td>Downloaded file is too big: %s > %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileTaskFailedError</td>\n    <td>500</td>\n    <td>download task failed.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileTimeLimitExceededError</td>\n    <td>500</td>\n    <td>Failed to download the file within the allotted time limit of %s seconds.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileValidationFailedError</td>\n    <td>500</td>\n    <td>File validation error: %s</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File upload errors:</td>\n  </tr>\n  <tr>\n    <td>FileIdInvalidError</td>\n    <td>400</td>\n    <td>file_id is invalid.</td>\n  </tr>\n  <tr>\n    <td>FileIdNotUniqueError</td>\n    <td>400</td>\n    <td>File id must be unique.</td>\n  </tr>\n  <tr>\n    <td>FileIdRequiredError</td>\n    <td>400</td>\n    <td>file_id is required.</td>\n  </tr>\n  <tr>\n    <td>FileNotFoundError</td>\n    <td>404</td>\n    <td>File is not found.</td>\n  </tr>\n  <tr>\n    <td>FileRequiredError</td>\n    <td>400</td>\n    <td>There should be a file.</td>\n  </tr>\n  <tr>\n    <td>FilesNumberLimitExceededError</td>\n    <td>400</td>\n    <td>There are too many files.</td>\n  </tr>\n  <tr>\n    <td>FilesRequiredError</td>\n    <td>400</td>\n    <td>Request does not contain files.</td>\n  </tr>\n  <tr>\n    <td>InternalRequestForbiddenError</td>\n    <td>403</td>\n    <td>Forbidden request.</td>\n  </tr>\n  <tr>\n    <td>InternalRequestInvalidError</td>\n    <td>400</td>\n    <td>Incorrect request.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileAlreadyUploadedError</td>\n    <td>400</td>\n    <td>File is already uploaded.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileCompletionFailedError</td>\n    <td>400</td>\n    <td>Can not complete upload. Wrong parts size?</td>\n  </tr>\n  <tr>\n    <td>MultipartFileIdRequiredError</td>\n    <td>400</td>\n    <td>uuid is required.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileNotFoundError</td>\n    <td>404</td>\n    <td>File is not found.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileSizeLimitExceededError</td>\n    <td>400</td>\n    <td>File size exceeds project limit.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileSizeTooSmallError</td>\n    <td>400</td>\n    <td>File size can not be less than %d bytes. Please use direct upload instead of multipart.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeInvalidError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size should be an integer.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeTooBigError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size can not be more than %d bytes.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeTooSmallError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size can not be less than %d bytes.</td>\n  </tr>\n  <tr>\n    <td>MultipartSizeInvalidError</td>\n    <td>400</td>\n    <td>size should be integer.</td>\n  </tr>\n  <tr>\n    <td>MultipartUploadSizeTooLargeError</td>\n    <td>400</td>\n    <td>Uploaded size is more than expected.</td>\n  </tr>\n  <tr>\n    <td>MultipartUploadSizeTooSmallError</td>\n    <td>400</td>\n    <td>File size mismatch. Not all parts uploaded?</td>\n  </tr>\n  <tr>\n    <td>RequestParamRequiredError</td>\n    <td>400</td>\n    <td>%s is required.</td>\n  </tr>\n  <tr>\n    <td>SourceURLRequiredError</td>\n    <td>400</td>\n    <td>source_url is required.</td>\n  </tr>\n  <tr>\n    <td>TokenRequiredError</td>\n    <td>400</td>\n    <td>token is required.</td>\n  </tr>\n  <tr>\n    <td>UUIDInvalidError</td>\n    <td>400</td>\n    <td>uuid is invalid.</td>\n  </tr>\n  <tr>\n    <td>UploadViewsError</td>\n    <td>400</td>\n    <td>Upload request processing failed.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdDuplicatedError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID is duplicated. You are probably a lottery winner.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdInvalidError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID should be a valid UUID.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdRequiredError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID is required.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File group errors:</td>\n  </tr>\n  <tr>\n    <td>GroupFileURLParsingFailedError</td>\n    <td>400</td>\n    <td>This is not valid file url: %s.</td>\n  </tr>\n  <tr>\n    <td>GroupFilesInvalidError</td>\n    <td>400</td>\n    <td>No files[N] parameters found.</td>\n  </tr>\n  <tr>\n    <td>GroupFilesNotFoundError</td>\n    <td>400</td>\n    <td>Some files not found.</td>\n  </tr>\n  <tr>\n    <td>GroupIdRequiredError</td>\n    <td>400</td>\n    <td>group_id is required.</td>\n  </tr>\n  <tr>\n    <td>GroupNotFoundError</td>\n    <td>404</td>\n    <td>group_id is invalid.</td>\n  </tr>\n  <tr>\n    <td>GroupViewsError</td>\n    <td>400</td>\n    <td>Request to group processing failed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File content validation errors:</td>\n  </tr>\n  <tr>\n    <td>FileInfectedError</td>\n    <td>400</td>\n    <td>The file is infected by %s virus.</td>\n  </tr>\n  <tr>\n    <td>FileTypeForbiddenError</td>\n    <td>400</td>\n    <td>Uploading of these file types is not allowed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">URL validation errors:</td>\n  </tr>\n  <tr>\n    <td>HostnameNotFoundError</td>\n    <td>400</td>\n    <td>Host does not exist.</td>\n  </tr>\n  <tr>\n    <td>URLBlacklistedError</td>\n    <td>400</td>\n    <td>Source is blacklisted.</td>\n  </tr>\n  <tr>\n    <td>URLHostMalformedError</td>\n    <td>400</td>\n    <td>URL host is malformed.</td>\n  </tr>\n  <tr>\n    <td>URLHostPrivateIPForbiddenError</td>\n    <td>400</td>\n    <td>Only public IPs are allowed.</td>\n  </tr>\n  <tr>\n    <td>URLHostRequiredError</td>\n    <td>400</td>\n    <td>No URL host supplied.</td>\n  </tr>\n  <tr>\n    <td>URLParsingFailedError</td>\n    <td>400</td>\n    <td>Failed to parse URL.</td>\n  </tr>\n  <tr>\n    <td>URLRedirectsLimitExceededError</td>\n    <td>400</td>\n    <td>Too many redirects.</td>\n  </tr>\n  <tr>\n    <td>URLSchemeInvalidError</td>\n    <td>400</td>\n    <td>Invalid URL scheme.</td>\n  </tr>\n  <tr>\n    <td>URLSchemeRequiredError</td>\n    <td>400</td>\n    <td>No URL scheme supplied.</td>\n  </tr>\n  <tr>\n    <td>URLValidationError</td>\n    <td>400</td>\n    <td>Failed to validate URL.</td>\n  </tr>\n\n</table>\n"
        },
        {
            "name": "Other APIs",
            "description": "You can find the complete reference documentation for the REST API [here](/api-refs/rest-api/) and URL API [here](/api-refs/url-api/).\n"
        }
    ],
    "paths": {
        "/base/": {
            "post": {
                "tags": [
                    "Upload"
                ],
                "operationId": "baseUpload",
                "summary": "Direct uploads",
                "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to `multipart/form-data`.\n\n**Note**: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.\n\nFile upload example with curl:\n\n```\ncurl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\"\n```\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/baseUploadRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/baseUploadSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/baseUploadInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/commonUploadAccessForbiddenErrors"
                    },
                    "413": {
                        "$ref": "#/components/responses/requestSizeLimitExceededError"
                    },
                    "429": {
                        "$ref": "#/components/responses/requestWasThrottledError"
                    }
                },
                "x-codeSamples": {
                    "$ref": "./code-samples/baseUpload.json"
                }
            }
        },
        "/multipart/start/": {
            "post": {
                "tags": [
                    "Upload"
                ],
                "operationId": "multipartFileUploadStart",
                "summary": "Start multipart upload",
                "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\n\nTo upload large files, 3 requests are sent in sequence:\n1. `/multipart/start/`\n2. `<presigned-url-x>`\n3. `/multipart/complete/`.\n\n**Note**: Multipart uploads support files larger than 10 megabytes only.\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/multipartUploadStartParameters"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/multipartUploadStartResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/multipartUploadStartInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/commonUploadAccessForbiddenErrors"
                    },
                    "429": {
                        "$ref": "#/components/responses/requestWasThrottledError"
                    }
                },
                "x-codeSamples": {
                    "$ref": "./code-samples/multipartFileUploadStart.json"
                }
            }
        },
        "/<presigned-url-x>": {
            "put": {
                "tags": [
                    "Upload"
                ],
                "operationId": "multipartFileUploadPart",
                "summary": "Upload individual file parts",
                "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n`/multipart/start/` endpoint.\n\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\n\n**Note**: You MUST define `Content-Type` header for your data.\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/multipartUploadPartParameters"
                },
                "responses": {
                    "2XX": {
                        "description": "A file part has been uploaded successfully"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { multipartUpload } from '@uploadcare/upload-client'\n\n// partData is a chunk of the uploaded file's content\n// must be `Blob` or `File` or `Buffer`\nconst result = await multipartUpload(\n  partData,\n  '<presigned-url-x>'\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n"
                    }
                ]
            }
        },
        "/multipart/complete/": {
            "post": {
                "tags": [
                    "Upload"
                ],
                "operationId": "multipartFileUploadComplete",
                "summary": "Complete multipart upload",
                "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/multipartUploadCompleteParameters"
                },
                "responses": {
                    "200": {
                        "description": "The file was uploaded successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/fileUploadInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/multipartUploadCompleteInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/multipartUploadCompleteAccessForbiddenErrors"
                    },
                    "404": {
                        "$ref": "#/components/responses/multipartUploadCompleteFileNotFoundError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { multipartComplete } from '@uploadcare/upload-client'\n\nconst result = await multipartComplete(\n  '67947755-1584-4e3f-902b-d4e2bf76a841',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n"
                    }
                ]
            }
        },
        "/from_url/": {
            "post": {
                "tags": [
                    "Upload"
                ],
                "operationId": "fromURLUpload",
                "summary": "Upload files from URLs",
                "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\n\n#### Upload tokens\nRequests to the endpoint return a JSON dictionary with a `token` that can be further used\nto [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload\nrequest.\n\n**Note:** The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the `/from_url/status/` endpoint.\n\n#### Duplicates prevention\nBy default, every call to the `/from_url/` endpoint with the same `source_url` results in\na new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the `save_URL_duplicates` and `check_URL_duplicates` parameters described below.\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/fromURLUploadRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/fromURLUploadResponseSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/fromURLUploadInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/fromURLUploadAccessForbiddenErrors"
                    },
                    "429": {
                        "$ref": "#/components/responses/requestWasThrottledError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { fromUrl } from '@uploadcare/upload-client'\n\nconst result = await fromUrl(\n  'https://source.unsplash.com/featured',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$url = 'https://source.unsplash.com/featured';\n$token = $uploader->fromUrl($url, null, null, 'auto', [\n    'action' => 'upload from URL', // The \"Action\" is the metadata key\n    'checkDuplicates' => true,\n    'storeDuplicates' => false,\n]);\necho \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "from pyuploadcare import Uploadcare\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nucare_file = uploadcare.upload_from_url_sync(\n    \"https://source.unsplash.com/featured\",\n    check_duplicates=True,\n    save_duplicates=False\n)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nsource_url = \"https://source.unsplash.com/featured\"\nuploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://source.unsplash.com/featured\")!\nlet task = UploadFromURLTask(sourceUrl: url)\n  .store(.auto)\n  .setMetadata(\"uploader\", forKey: \"subsystem\")\n  .setMetadata(\"cat\", forKey: \"pet\")\n\nlet file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)\nprint(file)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uploader = UrlUploader(\n    client = uploadcare,\n    sourceUrl = \"https://source.unsplash.com/featured\"\n)\nval file = uploader.upload()\nLog.d(\"TAG\", file.toString())\n"
                    }
                ]
            }
        },
        "/from_url/status/": {
            "get": {
                "tags": [
                    "Upload"
                ],
                "operationId": "fromURLUploadStatus",
                "summary": "Check the status of a task to fetch/upload a file from a URL",
                "description": "The endpoint notifies about the progress of the task by changing the value of the `status` field:\n  * the field is set to `waiting` initially\n  * once the system starts processing the request, the field is set to `progress`\n  * if the file is fetched and uploaded successfully, the `status` field is set to `success`\n    and the endpoint returns a JSON object holding information about the uploaded file\n  * if the system fails to fetch/upload the file, the `status` field is set to `error` and\n    the `error` field is set to the cause of the error.\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "description": "Token returned by the `/from_url/` endpoint that identifies a request to fetch/upload a file from a URL.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "945ebb27-1fd6-46c6-a859-b9893712d650"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/fromURLUploadStatusSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/fromURLUploadStatusInputValidationErrors"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n"
                    }
                ]
            }
        },
        "/info/": {
            "get": {
                "tags": [
                    "Upload"
                ],
                "operationId": "fileUploadInfo",
                "summary": "Get information about an uploaded file",
                "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "pub_key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/projectPublicKeyType"
                        },
                        "example": "YOUR_PUBLIC_KEY"
                    },
                    {
                        "in": "query",
                        "name": "file_id",
                        "required": true,
                        "description": "File's unique ID.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "67947755-1584-4e3f-902b-d4e2bf76a841"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/fileUploadInfoSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/fileUploadInfoInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/fileUploadInfoAccessForbiddenErrors"
                    },
                    "404": {
                        "$ref": "#/components/responses/fileUploadInfoNotFoundErrors"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { info } from '@uploadcare/upload-client'\n\nconst result = await info(\n  'be3b4d5e-179d-460e-8a5d-69112ac86cbb',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->fileInfo(string $uuid);\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file('740e1b8c-1ad8-4324-b7ec-112c79d8eac2')\nprint(file.info)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '740e1b8c-1ad8-4324-b7ec-112c79d8eac2'\ninfo = Uploadcare::File.info(uuid)\nputs info.inspect\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.uploadAPI.fileInfo(withFileId: \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nprint(file)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getUploadedFile(fileId = \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nLog.d(\"TAG\", file.toString())\n"
                    }
                ]
            }
        },
        "/group/": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "operationId": "createFilesGroup",
                "summary": "Create a file group",
                "description": "Create a file group from a set of already uploaded files.\n\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\n\n**Note:** A group itself and files within it MUST belong to the same project.\n\n**Note:** Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.\n",
                "requestBody": {
                    "$ref": "#/components/requestBodies/createFilesGroupRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/createFilesGroupSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/createFilesGroupInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/createFilesGroupAccessForbiddenErrors"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { group } from '@uploadcare/upload-client'\n\nconst result = await group(\n  [\n    'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n    'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n  ],\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$result = $uploader->groupFiles(['d6d34fa9-addd-472c-868d-2e5c105f9fcd', 'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/']);\necho \\sprintf('Response status is %s', $result->getStatusCode());\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "from pyuploadcare import Uploadcare, File, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_1 = uploadcare.file('d6d34fa9-addd-472c-868d-2e5c105f9fcd')\nfile_2 = uploadcare.file('b1026315-8116-4632-8364-607e64fca723/-/resize/x800/')\nfile_group = uploadcare.create_file_group([file_1, file_2])\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nuuids = [\n  'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n  'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n]\ngroup = Uploadcare::Group.create(uuids)\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet filesIds = [\"d6d34fa9-addd-472c-868d-2e5c105f9fcd\", \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"]\nlet group = try await uploadAPI.createFilesGroup(fileIds: filesIds)\nprint(group)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"d6d34fa9-addd-472c-868d-2e5c105f9fcd\",\n    \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"\n)\nval group = uploadcare.createGroup(fileIds = uuids)\nLog.d(\"TAG\", group.toString())\n"
                    }
                ]
            }
        },
        "/group/info/": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "operationId": "filesGroupInfo",
                "summary": "Get information about a file group",
                "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "pub_key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/projectPublicKeyType"
                        },
                        "example": "YOUR_PUBLIC_KEY"
                    },
                    {
                        "in": "query",
                        "name": "group_id",
                        "description": "Group's unique ID. Group IDs look like `UUID~N`, where the `~N` part reflects the number of the files in the group.\n",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "d52d7136-a2e5-4338-9f45-affbf83b857d~2"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/filesGroupInfoSuccessful"
                    },
                    "400": {
                        "$ref": "#/components/responses/filesGroupInfoInputValidationErrors"
                    },
                    "403": {
                        "$ref": "#/components/responses/filesGroupInfoAccessForbiddenErrors"
                    },
                    "404": {
                        "$ref": "#/components/responses/filesGroupInfoNotFoundErrors"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "JavaScript",
                        "label": "JS",
                        "source": "import { groupInfo } from '@uploadcare/upload-client'\n\nconst result = await groupInfo(\n  '0d712319-b970-4602-850c-bae1ced521a6~1',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$groupInfo = $uploader->groupInfo('0d712319-b970-4602-850c-bae1ced521a6~1');\necho $groupInfo->getBody()->getContents();\n"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "from pyuploadcare import Uploadcare, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_group = uploadcare.file_group('0d712319-b970-4602-850c-bae1ced521a6~1')\nprint(file_group.info)\n"
                    },
                    {
                        "lang": "Ruby",
                        "label": "Ruby",
                        "source": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '0d712319-b970-4602-850c-bae1ced521a6~1'\ninfo = Uploadcare::Group.info(uuid)\nputs info.inspect\n"
                    },
                    {
                        "lang": "Swift",
                        "label": "Swift",
                        "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.uploadAPI.filesGroupInfo(groupId: \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nprint(group)\n"
                    },
                    {
                        "lang": "Kotlin",
                        "label": "Kotlin",
                        "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getUploadedGroup(groupId = \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nLog.d(\"TAG\", group.toString())\n"
                    }
                ]
            }
        }
    },
    "components": {
        "requestBodies": {
            "baseUploadRequestBody": {
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "UPLOADCARE_PUB_KEY": {
                                    "$ref": "#/components/schemas/projectPublicKeyType"
                                },
                                "UPLOADCARE_STORE": {
                                    "$ref": "#/components/schemas/storeType"
                                },
                                "{filename}": {
                                    "description": "File's content",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "metadata[{key}]": {
                                    "$ref": "#/components/schemas/metadataValue"
                                },
                                "signature": {
                                    "$ref": "#/components/schemas/signatureType"
                                },
                                "expire": {
                                    "$ref": "#/components/schemas/expireType"
                                }
                            },
                            "required": [
                                "{filename}",
                                "UPLOADCARE_PUB_KEY"
                            ]
                        },
                        "examples": {
                            "one-file": {
                                "value": {
                                    "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                                    "UPLOADCARE_STORE": "auto",
                                    "my_file.jpg": "@my_file.jpg",
                                    "metadata[subsystem]": "uploader",
                                    "metadata[pet]": "cat"
                                }
                            },
                            "two-files": {
                                "value": {
                                    "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                                    "UPLOADCARE_STORE": "auto",
                                    "my_file.jpg": "@my_file.jpg",
                                    "another_file.jpg": "@another_file.jpg",
                                    "metadata[subsystem]": "uploader"
                                }
                            }
                        }
                    }
                }
            },
            "multipartUploadStartParameters": {
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "description": "Multipart upload parameters to start multipart uploading.",
                            "properties": {
                                "UPLOADCARE_PUB_KEY": {
                                    "$ref": "#/components/schemas/projectPublicKeyType"
                                },
                                "UPLOADCARE_STORE": {
                                    "$ref": "#/components/schemas/storeType"
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "Original file name of the uploaded file",
                                    "example": "myfile.mp4"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "Precise file size of the uploaded file (in bytes).\n**Note**: The size should not exceed max file size cap for your project.\n",
                                    "example": 27796904
                                },
                                "part_size": {
                                    "type": "integer",
                                    "description": "Multipart Uploads expect that you will split the uploaded file into equally sized\nparts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).\nBy default, we assume that you will upload the files in 5 megabyte chunks,\nso we return a list of presigned AWS S3 URLs accordingly.\nIf you intend to upload large files (for example, larger than a gigabyte),\nwe recommend to bump the part size and to pass the expected chunk size\nto us as a value of the `part_size` parameter (in bytes).\n",
                                    "minimum": 5242880,
                                    "maximum": 5368709120,
                                    "default": 5242880,
                                    "example": 10485760
                                },
                                "content_type": {
                                    "type": "string",
                                    "description": "File's MIME-type.",
                                    "example": "video/mp4"
                                },
                                "metadata[{key}]": {
                                    "$ref": "#/components/schemas/metadataValue"
                                },
                                "signature": {
                                    "$ref": "#/components/schemas/signatureType"
                                },
                                "expire": {
                                    "$ref": "#/components/schemas/expireType"
                                }
                            },
                            "required": [
                                "filename",
                                "content_type",
                                "size",
                                "UPLOADCARE_PUB_KEY"
                            ]
                        },
                        "example": {
                            "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                            "UPLOADCARE_STORE": "auto",
                            "filename": "myfile.mp4",
                            "size": 27796904,
                            "content_type": "video/mp4",
                            "metadata[subsystem]": "uploader",
                            "metadata[pet]": "cat"
                        }
                    }
                }
            },
            "multipartUploadPartParameters": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "object",
                            "description": "Part of the uploaded file.\n\nDon't include `https://upload.uploadcare.com/` in this request:\n\n```\ncurl -X PUT \"<presigned-url-x>\" -H \"Content-Type: application/octet-stream\" --data <data-part>\n```\n"
                        }
                    }
                }
            },
            "multipartUploadCompleteParameters": {
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "UPLOADCARE_PUB_KEY": {
                                    "$ref": "#/components/schemas/projectPublicKeyType"
                                },
                                "uuid": {
                                    "type": "string",
                                    "description": "File's UUID from the `/multipart/start/` endpoint.",
                                    "format": "uuid",
                                    "example": "67947755-1584-4e3f-902b-d4e2bf76a841"
                                }
                            },
                            "required": [
                                "UPLOADCARE_PUB_KEY",
                                "uuid"
                            ]
                        },
                        "example": {
                            "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                            "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841"
                        }
                    }
                }
            },
            "fromURLUploadRequestBody": {
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pub_key": {
                                    "$ref": "#/components/schemas/projectPublicKeyType"
                                },
                                "source_url": {
                                    "type": "string",
                                    "format": "uri",
                                    "description": "Source URL of the file to fetch and upload.\n\n**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.\n",
                                    "example": "https://source.unsplash.com/featured"
                                },
                                "store": {
                                    "$ref": "#/components/schemas/storeType"
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "Sets the file name of the resource fetched from the source URL.\nIf not defined, the file name is obtained from either HTTP\nresponse headers or the `source_url`'s path.\n\n**Note:** The filename will be sanitized to only contain the following symbols:\n`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._`.\n",
                                    "example": "googlelogo_color_272x92dp.png"
                                },
                                "check_URL_duplicates": {
                                    "type": "string",
                                    "enum": [
                                        "0",
                                        "1"
                                    ],
                                    "default": "0",
                                    "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n",
                                    "example": "1"
                                },
                                "save_URL_duplicates": {
                                    "type": "string",
                                    "enum": [
                                        "0",
                                        "1"
                                    ],
                                    "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n",
                                    "example": "1"
                                },
                                "metadata[{key}]": {
                                    "$ref": "#/components/schemas/metadataValue"
                                },
                                "signature": {
                                    "$ref": "#/components/schemas/signatureType"
                                },
                                "expire": {
                                    "$ref": "#/components/schemas/expireType"
                                }
                            },
                            "required": [
                                "pub_key",
                                "source_url"
                            ]
                        },
                        "example": {
                            "pub_key": "YOUR_PUBLIC_KEY",
                            "source_url": "https://source.unsplash.com/featured",
                            "metadata[subsystem]": "uploader",
                            "metadata[pet]": "cat"
                        }
                    }
                }
            },
            "createFilesGroupRequestBody": {
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pub_key": {
                                    "$ref": "#/components/schemas/projectPublicKeyType"
                                },
                                "files[]": {
                                    "type": "array",
                                    "description": "Set of files you want to add to the group.\nEach element can be a file UUID with or without the applied image\nprocessing operations.\n",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "signature": {
                                    "$ref": "#/components/schemas/signatureType"
                                },
                                "expire": {
                                    "$ref": "#/components/schemas/expireType"
                                }
                            },
                            "required": [
                                "files[]",
                                "pub_key"
                            ]
                        },
                        "example": {
                            "pub_key": "YOUR_PUBLIC_KEY",
                            "files[]": [
                                "d6d34fa9-addd-472c-868d-2e5c105f9fcd",
                                "b1026315-8116-4632-8364-607e64fca723/-/resize/x800/"
                            ]
                        }
                    }
                }
            }
        },
        "responses": {
            "commonUploadAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/uploadcarePublicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/uploadcarePublicKeyInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/autoStoreDisabledError"
                                },
                                {
                                    "$ref": "#/components/schemas/projectPublicKeyRemovedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountBlockedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountUnpaidError"
                                },
                                {
                                    "$ref": "#/components/schemas/uploadFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountLimitsExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/uploadcarePublicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/uploadcarePublicKeyInvalidError"
                            },
                            "auto-store-is-disabled": {
                                "$ref": "#/components/examples/autoStoreDisabledError"
                            },
                            "project-public-key-removed": {
                                "$ref": "#/components/examples/projectPublicKeyRemovedError"
                            },
                            "account-blocked": {
                                "$ref": "#/components/examples/accountBlockedError"
                            },
                            "account-unpaid": {
                                "$ref": "#/components/examples/accountUnpaidError"
                            },
                            "upload-failed": {
                                "$ref": "#/components/examples/uploadFailedError"
                            },
                            "account-limits-exceeded": {
                                "$ref": "#/components/examples/accountLimitsExceededError"
                            },
                            "signature-expiration": {
                                "$ref": "#/components/examples/signatureExpirationError"
                            },
                            "signature-invalid": {
                                "$ref": "#/components/examples/signatureInvalidError"
                            }
                        }
                    }
                }
            },
            "baseUploadSuccessful": {
                "description": "The file was uploaded successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "description": "JSON object where the key is the file name of the uploaded file and\nthe value is the unique ID of the file on our systems.\n",
                            "properties": {
                                "filename": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            },
                            "example": {
                                "my_file.jpg": "17be4678-dab7-4bc7-8753-28914a22960a"
                            }
                        }
                    }
                }
            },
            "baseUploadInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/requestFiledsNumberLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/postRequestParserFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyDuplicatedError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeysNumberTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/filesRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileSizeLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileTypeForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileInfectedError"
                                }
                            ]
                        },
                        "examples": {
                            "request-fields-number-limit-exceeded": {
                                "$ref": "#/components/examples/requestFiledsNumberLimitExceededError"
                            },
                            "post-request-parser-failed": {
                                "$ref": "#/components/examples/postRequestParserFailedError"
                            },
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "file-metadata-key-duplicate": {
                                "$ref": "#/components/examples/fileMetadataKeyDuplicatedError"
                            },
                            "file-metadata-key-empty": {
                                "$ref": "#/components/examples/fileMetadataKeyEmptyError"
                            },
                            "file-metadata-key-forbidden": {
                                "$ref": "#/components/examples/fileMetadataKeyForbiddenError"
                            },
                            "file-metadata-key-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeyLengthTooBigError"
                            },
                            "file-metadata-value-empty": {
                                "$ref": "#/components/examples/fileMetadataValueEmptyError"
                            },
                            "file-metadata-value-forbidden": {
                                "$ref": "#/components/examples/fileMetadataValueForbiddenError"
                            },
                            "file-metadata-value-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataValueLengthTooBigError"
                            },
                            "file-metadata-keys-number-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeysNumberTooBigError"
                            },
                            "signature-required": {
                                "$ref": "#/components/examples/signatureRequiredError"
                            },
                            "signature-expiration-required": {
                                "$ref": "#/components/examples/signatureExpirationRequiredError"
                            },
                            "signature-expiration-invalid": {
                                "$ref": "#/components/examples/signatureExpirationInvalidError"
                            },
                            "files-required": {
                                "$ref": "#/components/examples/filesRequiredError"
                            },
                            "file-size-limit-exceeded": {
                                "$ref": "#/components/examples/fileSizeLimitExceededError"
                            },
                            "file-type-forbidden": {
                                "$ref": "#/components/examples/fileTypeForbiddenError"
                            },
                            "file-infected": {
                                "$ref": "#/components/examples/fileInfectedError"
                            }
                        }
                    }
                }
            },
            "multipartUploadStartResponse": {
                "description": "Multipart upload started successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "type": "string",
                                    "description": "File's UUID.",
                                    "format": "uuid"
                                },
                                "parts": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "Upload file parts here.",
                                        "format": "uri"
                                    }
                                }
                            },
                            "required": [
                                "uuid",
                                "parts"
                            ],
                            "example": {
                                "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                                "parts": [
                                    "<presigned-url-1>",
                                    "<presigned-url-2>",
                                    "<presigned-url-3>",
                                    "<presigned-url-4>",
                                    "<presigned-url-5>"
                                ]
                            }
                        }
                    }
                }
            },
            "multipartUploadStartInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/requestFiledsNumberLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/postRequestParserFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyDuplicatedError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeysNumberTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/requestParamRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartSizeInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartFileSizeLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartFileSizeTooSmallError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartPartSizeInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartPartSizeTooSmallError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartPartSizeTooBigError"
                                }
                            ]
                        },
                        "examples": {
                            "request-fields-number-limit-exceeded": {
                                "$ref": "#/components/examples/requestFiledsNumberLimitExceededError"
                            },
                            "post-request-parser-failed": {
                                "$ref": "#/components/examples/postRequestParserFailedError"
                            },
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "file-metadata-key-duplicate": {
                                "$ref": "#/components/examples/fileMetadataKeyDuplicatedError"
                            },
                            "file-metadata-key-empty": {
                                "$ref": "#/components/examples/fileMetadataKeyEmptyError"
                            },
                            "file-metadata-key-forbidden": {
                                "$ref": "#/components/examples/fileMetadataKeyForbiddenError"
                            },
                            "file-metadata-key-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeyLengthTooBigError"
                            },
                            "file-metadata-value-empty": {
                                "$ref": "#/components/examples/fileMetadataValueEmptyError"
                            },
                            "file-metadata-value-forbidden": {
                                "$ref": "#/components/examples/fileMetadataValueForbiddenError"
                            },
                            "file-metadata-value-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataValueLengthTooBigError"
                            },
                            "file-metadata-keys-number-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeysNumberTooBigError"
                            },
                            "signature-required": {
                                "$ref": "#/components/examples/signatureRequiredError"
                            },
                            "signature-expiration-required": {
                                "$ref": "#/components/examples/signatureExpirationRequiredError"
                            },
                            "signature-expiration-invalid": {
                                "$ref": "#/components/examples/signatureExpirationInvalidError"
                            },
                            "request-param-required": {
                                "$ref": "#/components/examples/requestParamRequiredError"
                            },
                            "multipart-size-invalid": {
                                "$ref": "#/components/examples/multipartSizeInvalidError"
                            },
                            "multipart-file-size-limit-exceeded": {
                                "$ref": "#/components/examples/multipartFileSizeLimitExceededError"
                            },
                            "multipart-file-size-too-small": {
                                "$ref": "#/components/examples/multipartFileSizeTooSmallError"
                            },
                            "multipart-part-size-invalid": {
                                "$ref": "#/components/examples/multipartPartSizeInvalidError"
                            },
                            "multipart-part-size-too-small": {
                                "$ref": "#/components/examples/multipartPartSizeTooSmallError"
                            },
                            "multipart-part-size-too-big": {
                                "$ref": "#/components/examples/multipartPartSizeTooBigError"
                            }
                        }
                    }
                }
            },
            "multipartUploadCompleteInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/requestFiledsNumberLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/postRequestParserFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartFileIdRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/uuidInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartFileAlreadyUploadedError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartUploadSizeTooLargeError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartUploadSizeTooSmallError"
                                },
                                {
                                    "$ref": "#/components/schemas/multipartFileCompletionFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileTypeForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileInfectedError"
                                }
                            ]
                        },
                        "examples": {
                            "request-fields-number-limit-exceeded": {
                                "$ref": "#/components/examples/requestFiledsNumberLimitExceededError"
                            },
                            "post-request-parser-failed": {
                                "$ref": "#/components/examples/postRequestParserFailedError"
                            },
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "multipart-file-id-required": {
                                "$ref": "#/components/examples/multipartFileIdRequiredError"
                            },
                            "uuid-invalid": {
                                "$ref": "#/components/examples/uuidInvalidError"
                            },
                            "multipart-file-already-uploaded": {
                                "$ref": "#/components/examples/multipartFileAlreadyUploadedError"
                            },
                            "multipart-upload-size-too-large": {
                                "$ref": "#/components/examples/multipartUploadSizeTooLargeError"
                            },
                            "multipart-upload-size-too-small": {
                                "$ref": "#/components/examples/multipartUploadSizeTooSmallError"
                            },
                            "multipart-file-completion-failed": {
                                "$ref": "#/components/examples/multipartFileCompletionFailedError"
                            },
                            "file-type-forbidden": {
                                "$ref": "#/components/examples/fileTypeForbiddenError"
                            },
                            "file-infected": {
                                "$ref": "#/components/examples/fileInfectedError"
                            }
                        }
                    }
                }
            },
            "multipartUploadCompleteAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/uploadcarePublicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/uploadcarePublicKeyInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/uploadcarePublicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/uploadcarePublicKeyInvalidError"
                            }
                        }
                    }
                }
            },
            "multipartUploadCompleteFileNotFoundError": {
                "description": "File with specified UUID was not found.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "$ref": "#/components/schemas/fileNotFoundError"
                        },
                        "examples": {
                            "file-not-found": {
                                "$ref": "#/components/examples/fileNotFoundError"
                            }
                        }
                    }
                }
            },
            "fromURLUploadResponseSuccessful": {
                "description": "Status Token or File Info of an already downloaded file.",
                "content": {
                    "application/json": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/fromURLUploadResponseSchema"
                                },
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoFromURL"
                                }
                            ]
                        },
                        "examples": {
                            "type-token": {
                                "value": {
                                    "type": "token",
                                    "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
                                }
                            },
                            "type-file-info": {
                                "$ref": "#/components/examples/fileUploadInfoWithType"
                            }
                        }
                    }
                }
            },
            "fromURLUploadInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/requestFiledsNumberLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/postRequestParserFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyDuplicatedError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeyLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueEmptyError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataValueLengthTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileMetadataKeysNumberTooBigError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/sourceURLRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlParsingFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlSchemeRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlSchemeInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlHostRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlBlacklistedError"
                                },
                                {
                                    "$ref": "#/components/schemas/hostnameNotFoundError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlHostMalformedError"
                                },
                                {
                                    "$ref": "#/components/schemas/urlHostPrivateIPForbiddenError"
                                }
                            ]
                        },
                        "examples": {
                            "request-fields-number-limit-exceeded": {
                                "$ref": "#/components/examples/requestFiledsNumberLimitExceededError"
                            },
                            "post-request-parser-failed": {
                                "$ref": "#/components/examples/postRequestParserFailedError"
                            },
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "file-metadata-key-duplicate": {
                                "$ref": "#/components/examples/fileMetadataKeyDuplicatedError"
                            },
                            "file-metadata-key-empty": {
                                "$ref": "#/components/examples/fileMetadataKeyEmptyError"
                            },
                            "file-metadata-key-forbidden": {
                                "$ref": "#/components/examples/fileMetadataKeyForbiddenError"
                            },
                            "file-metadata-key-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeyLengthTooBigError"
                            },
                            "file-metadata-value-empty": {
                                "$ref": "#/components/examples/fileMetadataValueEmptyError"
                            },
                            "file-metadata-value-forbidden": {
                                "$ref": "#/components/examples/fileMetadataValueForbiddenError"
                            },
                            "file-metadata-value-length-too-big": {
                                "$ref": "#/components/examples/fileMetadataValueLengthTooBigError"
                            },
                            "file-metadata-keys-number-too-big": {
                                "$ref": "#/components/examples/fileMetadataKeysNumberTooBigError"
                            },
                            "signature-required": {
                                "$ref": "#/components/examples/signatureRequiredError"
                            },
                            "signature-expiration-required": {
                                "$ref": "#/components/examples/signatureExpirationRequiredError"
                            },
                            "signature-expiration-invalid": {
                                "$ref": "#/components/examples/signatureExpirationInvalidError"
                            },
                            "source-url-required": {
                                "$ref": "#/components/examples/sourceURLRequiredError"
                            },
                            "url-parsing-failed": {
                                "$ref": "#/components/examples/urlParsingFailedError"
                            },
                            "url-scheme-required": {
                                "$ref": "#/components/examples/urlSchemeRequiredError"
                            },
                            "url-scheme-invalid": {
                                "$ref": "#/components/examples/urlSchemeInvalidError"
                            },
                            "url-host-required": {
                                "$ref": "#/components/examples/urlHostRequiredError"
                            },
                            "url-blacklisted": {
                                "$ref": "#/components/examples/urlBlacklistedError"
                            },
                            "hostname-not-found": {
                                "$ref": "#/components/examples/hostnameNotFoundError"
                            },
                            "url-host-malformed": {
                                "$ref": "#/components/examples/urlHostMalformedError"
                            },
                            "url-host-private-ip-forbidden": {
                                "$ref": "#/components/examples/urlHostPrivateIPForbiddenError"
                            }
                        }
                    }
                }
            },
            "fromURLUploadAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/publicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/publicKeyInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/autoStoreDisabledError"
                                },
                                {
                                    "$ref": "#/components/schemas/projectPublicKeyRemovedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountBlockedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountUnpaidError"
                                },
                                {
                                    "$ref": "#/components/schemas/uploadFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountLimitsExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/publicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/publicKeyInvalidError"
                            },
                            "auto-store-is-disabled": {
                                "$ref": "#/components/examples/autoStoreDisabledError"
                            },
                            "project-public-key-removed": {
                                "$ref": "#/components/examples/projectPublicKeyRemovedError"
                            },
                            "account-blocked": {
                                "$ref": "#/components/examples/accountBlockedError"
                            },
                            "account-unpaid": {
                                "$ref": "#/components/examples/accountUnpaidError"
                            },
                            "upload-failed": {
                                "$ref": "#/components/examples/uploadFailedError"
                            },
                            "account-limits-exceeded": {
                                "$ref": "#/components/examples/accountLimitsExceededError"
                            },
                            "signature-expiration": {
                                "$ref": "#/components/examples/signatureExpirationError"
                            },
                            "signature-invalid": {
                                "$ref": "#/components/examples/signatureInvalidError"
                            }
                        }
                    }
                }
            },
            "fromURLUploadStatusSuccessful": {
                "description": "Request was processed successfully.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoWaitingStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoProgressStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoSuccessStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoErrorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/fileUploadInfoUnknownStatus"
                                }
                            ]
                        },
                        "examples": {
                            "status-waiting": {
                                "value": {
                                    "status": "waiting"
                                }
                            },
                            "status-progress": {
                                "value": {
                                    "status": "progress",
                                    "total": 732434,
                                    "done": 134427
                                }
                            },
                            "status-success": {
                                "$ref": "#/components/examples/fileUploadInfoWithStatus"
                            },
                            "status-error": {
                                "value": {
                                    "status": "error",
                                    "error": "HTTP client error: 404.",
                                    "error_code": "DownloadFileHTTPClientError"
                                }
                            },
                            "status-unknown": {
                                "value": {
                                    "status": "unknown"
                                }
                            }
                        }
                    }
                }
            },
            "fromURLUploadStatusInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "$ref": "#/components/schemas/tokenRequiredError"
                        },
                        "examples": {
                            "token-required": {
                                "$ref": "#/components/examples/tokenRequiredError"
                            }
                        }
                    }
                }
            },
            "fileUploadInfoSuccessful": {
                "description": "File information was retrieved successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/fileUploadInfo"
                        }
                    }
                }
            },
            "fileUploadInfoInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileIdRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/fileIdInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "file-id-required": {
                                "$ref": "#/components/examples/fileIdRequiredError"
                            },
                            "file-id-invalid": {
                                "$ref": "#/components/examples/fileIdInvalidError"
                            }
                        }
                    }
                }
            },
            "fileUploadInfoAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/publicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/publicKeyInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/publicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/publicKeyInvalidError"
                            }
                        }
                    }
                }
            },
            "fileUploadInfoNotFoundErrors": {
                "description": "File with specified UUID was not found.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "$ref": "#/components/schemas/fileNotFoundError"
                        },
                        "examples": {
                            "file-not-found": {
                                "$ref": "#/components/examples/fileNotFoundError"
                            }
                        }
                    }
                }
            },
            "createFilesGroupSuccessful": {
                "description": "The group was created successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/groupInfo"
                        }
                    }
                }
            },
            "createFilesGroupInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/requestFiledsNumberLimitExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/postRequestParserFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/groupFilesInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/groupFileURLParsingFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/groupFilesNotFoundError"
                                }
                            ]
                        },
                        "examples": {
                            "request-fields-number-limit-exceeded": {
                                "$ref": "#/components/examples/requestFiledsNumberLimitExceededError"
                            },
                            "post-request-parser-failed": {
                                "$ref": "#/components/examples/postRequestParserFailedError"
                            },
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "signature-required": {
                                "$ref": "#/components/examples/signatureRequiredError"
                            },
                            "signature-expiration-required": {
                                "$ref": "#/components/examples/signatureExpirationRequiredError"
                            },
                            "signature-expiration-invalid": {
                                "$ref": "#/components/examples/signatureExpirationInvalidError"
                            },
                            "group-files-invalid": {
                                "$ref": "#/components/examples/groupFilesInvalidError"
                            },
                            "group-file-url-parsing-failed": {
                                "$ref": "#/components/examples/groupFileURLParsingFailedError"
                            },
                            "group-files-not-found": {
                                "$ref": "#/components/examples/groupFilesNotFoundError"
                            }
                        }
                    }
                }
            },
            "createFilesGroupAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/publicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/publicKeyInvalidError"
                                },
                                {
                                    "$ref": "#/components/schemas/projectPublicKeyRemovedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountBlockedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountUnpaidError"
                                },
                                {
                                    "$ref": "#/components/schemas/uploadFailedError"
                                },
                                {
                                    "$ref": "#/components/schemas/accountLimitsExceededError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureExpirationError"
                                },
                                {
                                    "$ref": "#/components/schemas/signatureInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/publicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/publicKeyInvalidError"
                            },
                            "project-public-key-removed": {
                                "$ref": "#/components/examples/projectPublicKeyRemovedError"
                            },
                            "account-blocked": {
                                "$ref": "#/components/examples/accountBlockedError"
                            },
                            "account-unpaid": {
                                "$ref": "#/components/examples/accountUnpaidError"
                            },
                            "upload-failed": {
                                "$ref": "#/components/examples/uploadFailedError"
                            },
                            "account-limits-exceeded": {
                                "$ref": "#/components/examples/accountLimitsExceededError"
                            },
                            "signature-expiration": {
                                "$ref": "#/components/examples/signatureExpirationError"
                            },
                            "signature-invalid": {
                                "$ref": "#/components/examples/signatureInvalidError"
                            }
                        }
                    }
                }
            },
            "filesGroupInfoSuccessful": {
                "description": "File group information was retrieved successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/groupInfo"
                        }
                    }
                }
            },
            "filesGroupInfoInputValidationErrors": {
                "description": "Request failed input parameters validation.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/nullCharactersForbiddenError"
                                },
                                {
                                    "$ref": "#/components/schemas/groupIdRequiredError"
                                }
                            ]
                        },
                        "examples": {
                            "null-characters-forbidden": {
                                "$ref": "#/components/examples/nullCharactersForbiddenError"
                            },
                            "group-id-required": {
                                "$ref": "#/components/examples/groupIdRequiredError"
                            }
                        }
                    }
                }
            },
            "filesGroupInfoAccessForbiddenErrors": {
                "description": "Request was not allowed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/publicKeyRequiredError"
                                },
                                {
                                    "$ref": "#/components/schemas/publicKeyInvalidError"
                                }
                            ]
                        },
                        "examples": {
                            "public-key-is-required": {
                                "$ref": "#/components/examples/publicKeyRequiredError"
                            },
                            "public-key-is-invalid": {
                                "$ref": "#/components/examples/publicKeyInvalidError"
                            }
                        }
                    }
                }
            },
            "filesGroupInfoNotFoundErrors": {
                "description": "Group with specified UUID was not found.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "$ref": "#/components/schemas/groupNotFoundError"
                        },
                        "examples": {
                            "group-not-found": {
                                "$ref": "#/components/examples/groupNotFoundError"
                            }
                        }
                    }
                }
            },
            "autoStoreDisabledError": {
                "description": "Autostore is disabled.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Autostore is disabled."
                        },
                        "example": "Autostore is disabled."
                    }
                }
            },
            "uploadcarePublicKeyRequiredError": {
                "description": "UPLOADCARE_PUB_KEY is required.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "UPLOADCARE_PUB_KEY is required."
                        },
                        "example": "UPLOADCARE_PUB_KEY is required."
                    }
                }
            },
            "publicKeyRequiredError": {
                "description": "pub_key is required.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "pub_key is required."
                        },
                        "example": "pub_key is required."
                    }
                }
            },
            "uploadcarePublicKeyInvalidError": {
                "description": "UPLOADCARE_PUB_KEY is invalid.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "UPLOADCARE_PUB_KEY is invalid."
                        },
                        "example": "UPLOADCARE_PUB_KEY is invalid."
                    }
                }
            },
            "publicKeyInvalidError": {
                "description": "pub_key is invalid.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "pub_key is invalid."
                        },
                        "example": "pub_key is invalid."
                    }
                }
            },
            "projectPublicKeyRemovedError": {
                "description": "Project <PUB-KEY> is marked as removed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Project <PUB-KEY> is marked as removed."
                        },
                        "example": "Project 39e3eb895fdada95e7a9 is marked as removed."
                    }
                }
            },
            "accountBlockedError": {
                "description": "Account has been blocked.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Account has been blocked."
                        },
                        "example": "Account has been blocked."
                    }
                }
            },
            "accountUnpaidError": {
                "description": "Account has been blocked for non payment.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Account has been blocked for non payment."
                        },
                        "example": "Account has been blocked for non payment."
                    }
                }
            },
            "uploadFailedError": {
                "description": "Upload failed.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Upload failed."
                        },
                        "example": "Upload failed."
                    }
                }
            },
            "accountLimitsExceededError": {
                "description": "Account has reached its limits.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Account has reached its limits."
                        },
                        "example": "Account has reached its limits."
                    }
                }
            },
            "signatureExpirationError": {
                "description": "Expired signature.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Expired signature."
                        },
                        "example": "Expired signature."
                    }
                }
            },
            "signatureInvalidError": {
                "description": "Invalid signature.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Invalid signature."
                        },
                        "example": "Invalid signature."
                    }
                }
            },
            "requestSizeLimitExceededError": {
                "description": "The size of the request is too large.",
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "The size of the request is too large."
                        },
                        "example": "The size of the request is too large."
                    }
                }
            },
            "requestWasThrottledError": {
                "description": "Request was throttled.",
                "headers": {
                    "Retry-After": {
                        "description": "Number of seconds to wait before the next request.",
                        "schema": {
                            "type": "number"
                        }
                    }
                },
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string",
                            "default": "Request was throttled."
                        },
                        "example": "Request was throttled."
                    }
                }
            }
        },
        "schemas": {
            "signatureType": {
                "type": "string",
                "description": "`signature` must be sent along with your upload request if you would like to use signed uploads.\nThe signature should be generated on your backend.\n**Note**: the process requires knowledge of your Uploadcare Project's Secret key.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
                "example": "04b29480233f4def5c875875b6bdc3b1"
            },
            "expireType": {
                "type": "number",
                "description": "`expire` must be sent along with your upload request if you would like to use signed uploads.\nThe parameter defines the time during which your signature is valid. It's a UNIX timestamp.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
                "example": 1454902434
            },
            "storeType": {
                "type": "string",
                "description": "Determines if an uploaded file should be marked as temporary or permanent.\n\nThe parameter can have the following values:\n- `0` - do not mark an uploaded file as stored and remove it after 24 hours\n- `1` - mark the uploaded file as stored\n- `auto` - delegate the choice of the file-storing behavior to a project-wide setting called\n  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).\n\nThe default value depends on the user registration date.\n\nFor all users registered after February 12, 2024 (UTC 13:30), the default value is `auto`. \nFile-storing behavior depends entirely on what is set in the \n[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.\n\nFor users registered before February 12, 2024, the default value is `0`. \nTo ensure that file storage in the project matches the settings in the Dashboard,\nchange the value to `auto`.\n",
                "enum": [
                    "0",
                    "1",
                    "auto"
                ],
                "default": "auto",
                "example": "1"
            },
            "projectPublicKeyType": {
                "type": "string",
                "description": "Public key identifying an Uploadcare project your uploads will go to.",
                "example": "caa9d29da887ee88ffe6"
            },
            "fileUploadInfo": {
                "type": "object",
                "description": "Information about an uploaded file.",
                "required": [
                    "uuid",
                    "file_id",
                    "size",
                    "total",
                    "done",
                    "original_filename",
                    "filename",
                    "mime_type",
                    "image_info",
                    "video_info",
                    "content_info",
                    "metadata",
                    "is_image",
                    "is_stored",
                    "is_ready"
                ],
                "properties": {
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "File's unique ID.",
                        "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46"
                    },
                    "file_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Same as `uuid`",
                        "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46"
                    },
                    "size": {
                        "type": "integer",
                        "description": "File's size in bytes.",
                        "example": 145212
                    },
                    "total": {
                        "type": "integer",
                        "description": "Same as `size`.",
                        "example": 145212
                    },
                    "done": {
                        "type": "integer",
                        "description": "Same as `size`.",
                        "example": 145212
                    },
                    "original_filename": {
                        "type": "string",
                        "description": "Original file of the uploaded file.",
                        "example": "test-image_1.jpg"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Sanitized `original_filename`.",
                        "example": "testimage_1.jpg"
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "File's MIME-type.",
                        "example": "image/jpeg"
                    },
                    "image_info": {
                        "$ref": "#/components/schemas/imageInfo"
                    },
                    "video_info": {
                        "$ref": "#/components/schemas/legacyVideoInfo"
                    },
                    "content_info": {
                        "$ref": "#/components/schemas/contentInfo"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/metadata"
                    },
                    "is_image": {
                        "type": "boolean",
                        "description": "True if the uploaded file is an image of a supported file format.",
                        "example": true
                    },
                    "is_stored": {
                        "type": "boolean",
                        "description": "True if the file has been marked as stored.",
                        "example": true
                    },
                    "is_ready": {
                        "type": "boolean",
                        "description": "True if the file is ready to be fetched from Uploadcare's CDN.",
                        "example": true
                    },
                    "s3_bucket": {
                        "type": "string",
                        "nullable": true,
                        "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
                        "example": "custom-s3-bucket-name"
                    }
                },
                "example": {
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                        },
                        
                        "dpi": [
                            72,
                            72
                        ]
                    },
                    "video_info": null,
                    "content_info": {
                        "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                        },
                        "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                            },
                            
                            "dpi": [
                                72,
                                72
                            ]
                        }
                    },
                    "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                }
            },
            "fileUploadInfoWaitingStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "waiting"
                        ],
                        "default": "waiting",
                        "description": "The system is preparing to handle the request.\n"
                    }
                }
            },
            "fileUploadInfoProgressStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "progress"
                        ],
                        "default": "progress",
                        "description": "The system is fetching/uploading the file.\n"
                    },
                    "total": {
                        "type": "number",
                        "nullable": true,
                        "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).\n",
                        "example": 732434
                    },
                    "done": {
                        "type": "number",
                        "description": "How many bytes of the file have been fetched so far.\n",
                        "example": 134427
                    }
                }
            },
            "fileUploadInfoSuccessStatus": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success"
                                ],
                                "default": "success",
                                "description": "The file has been fetched/uploaded successfully."
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/fileUploadInfo"
                    }
                ],
                "example": {
                    "status": "success",
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                        },
                        
                        "dpi": [
                            72,
                            72
                        ]
                    },
                    "video_info": null,
                    "content_info": {
                        "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                        },
                        "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                            },
                            
                            "dpi": [
                                72,
                                72
                            ]
                        }
                    },
                    "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                }
            },
            "fileUploadInfoErrorStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "error"
                        ],
                        "default": "error",
                        "description": "The system failed to fetch and/or upload the file.\n"
                    },
                    "error": {
                        "type": "string",
                        "description": "Human readable description of the issue with the fetch/upload task.\n",
                        "example": "HTTP client error: 404."
                    },
                    "error_code": {
                        "type": "string",
                        "description": "Machine readable error code.\n\nNote: See the [Errors > FromURL upload errors](#tag/Errors) section of this\npage for a full list of all possible error codes.\n",
                        "example": "DownloadFileHTTPClientError"
                    }
                }
            },
            "fileUploadInfoUnknownStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "unknown"
                        ],
                        "default": "unknown",
                        "description": "The system does not have information about the task.\n\nNote: Uploadcare stores information about the `/from_url/` tasks for a limited\nperiod of time only. The endpoint can return the status `unknown` for the tasks\nthat are tool old (or that have not been created at all).\n"
                    }
                }
            },
            "fileUploadInfoFromURL": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "file_info"
                                ],
                                "example": "file_info"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/fileUploadInfo"
                    }
                ]
            },
            "fromURLUploadResponseSchema": {
                "type": "object",
                "description": "`/from_url/` upload response.",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "token"
                        ],
                        "example": "token"
                    },
                    "token": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Token to identify a `/from_url/` request.",
                        "example": "945ebb27-1fd6-46c6-a859-b9893712d650"
                    }
                }
            },
            "groupInfo": {
                "type": "object",
                "description": "File group information object.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Group's unique ID.",
                        "example": "d52d7136-a2e5-4338-9f45-affbf83b857d~2"
                    },
                    "datetime_created": {
                        "type": "string",
                        "description": "ISO-8601 date and time when the group was created.",
                        "format": "date-time"
                    },
                    "datetime_stored": {
                        "nullable": true,
                        "description": "ISO-8601 date and time when the group was marked as stored.",
                        "type": "string",
                        "format": "date-time",
                        "deprecated": true
                    },
                    "files_count": {
                        "type": "number",
                        "description": "Number of the files in the group.",
                        "example": 2
                    },
                    "cdn_url": {
                        "type": "string",
                        "format": "uri",
                        "description": "Group's CDN URL.",
                        "example": "http://www.ucarecdn.com/d52d7136-a2e5-4338-9f45-affbf83b857d~2/"
                    },
                    "url": {
                        "type": "string",
                        "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details.",
                        "format": "uri",
                        "example": "https://api.uploadcare.com/groups/d52d7136-a2e5-4338-9f45-affbf83b857d~2/"
                    },
                    "files": {
                        "type": "array",
                        "description": "The list of files in the group. An array may contain null values if a file has been removed.\n",
                        "nullable": true,
                        "allOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "default_effects": {
                                        "type": "string",
                                        "format": "uri",
                                        "description": "The field contains a set of processing operations applied to the file when the group was created. This set is applied by default when the file is reffered via a group CDN URL and `/nth/N/` operator.",
                                        "example": "resize/x800/"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/fileUploadInfo"
                            }
                        ]
                    }
                },
                "example": {
                    "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                    "datetime_created": "2018-09-12T10:03:38.686710Z",
                    "datetime_stored": null,
                    "files_count": 1,
                    "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "files": [
                        {
                            "default_effects": "resize/x800/",
                            "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "size": 2667636,
                            "total": 2667636,
                            "done": 2667636,
                            "original_filename": "IMG-0412_123.JPG",
                            "filename": "IMG0412_123.JPG",
                            "mime_type": "image/jpeg",
                            "image_info": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "height": 4032,
                                "width": 3024,
                                "sequence": false,
                                "geo_location": {
                                    "latitude": 55.62013611111111,
                                    "longitude": 37.66299166666666
                                },
                                
                                "dpi": [
                                    72,
                                    72
                                ]
                            },
                            "video_info": null,
                            "content_info": {
                                "mime": {
                                    "mime": "image/jpeg",
                                    "type": "image",
                                    "subtype": "jpeg"
                                },
                                "image": {
                                    "color_mode": "RGB",
                                    "orientation": 6,
                                    "format": "JPEG",
                                    "height": 4032,
                                    "width": 3024,
                                    "sequence": false,
                                    "geo_location": {
                                        "latitude": 55.62013611111111,
                                        "longitude": 37.66299166666666
                                    },
                                    
                                    "dpi": [
                                        72,
                                        72
                                    ]
                                }
                            },
                            "metadata": {
                                "subsystem": "uploader",
                                "pet": "cat"
                            },
                            "is_image": true,
                            "is_stored": true,
                            "is_ready": true
                        }
                    ]
                }
            },
            "metadataValue": {
                "type": "string",
                "description": "Arbitrary metadata associated with the file.\nSee [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.\n",
                "minLength": 1,
                "maxLength": 512,
                "example": "#/components/examples/metadataValue/value"
            },
            "autoStoreDisabledError": {
                "type": "string",
                "default": "Autostore is disabled.",
                "example": "#/components/examples/autoStoreDisabledError/value"
            },
            "uploadcarePublicKeyRequiredError": {
                "type": "string",
                "default": "UPLOADCARE_PUB_KEY is required.",
                "example": "#/components/examples/uploadcarePublicKeyRequiredError/value"
            },
            "publicKeyRequiredError": {
                "type": "string",
                "default": "pub_key is required.",
                "example": "#/components/examples/publicKeyRequiredError/value"
            },
            "uploadcarePublicKeyInvalidError": {
                "type": "string",
                "default": "UPLOADCARE_PUB_KEY is invalid.",
                "example": "#/components/examples/uploadcarePublicKeyInvalidError/value"
            },
            "publicKeyInvalidError": {
                "type": "string",
                "default": "pub_key is invalid.",
                "example": "#/components/examples/publicKeyInvalidError/value"
            },
            "projectPublicKeyRemovedError": {
                "type": "string",
                "default": "Project <PUB-KEY> is marked as removed.",
                "example": "#/components/examples/projectPublicKeyRemovedError/value"
            },
            "accountBlockedError": {
                "type": "string",
                "default": "Account has been blocked.",
                "example": "#/components/examples/accountBlockedError/value"
            },
            "accountUnpaidError": {
                "type": "string",
                "default": "Account has been blocked for non payment.",
                "example": "#/components/examples/accountUnpaidError/value"
            },
            "uploadFailedError": {
                "type": "string",
                "default": "Upload failed.",
                "example": "#/components/examples/uploadFailedError/value"
            },
            "accountLimitsExceededError": {
                "type": "string",
                "default": "Account has reached its limits.",
                "example": "#/components/examples/accountLimitsExceededError/value"
            },
            "signatureExpirationError": {
                "type": "string",
                "default": "Expired signature.",
                "example": "#/components/examples/signatureExpirationError/value"
            },
            "signatureInvalidError": {
                "type": "string",
                "default": "Invalid signature.",
                "example": "#/components/examples/signatureInvalidError/value"
            },
            "requestFiledsNumberLimitExceededError": {
                "type": "string",
                "default": "The request contains too many HTTP POST fields.",
                "example": "#/components/examples/requestFiledsNumberLimitExceededError/value"
            },
            "postRequestParserFailedError": {
                "type": "string",
                "default": "HTTP POST request parsing failed.",
                "example": "#/components/examples/postRequestParserFailedError/value"
            },
            "nullCharactersForbiddenError": {
                "type": "string",
                "default": "Null characters are not allowed.",
                "example": "#/components/examples/nullCharactersForbiddenError/value"
            },
            "fileMetadataKeyDuplicatedError": {
                "type": "string",
                "default": "File's metadata key `<KEY>` has a duplicate.",
                "example": "#/components/examples/fileMetadataKeyDuplicatedError/value"
            },
            "fileMetadataKeyEmptyError": {
                "type": "string",
                "default": "File's metadata key can not be empty.",
                "example": "#/components/examples/fileMetadataKeyEmptyError/value"
            },
            "fileMetadataKeyForbiddenError": {
                "type": "string",
                "default": "File's metadata key `<KEY>` contains symbols not allowed by the metadata key format.",
                "example": "#/components/examples/fileMetadataKeyForbiddenError/value"
            },
            "fileMetadataKeyLengthTooBigError": {
                "type": "string",
                "default": "Length of file metadata key `<KEY>` can not be more than <LENGTH> symbols.",
                "example": "#/components/examples/fileMetadataKeyLengthTooBigError/value"
            },
            "fileMetadataValueEmptyError": {
                "type": "string",
                "default": "Value of the file metadata key `<KEY>` can not be empty.",
                "example": "#/components/examples/fileMetadataValueEmptyError/value"
            },
            "fileMetadataValueForbiddenError": {
                "type": "string",
                "default": "Value of file metadata key `<KEY>` contains symbols not allowed by the metadata value format.",
                "example": "#/components/examples/fileMetadataValueForbiddenError/value"
            },
            "fileMetadataValueLengthTooBigError": {
                "type": "string",
                "default": "Value of file metadata's key `<KEY>` can not be more than <LENGTH> symbols in length.",
                "example": "#/components/examples/fileMetadataValueLengthTooBigError/value"
            },
            "fileMetadataKeysNumberTooBigError": {
                "type": "string",
                "default": "A file can not have more than <NUMBER> metadata keys.",
                "example": "#/components/examples/fileMetadataKeysNumberTooBigError/value"
            },
            "filesRequiredError": {
                "type": "string",
                "default": "Request does not contain files.",
                "example": "#/components/examples/filesRequiredError/value"
            },
            "fileSizeLimitExceededError": {
                "type": "string",
                "default": "File is too large.",
                "example": "#/components/examples/fileSizeLimitExceededError/value"
            },
            "fileTypeForbiddenError": {
                "type": "string",
                "default": "Uploading of these file types is not allowed.",
                "example": "#/components/examples/fileTypeForbiddenError/value"
            },
            "fileInfectedError": {
                "type": "string",
                "default": "The file is infected by <VIRUS-NAME> virus.",
                "example": "#/components/examples/fileInfectedError/value"
            },
            "requestParamRequiredError": {
                "type": "string",
                "default": "<PARAMETER-NAME> is required.",
                "example": "#/components/examples/requestParamRequiredError/value"
            },
            "multipartSizeInvalidError": {
                "type": "string",
                "default": "size should be integer.",
                "example": "#/components/examples/multipartSizeInvalidError/value"
            },
            "multipartFileSizeLimitExceededError": {
                "type": "string",
                "default": "File size exceeds project limit.",
                "example": "#/components/examples/multipartFileSizeLimitExceededError/value"
            },
            "multipartFileSizeTooSmallError": {
                "type": "string",
                "default": "File size can not be less than <SIZE> bytes. Please use direct upload instead of multipart.",
                "example": "#/components/examples/multipartFileSizeTooSmallError/value"
            },
            "multipartPartSizeInvalidError": {
                "type": "string",
                "default": "Multipart Upload Part Size should be an integer.",
                "example": "#/components/examples/multipartPartSizeInvalidError/value"
            },
            "multipartPartSizeTooSmallError": {
                "type": "string",
                "default": "Multipart Upload Part Size can not be less than <SIZE> bytes.",
                "example": "#/components/examples/multipartPartSizeTooSmallError/value"
            },
            "multipartPartSizeTooBigError": {
                "type": "string",
                "default": "Multipart Upload Part Size can not be more than <SIZE> bytes.",
                "example": "#/components/examples/multipartPartSizeTooBigError/value"
            },
            "multipartFileIdRequiredError": {
                "type": "string",
                "default": "uuid is required.",
                "example": "#/components/examples/multipartFileIdRequiredError/value"
            },
            "multipartFileAlreadyUploadedError": {
                "type": "string",
                "default": "File is already uploaded.",
                "example": "#/components/examples/multipartFileAlreadyUploadedError/value"
            },
            "multipartUploadSizeTooLargeError": {
                "type": "string",
                "default": "Uploaded size is more than expected.",
                "example": "#/components/examples/multipartUploadSizeTooLargeError/value"
            },
            "multipartUploadSizeTooSmallError": {
                "type": "string",
                "default": "File size mismatch. Not all parts uploaded?",
                "example": "#/components/examples/multipartUploadSizeTooSmallError/value"
            },
            "multipartFileCompletionFailedError": {
                "type": "string",
                "default": "Can not complete upload. Wrong parts size?",
                "example": "#/components/examples/multipartFileCompletionFailedError/value"
            },
            "uuidInvalidError": {
                "type": "string",
                "default": "uuid is invalid.",
                "example": "#/components/examples/uuidInvalidError/value"
            },
            "sourceURLRequiredError": {
                "type": "string",
                "default": "source_url is required.",
                "example": "#/components/examples/sourceURLRequiredError/value"
            },
            "urlParsingFailedError": {
                "type": "string",
                "default": "Failed to parse URL.",
                "example": "#/components/examples/urlParsingFailedError/value"
            },
            "urlSchemeRequiredError": {
                "type": "string",
                "default": "No URL scheme supplied.",
                "example": "#/components/examples/urlSchemeRequiredError/value"
            },
            "urlSchemeInvalidError": {
                "type": "string",
                "default": "Invalid URL scheme.",
                "example": "#/components/examples/urlSchemeInvalidError/value"
            },
            "urlHostRequiredError": {
                "type": "string",
                "default": "No URL host supplied.",
                "example": "#/components/examples/urlHostRequiredError/value"
            },
            "urlBlacklistedError": {
                "type": "string",
                "default": "Source is blacklisted.",
                "example": "#/components/examples/urlBlacklistedError/value"
            },
            "hostnameNotFoundError": {
                "type": "string",
                "default": "Host does not exist.",
                "example": "#/components/examples/hostnameNotFoundError/value"
            },
            "urlHostMalformedError": {
                "type": "string",
                "default": "URL host is malformed.",
                "example": "#/components/examples/urlHostMalformedError/value"
            },
            "urlHostPrivateIPForbiddenError": {
                "type": "string",
                "default": "Only public IPs are allowed.",
                "example": "#/components/examples/urlHostPrivateIPForbiddenError/value"
            },
            "tokenRequiredError": {
                "type": "string",
                "default": "token is required.",
                "example": "#/components/examples/tokenRequiredError/value"
            },
            "fileIdRequiredError": {
                "type": "string",
                "default": "file_id is required.",
                "example": "#/components/examples/fileIdRequiredError/value"
            },
            "fileIdInvalidError": {
                "type": "string",
                "default": "file_id is invalid.",
                "example": "#/components/examples/fileIdInvalidError/value"
            },
            "fileNotFoundError": {
                "type": "string",
                "default": "File is not found.",
                "example": "#/components/examples/fileNotFoundError/value"
            },
            "groupFilesInvalidError": {
                "type": "string",
                "default": "This is not valid file url: %s.",
                "example": "#/components/examples/groupFilesInvalidError/value"
            },
            "groupFileURLParsingFailedError": {
                "type": "string",
                "default": "No files[N] parameters found.",
                "example": "#/components/examples/groupFileURLParsingFailedError/value"
            },
            "groupFilesNotFoundError": {
                "type": "string",
                "default": "Some files not found.",
                "example": "#/components/examples/groupFilesNotFoundError/value"
            },
            "groupIdRequiredError": {
                "type": "string",
                "default": "group_id is required.",
                "example": "#/components/examples/groupIdRequiredError/value"
            },
            "groupNotFoundError": {
                "type": "string",
                "default": "group_id is invalid.",
                "example": "#/components/examples/groupNotFoundError/value"
            },
            "signatureRequiredError": {
                "type": "string",
                "default": "`signature` is required.",
                "example": "#/components/examples/signatureRequiredError/value"
            },
            "signatureExpirationRequiredError": {
                "type": "string",
                "default": "`expire` is required.",
                "example": "#/components/examples/signatureExpirationRequiredError/value"
            },
            "signatureExpirationInvalidError": {
                "type": "string",
                "default": "`expire` must be a UNIX timestamp.",
                "example": "#/components/examples/signatureExpirationInvalidError/value"
            },
            "imageInfo": {
                "type": "object",
                "nullable": true,
                "description": "Image metadata.",
                "required": [
                    "color_mode",
                    "orientation",
                    "format",
                    "height",
                    "width",
                    "geo_location",
                    "datetime_original",
                    "dpi",
                    "sequence"
                ],
                "properties": {
                    "color_mode": {
                        "type": "string",
                        "description": "Image color mode.",
                        "enum": [
                            "RGB",
                            "RGBA",
                            "RGBa",
                            "RGBX",
                            "L",
                            "LA",
                            "La",
                            "P",
                            "PA",
                            "CMYK",
                            "YCbCr",
                            "HSV",
                            "LAB"
                        ],
                        "example": "RGBA"
                    },
                    "orientation": {
                        "type": "integer",
                        "description": "Image orientation from EXIF.",
                        "nullable": true,
                        "minimum": 0,
                        "maximum": 8,
                        "example": 6
                    },
                    "format": {
                        "type": "string",
                        "description": "Image format.",
                        "example": "JPEG"
                    },
                    "sequence": {
                        "type": "boolean",
                        "description": "Set to true if a file contains a sequence of images (GIF for example).",
                        "example": false
                    },
                    "height": {
                        "type": "integer",
                        "description": "Image height in pixels.",
                        "example": 2352
                    },
                    "width": {
                        "type": "integer",
                        "description": "Image width in pixels.",
                        "example": 2935
                    },
                    "geo_location": {
                        "description": "Geo-location of image from EXIF.",
                        "type": "object",
                        "nullable": true,
                        "required": [
                            "latitude",
                            "longitude"
                        ],
                        "properties": {
                            "latitude": {
                                "type": "number",
                                "description": "Location latitude.",
                                "example": -1.1884555555555556
                            },
                            "longitude": {
                                "type": "number",
                                "description": "Location longitude.",
                                "example": 52.66996666666667
                            }
                        }
                    },
                    "datetime_original": {
                        "type": "string",
                        "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                        "nullable": true,
                        "format": "date-time"
                    },
                    "dpi": {
                        "type": "array",
                        "description": "Image DPI for two dimensions.",
                        "nullable": true,
                        "items": {
                            "type": "number",
                            "example": 72
                        },
                        "example": [
                            72,
                            72
                        ]
                    }
                }
            },
            "legacyVideoInfo": {
                "type": "object",
                "nullable": true,
                "description": "Video metadata.",
                "properties": {
                    "duration": {
                        "type": "number",
                        "description": "Video file's duration in milliseconds.",
                        "example": 261827
                    },
                    "format": {
                        "type": "string",
                        "description": "Video file's format.",
                        "example": "mp4"
                    },
                    "bitrate": {
                        "type": "number",
                        "description": "Video file's bitrate.",
                        "example": 393
                    },
                    "audio": {
                        "type": "object",
                        "description": "Audio stream's metadata.",
                        "nullable": true,
                        "properties": {
                            "bitrate": {
                                "nullable": true,
                                "type": "number",
                                "description": "Audio stream's bitrate.",
                                "example": 78
                            },
                            "codec": {
                                "nullable": true,
                                "type": "string",
                                "description": "Audio stream's codec.",
                                "example": "aac"
                            },
                            "sample_rate": {
                                "nullable": true,
                                "type": "number",
                                "description": "Audio stream's sample rate.",
                                "example": 44100
                            },
                            "channels": {
                                "nullable": true,
                                "type": "string",
                                "description": "Audio stream's number of channels.",
                                "example": "2"
                            }
                        }
                    },
                    "video": {
                        "type": "object",
                        "description": "Video stream's metadata.",
                        "properties": {
                            "height": {
                                "type": "number",
                                "description": "Video stream's image height.",
                                "example": 360
                            },
                            "width": {
                                "type": "number",
                                "description": "Video stream's image width.",
                                "example": 640
                            },
                            "frame_rate": {
                                "type": "number",
                                "description": "Video stream's frame rate.",
                                "example": 30
                            },
                            "bitrate": {
                                "type": "number",
                                "description": "Video stream's bitrate.",
                                "example": 315
                            },
                            "codec": {
                                "type": "string",
                                "description": "Video stream codec.",
                                "example": "h264"
                            }
                        }
                    }
                }
            },
            "schemas-imageInfo": {
                "type": "object",
                "description": "Image metadata.",
                "required": [
                    "color_mode",
                    "orientation",
                    "format",
                    "height",
                    "width",
                    "geo_location",
                    "datetime_original",
                    "dpi",
                    "sequence"
                ],
                "properties": {
                    "color_mode": {
                        "type": "string",
                        "description": "Image color mode.",
                        "enum": [
                            "RGB",
                            "RGBA",
                            "RGBa",
                            "RGBX",
                            "L",
                            "LA",
                            "La",
                            "P",
                            "PA",
                            "CMYK",
                            "YCbCr",
                            "HSV",
                            "LAB"
                        ],
                        "example": "RGBA"
                    },
                    "orientation": {
                        "type": "integer",
                        "description": "Image orientation from EXIF.",
                        "nullable": true,
                        "minimum": 0,
                        "maximum": 8,
                        "example": 6
                    },
                    "format": {
                        "type": "string",
                        "description": "Image format.",
                        "example": "JPEG"
                    },
                    "sequence": {
                        "type": "boolean",
                        "description": "Set to true if a file contains a sequence of images (GIF for example).",
                        "example": false
                    },
                    "height": {
                        "type": "integer",
                        "description": "Image height in pixels.",
                        "example": 2352
                    },
                    "width": {
                        "type": "integer",
                        "description": "Image width in pixels.",
                        "example": 2935
                    },
                    "geo_location": {
                        "description": "Geo-location of image from EXIF.",
                        "type": "object",
                        "nullable": true,
                        "required": [
                            "latitude",
                            "longitude"
                        ],
                        "properties": {
                            "latitude": {
                                "type": "number",
                                "description": "Location latitude.",
                                "example": -1.1884555555555556
                            },
                            "longitude": {
                                "type": "number",
                                "description": "Location longitude.",
                                "example": 52.66996666666667
                            }
                        }
                    },
                    "datetime_original": {
                        "type": "string",
                        "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                        "nullable": true,
                        "format": "date-time"
                    },
                    "dpi": {
                        "type": "array",
                        "description": "Image DPI for two dimensions.",
                        "nullable": true,
                        "items": {
                            "type": "number",
                            "example": 72
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "example": [
                            72,
                            72
                        ]
                    }
                }
            },
            "videoInfo": {
                "type": "object",
                "description": "Video metadata.",
                "required": [
                    "duration",
                    "format",
                    "bitrate",
                    "audio",
                    "video"
                ],
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Video file's duration in milliseconds.",
                        "nullable": true,
                        "example": 261827
                    },
                    "format": {
                        "type": "string",
                        "description": "Video file's format.",
                        "example": "mp4"
                    },
                    "bitrate": {
                        "type": "integer",
                        "description": "Video file's bitrate.",
                        "nullable": true,
                        "example": 393
                    },
                    "audio": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "description": "Audio stream's metadata.",
                            "required": [
                                "bitrate",
                                "codec",
                                "sample_rate",
                                "channels"
                            ],
                            "properties": {
                                "bitrate": {
                                    "type": "integer",
                                    "description": "Audio stream's bitrate.",
                                    "nullable": true,
                                    "example": 78
                                },
                                "codec": {
                                    "type": "string",
                                    "description": "Audio stream's codec.",
                                    "nullable": true,
                                    "example": "aac"
                                },
                                "sample_rate": {
                                    "type": "integer",
                                    "description": "Audio stream's sample rate.",
                                    "nullable": true,
                                    "example": 44100
                                },
                                "channels": {
                                    "type": "integer",
                                    "description": "Audio stream's number of channels.",
                                    "nullable": true,
                                    "example": 2
                                }
                            }
                        }
                    },
                    "video": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "description": "Video stream's metadata.",
                            "required": [
                                "height",
                                "width",
                                "frame_rate",
                                "bitrate",
                                "codec"
                            ],
                            "properties": {
                                "height": {
                                    "type": "integer",
                                    "description": "Video stream's image height.",
                                    "example": 360
                                },
                                "width": {
                                    "type": "integer",
                                    "description": "Video stream's image width.",
                                    "example": 640
                                },
                                "frame_rate": {
                                    "type": "number",
                                    "description": "Video stream's frame rate.",
                                    "example": 30
                                },
                                "bitrate": {
                                    "type": "integer",
                                    "description": "Video stream's bitrate.",
                                    "nullable": true,
                                    "example": 315
                                },
                                "codec": {
                                    "type": "string",
                                    "description": "Video stream's codec.",
                                    "nullable": true,
                                    "example": "h264"
                                }
                            }
                        }
                    }
                }
            },
            "contentInfo": {
                "type": "object",
                "nullable": true,
                "description": "Information about file content.",
                "properties": {
                    "mime": {
                        "type": "object",
                        "description": "MIME type.",
                        "required": [
                            "mime",
                            "type",
                            "subtype"
                        ],
                        "properties": {
                            "mime": {
                                "type": "string",
                                "description": "Full MIME type.",
                                "example": "image/jpeg"
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of MIME type.",
                                "example": "image"
                            },
                            "subtype": {
                                "type": "string",
                                "description": "Subtype of MIME type.",
                                "example": "jpeg"
                            }
                        }
                    },
                    "image": {
                        "$ref": "#/components/schemas/schemas-imageInfo"
                    },
                    "video": {
                        "$ref": "#/components/schemas/videoInfo"
                    }
                }
            },
            "metadata": {
                "type": "object",
                "nullable": true,
                "description": "Arbitrary metadata associated with a file."
            }
        },
        "examples": {
            "metadataValue": {
                "value": "uploader"
            },
            "autoStoreDisabledError": {
                "value": "Autostore is disabled."
            },
            "uploadcarePublicKeyRequiredError": {
                "value": "UPLOADCARE_PUB_KEY is required."
            },
            "publicKeyRequiredError": {
                "value": "pub_key is required."
            },
            "uploadcarePublicKeyInvalidError": {
                "value": "UPLOADCARE_PUB_KEY is invalid."
            },
            "publicKeyInvalidError": {
                "value": "pub_key is invalid."
            },
            "projectPublicKeyRemovedError": {
                "value": "Project 39e3eb895fdada95e7a9 is marked as removed."
            },
            "accountBlockedError": {
                "value": "Account has been blocked."
            },
            "accountUnpaidError": {
                "value": "Account has been blocked for non payment."
            },
            "uploadFailedError": {
                "value": "Upload failed."
            },
            "accountLimitsExceededError": {
                "value": "Account has reached its limits."
            },
            "signatureExpirationError": {
                "value": "Expired signature."
            },
            "signatureInvalidError": {
                "value": "Invalid signature."
            },
            "requestFiledsNumberLimitExceededError": {
                "value": "The request contains too many HTTP POST fields."
            },
            "postRequestParserFailedError": {
                "value": "HTTP POST request parsing failed."
            },
            "nullCharactersForbiddenError": {
                "value": "Null characters are not allowed."
            },
            "fileMetadataKeyDuplicatedError": {
                "value": "File's metadata key `subsystem` has a duplicate."
            },
            "fileMetadataKeyEmptyError": {
                "value": "File's metadata key can not be empty."
            },
            "fileMetadataKeyForbiddenError": {
                "value": "File's metadata key `subsystem` contains symbols not allowed by the metadata key format."
            },
            "fileMetadataKeyLengthTooBigError": {
                "value": "Length of file metadata key `aaa...` can not be more than 64 symbols."
            },
            "fileMetadataValueEmptyError": {
                "value": "Value of the file metadata key `subsystem` can not be empty."
            },
            "fileMetadataValueForbiddenError": {
                "value": "Value of file metadata key `subsystem` contains symbols not allowed by the metadata value format."
            },
            "fileMetadataValueLengthTooBigError": {
                "value": "Value of file metadata's key `subsystem` can not be more than 512 symbols in length."
            },
            "fileMetadataKeysNumberTooBigError": {
                "value": "A file can not have more than 50 metadata keys."
            },
            "filesRequiredError": {
                "value": "Request does not contain files."
            },
            "fileSizeLimitExceededError": {
                "value": "File is too large."
            },
            "fileTypeForbiddenError": {
                "value": "Uploading of these file types is not allowed."
            },
            "fileInfectedError": {
                "value": "The file is infected by Win.Test.EICAR_HDB-1 virus."
            },
            "requestParamRequiredError": {
                "value": "filename is required."
            },
            "multipartSizeInvalidError": {
                "value": "size should be integer."
            },
            "multipartFileSizeLimitExceededError": {
                "value": "File size exceeds project limit."
            },
            "multipartFileSizeTooSmallError": {
                "value": "File size can not be less than 10485760 bytes. Please use direct upload instead of multipart."
            },
            "multipartPartSizeInvalidError": {
                "value": "Multipart Upload Part Size should be an integer."
            },
            "multipartPartSizeTooSmallError": {
                "value": "Multipart Upload Part Size can not be less than 5242880 bytes."
            },
            "multipartPartSizeTooBigError": {
                "value": "Multipart Upload Part Size can not be more than 5368709120 bytes."
            },
            "multipartFileIdRequiredError": {
                "value": "uuid is required."
            },
            "multipartFileAlreadyUploadedError": {
                "value": "File is already uploaded."
            },
            "multipartUploadSizeTooLargeError": {
                "value": "Uploaded size is more than expected."
            },
            "multipartUploadSizeTooSmallError": {
                "value": "File size mismatch. Not all parts uploaded?"
            },
            "multipartFileCompletionFailedError": {
                "value": "Can not complete upload. Wrong parts size?"
            },
            "uuidInvalidError": {
                "value": "uuid is invalid."
            },
            "sourceURLRequiredError": {
                "value": "source_url is required."
            },
            "urlParsingFailedError": {
                "value": "Failed to parse URL."
            },
            "urlSchemeRequiredError": {
                "value": "No URL scheme supplied."
            },
            "urlSchemeInvalidError": {
                "value": "Invalid URL scheme."
            },
            "urlHostRequiredError": {
                "value": "No URL host supplied."
            },
            "urlBlacklistedError": {
                "value": "Source is blacklisted."
            },
            "hostnameNotFoundError": {
                "value": "Host does not exist."
            },
            "urlHostMalformedError": {
                "value": "URL host is malformed."
            },
            "urlHostPrivateIPForbiddenError": {
                "value": "Only public IPs are allowed."
            },
            "tokenRequiredError": {
                "value": "token is required."
            },
            "fileIdRequiredError": {
                "value": "file_id is required."
            },
            "fileIdInvalidError": {
                "value": "file_id is invalid."
            },
            "fileNotFoundError": {
                "value": "File is not found."
            },
            "groupFilesInvalidError": {
                "value": "This is not valid file url: wrong-uuid."
            },
            "groupFileURLParsingFailedError": {
                "value": "No files[N] parameters found."
            },
            "groupFilesNotFoundError": {
                "value": "Some files not found."
            },
            "groupIdRequiredError": {
                "value": "group_id is required."
            },
            "groupNotFoundError": {
                "value": "group_id is invalid."
            },
            "signatureRequiredError": {
                "value": "`signature` is required."
            },
            "signatureExpirationRequiredError": {
                "value": "`expire` is required."
            },
            "signatureExpirationInvalidError": {
                "value": "`expire` must be a UNIX timestamp."
            },
            "fileUploadInfoWithType": {
                "value": {
                    "type": "file_info",
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                        },
                        
                        "dpi": [
                            72,
                            72
                        ]
                    },
                    "video_info": null,
                    "content_info": {
                        "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                        },
                        "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                            },
                            
                            "dpi": [
                                72,
                                72
                            ]
                        }
                    },
                    "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                }
            },
            "fileUploadInfoWithStatus": {
                "value": {
                    "status": "success",
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                        },
                        
                        "dpi": [
                            72,
                            72
                        ]
                    },
                    "video_info": null,
                    "content_info": {
                        "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                        },
                        "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                            },
                            
                            "dpi": [
                                72,
                                72
                            ]
                        }
                    },
                    "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                }
            }
        }
    }
}