openapi: 3.0.1
info:
  title: Transaction API
  version: '1'
  termsOfService: https://www.payroc.com/terms
  contact:
    name: Payroc Helpdesk
    url: https://www.payroc.com/help
    email: helpdesk@payroc.com
servers:
  - url: https://api.payroc.com/v1
    description: Production
  - url: https://api.uat.payroc.com/v1
    description: UAT
tags:
- name: Payments

paths:
  /payments:
    post:
      tags:
        - Payments
      summary: Create payment
      operationId: payment
      description: |  
        Run a sale or pre-authorization. You can also:  
        - Save the customer's payment details.  
        - Set up recurring billing.  
        - Process the transaction offline.
      parameters:
        - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentRequest'
            examples:
              paymentRequest:
                $ref: './example-requests-v1.yaml#/components/examples/paymentRequest'
              applePaySaleRequest:
                $ref: './example-requests-v1.yaml#/components/examples/applePaySaleRequest'
        required: true
      responses:
        '201':
          description: Successful request. We processed the transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                createdPayment:
                  $ref: './example-responses-v1.yaml#/components/examples/paymentResponse'
                applePaySaleResponse:
                  $ref: './example-responses-v1.yaml#/components/examples/applePaySaleResponse'
          headers:
            location:
              $ref: '../../../common/headers/location-v1.yaml#/components/headers/location'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
    get:
      tags:
        - Payments
      summary: List payments
      description: Return a list of payments.
      operationId: listPayments
      parameters:
        - $ref: ../../../common/parameters/processing-terminal-id-v1.yaml#/components/parameters/processingTerminalIdQuery
        - $ref: './parameters-v1.yaml#/components/parameters/orderId'
        - $ref: './parameters-v1.yaml#/components/parameters/operator'
        - $ref: './parameters-v1.yaml#/components/parameters/cardholderName'
        - $ref: './parameters-v1.yaml#/components/parameters/first6'
        - $ref: './parameters-v1.yaml#/components/parameters/last4'
        - $ref: './parameters-v1.yaml#/components/parameters/tender'
        - $ref: './parameters-v1.yaml#/components/parameters/tipMode'
        - $ref: './parameters-v1.yaml#/components/parameters/type'
        - $ref: './parameters-v1.yaml#/components/parameters/status'
        - $ref: './parameters-v1.yaml#/components/parameters/dateFrom'
        - $ref: './parameters-v1.yaml#/components/parameters/dateTo'
        - $ref: './parameters-v1.yaml#/components/parameters/settlementState'
        - $ref: './parameters-v1.yaml#/components/parameters/settlementDate'
        - $ref: './parameters-v1.yaml#/components/parameters/paymentLinkId'
        - $ref: '../../../common/parameters/before-v1.yaml#/components/parameters/before'
        - $ref: '../../../common/parameters/after-v1.yaml#/components/parameters/after'
        - $ref: '../../../common/parameters/limit-v1.yaml#/components/parameters/limit'
      responses:
        '200':
          description: Successful request. Returns a list of payments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentPaginatedList'
              examples:
                paginatedResults:
                  $ref: './example-responses-v1.yaml#/components/examples/paginatedPayment'
                noActivity:
                  $ref: '../../../common/responses/no-activity-v1.yaml#/components/examples/noActivity'
        '400':
          $ref: ../../../common/responses/errors/400-v1.yaml#/components/responses/400
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  /payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Retrieve payment
      operationId: getPayment
      description: Retrieve an existing payment.
      parameters:      
        - $ref: './parameters-v1.yaml#/components/parameters/paymentId'
      responses:
        '200':
          description: Successful request. Returns the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                createdPayment:
                  $ref: './example-responses-v1.yaml#/components/examples/paymentResponse'
        '400':
          $ref: ../../../common/responses/errors/400-v1.yaml#/components/responses/400
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '404':
          $ref: ../../../common/responses/errors/404-v1.yaml#/components/responses/404
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  /payments/{paymentId}/adjust:
    post:
      tags:
        - Payments
      summary: Adjust payment
      operationId: adjustPayment
      description: Adjust a transaction.
      parameters:
        - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
        - $ref: './parameters-v1.yaml#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '../../../common/schemas/transaction/transaction-adjustment-v1.yaml#/components/schemas/paymentAdjustment'
            examples:
              adjustPaymentRequest:
                $ref: './example-requests-v1.yaml#/components/examples/adjustPaymentRequest'
        required: true
      responses:
        '200':
          description: Successful request. We adjusted the transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                adjustPaymentResponse:
                  $ref: './example-responses-v1.yaml#/components/examples/adjustPaymentResponse'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '404':
          $ref: ../../../common/responses/errors/404-v1.yaml#/components/responses/404
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  /payments/{paymentId}/capture:
    post:
      tags:
        - Payments
      summary: Capture payment
      operationId: capturePayment
      description: Capture an existing payment.
      parameters:
      - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
      - $ref: './parameters-v1.yaml#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentCapture'
      responses:
        '200':
          description: Successful request. We captured the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                payment:
                  $ref: './example-responses-v1.yaml#/components/examples/paymentResponse'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '404':
          $ref: ../../../common/responses/errors/404-v1.yaml#/components/responses/404
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  /payments/{paymentId}/reverse:
    post:
      tags:
        - Payments
      summary: Reverse payment
      operationId: reversePayment
      description: Reverse a payment.
      parameters:
        - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
        - $ref: './parameters-v1.yaml#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentReversal'
            examples:
              reversalPayment:
                $ref: './example-requests-v1.yaml#/components/examples/reversalPaymentRequest'
      responses:
        '200':
          description: Successful request. We reversed the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                reversalPayment:
                  $ref: './example-responses-v1.yaml#/components/examples/reversalPaymentResponse'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '404':
          $ref: ../../../common/responses/errors/404-v1.yaml#/components/responses/404
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  /payments/{paymentId}/refund:
    post:
      tags:
        - Payments
      summary: Refund payment
      operationId: refundPayment
      description: Refund a payment.
      parameters:
      - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
      - $ref: './parameters-v1.yaml#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '../refunds/refunds-v1.yaml#/components/schemas/referencedRefund'
            examples:
              refundPaymentRequest:
                $ref: './example-requests-v1.yaml#/components/examples/refundPaymentRequest'
        required: true
      responses:
        '200':
          description: Successful request. We refunded the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
              examples:
                refundPayment:
                  $ref: './example-responses-v1.yaml#/components/examples/refundPaymentResponse'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '404':
          $ref: ../../../common/responses/errors/404-v1.yaml#/components/responses/404
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500

components:
  schemas:
    paymentReversal:
      type: object
      properties:
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: Operator who reversed the payment.
        amount:
          type: integer
          format: int64
          description: |
            Amount of the payment that the merchant wants to reverse. The value is in the currency’s lowest denomination, for example, cents.  
            **Note:** If the merchant doesn’t send an amount, we reverse the total amount of the transaction.
    payment:
      required:
        - card
        - order
        - paymentId
        - processingTerminalId
        - transactionResult
      type: object
      properties:
        paymentId:
          maxLength: 10
          minLength: 10
          type: string
          description: Unique identifier that our gateway assigned to the transaction. 
          example: M2MJOG6O2Y
        processingTerminalId:
          maxLength: 50
          minLength: 4
          type: string
          description: Unique identifier of the terminal that initiated the transaction.
          example: '1234001'
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: Operator who initiated the request.
          example: Jane
        order:
          $ref: '#/components/schemas/paymentOrder'
        customer:
          $ref: ../../../common/schemas/transaction/customer-v1.yaml#/components/schemas/customer
        card:
          $ref: ../../../common/schemas/transaction/card-v1.yaml#/components/schemas/card
        refunds:
          type: array
          uniqueItems: true
          description: | 
            Array of refundSummary objects. 
            Each object contains information about refunds linked to the transaction.
          items:
            $ref: ../../../common/schemas/transaction/summary-v1.yaml#/components/schemas/refundSummary
        supportedOperations:
          $ref: ../../../common/schemas/transaction/card-transaction-v1.yaml#/components/schemas/supportedOperations
        transactionResult:
          $ref: ../../../common/schemas/transaction/card-transaction-v1.yaml#/components/schemas/transactionResult
        customFields:
          type: array
          description: |
            Array of customField objects.
          items:
            $ref: ../../../common/schemas/common/custom-field-v1.yaml#/components/schemas/customField


    paymentCapture:
      description: Object that contains the details of the payment that the merchant wants to capture.
      type: object
      properties:
        processingTerminalId:
          maxLength: 50
          minLength: 4
          type: string
          description: Unique identifier that we assigned to the terminal.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: Operator who captured the payment.
          example: Jane
        amount:
          type: integer
          format: int64
          description: |
            Amount of the payment that the merchant wants to capture. The value is in the currency’s lowest denomination, for example, cents.  
            **Note:** If the merchant does not send an amount, we capture the total amount of the transaction.
          example: 4999
        breakdown:
          $ref: ../../../common/schemas/transaction/order-v1.yaml#/components/schemas/itemizedBreakdown

    paymentRequest:
      required:
        - channel
        - order
        - paymentMethod
        - processingTerminalId
      type: object
      properties:
        channel:
          type: string
          description: Channel that the merchant used to receive the payment details.
          enum:
            - pos
            - web
            - moto
          example: web
        processingTerminalId:
          maxLength: 50
          minLength: 4
          type: string
          description: Unique identifier that we assigned to the terminal.
          example: '1234001'
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: Operator who ran the transaction.
          example: Jane
        order:
          $ref: "#/components/schemas/paymentOrder"
        customer:
          $ref: ../../../common/schemas/transaction/customer-v1.yaml#/components/schemas/customer
        ipAddress:
          $ref: ../../../common/schemas/common/ip-address-v1.yaml#/components/schemas/ipAddress
        paymentMethod:
          type: object
          description: Object that contains information about the customer's payment details.
          discriminator:
            propertyName: type
            mapping:
              card: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/cardPayload'
              secureToken: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/secureTokenPayload'
              digitalWallet: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/digitalWalletPayload'
              singleUseToken: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/singleUseTokenPayload'
          oneOf:
            - $ref: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/cardPayload'
            - $ref: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/secureTokenPayload'
            - $ref: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/digitalWalletPayload'
            - $ref: '../../../common/schemas/transaction/payment-method-v1.yaml#/components/schemas/singleUseTokenPayload'
        threeDSecure:
          type: object
          description: Object that contains information for an authentication check on the customer's payment details using the 3-D Secure protocol.          
          discriminator:
            propertyName: serviceProvider
            mapping:
              gateway: '../../../common/schemas/transaction/three-d-secure-v1.yaml#/components/schemas/gatewayThreeDSecure'
              thirdParty: '../../../common/schemas/transaction/three-d-secure-v1.yaml#/components/schemas/thirdPartyThreeDSecure'
          oneOf:
            - $ref: '../../../common/schemas/transaction/three-d-secure-v1.yaml#/components/schemas/gatewayThreeDSecure'
            - $ref: '../../../common/schemas/transaction/three-d-secure-v1.yaml#/components/schemas/thirdPartyThreeDSecure'
        credentialOnFile:
          $ref: ../../../common/schemas/transaction/credential-on-file-v1.yaml#/components/schemas/credentialOnFile
        offlineProcessing:
          $ref: '#/components/schemas/offlineProcessing'
        autoCapture:
          type: boolean
          default: true
          description: |
            Indicates if we should automatically capture the payment amount.  

            - `true` - Run a sale and automatically capture the transaction.
            - `false`- Run a pre-authorization and capture the transaction later.  
              
            **Note:** If you send `false` and the terminal doesn't support pre-authorization, we set the transaction's status to pending. The merchant must capture the transaction to take payment from the customer.
          example: true
        processAsSale:
          type: boolean
          default: false
          description: |
            Indicates if we should immediately settle the sale transaction. The merchant cannot adjust the transaction if we immediately settle it.  
            **Note:** If the value for **processAsSale** is `true`, the gateway ignores the value in **autoCapture**.
          example: false
        customFields:
          type: array
          description: |
            Array of customField objects.
          items:
            $ref: ../../../common/schemas/common/custom-field-v1.yaml#/components/schemas/customField

    paymentOrder:
      required:
        - amount
        - currency
        - orderId
      type: object
      description: Object that contains information about the payment.
      allOf:
        - $ref: ../../../common/schemas/transaction/order-v1.yaml#/components/schemas/order
        - type: object
          properties:
            orderId:
              maxLength: 24
              minLength: 1
              type: string
              description: A unique identifier assigned by the merchant.
              example: OrderRef6543
            dateTime:
              type: string
              format: date-time
              readOnly: true
              description: Date and time that the processor processed the transaction. Our gateway returns this value in the ISO 8601 format.
              example: '2024-07-02T15:30:00Z'
            description:
              maxLength: 256
              minLength: 1
              type: string
              description: Description of the transaction.
              example: Large Pepperoni Pizza
            amount:
              type: integer
              format: int64
              description: Total amount of the transaction. The value is in the currency’s lowest denomination, for example, cents.
              example: 4999
            currency:
              $ref: ../../../common/schemas/common/currency-v1.yaml#/components/schemas/currency
            breakdown:
              $ref: ../../../common/schemas/transaction/order-v1.yaml#/components/schemas/itemizedBreakdown
            dccOffer:
              $ref: ../../../common/schemas/transaction/dcc-offer-v1.yaml#/components/schemas/dccOffer
            standingInstructions:
              $ref: '#/components/schemas/standingInstructions'

    paymentPaginatedList:
      required:
        - count
        - data
        - hasMore
        - limit
      type: object
      allOf:
      - $ref: ../../../common/schemas/common/paginated-list-v1.yaml#/components/schemas/paginatedList
      - type: object
        properties:
          data:
            type: array
            description: Array of transactions.
            items:
              $ref: '#/components/schemas/payment'

    standingInstructions:
      required:
      - processingModel
      - sequence
      type: object
      description: If you don't use our Subscriptions mechanism, include this section to configure your standing/recurring orders.
      properties:
        sequence:
          type: string
          description: Position of the transaction in the payment plan sequence. 
          enum:
            - first
            - subsequent
          example: first
        processingModel:
          type: string
          description: | 
            Indicates the type of payment instruction.

            - 'unscheduled' – The payment is not part of a regular billing cycle.
            - 'recurring' – The payment is part of a regular billing cycle with no end date.
            - 'installment' – The payment is part of a regular billing cycle with an end date.
          enum:
            - unscheduled
            - recurring
            - installment
          example: recurring
        referenceDataOfFirstTxn:
          $ref: '#/components/schemas/firstTxnReferenceData'
          description: Object that contains information about the initial payment for the payment instruction.

    firstTxnReferenceData:
      type: object
      description: Object that contains information about the initial payment for the payment instruction.
      properties:
        paymentId:
          maxLength: 10
          minLength: 10
          type: string
          description: |
            Unique identifier of the first payment.  
            **Note:** We recommend that you always send a value for **paymentId**.
          example: M2MJOG6O2Y
        cardSchemeReferenceId:
          maxLength: 64
          minLength: 1
          type: string
          description: Identifier that the card brand assigns to the payment instruction. 
          example: ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890

    offlineProcessing:
      required:
        - operation
      type: object
      description: Object that contains information about the transaction if the merchant ran it when the terminal was offline.
      properties:
        operation:
          type: string
          description: Status of the transaction.
          enum:
          - offlineDecline
          - offlineApproval
          - deferredAuthorization
          example: offlineApproval
        approvalCode:
          maxLength: 48
          minLength: 0
          type: string
          description: Approval code for the transaction from the processor.
          example: OK3
        dateTime:
          type: string
          format: date-time
          description: Date and time that the merchant ran the transaction. The date follows the ISO 8601 standard.
          example: '2024-07-02T15:30:00Z'
