openapi: 3.0.3
info:
  version: '1'
  title: Event Subscriptions
  description: Subscriptions to events customer are interested in being notified about
  contact:
    name: Payroc Helpdesk
    url: https://docs.payroc.com/api
    email: helpdesk@payroc.com

tags:
  - name: Event subscriptions
    description: |
      Create an event subscription so that we notify you when certain events occur, for example, when we change the status of a processing account.  
      When you subscribe to an event, provide the following information:  
        - **Event type** - The events that we should notify you about. You can subscribe to more than one event within the same request. For a list of events that you can subscribe to, go to [Events](https://docs.payroc.com/knowledge/basic-concepts/events).  
        - **Notification method** - The endpoint that we send a notification to if an event occurs. We send notifications by webhook request.  
        - **Event status** - The status of the event subscription.  
        - **Support email address** - Email address of the person or team that we contact if we can't deliver notifications.  

      Use our event subscriptions endpoint to do the following:  
      - [**Create event subscription**](#createEventSubscription) - Subscribe to receive notifications when events occur.  
      - [**Update event subscription**](#updateEventSubscription) - Change the details of an event subscription, for example, to receive notifications for an additional event.  
      - [**Partially update event subscription**](#patchEventSubscription) - Change values of an existing event subscription.  
      - [**Retrieve an event subscription**](#getEventSubscription) - Retrieve all the information that we stored in an event subscription.  
      - [**List event subscriptions**](#listEventSubscriptions) - Retrieve a list of all event subscriptions associated with the ISV's account.  
      - [**Delete event subscription**](#deleteEventSubscription)


paths:
  /event-subscriptions:
    get:
      tags: [Event Subscriptions]
      summary: List event subscriptions
      description: | 
        Use this method to retrieve a [paginated](https://docs.payroc.com/api/pagination) list of event subscriptions that are linked to the ISV's account. 
      operationId: listEventSubscriptions
      parameters:
        - $ref: './parameters-v1.yaml#/components/parameters/status'
        - $ref: './parameters-v1.yaml#/components/parameters/event'
      responses:
        '200':
          description: Successful request. Returns a list of event subscriptions. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginatedEventSubscriptions'
              examples:
                paginatedList:
                  $ref: 'example-responses-v1.yaml#/components/examples/paginatedEventSubscriptions'
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'    
    post:
      tags: [Event Subscriptions]
      summary: Create event subscription
      description: |
        Use this method to subscribe to events that you want us to notify you about, for example, when we change the status of a processing account. You can subscribe to more than one event in the request. For a complete list of events you can subscribe to, go to [Events](https://docs.payroc.com/knowledge/basic-concepts/events).  
        <br/>
        In the response we return the ID of the event subscription, which you need for the following methods:  
        - [Update event subscription](#updateEventSubscription)  
        - [Partially update an event subscription](#patchEventSubscription)  
        - [Retrieve an event subscription](#getEventSubscription)  
        - [List event subscriptions](#listEventSubscriptions)  
        - [Delete event subscription](#deleteEventSubscription)  
      operationId: createEventSubscription
      parameters:
        - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventSubscription'
            examples:
              createEventSubscription:
                $ref: './example-requests-v1.yaml#/components/examples/createWebhookEventSubscription'
              
      responses:
        '201':
          description: Successful request. We created the event subscription.
          headers:
            Location:
              $ref: '#/components/headers/location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSubscription'
              examples:
                createdEventSubscription:
                  $ref: './example-responses-v1.yaml#/components/examples/eventSubscriptionCreated'
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '406':
          $ref: '../../../common/responses/errors/406-v1.yaml#/components/responses/406'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'           
  /event-subscriptions/{subscriptionId}:
    parameters:
      - $ref: './parameters-v1.yaml#/components/parameters/subscriptionId'      
    get:
      tags: [Event Subscriptions]
      summary: Retrieve event subscription
      description: |  
        Use this method to retrieve the details of an event subscription.  
        
        In your request, include the subscriptionId that we sent to you when we created the event subscription.  
          
        **Note:** If you don't know the subscriptionId of the event subscription, go to [List event subscriptions](#listEventSubscriptions).
      operationId: getEventSubscription
      responses:
        '200':
          description: Returns the event subscription object. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSubscription'
              examples:
                eventSubscription:
                  $ref: 'example-responses-v1.yaml#/components/examples/eventSubscription'
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'   
    put:
      tags: [Event Subscriptions]
      summary: Update event subscription
      description: |
        Use this method to update an event subscription.  
        You can make the following updates to the event subscription:  
          - **Event types** - Add or remove events that you have subscribed to.  
          - **Notification methods** - Update information about your endpoint and who we email if we can't contact your endpoint.  
            <br/>  
        Include the subscriptionId that we sent you when you created the event subscription. We returned this in the id field.  
          
        **Note:** If you don't know the subscriptionId, go to [List event subscriptions](#listEventSubscriptions)
      operationId: updateEventSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventSubscription'
            examples: 
              updateEventSubscription:
                $ref: './example-requests-v1.yaml#/components/examples/updateEventSubscription'
      responses:
        '204':
          description: Successful request. We updated the event subscription.  
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '406':
          $ref: '../../../common/responses/errors/406-v1.yaml#/components/responses/406'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'        
    patch:        
      tags: [Event Subscriptions]
      summary: Partially update event subscription
      description: | 
        Use this method to partially update an event subscription. You can make the following updates to the event subscription:  
          - Add or remove events that you have subscribed to.  
          - Update information about your endpoint and who we email if we can't contact your endpoint.  
          - Turn on or turn off notifications for the event.  
            <br/>  
        Structure your request to follow the [RFC 6902](https://datatracker.ietf.org/doc/html/rfc6902/) standard.  
          
        **Note:** You need the subscriptionId that we sent you when you created the event subscription. If you don't know the subscriptionId, go to [List event subscriptions](#listEventSubscriptions).
      operationId: patchEventSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../../../common/schemas/common/patch-request-v1.yaml#/components/schemas/patchRequest
            examples:
              patchEventSubscriptionRealistic:
                $ref: './example-requests-v1.yaml#/components/examples/patchEventSubscriptionRealistic'
      responses:
        '200':
          description: Successful request. We updated the event subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSubscription'
              examples:
                patchedEventSubscription:
                  $ref: './example-responses-v1.yaml#/components/examples/patchEventSubscription'
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '406':
          $ref: '../../../common/responses/errors/406-v1.yaml#/components/responses/406'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'       
    delete:
      tags: [Event Subscriptions]
      summary: Delete event subscription
      description: Use this method to delete an event subscription. 
      operationId: deleteEventSubscription
      responses:
        '204':
          description: Successful request. We deleted the event subscription. 
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'      
  /event-subscriptions/{subscriptionId}/events:  
    parameters:
      - $ref: './parameters-v1.yaml#/components/parameters/subscriptionId'      
      - $ref: './parameters-v1.yaml#/components/parameters/event'      
      - $ref: './parameters-v1.yaml#/components/parameters/from'      
      - $ref: './parameters-v1.yaml#/components/parameters/to'      
      - $ref: './parameters-v1.yaml#/components/parameters/notifiedStatus'
    get:
      tags: [Event Subscriptions]
      summary: List Events
      description: Retrieve a list of all notified events for a particular event subscription
      operationId: listSubscribedEventNotifications
      responses:
        '200':
          description: A list of events notified on the subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginatedEvents'
        '400':
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        '401':
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        '404':
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        '500':
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'

components:
  schemas:
  
    eventSubscription:
      type: object
      title: Event Subscription
      properties:
        id:
          type: number
          description: Unique identifier that we assigned to the event subscription. 
          readOnly: true
          example: 2565435189324
        enabled:
          type: boolean
          description: |
            Indicates if we should notify you if the event occurs. The value is one of the following:  
            - `true` - We notify you when the event occurs.  
            - `false` - We don't notify you when the event occurs.  
          example: true
        status:
          type: string
          description: |
            Status of the subscription. We return one of the following values:  
            - `registered` - You have set up the subscription, and we will notify you when an event occurs.  
            - `suspended` - We have deactivated the event subscription, and we won't notify you when an event occurs.  
            - `failed` - We couldn't contact your URI endpoint. We email the supportEmailAddress.  
          enum:
            - registered
            - suspended
            - failed
          readOnly: true
          example: registered
        eventTypes:
          type: array
          description: Array of eventTypes that you want to subscribe to. For a list of all events that you can subscribe to, go to [Events](https://docs.payroc.com/knowledge/basic-concepts/events). 
          items:
            type: string
            minLength: 1
          example: 
          - processingAccount.status.changed
        notifications:
          type: array
          description: Array of notifications, which includes information about how we contact you when an event occurs. 
          items:
            $ref: '#/components/schemas/notification'
        metadata:
          type: object
          description: Object that you can send to include custom data in the request. For more information about how to use metadata, go to [Metadata](https://docs.payroc.com/api/metadata). 
          example:
            yourCustomField: abc123
      required:
        - enabled
        - eventTypes
        - notifications
    
    notification:
      type: object
      title: Notification method
      oneOf:
        - $ref: '#/components/schemas/webhook'
      discriminator: 
        propertyName: type
        mapping: 
          webhook: '#/components/schemas/webhook'
    
    webhook:
      type: object
      properties:
        type:
          type: string
          description: | 
            Type of notification method.  
            **Note:** To receive notifications by webhook, your server must be able to handle POST requests.  
          enum: 
            - webhook
          example: webhook
        uri:
          type: string
          description: Public endpoint that we send notifications to.  
          example: 'https://my-server/notification/endpoint'
        secret:
          type: string
          description: | 
            String that we send with a notification so that you can ensure it is a valid notification from our gateway. We include the value in the Payroc-Secret header parameter in the webhook call.  
            **Note:** In the response, we truncate the secret to the last 12 characters and mask the first 6 characters.  
          minLength: 16
          maxLength: 64
          example: aBcD1234eFgH5678iJkL9012mNoP3456
        supportEmailAddress:
          type: string
          description: Email address of the person or team that we contact if we can't deliver notifications.  
      required:
        - type
        - uri
        - secret
        - supportEmailAddress
    
    paginatedEventSubscriptions:
      type: object
      title: paginated event subscriptions
      allOf:
      - $ref: '../../../common/schemas/common/paginated-list-v1.yaml#/components/schemas/paginatedList'
      - type: object
        properties:
          data:
            type: array
            description: Array of eventSubscription objects.
            items:
              $ref: '#/components/schemas/eventSubscription'

    link:
      type: object
      title: link
      description: A HATEOAS style link.
      properties:
        rel:
          type: string
        method:
          type: string
        href:
          type: string
      required:
      - href
      - method
      - rel

    paginatedEvents:
      type: object
      title: paginated events
      allOf:
      - $ref: '../../../common/schemas/common/paginated-list-v1.yaml#/components/schemas/paginatedList'
      - type: object
        properties:
          data:
            type: array
            description: Array of event objects.
            items:
              $ref: '../events/events-v1.yaml#/components/schemas/event'
  
  headers:
    location:
      description: URI reference to created resource
      style: simple
      explode: false
      schema:
        type: string   

  securitySchemes:
    bearerAuth:
      $ref: '../../../common/security/bearer-auth.yaml#/components/securitySchemes/bearerAuth'

security:
- bearerAuth: []