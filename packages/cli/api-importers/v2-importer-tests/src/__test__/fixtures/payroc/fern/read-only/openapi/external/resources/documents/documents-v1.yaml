openapi: 3.0.3
info:
  title: Document Management
  description: "Documents are objects that are used to provide copies of evidence\
    \ to Payroc, such as government identity documents (e.g. driving licences, passport),\
    \ business verification information (e.g. W-9) or other forms of documentation\
    \ as required.  Documents can be created using the `Create Document` API.  Documents\
    \ will have a defined lifecycle, based on their `purpose` attribute."
  termsOfService: https://www.payroc.com/terms
  contact:
    name: Payroc Helpdesk
    url: https://www.payroc.com/help
    email: helpdesk@payroc.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1"
security:
- bearerAuth: []

tags:
  - name: Documents
    description: Use the Documents resource to upload documents to our gateway.

servers:
  - url: https://api.payroc.com/v1
    description: Production
  - url: https://api.uat.payroc.com/v1
    description: UAT

paths:
  /documents:
    #get:
    #  tags: [Documents]
    #  summary: List all documents.
    #  description: "Returns a list of all documents your account has access to.  The\
    #    \ documents are returned, sorted by created date, with the most recent first."
    #  operationId: getDocuments
    #  parameters:
    #    - $ref: "#/components/parameters/purpose"
    #    #- $ref: "#/components/parameters/merchantId"
    #    - $ref: "https://api.swaggerhub.com/domains/PayrocWorldAccess/common-domain/1#/components/parameters/before"
    #    - $ref: "https://api.swaggerhub.com/domains/PayrocWorldAccess/common-domain/1#/components/parameters/after"
    #    - $ref: "https://api.swaggerhub.com/domains/PayrocWorldAccess/common-domain/1#/components/parameters/limit"

    #  responses:
    #    "200":
    #      description: "Returns an object with a `data` object, containing an array\
    #        \ of documents, up to size `limit`, sorted by created date."
    #      content:
    #        application/json:
    #          schema:
    #            $ref: "#/components/schemas/documentsResponse"
    #  security:
    #  - bearerAuth:
    #    - read:documents

    post:
      tags: [Documents]
      summary: Create document
      description: Create a new document. If your document contains multiple files, add each file as a separate attachment.<br/><br/>The size limit for the each attachment is 6MB.
      operationId: postDocument
      parameters:
        - $ref: '../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/documentPostRequest"
          #application/xml:
          #  schema:
          #    $ref: "#/components/schemas/documentPostRequest"
      responses:
        "201":
          description: ""
          headers:
            location:
              $ref: "../../../common/headers/location-v1.yaml#/components/headers/location"

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentPostResponse"
            #application/xml:
            #  schema:
            #    $ref: "#/components/schemas/documentPostResponse"
        
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
        "401":
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        "403":
          $ref: '../../../common/responses/errors/403-v1.yaml#/components/responses/403'
        "406":
          $ref: '../../../common/responses/errors/406-v1.yaml#/components/responses/406'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '../../../common/responses/errors/409-v1.yaml#/components/schemas/409'
              examples:
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        "413":
          $ref: '../../../common/responses/errors/413-v1.yaml#/components/responses/413'
        "415":
          $ref: '../../../common/responses/errors/415-v1.yaml#/components/responses/415'
        "500":
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'
      

  /documents/{documentId}:
    delete:
      tags: [Documents]
      summary: Delete document
      description: Delete a document using its document id.
      operationId: deleteDocumentById
      parameters:
        - $ref: "./parameters-v1.yaml#/components/parameters/documentId"
      responses:
        "204":
          description: Successfully deleted
        "400":
          $ref: '../../../common/responses/errors/400-v1.yaml#/components/responses/400'
        "401":
          $ref: '../../../common/responses/errors/401-v1.yaml#/components/responses/401'
        "403":
          $ref: '../../../common/responses/errors/403-v1.yaml#/components/responses/403'
        "404":
          $ref: '../../../common/responses/errors/404-v1.yaml#/components/responses/404'
        "500":
          $ref: '../../../common/responses/errors/500-v1.yaml#/components/responses/500'

components:       
  schemas:
    documentPostRequest:
      required:
      - attachments
      - name
      - mime-type
      type: object
      allOf:
      - $ref: "#/components/schemas/documentProperties"
      - $ref: "#/components/schemas/documentAttachments"
      - $ref: "#/components/schemas/documentMetadata"

    documentPostResponse:
      type: object
      allOf:
      - required:
        - documentId
        type: object
        properties:
          documentId:
            type: string
          attachmentCount:
            type: string
      - $ref: "#/components/schemas/documentProperties"
      - $ref: "#/components/schemas/documentMetadata"
      - $ref: "#/components/schemas/documentLinks"

    documentProperties:
      properties:
        purpose:
          type: string
          description: Purpose of the uploaded document.
          enum:
          - identity
          - tax
          - pci
          - signature
          - contract
          - verification
          example: "identity"
        name:
          type: string
          description: Name of the document.
          example: "passport"
        description:
          type: string
          description: Description of the document.
          example: "Merchant's passport to verify their identity"
        mime-type:
          type: string
          description: Indicates the document's format.
          enum:
          - application/pdf
          - image/png
          - image/bmp
          - image/gif
          - image/jpeg
          - image/heic
          - image/heif

    documentAttachments:
      properties:
        attachments:
          minItems: 1
          type: array
          title: files
          description: Array that contains the individual files of your document.
          items:
            required:
            - content
            type: object
            title: file
            properties:
              content:
                type: string
                description: Document file. Encode the file to a Base64 scheme.
                example: "k6wdryMd3OBtib0Dd/uLh7CclOSw3UXyXmMoYW0DxR0="

    documentMetadata:
      properties:
        metadata:
          type: object
          title: metadata
          description: '[Metadata](/api/metadata) object you can use to include custom data with your request.'
          additionalProperties:
            type: object
            properties:
              code:
                type: string
                maxLength: 50
              text:
                type: string
                maxLength: 1024
          example:
            {mspwareUserId: "8cd4c706cce9498b9aa70471434b7e6e", isvsId: "739573"}

    documentLinks:
      properties:
        links:
          type: array
          description: Array of HATEOAS links for further actions on the document.
          items:
            $ref: "../../../common/schemas/common/link/link-v1.yaml#/components/schemas/link"

    documentsResponse:
      type: object
      properties:
        limit: 
          type: number
          description: Maximum number of results that we return for each page.
          example: 25
          default: 25
        count:
          type: number
          description: Number of results that we returned.
          example: 23
        has_more:
          type: boolean
          description: Indicates if further results are available.
        results:
          $ref: "#/components/schemas/documentsResponseList" 

    documentsResponseList:
      type: array
      items:
        type: object
        allOf:
        - required:
          - documentId
          type: object
          properties:
            documentId:
              type: string
        - $ref: "#/components/schemas/documentProperties"

  securitySchemes:
    bearerAuth:
      $ref: '../../../common/security/bearer-auth.yaml#/components/securitySchemes/bearerAuth'
