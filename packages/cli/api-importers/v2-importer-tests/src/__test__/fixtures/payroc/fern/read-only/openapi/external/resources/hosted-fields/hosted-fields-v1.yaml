openapi: 3.0.1
info:
  title: Transaction API
  version: '1'
  termsOfService: https://www.payroc.com/terms
  contact:
    name: Payroc Helpdesk
    url: https://www.payroc.com/help
    email: helpdesk@payroc.com
servers:
  - url: https://api.payroc.com/v1
    description: Production
  - url: https://api.uat.payroc.com/v1
    description: UAT

security:
- bearerAuth: []

tags:
  - name: Hosted Fields
    description: Create a session token for Hosted Fields.

paths:
  /processing-terminals/{processingTerminalId}/hosted-fields-sessions:
    post:
      tags:
        - Hosted Fields
      summary: Create session
      description: | 
        Use this method to create a session token that you use to authenticate a Hosted Fields session. When you create an instance of Hosted Fields on a webpage, include the session token in the config object.  
      
        For more information about how to set up Hosted Fields, see [Set up Hosted Fields](https://docs.payroc.com/guides/integrate/hosted-fields/set-up-hosted-fields).  

        **Note:** You need to generate a new session token each time you load Hosted Fields on a webpage.
      operationId: createSession
      parameters:
        - $ref: ../../../common/parameters/idempotency-key-v1.yaml#/components/parameters/idempotencyKey
        - $ref: ../../../common/parameters/processing-terminal-id-v1.yaml#/components/parameters/processingTerminalIdPath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hostedFieldsCreateSessionRequest'
            examples:
              createSessionRequest:
                $ref: './example-requests-v1.yaml#/components/examples/createSessionRequest'
        required: true
      responses:
        '201':
          description: Successful request. We created the session and returned a session token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hostedFieldsCreateSessionResponse'
              examples:
                createSessionResponse:
                  $ref: './example-responses-v1.yaml#/components/examples/createSessionResponse'
          headers:
            location:
              $ref: '../../../common/headers/location-v1.yaml#/components/headers/location'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '../../../common/responses/errors/400-v1.yaml#/components/schemas/400'
              examples:
                validationError:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/validatorError'
                idempotentKeyMissing:
                  $ref: '../../../common/responses/errors/400-v1.yaml#/components/examples/idempotentKeyMissing'
                idempotentKeyInUse:
                  $ref: '../../../common/responses/errors/409-v1.yaml#/components/examples/idempotentKeyInUse'
        '401':
          $ref: ../../../common/responses/errors/401-v1.yaml#/components/responses/401
        '403':
          $ref: ../../../common/responses/errors/403-v1.yaml#/components/responses/403
        '406':
          $ref: ../../../common/responses/errors/406-v1.yaml#/components/responses/406
        '409':
          $ref: ../../../common/responses/errors/409-v1.yaml#/components/responses/409
        '415':
          $ref: ../../../common/responses/errors/415-v1.yaml#/components/responses/415
        '500':
          $ref: ../../../common/responses/errors/500-v1.yaml#/components/responses/500
  
components:
  schemas:
    hostedFieldsCreateSessionRequest:
      required:
        - libVersion
        - scenario
      type: object
      title: Hosted Fields Initialization
      description: Object that contains information about Hosted Fields initialization request.
      properties:
        libVersion:
          type: string
          pattern: '^\d{1,2}.\d{1,2}.\d{1,2}(?:-beta)?.\d+$'
          description: | 
            Version of the Hosted Fields JavaScript library that you are using.  
            
            The current production version is `1.6.0.172441`.

          example: '1.6.0.172441'
        scenario:
          type: string
          enum:
            - payment
            - tokenization
          description: | 
            Indicates if a merchant wants to take a payment or tokenize a customer's payment details:  
            - `payment` - The merchant wants to take a payment immediately.  
            - `tokenization` - The merchant wants to save the customer's payment details to take a payment later or to update a customer's payment details that they've already saved.  

          example: payment
        secureTokenId:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Unique identifier that represents a customer's payment details.  

            If a merchant wants to update a customer's payment details that are linked to a secure token, include the secureTokenId in your request.  

          example: MREF_abc1de23-f4a5-6789-bcd0-12e345678901fa
 
    hostedFieldsCreateSessionResponse:
      required:
        - processingTerminalId
        - token
        - expiresAt
      type: object
      properties:
        processingTerminalId:
          type: string
          description: Unique identifier that we assigned to the terminal.
        token:
          type: string
          description: |
            Token that our gateway assigned to the Hosted Fields session.  

            Include this session token in the config file for Hosted Fields.  

            The session token expires after 10 minutes.

          example: abcdef1234567890abcdef1234567890
        expiresAt:
          type: string
          format: date-time
          readOnly: true
          description: Date and time that the token expires. We return this value in the
            ISO 8601 format.
          example: '2025-07-02T15:30:00.000+02:00'
    
  securitySchemes:
    bearerAuth:
      type: http
      description: 'Example: Authorization: Bearer <token>'
      scheme: bearer
      bearerFormat: JWT
