{
  "x-generator": "NSwag v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Squidex API",
    "version": "1.0.0.0",
    "x-logo": {
      "url": "https://localhost:5001/images/logo-white.png",
      "backgroundStyle": "",
      "backgroundColor": "#3f83df"
    }
  },
  "servers": [
    {
      "url": "https://localhost:5001"
    }
  ],
  "paths": {
    "/api/user-management": {
      "get": {
        "tags": ["UserManagement"],
        "summary": "Get users by query.",
        "operationId": "UserManagement_GetUsers",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Optional query to search by email address or username.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of users to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of users to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.read"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "getUsers"
      },
      "post": {
        "tags": ["UserManagement"],
        "summary": "Create a new user.",
        "operationId": "UserManagement_PostUser",
        "requestBody": {
          "x-name": "request",
          "description": "The user object that needs to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "User request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.create"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "postUser"
      }
    },
    "/api/user-management/{id}": {
      "get": {
        "tags": ["UserManagement"],
        "summary": "Get a user by ID.",
        "operationId": "UserManagement_GetUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.read"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "getUser"
      },
      "put": {
        "tags": ["UserManagement"],
        "summary": "Update a user.",
        "operationId": "UserManagement_PutUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The user object that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "User request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.update"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "putUser"
      },
      "delete": {
        "tags": ["UserManagement"],
        "summary": "Delete a User.",
        "operationId": "UserManagement_DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "403": {
            "description": "User is the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.unlock"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "deleteUser"
      }
    },
    "/api/user-management/{id}/lock": {
      "put": {
        "tags": ["UserManagement"],
        "summary": "Lock a user.",
        "operationId": "UserManagement_LockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to lock.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "403": {
            "description": "User is the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.lock"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "lockUser"
      }
    },
    "/api/user-management/{id}/unlock": {
      "put": {
        "tags": ["UserManagement"],
        "summary": "Unlock a user.",
        "operationId": "UserManagement_UnlockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unlock.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User unlocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "403": {
            "description": "User is the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.users.unlock"]
          }
        ],
        "x-fern-sdk-group-name": "userManagement",
        "x-fern-sdk-method-name": "unlockUser"
      }
    },
    "/api": {
      "get": {
        "tags": ["Users"],
        "summary": "Get the user resources.",
        "operationId": "Users_GetUserResources",
        "responses": {
          "200": {
            "description": "User resources returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcesDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "users",
        "x-fern-sdk-method-name": "getUserResources"
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get users by query.",
        "description": "Search the user by query that contains the email address or the part of the email address.",
        "operationId": "Users_GetUsers",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The query to search the user by email address. Case invariant.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "users",
        "x-fern-sdk-method-name": "getUsers"
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by id.",
        "operationId": "Users_GetUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user (GUID).",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "users",
        "x-fern-sdk-method-name": "getUser"
      }
    },
    "/api/users/{id}/picture": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user picture by id.",
        "operationId": "Users_GetUserPicture",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user (GUID).",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User found and image or fallback returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "users",
        "x-fern-sdk-method-name": "getUserPicture"
      }
    },
    "/api/apps/{app}/translations": {
      "post": {
        "tags": ["Translations"],
        "summary": "Translate a text.",
        "operationId": "Translations_PostTranslation",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The translation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranslateDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Text translated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.translate"]
          }
        ],
        "x-fern-sdk-group-name": "translations",
        "x-fern-sdk-method-name": "postTranslation"
      }
    },
    "/api/templates": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get all templates.",
        "operationId": "Templates_GetTemplates",
        "responses": {
          "200": {
            "description": "Templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "templates",
        "x-fern-sdk-method-name": "getTemplates"
      }
    },
    "/api/templates/{name}": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get template details.",
        "operationId": "Templates_GetTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the template.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Template returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "Template not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "templates",
        "x-fern-sdk-method-name": "getTemplate"
      }
    },
    "/api/teams/{team}/contributors": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get team contributors.",
        "operationId": "TeamContributors_GetContributors",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Contributors returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.contributors.read"]
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "getContributors"
      },
      "post": {
        "tags": ["Teams"],
        "summary": "Assign contributor to team.",
        "operationId": "TeamContributors_PostContributor",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Contributor object that needs to be added to the team.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignContributorDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Contributor assigned to team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "400": {
            "description": "Contributor request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.contributors.assign"]
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "postContributor"
      }
    },
    "/api/teams/{team}/contributors/me": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Remove yourself.",
        "operationId": "TeamContributors_DeleteMyself",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Contributor removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "Contributor or team not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "deleteMyself"
      }
    },
    "/api/teams/{team}/contributors/{id}": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Remove contributor.",
        "operationId": "TeamContributors_DeleteContributor",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the contributor.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Contributor removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "Contributor or team not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.contributors.revoke"]
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "deleteContributor"
      }
    },
    "/api/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get your teams.",
        "description": "You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow).\nYou will retrieve all teams, where you are assigned as a contributor.",
        "operationId": "Teams_GetTeams",
        "responses": {
          "200": {
            "description": "Teams returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "getTeams"
      },
      "post": {
        "tags": ["Teams"],
        "summary": "Create a new team.",
        "description": "You can only create an team when you are authenticated as a user (OpenID implicit flow).\nYou will be assigned as owner of the new team automatically.",
        "operationId": "Teams_PostTeam",
        "requestBody": {
          "x-name": "request",
          "description": "The team object that needs to be added to Squidex.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Team created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          },
          "400": {
            "description": "Team request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Team name is already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "postTeam"
      }
    },
    "/api/teams/{team}": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get an team by name.",
        "operationId": "Teams_GetTeam",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The name of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Teams returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "getTeam"
      },
      "put": {
        "tags": ["Teams"],
        "summary": "Update the team.",
        "operationId": "Teams_PutTeam",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The name of the team to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Team updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          },
          "400": {
            "description": "Team request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.update"]
          }
        ],
        "x-fern-sdk-group-name": "teams",
        "x-fern-sdk-method-name": "putTeam"
      }
    },
    "/api/apps/{app}/usages/log": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get api calls as log file.",
        "operationId": "Usages_GetLog",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Usage tracking results returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogDownloadDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getLog"
      }
    },
    "/api/apps/{app}/usages/calls/{fromDate}/{toDate}": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get api calls in date range.",
        "operationId": "Usages_GetUsages",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The from date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 2
          },
          {
            "name": "toDate",
            "in": "path",
            "required": true,
            "description": "The to date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "API call returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsUsageDtoDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getUsages"
      }
    },
    "/api/teams/{team}/usages/calls/{fromDate}/{toDate}": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get api calls in date range for team.",
        "operationId": "Usages_GetUsagesForTeam",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The name of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The from date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 2
          },
          {
            "name": "toDate",
            "in": "path",
            "required": true,
            "description": "The to date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "API call returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsUsageDtoDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getUsagesForTeam"
      }
    },
    "/api/apps/{app}/usages/storage/today": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get total asset size.",
        "operationId": "Usages_GetCurrentStorageSize",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Storage usage returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentStorageDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getCurrentStorageSize"
      }
    },
    "/api/teams/{team}/usages/storage/today": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get total asset size by team.",
        "operationId": "Usages_GetTeamCurrentStorageSizeForTeam",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Storage usage returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentStorageDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getTeamCurrentStorageSizeForTeam"
      }
    },
    "/api/apps/{app}/usages/storage/{fromDate}/{toDate}": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get asset usage by date.",
        "operationId": "Usages_GetStorageSizes",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The from date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 2
          },
          {
            "name": "toDate",
            "in": "path",
            "required": true,
            "description": "The to date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Storage usage returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageUsagePerDateDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getStorageSizes"
      }
    },
    "/api/teams/{team}/usages/storage/{fromDate}/{toDate}": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get asset usage by date for team.",
        "operationId": "Usages_GetStorageSizesForTeam",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The from date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 2
          },
          {
            "name": "toDate",
            "in": "path",
            "required": true,
            "description": "The to date.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Storage usage returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageUsagePerDateDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.usage"]
          }
        ],
        "x-fern-sdk-group-name": "statistics",
        "x-fern-sdk-method-name": "getStorageSizesForTeam"
      }
    },
    "/api/apps/{app}/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Get search results.",
        "operationId": "Search_GetSearchResults",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResultDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.search"]
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "getSearchResults"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields": {
      "post": {
        "tags": ["Schemas"],
        "summary": "Add a schema field.",
        "operationId": "SchemaFields_PostField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The field object that needs to be added to the schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFieldDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Schema field created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "409": {
            "description": "Schema field name already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "postField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested": {
      "post": {
        "tags": ["Schemas"],
        "summary": "Add a nested field.",
        "operationId": "SchemaFields_PostNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The field object that needs to be added to the schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFieldDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "201": {
            "description": "Schema field created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Schema field name already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "postNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/ui": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Configure UI fields.",
        "operationId": "SchemaFields_PutSchemaUIFields",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request that contains the field names.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureUIFieldsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema UI fields defined.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putSchemaUIFields"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/ordering": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Reorder all fields.",
        "operationId": "SchemaFields_PutSchemaFieldOrdering",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request that contains the field ids.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderFieldsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema fields reordered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putSchemaFieldOrdering"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Reorder all nested fields.",
        "operationId": "SchemaFields_PutNestedFieldOrdering",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request that contains the field ids.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderFieldsDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Schema fields reordered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putNestedFieldOrdering"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update a schema field.",
        "operationId": "SchemaFields_PutField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to update.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The field object that needs to be added to the schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFieldDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Schema field updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putField"
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Delete a schema field.",
        "operationId": "SchemaFields_DeleteField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to disable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "deleteField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update a nested field.",
        "operationId": "SchemaFields_PutNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to update.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The field object that needs to be added to the schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFieldDto"
              }
            }
          },
          "required": true,
          "x-position": 5
        },
        "responses": {
          "200": {
            "description": "Schema field updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putNestedField"
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Delete a nested field.",
        "operationId": "SchemaFields_DeleteNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to disable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "deleteNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}/lock": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Lock a schema field.",
        "description": "A locked field cannot be updated or deleted.",
        "operationId": "SchemaFields_LockField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to lock.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field shown.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "lockField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Lock a nested field.",
        "description": "A locked field cannot be edited or deleted.",
        "operationId": "SchemaFields_LockNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to lock.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field hidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Field, schema, or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "lockNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}/hide": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Hide a schema field.",
        "description": "A hidden field is not part of the API response, but can still be edited in the portal.",
        "operationId": "SchemaFields_HideField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to hide.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field hidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "hideField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Hide a nested field.",
        "description": "A hidden field is not part of the API response, but can still be edited in the portal.",
        "operationId": "SchemaFields_HideNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to hide.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field hidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Field, schema, or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "hideNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}/show": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Show a schema field.",
        "description": "A hidden field is not part of the API response, but can still be edited in the portal.",
        "operationId": "SchemaFields_ShowField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to show.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field shown.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "showField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Show a nested field.",
        "description": "A hidden field is not part of the API response, but can still be edited in the portal.",
        "operationId": "SchemaFields_ShowNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to show.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field shown.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "showNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}/enable": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Enable a schema field.",
        "description": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
        "operationId": "SchemaFields_EnableField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to enable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "enableField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Enable a nested field.",
        "description": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
        "operationId": "SchemaFields_EnableNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to enable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "enableNestedField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{id}/disable": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Disable a schema field.",
        "description": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
        "operationId": "SchemaFields_DisableField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to disable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "disableField"
      }
    },
    "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Disable a nested field.",
        "description": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
        "operationId": "SchemaFields_DisableNestedField",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "description": "The parent field id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the field to disable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Schema field disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema field request not valid or field locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema, field or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "disableNestedField"
      }
    },
    "/api/apps/{app}/schemas": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Get schemas.",
        "operationId": "Schemas_GetSchemas",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Schemas returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.read"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "getSchemas"
      },
      "post": {
        "tags": ["Schemas"],
        "summary": "Create a new schema.",
        "operationId": "Schemas_PostSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Schema created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Schema name already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.create"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "postSchema"
      }
    },
    "/api/apps/{app}/schemas/{schema}": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Get a schema by name.",
        "operationId": "Schemas_GetSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema to retrieve.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Schema found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.read"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "getSchema"
      },
      "put": {
        "tags": ["Schemas"],
        "summary": "Update a schema.",
        "operationId": "Schemas_PutSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchemaDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putSchema"
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Delete a schema.",
        "operationId": "Schemas_DeleteSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Schema deleted."
          },
          "404": {
            "description": "Schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.delete"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "deleteSchema"
      }
    },
    "/api/apps/{app}/schemas/{schema}/sync": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Synchronize a schema.",
        "operationId": "Schemas_PutSchemaSync",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynchronizeSchemaDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putSchemaSync"
      }
    },
    "/api/apps/{app}/schemas/{schema}/category": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update a schema category.",
        "operationId": "Schemas_PutCategory",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCategoryDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putCategory"
      }
    },
    "/api/apps/{app}/schemas/{schema}/preview-urls": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update the preview urls.",
        "operationId": "Schemas_PutPreviewUrls",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The preview urls for the schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurePreviewUrlsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putPreviewUrls"
      }
    },
    "/api/apps/{app}/schemas/{schema}/scripts": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update the scripts.",
        "operationId": "Schemas_PutScripts",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema scripts object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaScriptsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.scripts"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putScripts"
      }
    },
    "/api/apps/{app}/schemas/{schema}/rules": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Update the rules.",
        "operationId": "Schemas_PutRules",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema rules object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureFieldRulesDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Schema updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Schema request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.update"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "putRules"
      }
    },
    "/api/apps/{app}/schemas/{schema}/publish": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Publish a schema.",
        "operationId": "Schemas_PublishSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema to publish.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Schema published.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.publish"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "publishSchema"
      }
    },
    "/api/apps/{app}/schemas/{schema}/unpublish": {
      "put": {
        "tags": ["Schemas"],
        "summary": "Unpublish a schema.",
        "operationId": "Schemas_UnpublishSchema",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema to unpublish.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Schema unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.schemas.{schema}.publish"]
          }
        ],
        "x-fern-sdk-group-name": "schemas",
        "x-fern-sdk-method-name": "unpublishSchema"
      }
    },
    "/api/rules/actions": {
      "get": {
        "tags": ["Rules"],
        "summary": "Get supported rule actions.",
        "operationId": "Rules_GetActions",
        "responses": {
          "200": {
            "description": "Rule actions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RuleElementDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "getActions"
      }
    },
    "/api/apps/{app}/rules": {
      "get": {
        "tags": ["Rules"],
        "summary": "Get rules.",
        "operationId": "Rules_GetRules",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.read"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "getRules"
      },
      "post": {
        "tags": ["Rules"],
        "summary": "Create a new rule.",
        "operationId": "Rules_PostRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The rule object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Rule created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDto"
                }
              }
            }
          },
          "400": {
            "description": "Rule request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.create"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "postRule"
      }
    },
    "/api/apps/{app}/rules/run": {
      "delete": {
        "tags": ["Rules"],
        "summary": "Cancel the current run.",
        "operationId": "Rules_DeleteRuleRun",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule run cancelled."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.update"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "deleteRuleRun"
      }
    },
    "/api/apps/{app}/rules/{id}": {
      "put": {
        "tags": ["Rules"],
        "summary": "Update a rule.",
        "operationId": "Rules_PutRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The rule object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRuleDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Rule updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDto"
                }
              }
            }
          },
          "400": {
            "description": "Rule request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Rule or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.update"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "putRule"
      },
      "delete": {
        "tags": ["Rules"],
        "summary": "Delete a rule.",
        "operationId": "Rules_DeleteRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Rule deleted."
          },
          "404": {
            "description": "Rule or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.delete"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "deleteRule"
      }
    },
    "/api/apps/{app}/rules/{id}/enable": {
      "put": {
        "tags": ["Rules"],
        "summary": "Enable a rule.",
        "operationId": "Rules_EnableRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to enable.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Rule enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDto"
                }
              }
            }
          },
          "404": {
            "description": "Rule or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.disable"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "enableRule"
      }
    },
    "/api/apps/{app}/rules/{id}/disable": {
      "put": {
        "tags": ["Rules"],
        "summary": "Disable a rule.",
        "operationId": "Rules_DisableRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to disable.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Rule disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDto"
                }
              }
            }
          },
          "404": {
            "description": "Rule or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.disable"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "disableRule"
      }
    },
    "/api/apps/{app}/rules/{id}/trigger": {
      "put": {
        "tags": ["Rules"],
        "summary": "Trigger a rule.",
        "operationId": "Rules_TriggerRule",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to disable.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Rule triggered."
          },
          "404": {
            "description": "Rule or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.run"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "triggerRule"
      }
    },
    "/api/apps/{app}/rules/{id}/run": {
      "put": {
        "tags": ["Rules"],
        "summary": "Run a rule.",
        "operationId": "Rules_PutRuleRun",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to run.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "fromSnapshots",
            "in": "query",
            "description": "Runs the rule from snapeshots if possible.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Rule started."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.run"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "putRuleRun"
      }
    },
    "/api/apps/{app}/rules/{id}/events": {
      "delete": {
        "tags": ["Rules"],
        "summary": "Cancels all rule events.",
        "operationId": "Rules_DeleteRuleEvents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to cancel.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Rule events cancelled."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.delete"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "deleteRuleEvents"
      }
    },
    "/api/apps/{app}/rules/simulate": {
      "post": {
        "tags": ["Rules"],
        "summary": "Simulate a rule.",
        "operationId": "Rules_SimulatePOST",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The rule to simulate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Rule simulated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulatedRuleEventsDto"
                }
              }
            }
          },
          "404": {
            "description": "Rule or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.read"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "simulatePOST"
      }
    },
    "/api/apps/{app}/rules/{id}/simulate": {
      "get": {
        "tags": ["Rules"],
        "summary": "Simulate a rule.",
        "operationId": "Rules_SimulateGET",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the rule to simulate.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Rule simulated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulatedRuleEventsDto"
                }
              }
            }
          },
          "404": {
            "description": "Rule or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.read"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "simulateGET"
      }
    },
    "/api/apps/{app}/rules/events": {
      "get": {
        "tags": ["Rules"],
        "summary": "Get rule events.",
        "operationId": "Rules_GetEvents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "ruleId",
            "in": "query",
            "description": "The optional rule id to filter to events.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of events to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of events to take.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Rule events returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleEventsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.read"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "getEvents"
      },
      "delete": {
        "tags": ["Rules"],
        "summary": "Cancels all events.",
        "operationId": "Rules_DeleteEvents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "204": {
            "description": "Events cancelled."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.delete"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "deleteEvents"
      }
    },
    "/api/apps/{app}/rules/events/{id}": {
      "put": {
        "tags": ["Rules"],
        "summary": "Retry the event immediately.",
        "operationId": "Rules_PutEvent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The event to enqueue.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Rule enqueued."
          },
          "404": {
            "description": "App or rule event not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.update"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "putEvent"
      },
      "delete": {
        "tags": ["Rules"],
        "summary": "Cancels an event.",
        "operationId": "Rules_DeleteEvent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The event to enqueue.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Rule deqeued."
          },
          "404": {
            "description": "App or rule event not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.rules.events.delete"]
          }
        ],
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "deleteEvent"
      }
    },
    "/api/rules/eventtypes": {
      "get": {
        "tags": ["Rules"],
        "summary": "Provide a list of all event types that are used in rules.",
        "operationId": "Rules_GetEventTypes",
        "responses": {
          "200": {
            "description": "Rule events returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "getEventTypes"
      }
    },
    "/api/rules/eventtypes/{type}": {
      "get": {
        "tags": ["Rules"],
        "summary": "Provide the json schema for the event with the specified name.",
        "operationId": "Rules_GetEventSchema",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The type name of the event.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Rule event type found.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Rule event not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "rules",
        "x-fern-sdk-method-name": "getEventSchema"
      }
    },
    "/api/apps/{app}/plans": {
      "get": {
        "tags": ["Plans"],
        "summary": "Get app plan information.",
        "operationId": "AppPlans_GetPlans",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "App plan information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlansDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.plans.read"]
          }
        ],
        "x-fern-sdk-group-name": "plans",
        "x-fern-sdk-method-name": "getPlans"
      }
    },
    "/api/apps/{app}/plan": {
      "put": {
        "tags": ["Plans"],
        "summary": "Change the app plan.",
        "operationId": "AppPlans_PutPlan",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Plan object that needs to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePlanDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Plan changed or redirect url returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanChangedDto"
                }
              }
            }
          },
          "400": {
            "description": "Plan not owned by user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.plans.change"]
          }
        ],
        "x-fern-sdk-group-name": "plans",
        "x-fern-sdk-method-name": "putPlan"
      }
    },
    "/api/teams/{team}/plans": {
      "get": {
        "tags": ["Plans"],
        "summary": "Get team plan information.",
        "operationId": "TeamPlans_GetTeamPlans",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The name of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Team plan information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlansDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.plans.read"]
          }
        ],
        "x-fern-sdk-group-name": "plans",
        "x-fern-sdk-method-name": "getTeamPlans"
      }
    },
    "/api/teams/{team}/plan": {
      "put": {
        "tags": ["Plans"],
        "summary": "Change the team plan.",
        "operationId": "TeamPlans_PutTeamPlan",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The name of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Plan object that needs to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePlanDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Plan changed or redirect url returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanChangedDto"
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.plans.change"]
          }
        ],
        "x-fern-sdk-group-name": "plans",
        "x-fern-sdk-method-name": "putTeamPlan"
      }
    },
    "/api/info": {
      "get": {
        "tags": ["Ping"],
        "summary": "Get API information.",
        "operationId": "Ping_GetInfo",
        "responses": {
          "200": {
            "description": "Infos returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposedValues"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "ping",
        "x-fern-sdk-method-name": "getInfo"
      }
    },
    "/api/ping": {
      "get": {
        "tags": ["Ping"],
        "summary": "Get ping status of the API.",
        "description": "Can be used to test, if the Squidex API is alive and responding.",
        "operationId": "Ping_GetPing",
        "responses": {
          "204": {
            "description": "Service ping successful."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "ping",
        "x-fern-sdk-method-name": "getPing"
      }
    },
    "/api/ping/{app}": {
      "get": {
        "tags": ["Ping"],
        "summary": "Get ping status.",
        "description": "Can be used to test, if the Squidex API is alive and responding.",
        "operationId": "Ping_GetAppPing",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "204": {
            "description": "Service ping successful."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.ping"]
          }
        ],
        "x-fern-sdk-group-name": "ping",
        "x-fern-sdk-method-name": "getAppPing"
      }
    },
    "/api/news/features": {
      "get": {
        "tags": ["News"],
        "summary": "Get features since version.",
        "operationId": "News_GetNews",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The latest received version.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Latest features returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "news",
        "x-fern-sdk-method-name": "getNews"
      }
    },
    "/api/languages": {
      "get": {
        "tags": ["Languages"],
        "summary": "Get supported languages.",
        "description": "Provide a list of supported language codes, following the ISO2Code standard.",
        "operationId": "Languages_GetLanguages",
        "responses": {
          "200": {
            "description": "Supported language codes returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguageDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "languages",
        "x-fern-sdk-method-name": "getLanguages"
      }
    },
    "/api/apps/{app}/history": {
      "get": {
        "tags": ["History"],
        "summary": "Get historical events.",
        "operationId": "History_GetAppHistory",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The name of the channel.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Events returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryEventDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.history"]
          }
        ],
        "x-fern-sdk-group-name": "history",
        "x-fern-sdk-method-name": "getAppHistory"
      }
    },
    "/api/teams/{team}/history": {
      "get": {
        "tags": ["History"],
        "summary": "Get historical events for a team.",
        "operationId": "History_GetTeamHistory",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The name of the channel.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Events returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryEventDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Team not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.teams.{team}.history"]
          }
        ],
        "x-fern-sdk-group-name": "history",
        "x-fern-sdk-method-name": "getTeamHistory"
      }
    },
    "/api/event-consumers": {
      "get": {
        "tags": ["EventConsumers"],
        "summary": "Get event consumers.",
        "operationId": "EventConsumers_GetEventConsumers",
        "responses": {
          "200": {
            "description": "Event consumers returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConsumersDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.events.read"]
          }
        ],
        "x-fern-sdk-group-name": "eventConsumers",
        "x-fern-sdk-method-name": "getEventConsumers"
      }
    },
    "/api/event-consumers/{consumerName}/start": {
      "put": {
        "tags": ["EventConsumers"],
        "summary": "Start an event consumer.",
        "operationId": "EventConsumers_StartEventConsumer",
        "parameters": [
          {
            "name": "consumerName",
            "in": "path",
            "required": true,
            "description": "The name of the event consumer.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Event consumer started asynchronously.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConsumerDto"
                }
              }
            }
          },
          "404": {
            "description": "Event consumer not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.events.manage"]
          }
        ],
        "x-fern-sdk-group-name": "eventConsumers",
        "x-fern-sdk-method-name": "startEventConsumer"
      }
    },
    "/api/event-consumers/{consumerName}/stop": {
      "put": {
        "tags": ["EventConsumers"],
        "summary": "Stop an event consumer.",
        "operationId": "EventConsumers_StopEventConsumer",
        "parameters": [
          {
            "name": "consumerName",
            "in": "path",
            "required": true,
            "description": "The name of the event consumer.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Event consumer stopped asynchronously.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConsumerDto"
                }
              }
            }
          },
          "404": {
            "description": "Event consumer not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.events.manage"]
          }
        ],
        "x-fern-sdk-group-name": "eventConsumers",
        "x-fern-sdk-method-name": "stopEventConsumer"
      }
    },
    "/api/event-consumers/{consumerName}/reset": {
      "put": {
        "tags": ["EventConsumers"],
        "summary": "Reset an event consumer.",
        "operationId": "EventConsumers_ResetEventConsumer",
        "parameters": [
          {
            "name": "consumerName",
            "in": "path",
            "required": true,
            "description": "The name of the event consumer.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Event consumer resetted asynchronously.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConsumerDto"
                }
              }
            }
          },
          "404": {
            "description": "Event consumer not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.events.manage"]
          }
        ],
        "x-fern-sdk-group-name": "eventConsumers",
        "x-fern-sdk-method-name": "resetEventConsumer"
      }
    },
    "/api/diagnostics/dump": {
      "get": {
        "tags": ["Diagnostics"],
        "summary": "Creates a dump and writes it into storage..",
        "operationId": "Diagnostics_GetDump",
        "responses": {
          "204": {
            "description": "Dump created successful."
          },
          "501": {
            "description": "Not configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.*"]
          }
        ],
        "x-fern-sdk-group-name": "diagnostics",
        "x-fern-sdk-method-name": "getDump"
      }
    },
    "/api/diagnostics/gcdump": {
      "get": {
        "tags": ["Diagnostics"],
        "summary": "Creates a gc dump and writes it into storage.",
        "operationId": "Diagnostics_GetGCDump",
        "responses": {
          "204": {
            "description": "Dump created successful."
          },
          "501": {
            "description": "Not configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.*"]
          }
        ],
        "x-fern-sdk-group-name": "diagnostics",
        "x-fern-sdk-method-name": "getGCDump"
      }
    },
    "/api/content/{app}/{schema}": {
      "get": {
        "tags": ["Contents"],
        "summary": "Queries contents.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetContents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The optional ids of the content to fetch.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "q",
            "in": "query",
            "description": "The optional json query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Contents returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getContents"
      },
      "post": {
        "tags": ["Contents"],
        "summary": "Create a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PostContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "status",
            "in": "query",
            "description": "The initial status.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "id",
            "in": "query",
            "description": "The optional custom content id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "publish",
            "in": "query",
            "description": "True to automatically publish the content.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "x-name": "Data",
          "description": "The full data for the content item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Content created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.create"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "postContent"
      }
    },
    "/api/content/{app}/{schema}/query": {
      "post": {
        "tags": ["Contents"],
        "summary": "Queries contents.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetContentsPost",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "query",
          "description": "The required query object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Contents returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getContentsPost"
      }
    },
    "/api/content/{app}/{schema}/{id}": {
      "get": {
        "tags": ["Contents"],
        "summary": "Get a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to fetch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "version",
            "in": "query",
            "description": "The optional version.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": -2
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Content returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getContent"
      },
      "post": {
        "tags": ["Contents"],
        "summary": "Upsert a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PostUpsertContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "status",
            "in": "query",
            "description": "The initial status.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "patch",
            "in": "query",
            "description": "Makes the update as patch.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 6
          },
          {
            "name": "publish",
            "in": "query",
            "description": "True to automatically publish the content.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "requestBody": {
          "x-name": "Data",
          "description": "The full data for the content item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Content created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content references, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.upsert"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "postUpsertContent"
      },
      "put": {
        "tags": ["Contents"],
        "summary": "Update a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PutContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The full data for the content item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Content updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content references, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.update.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "putContent"
      },
      "patch": {
        "tags": ["Contents"],
        "summary": "Patchs a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PatchContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to patch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patch for the content item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Content patched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.update.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "patchContent"
      },
      "delete": {
        "tags": ["Contents"],
        "summary": "Delete a content item.",
        "description": "You can create an generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_DeleteContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "checkReferrers",
            "in": "query",
            "description": "True to check referrers of this content.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "True to delete the content permanently.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "204": {
            "description": "Content deleted."
          },
          "400": {
            "description": "Content cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.delete.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "deleteContent"
      }
    },
    "/api/content/{app}/{schema}/{id}/validity": {
      "get": {
        "tags": ["Contents"],
        "summary": "Get a content item validity.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetContentValidity",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to fetch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Content is valid."
          },
          "400": {
            "description": "Content not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getContentValidity"
      }
    },
    "/api/content/{app}/{schema}/{id}/references": {
      "get": {
        "tags": ["Contents"],
        "summary": "Get all references of a content.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetReferences",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to fetch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "q",
            "in": "query",
            "description": "The optional json query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Contents returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getReferences"
      }
    },
    "/api/content/{app}/{schema}/{id}/referencing": {
      "get": {
        "tags": ["Contents"],
        "summary": "Get a referencing contents of a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetReferencing",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to fetch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "q",
            "in": "query",
            "description": "The optional json query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Content returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getReferencing"
      }
    },
    "/api/content/{app}/{schema}/{id}/{version}": {
      "get": {
        "tags": ["Contents"],
        "summary": "Get a content by version.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_GetContentVersion",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to fetch.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version fo the content to fetch.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Content version returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.read.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "getContentVersion"
      }
    },
    "/api/content/{app}/{schema}/import": {
      "post": {
        "tags": ["Contents"],
        "summary": "Import content items.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PostContents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The import request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportContentsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Contents created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content references, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.create"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "postContents"
      }
    },
    "/api/content/{app}/{schema}/bulk": {
      "post": {
        "tags": ["Contents"],
        "summary": "Bulk update content items.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_BulkUpdateContents",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The bulk update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateContentsDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Contents request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Contents references, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.read.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "bulkUpdateContents"
      }
    },
    "/api/content/{app}/{schema}/{id}/status": {
      "put": {
        "tags": ["Contents"],
        "summary": "Change status of a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_PutContentStatus",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to change.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The status request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Content status changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.changestatus.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "putContentStatus"
      },
      "delete": {
        "tags": ["Contents"],
        "summary": "Cancel status change of a content item.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_DeleteContentStatus",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to cancel.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Content status change cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "400": {
            "description": "Content request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.changestatus.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "deleteContentStatus"
      }
    },
    "/api/content/{app}/{schema}/{id}/draft": {
      "post": {
        "tags": ["Contents"],
        "summary": "Create a new draft version.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_CreateDraft",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to create the draft for.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Content draft created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.version.create.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "createDraft"
      },
      "delete": {
        "tags": ["Contents"],
        "summary": "Delete the draft version.",
        "description": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
        "operationId": "Contents_DeleteVersion",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content item to delete the draft from.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Content draft deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsDto"
                }
              }
            }
          },
          "404": {
            "description": "Content, schema or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contents.{schema}.version.delete.own"]
          }
        ],
        "x-fern-sdk-group-name": "contents",
        "x-fern-sdk-method-name": "deleteVersion"
      }
    },
    "/api/apps/{app}/watching/{resource}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all watching users..",
        "operationId": "Comments_GetWatchingUsers",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "description": "The path to the resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Watching users returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "comments",
        "x-fern-sdk-method-name": "getWatchingUsers"
      }
    },
    "/api/apps/{app}/comments/{commentsId}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all comments.",
        "description": "When passing in a version you can retrieve all updates since then.",
        "operationId": "Comments_GetComments",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "commentsId",
            "in": "path",
            "required": true,
            "description": "The ID of the comments.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": -2
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Comments returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.comments.read"]
          }
        ],
        "x-fern-sdk-group-name": "comments",
        "x-fern-sdk-method-name": "getComments"
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Create a new comment.",
        "operationId": "Comments_PostComment",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "commentsId",
            "in": "path",
            "required": true,
            "description": "The ID of the comments.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The comment object that needs to created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCommentDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Comment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          },
          "400": {
            "description": "Comment request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.comments.create"]
          }
        ],
        "x-fern-sdk-group-name": "comments",
        "x-fern-sdk-method-name": "postComment"
      }
    },
    "/api/apps/{app}/comments/{commentsId}/{commentId}": {
      "put": {
        "tags": ["Comments"],
        "summary": "Update a comment.",
        "operationId": "Comments_PutComment",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "commentsId",
            "in": "path",
            "required": true,
            "description": "The ID of the comments.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "The ID of the comment.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The comment object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCommentDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "204": {
            "description": "Comment updated."
          },
          "400": {
            "description": "Comment request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Comment or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.comments.update"]
          }
        ],
        "x-fern-sdk-group-name": "comments",
        "x-fern-sdk-method-name": "putComment"
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment.",
        "operationId": "Comments_DeleteComment",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "commentsId",
            "in": "path",
            "required": true,
            "description": "The ID of the comments.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "The ID of the comment.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted."
          },
          "404": {
            "description": "Comment or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.comments.delete"]
          }
        ],
        "x-fern-sdk-group-name": "comments",
        "x-fern-sdk-method-name": "deleteComment"
      }
    },
    "/api/users/{userId}/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get all notifications.",
        "description": "When passing in a version you can retrieve all updates since then.",
        "operationId": "UserNotifications_GetNotifications",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user id.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": -2
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "All comments returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "notifications",
        "x-fern-sdk-method-name": "getNotifications"
      }
    },
    "/api/users/{userId}/notifications/{commentId}": {
      "delete": {
        "tags": ["Notifications"],
        "summary": "Delete a notification.",
        "operationId": "UserNotifications_DeleteComment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user id.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "The ID of the comment.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted."
          },
          "404": {
            "description": "Comment not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "notifications",
        "x-fern-sdk-method-name": "deleteComment"
      }
    },
    "/api/apps/{app}/backups/{id}": {
      "get": {
        "tags": ["Backups"],
        "summary": "Get the backup content.",
        "operationId": "BackupContent_GetBackupContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the backup.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Backup found and content returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Backup or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "getBackupContent"
      },
      "delete": {
        "tags": ["Backups"],
        "summary": "Delete a backup.",
        "operationId": "Backups_DeleteBackup",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the backup to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Backup deleted."
          },
          "404": {
            "description": "Backup or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.backups.delete"]
          }
        ],
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "deleteBackup"
      }
    },
    "/api/apps/backups/{id}": {
      "get": {
        "tags": ["Backups"],
        "summary": "Get the backup content.",
        "operationId": "BackupContent_GetBackupContentV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the backup.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "appId",
            "in": "query",
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "app",
            "in": "query",
            "description": "The name of the app.",
            "schema": {
              "type": "string",
              "default": ""
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Backup found and content returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Backup or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "getBackupContentV2"
      }
    },
    "/api/apps/{app}/backups": {
      "get": {
        "tags": ["Backups"],
        "summary": "Get all backup jobs.",
        "operationId": "Backups_GetBackups",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Backups returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupJobsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.backups.read"]
          }
        ],
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "getBackups"
      },
      "post": {
        "tags": ["Backups"],
        "summary": "Start a new backup.",
        "operationId": "Backups_PostBackup",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "204": {
            "description": "Backup started."
          },
          "400": {
            "description": "Backup contingent reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.backups.create"]
          }
        ],
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "postBackup"
      }
    },
    "/api/apps/restore": {
      "get": {
        "tags": ["Backups"],
        "summary": "Get current restore status.",
        "operationId": "Restore_GetRestoreJob",
        "responses": {
          "200": {
            "description": "Status returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreJobDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.restore"]
          }
        ],
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "getRestoreJob"
      },
      "post": {
        "tags": ["Backups"],
        "summary": "Restore a backup.",
        "operationId": "Restore_PostRestoreJob",
        "requestBody": {
          "x-name": "request",
          "description": "The backup to restore.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreRequestDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Restore operation started."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.admin.restore"]
          }
        ],
        "x-fern-sdk-group-name": "backups",
        "x-fern-sdk-method-name": "postRestoreJob"
      }
    },
    "/api/assets/{app}/{idOrSlug}/{more}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get the asset content.",
        "operationId": "AssetContent_GetAssetContentBySlug",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "idOrSlug",
            "in": "path",
            "required": true,
            "description": "The id or slug of the asset.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "version",
            "in": "query",
            "description": "The optional version of the asset.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration in seconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 0 to prevent download.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width of the asset, if it is an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height of the asset, if it is an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "quality",
            "in": "query",
            "description": "Optional image quality, it is is an jpeg image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode when the width and height is defined.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 9
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string"
            },
            "x-position": 10
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "Override the y focus point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "Override the x focus point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "nofocus",
            "in": "query",
            "description": "True to ignore the asset focus point if any.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          },
          {
            "name": "auto",
            "in": "query",
            "description": "True to use auto format.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 14
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to force a new resize even if it already stored.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 15
          },
          {
            "name": "format",
            "in": "query",
            "description": "True to force a new resize even if it already stored.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ImageFormat"
            },
            "x-position": 16
          },
          {
            "name": "more",
            "in": "path",
            "required": true,
            "description": "Optional suffix that can be used to seo-optimize the link to the image Has not effect.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "description": "Asset found and content or (resized) image returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAssetContentBySlug"
      }
    },
    "/api/assets/{id}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get the asset content.",
        "operationId": "AssetContent_GetAssetContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "version",
            "in": "query",
            "description": "The optional version of the asset.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 2
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration in seconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 0 to prevent download.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width of the asset, if it is an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height of the asset, if it is an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "quality",
            "in": "query",
            "description": "Optional image quality, it is is an jpeg image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode when the width and height is defined.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 8
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string"
            },
            "x-position": 9
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "Override the y focus point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "Override the x focus point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "nofocus",
            "in": "query",
            "description": "True to ignore the asset focus point if any.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 12
          },
          {
            "name": "auto",
            "in": "query",
            "description": "True to use auto format.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to force a new resize even if it already stored.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 14
          },
          {
            "name": "format",
            "in": "query",
            "description": "True to force a new resize even if it already stored.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ImageFormat"
            },
            "x-position": 15
          }
        ],
        "responses": {
          "200": {
            "description": "Asset found and content or (resized) image returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAssetContent"
      }
    },
    "/api/apps/{app}/assets/folders": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get asset folders.",
        "description": "Get all asset folders for the app.",
        "operationId": "AssetFolders_GetAssetFolders",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The optional parent folder id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of the query.",
            "schema": {
              "default": "PathAndItems",
              "$ref": "#/components/schemas/AssetFolderScope"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Asset folders returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAssetFolders"
      },
      "post": {
        "tags": ["Assets"],
        "summary": "Create an asset folder.",
        "operationId": "AssetFolders_PostAssetFolder",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The asset folder object that needs to be added to the App.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetFolderDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Asset folder created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFolderDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset folder request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.folders.create"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "postAssetFolder"
      }
    },
    "/api/apps/{app}/assets/folders/{id}": {
      "put": {
        "tags": ["Assets"],
        "summary": "Update an asset folder.",
        "operationId": "AssetFolders_PutAssetFolder",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset folder.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The asset folder object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameAssetFolderDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Asset folder updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFolderDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset folder request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset folder or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.folders.update"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putAssetFolder"
      },
      "delete": {
        "tags": ["Assets"],
        "summary": "Delete an asset folder.",
        "operationId": "AssetFolders_DeleteAssetFolder",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset folder to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Asset folder deleted."
          },
          "404": {
            "description": "Asset folder or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.folders.delete"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "deleteAssetFolder"
      }
    },
    "/api/apps/{app}/assets/folders/{id}/parent": {
      "put": {
        "tags": ["Assets"],
        "summary": "Move an asset folder.",
        "operationId": "AssetFolders_PutAssetFolderParent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset folder.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The asset folder object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveAssetFolderDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Asset folder moved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFolderDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset folder request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset folder or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.folders.update"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putAssetFolderParent"
      }
    },
    "/api/apps/{app}/assets/tags": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get assets tags.",
        "description": "Get all tags for assets.",
        "operationId": "Assets_GetTags",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Assets tags returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getTags"
      }
    },
    "/api/apps/{app}/assets/tags/{name}": {
      "put": {
        "tags": ["Assets"],
        "summary": "Rename an asset tag.",
        "operationId": "Assets_PutTag",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The tag to return.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The required request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameTagDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Asset tag renamed and new tags returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.update"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putTag"
      }
    },
    "/api/apps/{app}/assets": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get assets.",
        "description": "Get all assets for the app.",
        "operationId": "Assets_GetAssets",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The optional parent folder id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The optional asset ids.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "q",
            "in": "query",
            "description": "The optional json query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Optional number of items to take.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Optional number of items to skip.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Optional OData order definition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Optional OData filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assets returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAssets"
      },
      "post": {
        "tags": ["Assets"],
        "summary": "Upload a new asset.",
        "description": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
        "operationId": "Assets_PostAsset",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The optional parent folder id.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "id",
            "in": "query",
            "description": "The optional custom asset id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "duplicate",
            "in": "query",
            "description": "True to duplicate the asset, event if the file has been uploaded.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Asset exceeds the maximum upload size.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.create"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "postAsset"
      }
    },
    "/api/apps/{app}/assets/query": {
      "post": {
        "tags": ["Assets"],
        "summary": "Get assets.",
        "description": "Get all assets for the app.",
        "operationId": "Assets_GetAssetsPost",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "query",
          "description": "The required query object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Assets returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAssetsPost"
      }
    },
    "/api/apps/{app}/assets/{id}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get an asset by id.",
        "operationId": "Assets_GetAsset",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset to retrieve.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Asset found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "getAsset"
      },
      "post": {
        "tags": ["Assets"],
        "summary": "Upsert an asset.",
        "description": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
        "operationId": "Assets_PostUpsertAsset",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The optional custom asset id.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The optional parent folder id.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "duplicate",
            "in": "query",
            "description": "True to duplicate the asset, event if the file has been uploaded.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Asset exceeds the maximum upload size.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.create"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "postUpsertAsset"
      },
      "put": {
        "tags": ["Assets"],
        "summary": "Update an asset.",
        "operationId": "Assets_PutAsset",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The asset object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotateAssetDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Asset updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.update"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putAsset"
      },
      "delete": {
        "tags": ["Assets"],
        "summary": "Delete an asset.",
        "operationId": "Assets_DeleteAsset",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "checkReferrers",
            "in": "query",
            "description": "True to check referrers of this asset.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "True to delete the asset permanently.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "204": {
            "description": "Asset deleted."
          },
          "404": {
            "description": "Asset or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.delete"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "deleteAsset"
      }
    },
    "/api/apps/{app}/assets/bulk": {
      "post": {
        "tags": ["Assets"],
        "summary": "Bulk update assets.",
        "operationId": "Assets_BulkUpdateAssets",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The bulk update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateAssetsDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Assets created, update or delete.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Assets request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.read"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "bulkUpdateAssets"
      }
    },
    "/api/apps/{app}/assets/{id}/content": {
      "put": {
        "tags": ["Assets"],
        "summary": "Replace asset content.",
        "description": "Use multipart request to upload an asset.",
        "operationId": "Assets_PutAssetContent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Asset exceeds the maximum upload size.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.upload"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putAssetContent"
      }
    },
    "/api/apps/{app}/assets/{id}/parent": {
      "put": {
        "tags": ["Assets"],
        "summary": "Moves the asset.",
        "operationId": "Assets_PutAssetParent",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the asset.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The asset object that needs to updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveAssetDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Asset moved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Asset or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.assets.update"]
          }
        ],
        "x-fern-sdk-group-name": "assets",
        "x-fern-sdk-method-name": "putAssetParent"
      }
    },
    "/api/apps/{app}/assets/scripts": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get the app asset scripts.",
        "operationId": "AppAssets_GetAssetScripts",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to get the asset scripts for.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset scripts returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetScriptsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.asset-scripts.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getAssetScripts"
      },
      "put": {
        "tags": ["Apps"],
        "summary": "Update the app asset scripts.",
        "operationId": "AppAssets_PutAssetScripts",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetScriptsDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Asset scripts updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetScriptsDto"
                }
              }
            }
          },
          "400": {
            "description": "Asset request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.asset-scripts.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putAssetScripts"
      }
    },
    "/api/apps/{app}/clients": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app clients.",
        "description": "Gets all configured clients for the app with the specified name.",
        "operationId": "AppClients_GetClients",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Clients returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.clients.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getClients"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Create a new app client.",
        "description": "Create a new client for the app with the specified name.\nThe client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.",
        "operationId": "AppClients_PostClient",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Client object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsDto"
                }
              }
            }
          },
          "400": {
            "description": "Client request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.clients.create"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postClient"
      }
    },
    "/api/apps/{app}/clients/{id}": {
      "put": {
        "tags": ["Apps"],
        "summary": "Updates an app client.",
        "description": "Only the display name can be changed, create a new client if necessary.",
        "operationId": "AppClients_PutClient",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the client that must be updated.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Client object that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsDto"
                }
              }
            }
          },
          "400": {
            "description": "Client request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Client or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.clients.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putClient"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Revoke an app client.",
        "description": "The application that uses this client credentials cannot access the API after it has been revoked.",
        "operationId": "AppClients_DeleteClient",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the client that must be deleted.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsDto"
                }
              }
            }
          },
          "404": {
            "description": "Client or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.clients.delete"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteClient"
      }
    },
    "/api/apps/{app}/contributors": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app contributors.",
        "operationId": "AppContributors_GetContributors",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Contributors returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contributors.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getContributors"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Assign contributor to app.",
        "operationId": "AppContributors_PostContributor",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Contributor object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignContributorDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Contributor assigned to app.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "400": {
            "description": "Contributor request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contributors.assign"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postContributor"
      }
    },
    "/api/apps/{app}/contributors/me": {
      "delete": {
        "tags": ["Apps"],
        "summary": "Remove yourself.",
        "operationId": "AppContributors_DeleteMyself",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Contributor removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "Contributor or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteMyself"
      }
    },
    "/api/apps/{app}/contributors/{id}": {
      "delete": {
        "tags": ["Apps"],
        "summary": "Remove contributor.",
        "operationId": "AppContributors_DeleteContributor",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the contributor.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Contributor removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsDto"
                }
              }
            }
          },
          "404": {
            "description": "Contributor or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.contributors.revoke"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteContributor"
      }
    },
    "/api/apps/{app}/image": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get the app image.",
        "operationId": "AppImage_GetImage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "App image found and content or (resized) image returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getImage"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Upload the app image.",
        "operationId": "Apps_UploadImage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App image uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "400": {
            "description": "App request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.image"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "uploadImage"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Remove the app image.",
        "operationId": "Apps_DeleteImage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "App image removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.image"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteImage"
      }
    },
    "/api/apps/{app}/languages": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app languages.",
        "operationId": "AppLanguages_GetLanguages",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Languages returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLanguagesDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.languages.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getLanguages"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Attaches an app language.",
        "operationId": "AppLanguages_PostLanguage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The language to add to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLanguageDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Language created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLanguagesDto"
                }
              }
            }
          },
          "400": {
            "description": "Language request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.languages.create"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postLanguage"
      }
    },
    "/api/apps/{app}/languages/{language}": {
      "put": {
        "tags": ["Apps"],
        "summary": "Updates an app language.",
        "operationId": "AppLanguages_PutLanguage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The language object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLanguageDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Language updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLanguagesDto"
                }
              }
            }
          },
          "400": {
            "description": "Language request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Language or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.languages.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putLanguage"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Deletes an app language.",
        "operationId": "AppLanguages_DeleteLanguage",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language to delete from the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Language deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLanguagesDto"
                }
              }
            }
          },
          "400": {
            "description": "Language is master language.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Language or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.languages.delete"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteLanguage"
      }
    },
    "/api/apps/{app}/roles": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app roles.",
        "operationId": "AppRoles_GetRoles",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Roles returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.roles.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getRoles"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Add role to app.",
        "operationId": "AppRoles_PostRole",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Role object that needs to be added to the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Role created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesDto"
                }
              }
            }
          },
          "400": {
            "description": "Role request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.roles.create"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postRole"
      }
    },
    "/api/apps/{app}/roles/permissions": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app permissions.",
        "operationId": "AppRoles_GetPermissions",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "App permissions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.roles.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getPermissions"
      }
    },
    "/api/apps/{app}/roles/{roleName}": {
      "put": {
        "tags": ["Apps"],
        "summary": "Update an app role.",
        "operationId": "AppRoles_PutRole",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "description": "The name of the role to be updated.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Role to be updated for the app.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Role updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesDto"
                }
              }
            }
          },
          "400": {
            "description": "Role request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Role or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.roles.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putRole"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Remove role from app.",
        "operationId": "AppRoles_DeleteRole",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "description": "The name of the role.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesDto"
                }
              }
            }
          },
          "400": {
            "description": "Role is in use by contributor or client or a default role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Role or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.roles.delete"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteRole"
      }
    },
    "/api/apps": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get your apps.",
        "description": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).\nYou will retrieve all apps, where you are assigned as a contributor.",
        "operationId": "Apps_GetApps",
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getApps"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Create a new app.",
        "description": "You can only create an app when you are authenticated as a user (OpenID implicit flow).\nYou will be assigned as owner of the new app automatically.",
        "operationId": "Apps_PostApp",
        "requestBody": {
          "x-name": "request",
          "description": "The app object that needs to be added to Squidex.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "App created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "400": {
            "description": "App request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "App name is already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postApp"
      }
    },
    "/api/teams/{team}/apps": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get team apps.",
        "description": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).\nYou will retrieve all apps, where you are assigned as a contributor.",
        "operationId": "Apps_GetTeamApps",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "description": "The ID of the team.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getTeamApps"
      }
    },
    "/api/apps/{app}": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get an app by name.",
        "operationId": "Apps_GetApp",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getApp"
      },
      "put": {
        "tags": ["Apps"],
        "summary": "Update the app.",
        "operationId": "Apps_PutApp",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "400": {
            "description": "App request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putApp"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Delete the app.",
        "operationId": "Apps_DeleteApp",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "204": {
            "description": "App deleted."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.delete"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteApp"
      }
    },
    "/api/apps/{app}/team": {
      "put": {
        "tags": ["Apps"],
        "summary": "Transfer the app.",
        "operationId": "Apps_PutAppTeam",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The team information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferToTeamDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App transferred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "400": {
            "description": "App request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.transfer"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putAppTeam"
      }
    },
    "/api/apps/{app}/settings": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get the app settings.",
        "operationId": "AppSettings_GetSettings",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to get the settings for.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "App settings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSettingsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": []
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getSettings"
      },
      "put": {
        "tags": ["Apps"],
        "summary": "Update the app settings.",
        "operationId": "AppSettings_PutSettings",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppSettingsDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSettingsDto"
                }
              }
            }
          },
          "400": {
            "description": "App request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.settings"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putSettings"
      }
    },
    "/api/apps/{app}/workflows": {
      "get": {
        "tags": ["Apps"],
        "summary": "Get app workflow.",
        "operationId": "AppWorkflows_GetWorkflows",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflows returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.workflows.read"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "getWorkflows"
      },
      "post": {
        "tags": ["Apps"],
        "summary": "Create a workflow.",
        "operationId": "AppWorkflows_PostWorkflow",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new workflow.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWorkflowDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Workflow created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsDto"
                }
              }
            }
          },
          "400": {
            "description": "Workflow request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Workflow or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.workflows.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "postWorkflow"
      }
    },
    "/api/apps/{app}/workflows/{id}": {
      "put": {
        "tags": ["Apps"],
        "summary": "Update a workflow.",
        "operationId": "AppWorkflows_PutWorkflow",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new workflow.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Workflow updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsDto"
                }
              }
            }
          },
          "400": {
            "description": "Workflow request not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Workflow or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.workflows.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "putWorkflow"
      },
      "delete": {
        "tags": ["Apps"],
        "summary": "Delete a workflow.",
        "operationId": "AppWorkflows_DeleteWorkflow",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "description": "The name of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1,
            "x-fern-sdk-variable": "appName"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsDto"
                }
              }
            }
          },
          "404": {
            "description": "Workflow or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "squidex-oauth-auth": ["squidex.apps.{app}.workflows.update"]
          }
        ],
        "x-fern-sdk-group-name": "apps",
        "x-fern-sdk-method-name": "deleteWorkflow"
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["message", "statusCode"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message.",
            "minLength": 1
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "description": "The optional trace id.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Link to the error details.",
            "nullable": true
          },
          "details": {
            "type": "array",
            "description": "Detailed error messages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "statusCode": {
            "type": "integer",
            "description": "Status code of the http response.",
            "format": "int32"
          }
        }
      },
      "UserProperty": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "value"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "UISettingsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["canCreateApps", "canCreateTeams"],
        "properties": {
          "canCreateApps": {
            "type": "boolean",
            "description": "True when the user can create apps."
          },
          "canCreateTeams": {
            "type": "boolean",
            "description": "True when the user can create teams."
          }
        }
      },
      "UpdateSettingDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["value"],
        "properties": {
          "value": {
            "description": "The value for the setting."
          }
        }
      },
      "ContentsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items", "statuses"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of content items.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The content items.",
                "items": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              },
              "statuses": {
                "type": "array",
                "description": "The possible statuses.",
                "items": {
                  "$ref": "#/components/schemas/StatusInfoDto"
                }
              }
            }
          }
        ]
      },
      "ContentDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "createdBy",
              "lastModifiedBy",
              "data",
              "created",
              "lastModified",
              "status",
              "statusColor",
              "schemaId",
              "isDeleted",
              "version"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The if of the content item."
              },
              "createdBy": {
                "type": "string",
                "description": "The user that has created the content item."
              },
              "lastModifiedBy": {
                "type": "string",
                "description": "The user that has updated the content item."
              },
              "data": {
                "description": "The data of the content item."
              },
              "referenceData": {
                "description": "The reference data for the frontend UI.",
                "nullable": true,
                "$ref": "#/components/schemas/ContentData"
              },
              "created": {
                "type": "string",
                "description": "The date and time when the content item has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The date and time when the content item has been modified last.",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "The status of the content."
              },
              "newStatus": {
                "type": "string",
                "description": "The new status of the content.",
                "nullable": true
              },
              "statusColor": {
                "type": "string",
                "description": "The color of the status."
              },
              "newStatusColor": {
                "type": "string",
                "description": "The color of the new status.",
                "nullable": true
              },
              "editToken": {
                "type": "string",
                "description": "The UI token.",
                "nullable": true
              },
              "scheduleJob": {
                "description": "The scheduled status.",
                "nullable": true,
                "$ref": "#/components/schemas/ScheduleJobDto"
              },
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema."
              },
              "schemaName": {
                "type": "string",
                "description": "The name of the schema.",
                "nullable": true
              },
              "schemaDisplayName": {
                "type": "string",
                "description": "The display name of the schema.",
                "nullable": true
              },
              "referenceFields": {
                "type": "array",
                "description": "The reference fields.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FieldDto"
                }
              },
              "isDeleted": {
                "type": "boolean",
                "description": "Indicates whether the content is deleted."
              },
              "version": {
                "type": "integer",
                "description": "The version of the content.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ContentData": {
        "type": "object",
        "additionalProperties": {
          "nullable": true,
          "$ref": "#/components/schemas/ContentFieldData"
        }
      },
      "ContentFieldData": {
        "type": "object",
        "additionalProperties": {}
      },
      "ScheduleJobDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["id", "status", "dueTime", "color", "scheduledBy"],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the schedule job."
          },
          "status": {
            "type": "string",
            "description": "The new status."
          },
          "dueTime": {
            "type": "string",
            "description": "The target date and time when the content should be scheduled.",
            "format": "date-time"
          },
          "color": {
            "type": "string",
            "description": "The color of the scheduled status."
          },
          "scheduledBy": {
            "type": "string",
            "description": "The user who schedule the content."
          }
        }
      },
      "FieldDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "partitioning", "properties", "fieldId", "isHidden", "isLocked", "isDisabled"],
            "properties": {
              "fieldId": {
                "type": "integer",
                "description": "The ID of the field.",
                "format": "int64"
              },
              "name": {
                "type": "string",
                "description": "The name of the field. Must be unique within the schema.",
                "minLength": 1,
                "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
              },
              "isHidden": {
                "type": "boolean",
                "description": "Defines if the field is hidden."
              },
              "isLocked": {
                "type": "boolean",
                "description": "Defines if the field is locked."
              },
              "isDisabled": {
                "type": "boolean",
                "description": "Defines if the field is disabled."
              },
              "partitioning": {
                "type": "string",
                "description": "Defines the partitioning of the field.",
                "minLength": 1
              },
              "properties": {
                "description": "The field properties.",
                "$ref": "#/components/schemas/FieldPropertiesDto"
              },
              "nested": {
                "type": "array",
                "description": "The nested fields.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/NestedFieldDto"
                }
              }
            }
          }
        ]
      },
      "FieldPropertiesDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "fieldType",
          "mapping": {
            "Array": "#/components/schemas/ArrayFieldPropertiesDto",
            "Assets": "#/components/schemas/AssetsFieldPropertiesDto",
            "Boolean": "#/components/schemas/BooleanFieldPropertiesDto",
            "Component": "#/components/schemas/ComponentFieldPropertiesDto",
            "Components": "#/components/schemas/ComponentsFieldPropertiesDto",
            "DateTime": "#/components/schemas/DateTimeFieldPropertiesDto",
            "Geolocation": "#/components/schemas/GeolocationFieldPropertiesDto",
            "Json": "#/components/schemas/JsonFieldPropertiesDto",
            "Number": "#/components/schemas/NumberFieldPropertiesDto",
            "References": "#/components/schemas/ReferencesFieldPropertiesDto",
            "String": "#/components/schemas/StringFieldPropertiesDto",
            "Tags": "#/components/schemas/TagsFieldPropertiesDto",
            "UI": "#/components/schemas/UIFieldPropertiesDto"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": ["fieldType", "isRequired", "isRequiredOnPublish", "isHalfWidth"],
        "properties": {
          "label": {
            "type": "string",
            "description": "Optional label for the editor.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "hints": {
            "type": "string",
            "description": "Hints to describe the field.",
            "maxLength": 1000,
            "minLength": 0,
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder to show when no value has been entered.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the field is required."
          },
          "isRequiredOnPublish": {
            "type": "boolean",
            "description": "Indicates if the field is required when publishing."
          },
          "isHalfWidth": {
            "type": "boolean",
            "description": "Indicates if the field should be rendered with half width only."
          },
          "editorUrl": {
            "type": "string",
            "description": "Optional url to the editor.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "description": "Tags for automation processes.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fieldType": {
            "type": "string"
          }
        }
      },
      "ArrayFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "minItems": {
                "type": "integer",
                "description": "The minimum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "The maximum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "uniqueFields": {
                "type": "array",
                "description": "The fields that must be unique.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AssetsFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["previewMode", "resolveFirst", "mustBeImage", "resolveImage", "allowDuplicates"],
            "properties": {
              "previewMode": {
                "description": "The preview mode for the asset.",
                "$ref": "#/components/schemas/AssetPreviewMode"
              },
              "defaultValues": {
                "description": "The language specific default value as a list of asset ids.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfReadonlyListOfString"
              },
              "defaultValue": {
                "type": "array",
                "description": "The default value as a list of asset ids.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "folderId": {
                "type": "string",
                "description": "The initial id to the folder.",
                "nullable": true
              },
              "previewFormat": {
                "type": "string",
                "description": "The preview format.",
                "nullable": true
              },
              "minItems": {
                "type": "integer",
                "description": "The minimum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "The maximum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "minSize": {
                "type": "integer",
                "description": "The minimum file size in bytes.",
                "format": "int32",
                "nullable": true
              },
              "maxSize": {
                "type": "integer",
                "description": "The maximum file size in bytes.",
                "format": "int32",
                "nullable": true
              },
              "minWidth": {
                "type": "integer",
                "description": "The minimum image width in pixels.",
                "format": "int32",
                "nullable": true
              },
              "maxWidth": {
                "type": "integer",
                "description": "The maximum image width in pixels.",
                "format": "int32",
                "nullable": true
              },
              "minHeight": {
                "type": "integer",
                "description": "The minimum image height in pixels.",
                "format": "int32",
                "nullable": true
              },
              "maxHeight": {
                "type": "integer",
                "description": "The maximum image height in pixels.",
                "format": "int32",
                "nullable": true
              },
              "aspectWidth": {
                "type": "integer",
                "description": "The image aspect width in pixels.",
                "format": "int32",
                "nullable": true
              },
              "aspectHeight": {
                "type": "integer",
                "description": "The image aspect height in pixels.",
                "format": "int32",
                "nullable": true
              },
              "expectedType": {
                "description": "The expected type.",
                "nullable": true,
                "$ref": "#/components/schemas/AssetType"
              },
              "resolveFirst": {
                "type": "boolean",
                "description": "True to resolve first asset in the content list."
              },
              "mustBeImage": {
                "type": "boolean",
                "description": "True to resolve first image in the content list.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'expectedType' field now"
              },
              "resolveImage": {
                "type": "boolean",
                "description": "True to resolve first image in the content list.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'resolveFirst' field now"
              },
              "allowedExtensions": {
                "type": "array",
                "description": "The allowed file extensions.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "allowDuplicates": {
                "type": "boolean",
                "description": "True, if duplicate values are allowed."
              }
            }
          }
        ]
      },
      "AssetPreviewMode": {
        "type": "string",
        "description": "",
        "x-enumNames": ["ImageAndFileName", "Image", "FileName"],
        "enum": ["ImageAndFileName", "Image", "FileName"]
      },
      "LocalizedValueOfReadonlyListOfString": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "AssetType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Unknown", "Image", "Audio", "Video"],
        "enum": ["Unknown", "Image", "Audio", "Video"]
      },
      "BooleanFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["inlineEditable", "editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfNullableBoolean"
              },
              "defaultValue": {
                "type": "boolean",
                "description": "The default value for the field value.",
                "nullable": true
              },
              "inlineEditable": {
                "type": "boolean",
                "description": "Indicates that the inline editor is enabled for this field."
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/BooleanFieldEditor"
              }
            }
          }
        ]
      },
      "LocalizedValueOfNullableBoolean": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean",
          "nullable": true
        }
      },
      "BooleanFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Checkbox", "Toggle"],
        "enum": ["Checkbox", "Toggle"]
      },
      "ComponentFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaIds": {
                "type": "array",
                "description": "The ID of the embedded schemas.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ComponentsFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "minItems": {
                "type": "integer",
                "description": "The minimum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "The maximum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "schemaIds": {
                "type": "array",
                "description": "The ID of the embedded schemas.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "uniqueFields": {
                "type": "array",
                "description": "The fields that must be unique.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "DateTimeFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfNullableInstant"
              },
              "defaultValue": {
                "type": "string",
                "description": "The default value for the field value.",
                "format": "date-time",
                "nullable": true
              },
              "maxValue": {
                "type": "string",
                "description": "The maximum allowed value for the field value.",
                "format": "date-time",
                "nullable": true
              },
              "minValue": {
                "type": "string",
                "description": "The minimum allowed value for the field value.",
                "format": "date-time",
                "nullable": true
              },
              "format": {
                "type": "string",
                "description": "The format pattern when displayed in the UI.",
                "nullable": true
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/DateTimeFieldEditor"
              },
              "calculatedDefaultValue": {
                "description": "The calculated default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/DateTimeCalculatedDefaultValue"
              }
            }
          }
        ]
      },
      "LocalizedValueOfNullableInstant": {
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "format": "date-time",
          "nullable": true
        }
      },
      "DateTimeFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Date", "DateTime"],
        "enum": ["Date", "DateTime"]
      },
      "DateTimeCalculatedDefaultValue": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Now", "Today"],
        "enum": ["Now", "Today"]
      },
      "GeolocationFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["editor"],
            "properties": {
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/GeolocationFieldEditor"
              }
            }
          }
        ]
      },
      "GeolocationFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Map"],
        "enum": ["Map"]
      },
      "JsonFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "graphQLSchema": {
                "type": "string",
                "description": "The GraphQL schema.",
                "nullable": true
              }
            }
          }
        ]
      },
      "NumberFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["isUnique", "inlineEditable", "editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfNullableDouble"
              },
              "defaultValue": {
                "type": "number",
                "description": "The default value for the field value.",
                "format": "double",
                "nullable": true
              },
              "maxValue": {
                "type": "number",
                "description": "The maximum allowed value for the field value.",
                "format": "double",
                "nullable": true
              },
              "minValue": {
                "type": "number",
                "description": "The minimum allowed value for the field value.",
                "format": "double",
                "nullable": true
              },
              "allowedValues": {
                "type": "array",
                "description": "The allowed values for the field value.",
                "nullable": true,
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "isUnique": {
                "type": "boolean",
                "description": "Indicates if the field value must be unique. Ignored for nested fields and localized fields."
              },
              "inlineEditable": {
                "type": "boolean",
                "description": "Indicates that the inline editor is enabled for this field."
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/NumberFieldEditor"
              }
            }
          }
        ]
      },
      "LocalizedValueOfNullableDouble": {
        "type": "object",
        "additionalProperties": {
          "type": "number",
          "format": "double",
          "nullable": true
        }
      },
      "NumberFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Input", "Radio", "Dropdown", "Stars"],
        "enum": ["Input", "Radio", "Dropdown", "Stars"]
      },
      "ReferencesFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["allowDuplicates", "resolveReference", "mustBePublished", "editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value as a list of content ids.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfReadonlyListOfString"
              },
              "defaultValue": {
                "type": "array",
                "description": "The default value as a list of content ids.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "minItems": {
                "type": "integer",
                "description": "The minimum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "The maximum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "allowDuplicates": {
                "type": "boolean",
                "description": "True, if duplicate values are allowed."
              },
              "resolveReference": {
                "type": "boolean",
                "description": "True to resolve references in the content list."
              },
              "mustBePublished": {
                "type": "boolean",
                "description": "True when all references must be published."
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/ReferencesFieldEditor"
              },
              "schemaIds": {
                "type": "array",
                "description": "The ID of the referenced schemas.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ReferencesFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["List", "Dropdown", "Tags", "Checkboxes", "Input"],
        "enum": ["List", "Dropdown", "Tags", "Checkboxes", "Input"]
      },
      "StringFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["isUnique", "isEmbeddable", "inlineEditable", "createEnum", "contentType", "editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfString"
              },
              "defaultValue": {
                "type": "string",
                "description": "The default value for the field value.",
                "nullable": true
              },
              "pattern": {
                "type": "string",
                "description": "The pattern to enforce a specific format for the field value.",
                "nullable": true
              },
              "patternMessage": {
                "type": "string",
                "description": "The validation message for the pattern.",
                "nullable": true
              },
              "folderId": {
                "type": "string",
                "description": "The initial id to the folder when the control supports file uploads.",
                "nullable": true
              },
              "minLength": {
                "type": "integer",
                "description": "The minimum allowed length for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxLength": {
                "type": "integer",
                "description": "The maximum allowed length for the field value.",
                "format": "int32",
                "nullable": true
              },
              "minCharacters": {
                "type": "integer",
                "description": "The minimum allowed of normal characters for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxCharacters": {
                "type": "integer",
                "description": "The maximum allowed of normal characters for the field value.",
                "format": "int32",
                "nullable": true
              },
              "minWords": {
                "type": "integer",
                "description": "The minimum allowed number of words for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxWords": {
                "type": "integer",
                "description": "The maximum allowed number of words for the field value.",
                "format": "int32",
                "nullable": true
              },
              "allowedValues": {
                "type": "array",
                "description": "The allowed values for the field value.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "schemaIds": {
                "type": "array",
                "description": "The allowed schema ids that can be embedded.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "isUnique": {
                "type": "boolean",
                "description": "Indicates if the field value must be unique. Ignored for nested fields and localized fields."
              },
              "isEmbeddable": {
                "type": "boolean",
                "description": "Indicates that other content items or references are embedded."
              },
              "inlineEditable": {
                "type": "boolean",
                "description": "Indicates that the inline editor is enabled for this field."
              },
              "createEnum": {
                "type": "boolean",
                "description": "Indicates whether GraphQL Enum should be created."
              },
              "contentType": {
                "description": "How the string content should be interpreted.",
                "$ref": "#/components/schemas/StringContentType"
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/StringFieldEditor"
              }
            }
          }
        ]
      },
      "LocalizedValueOfString": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "StringContentType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Unspecified", "Html", "Markdown"],
        "enum": ["Unspecified", "Html", "Markdown"]
      },
      "StringFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Input",
          "Color",
          "Markdown",
          "Dropdown",
          "Html",
          "Radio",
          "RichText",
          "Slug",
          "StockPhoto",
          "TextArea"
        ],
        "enum": [
          "Input",
          "Color",
          "Markdown",
          "Dropdown",
          "Html",
          "Radio",
          "RichText",
          "Slug",
          "StockPhoto",
          "TextArea"
        ]
      },
      "TagsFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["createEnum", "editor"],
            "properties": {
              "defaultValues": {
                "description": "The language specific default value for the field value.",
                "nullable": true,
                "$ref": "#/components/schemas/LocalizedValueOfReadonlyListOfString"
              },
              "defaultValue": {
                "type": "array",
                "description": "The default value.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "minItems": {
                "type": "integer",
                "description": "The minimum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "The maximum allowed items for the field value.",
                "format": "int32",
                "nullable": true
              },
              "allowedValues": {
                "type": "array",
                "description": "The allowed values for the field value.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "createEnum": {
                "type": "boolean",
                "description": "Indicates whether GraphQL Enum should be created."
              },
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/TagsFieldEditor"
              }
            }
          }
        ]
      },
      "TagsFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Tags", "Checkboxes", "Dropdown"],
        "enum": ["Tags", "Checkboxes", "Dropdown"]
      },
      "UIFieldPropertiesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["editor"],
            "properties": {
              "editor": {
                "description": "The editor that is used to manage this field.",
                "$ref": "#/components/schemas/UIFieldEditor"
              }
            }
          }
        ]
      },
      "UIFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Separator"],
        "enum": ["Separator"]
      },
      "NestedFieldDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "properties", "fieldId", "isHidden", "isLocked", "isDisabled"],
            "properties": {
              "fieldId": {
                "type": "integer",
                "description": "The ID of the field.",
                "format": "int64"
              },
              "name": {
                "type": "string",
                "description": "The name of the field. Must be unique within the schema.",
                "minLength": 1,
                "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
              },
              "isHidden": {
                "type": "boolean",
                "description": "Defines if the field is hidden."
              },
              "isLocked": {
                "type": "boolean",
                "description": "Defines if the field is locked."
              },
              "isDisabled": {
                "type": "boolean",
                "description": "Defines if the field is disabled."
              },
              "properties": {
                "description": "The field properties.",
                "$ref": "#/components/schemas/FieldPropertiesDto"
              }
            }
          }
        ]
      },
      "Resource": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": ["_links"],
        "properties": {
          "_links": {
            "type": "object",
            "description": "The links.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceLink"
            }
          }
        }
      },
      "ResourceLink": {
        "type": "object",
        "additionalProperties": false,
        "required": ["href", "method"],
        "properties": {
          "href": {
            "type": "string",
            "description": "The link url.",
            "minLength": 1
          },
          "method": {
            "type": "string",
            "description": "The link method.",
            "minLength": 1
          },
          "metadata": {
            "type": "string",
            "description": "Additional data about the link.",
            "nullable": true
          }
        }
      },
      "StatusInfoDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["status", "color"],
        "properties": {
          "status": {
            "type": "string",
            "description": "The name of the status."
          },
          "color": {
            "type": "string",
            "description": "The color of the status."
          }
        }
      },
      "AllContentsByPostDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "description": "The list of ids to query.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "scheduledFrom": {
            "type": "string",
            "description": "The start of the schedule.",
            "format": "date-time",
            "nullable": true
          },
          "scheduledTo": {
            "type": "string",
            "description": "The end of the schedule.",
            "format": "date-time",
            "nullable": true
          },
          "referencing": {
            "type": "string",
            "description": "The ID of the referencing content item.",
            "nullable": true
          },
          "references": {
            "type": "string",
            "description": "The ID of the reference content item.",
            "nullable": true
          },
          "oData": {
            "type": "string",
            "description": "The optional odata query.",
            "nullable": true
          },
          "q": {
            "description": "The optional json query.",
            "nullable": true
          }
        }
      },
      "BulkResultDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["jobIndex"],
        "properties": {
          "error": {
            "description": "The error when the bulk job failed.",
            "nullable": true,
            "$ref": "#/components/schemas/ErrorDto"
          },
          "jobIndex": {
            "type": "integer",
            "description": "The index of the bulk job where the result belongs to. The order can change.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "The ID of the entity that has been handled successfully or not.",
            "nullable": true
          },
          "contentId": {
            "type": "string",
            "description": "The ID of the entity that has been handled successfully or not.",
            "deprecated": true,
            "x-deprecatedMessage": "Use 'id' field now.",
            "nullable": true
          }
        }
      },
      "BulkUpdateContentsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["jobs"],
        "properties": {
          "jobs": {
            "type": "array",
            "description": "The contents to update or insert.",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateContentsJobDto"
            }
          },
          "publish": {
            "type": "boolean",
            "description": "True to automatically publish the content.",
            "deprecated": true,
            "x-deprecatedMessage": "Use 'jobs.status' fields now."
          },
          "doNotScript": {
            "type": "boolean",
            "description": "True to turn off scripting for faster inserts. Default: true."
          },
          "doNotValidate": {
            "type": "boolean",
            "description": "True to turn off validation for faster inserts. Default: false."
          },
          "doNotValidateWorkflow": {
            "type": "boolean",
            "description": "True to turn off validation of workflow rules. Default: false."
          },
          "checkReferrers": {
            "type": "boolean",
            "description": "True to check referrers of deleted contents."
          },
          "optimizeValidation": {
            "type": "boolean",
            "description": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true."
          }
        }
      },
      "BulkUpdateContentsJobDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "description": "An optional query to identify the content to update.",
            "nullable": true,
            "$ref": "#/components/schemas/QueryJsonDto"
          },
          "id": {
            "type": "string",
            "description": "An optional ID of the content to update.",
            "nullable": true
          },
          "data": {
            "description": "The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch.",
            "nullable": true,
            "$ref": "#/components/schemas/ContentData"
          },
          "status": {
            "type": "string",
            "description": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
            "nullable": true
          },
          "dueTime": {
            "type": "string",
            "description": "The due time.",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "The update type.",
            "$ref": "#/components/schemas/BulkUpdateContentType"
          },
          "schema": {
            "type": "string",
            "description": "The optional schema id or name.",
            "nullable": true
          },
          "patch": {
            "type": "boolean",
            "description": "Makes the update as patch."
          },
          "permanent": {
            "type": "boolean",
            "description": "True to delete the content permanently."
          },
          "expectedCount": {
            "type": "integer",
            "description": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
            "format": "int64"
          },
          "expectedVersion": {
            "type": "integer",
            "description": "The expected version.",
            "format": "int64"
          }
        }
      },
      "QueryJsonDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["skip", "take", "random", "top"],
        "properties": {
          "filter": {
            "nullable": true
          },
          "fullText": {
            "type": "string",
            "nullable": true
          },
          "skip": {
            "type": "integer",
            "format": "int64"
          },
          "take": {
            "type": "integer",
            "format": "int64"
          },
          "random": {
            "type": "integer",
            "format": "int64"
          },
          "top": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortNode"
            }
          }
        }
      },
      "SortNode": {
        "type": "object",
        "additionalProperties": false,
        "required": ["path", "order"],
        "properties": {
          "path": {
            "$ref": "#/components/schemas/PropertyPath"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "PropertyPath": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SortOrder": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Ascending", "Descending"],
        "enum": ["Ascending", "Descending"]
      },
      "BulkUpdateContentType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Upsert", "ChangeStatus", "Create", "Delete", "Patch", "Update", "Validate"],
        "enum": ["Upsert", "ChangeStatus", "Create", "Delete", "Patch", "Update", "Validate"]
      },
      "UsersDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of users.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The users.",
                "items": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        ]
      },
      "UserDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "email", "displayName", "isLocked", "permissions"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the user."
              },
              "email": {
                "type": "string",
                "description": "The email of the user. Unique value."
              },
              "displayName": {
                "type": "string",
                "description": "The display name (usually first name and last name) of the user."
              },
              "isLocked": {
                "type": "boolean",
                "description": "Determines if the user is locked."
              },
              "permissions": {
                "type": "array",
                "description": "Additional permissions for the user.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["email", "displayName", "password", "permissions"],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user. Unique value.",
            "minLength": 1
          },
          "displayName": {
            "type": "string",
            "description": "The display name (usually first name and last name) of the user.",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password of the user.",
            "minLength": 1
          },
          "permissions": {
            "type": "array",
            "description": "Additional permissions for the user.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["email", "displayName", "permissions"],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user. Unique value.",
            "minLength": 1
          },
          "displayName": {
            "type": "string",
            "description": "The display name (usually first name and last name) of the user.",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password of the user.",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "description": "Additional permissions for the user.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResourcesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TranslationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["result"],
        "properties": {
          "result": {
            "description": "The result of the translation.",
            "$ref": "#/components/schemas/TranslationResultCode"
          },
          "text": {
            "type": "string",
            "description": "The translated text.",
            "nullable": true
          }
        }
      },
      "TranslationResultCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Translated",
          "LanguageNotSupported",
          "NotTranslated",
          "NotConfigured",
          "Unauthorized",
          "Failed"
        ],
        "enum": ["Translated", "LanguageNotSupported", "NotTranslated", "NotConfigured", "Unauthorized", "Failed"]
      },
      "TranslateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["text", "targetLanguage"],
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to translate.",
            "minLength": 1
          },
          "targetLanguage": {
            "type": "string",
            "description": "The target language.",
            "minLength": 1
          },
          "sourceLanguage": {
            "type": "string",
            "description": "The optional source language."
          }
        }
      },
      "TemplatesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The event consumers.",
                "items": {
                  "$ref": "#/components/schemas/TemplateDto"
                }
              }
            }
          }
        ]
      },
      "TemplateDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "title", "description", "isStarter"],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the template."
              },
              "title": {
                "type": "string",
                "description": "The title of the template."
              },
              "description": {
                "type": "string",
                "description": "The description of the template."
              },
              "isStarter": {
                "type": "boolean",
                "description": "True, if the template is a starter."
              }
            }
          }
        ]
      },
      "TemplateDetailsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["details"],
            "properties": {
              "details": {
                "type": "string",
                "description": "The details of the template."
              }
            }
          }
        ]
      },
      "ContributorsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items", "maxContributors"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The contributors.",
                "items": {
                  "$ref": "#/components/schemas/ContributorDto"
                }
              },
              "maxContributors": {
                "type": "integer",
                "description": "The maximum number of allowed contributors.",
                "format": "int64"
              },
              "_meta": {
                "description": "The metadata to provide information about this request.",
                "nullable": true,
                "$ref": "#/components/schemas/ContributorsMetadata"
              }
            }
          }
        ]
      },
      "ContributorDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["contributorId", "contributorName", "contributorEmail"],
            "properties": {
              "contributorId": {
                "type": "string",
                "description": "The ID of the user that contributes to the app."
              },
              "contributorName": {
                "type": "string",
                "description": "The display name."
              },
              "contributorEmail": {
                "type": "string",
                "description": "The email address."
              },
              "role": {
                "type": "string",
                "description": "The role of the contributor.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContributorsMetadata": {
        "type": "object",
        "additionalProperties": false,
        "required": ["isInvited"],
        "properties": {
          "isInvited": {
            "type": "string",
            "description": "Indicates whether the user has been invited."
          }
        }
      },
      "AssignContributorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["contributorId"],
        "properties": {
          "contributorId": {
            "type": "string",
            "description": "The id or email of the user to add to the app.",
            "minLength": 1
          },
          "role": {
            "type": "string",
            "description": "The role of the contributor.",
            "nullable": true
          },
          "invite": {
            "type": "boolean",
            "description": "Set to true to invite the user if he does not exist."
          }
        }
      },
      "TeamDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "name", "version", "created", "lastModified"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the team."
              },
              "name": {
                "type": "string",
                "description": "The name of the team."
              },
              "version": {
                "type": "integer",
                "description": "The version of the team.",
                "format": "int64"
              },
              "created": {
                "type": "string",
                "description": "The timestamp when the team has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The timestamp when the team has been modified last.",
                "format": "date-time"
              },
              "roleName": {
                "type": "string",
                "description": "The role name of the user.",
                "nullable": true
              }
            }
          }
        ]
      },
      "CreateTeamDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "minLength": 1
          }
        }
      },
      "UpdateTeamDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "minLength": 1
          }
        }
      },
      "LogDownloadDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "downloadUrl": {
            "type": "string",
            "description": "The url to download the log.",
            "nullable": true
          }
        }
      },
      "CallsUsageDtoDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCalls",
          "totalBytes",
          "monthCalls",
          "monthBytes",
          "blockingApiCalls",
          "allowedBytes",
          "allowedCalls",
          "averageElapsedMs",
          "details"
        ],
        "properties": {
          "totalCalls": {
            "type": "integer",
            "description": "The total number of API calls.",
            "format": "int64"
          },
          "totalBytes": {
            "type": "integer",
            "description": "The total number of bytes transferred.",
            "format": "int64"
          },
          "monthCalls": {
            "type": "integer",
            "description": "The total number of API calls this month.",
            "format": "int64"
          },
          "monthBytes": {
            "type": "integer",
            "description": "The total number of bytes transferred this month.",
            "format": "int64"
          },
          "blockingApiCalls": {
            "type": "integer",
            "description": "The amount of calls that will block the app.",
            "format": "int64"
          },
          "allowedBytes": {
            "type": "integer",
            "description": "The included API traffic.",
            "format": "int64"
          },
          "allowedCalls": {
            "type": "integer",
            "description": "The included API calls.",
            "format": "int64"
          },
          "averageElapsedMs": {
            "type": "number",
            "description": "The average duration in milliseconds.",
            "format": "double"
          },
          "details": {
            "type": "object",
            "description": "The statistics by date and group.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CallsUsagePerDateDto"
              }
            }
          }
        }
      },
      "CallsUsagePerDateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["date", "totalCalls", "totalBytes", "averageElapsedMs"],
        "properties": {
          "date": {
            "type": "string",
            "description": "The date when the usage was tracked.",
            "format": "date"
          },
          "totalCalls": {
            "type": "integer",
            "description": "The total number of API calls.",
            "format": "int64"
          },
          "totalBytes": {
            "type": "integer",
            "description": "The total number of bytes transferred.",
            "format": "int64"
          },
          "averageElapsedMs": {
            "type": "number",
            "description": "The average duration in milliseconds.",
            "format": "double"
          }
        }
      },
      "CurrentStorageDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["size", "maxAllowed"],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The size in bytes.",
            "format": "int64"
          },
          "maxAllowed": {
            "type": "integer",
            "description": "The maximum allowed asset size.",
            "format": "int64"
          }
        }
      },
      "StorageUsagePerDateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["date", "totalCount", "totalSize"],
        "properties": {
          "date": {
            "type": "string",
            "description": "The date when the usage was tracked.",
            "format": "date"
          },
          "totalCount": {
            "type": "integer",
            "description": "The number of assets.",
            "format": "int64"
          },
          "totalSize": {
            "type": "integer",
            "description": "The size in bytes.",
            "format": "int64"
          }
        }
      },
      "SearchResultDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "type"],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the search result."
              },
              "type": {
                "description": "The type of the search result.",
                "$ref": "#/components/schemas/SearchResultType"
              },
              "label": {
                "type": "string",
                "description": "An optional label.",
                "nullable": true
              }
            }
          }
        ]
      },
      "SearchResultType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Asset", "Content", "Dashboard", "Setting", "Rule", "Schema"],
        "enum": ["Asset", "Content", "Dashboard", "Setting", "Rule", "Schema"]
      },
      "SchemaDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "createdBy",
              "lastModifiedBy",
              "name",
              "properties",
              "scripts",
              "previewUrls",
              "fieldsInLists",
              "fieldsInReferences",
              "fields",
              "id",
              "type",
              "isSingleton",
              "isPublished",
              "created",
              "lastModified",
              "version",
              "fieldRules"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the schema."
              },
              "createdBy": {
                "type": "string",
                "description": "The user that has created the schema.",
                "minLength": 1
              },
              "lastModifiedBy": {
                "type": "string",
                "description": "The user that has updated the schema.",
                "minLength": 1
              },
              "name": {
                "type": "string",
                "description": "The name of the schema. Unique within the app.",
                "minLength": 1,
                "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
              },
              "type": {
                "description": "The type of the schema.",
                "$ref": "#/components/schemas/SchemaType"
              },
              "category": {
                "type": "string",
                "description": "The name of the category.",
                "nullable": true
              },
              "properties": {
                "description": "The schema properties.",
                "$ref": "#/components/schemas/SchemaPropertiesDto"
              },
              "isSingleton": {
                "type": "boolean",
                "description": "Indicates if the schema is a singleton.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'type' field now."
              },
              "isPublished": {
                "type": "boolean",
                "description": "Indicates if the schema is published."
              },
              "created": {
                "type": "string",
                "description": "The date and time when the schema has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The date and time when the schema has been modified last.",
                "format": "date-time"
              },
              "version": {
                "type": "integer",
                "description": "The version of the schema.",
                "format": "int64"
              },
              "scripts": {
                "description": "The scripts.",
                "$ref": "#/components/schemas/SchemaScriptsDto"
              },
              "previewUrls": {
                "type": "object",
                "description": "The preview Urls.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "fieldsInLists": {
                "type": "array",
                "description": "The name of fields that are used in content lists.",
                "items": {
                  "type": "string"
                }
              },
              "fieldsInReferences": {
                "type": "array",
                "description": "The name of fields that are used in content references.",
                "items": {
                  "type": "string"
                }
              },
              "fieldRules": {
                "type": "array",
                "description": "The field rules.",
                "items": {
                  "$ref": "#/components/schemas/FieldRuleDto"
                }
              },
              "fields": {
                "type": "array",
                "description": "The list of fields.",
                "items": {
                  "$ref": "#/components/schemas/FieldDto"
                }
              }
            }
          }
        ]
      },
      "SchemaType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Default", "Singleton", "Component"],
        "enum": ["Default", "Singleton", "Component"]
      },
      "SchemaPropertiesDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["validateOnPublish"],
        "properties": {
          "label": {
            "type": "string",
            "description": "Optional label for the editor.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "hints": {
            "type": "string",
            "description": "Hints to describe the schema.",
            "maxLength": 1000,
            "minLength": 0,
            "nullable": true
          },
          "contentsSidebarUrl": {
            "type": "string",
            "description": "The url to a the sidebar plugin for content lists.",
            "nullable": true
          },
          "contentSidebarUrl": {
            "type": "string",
            "description": "The url to a the sidebar plugin for content items.",
            "nullable": true
          },
          "contentEditorUrl": {
            "type": "string",
            "description": "The url to the editor plugin.",
            "nullable": true
          },
          "validateOnPublish": {
            "type": "boolean",
            "description": "True to validate the content items on publish."
          },
          "tags": {
            "type": "array",
            "description": "Tags for automation processes.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SchemaScriptsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "type": "string",
            "description": "The script that is executed for each content when querying contents.",
            "nullable": true
          },
          "queryPre": {
            "type": "string",
            "description": "The script that is executed for all contents when querying contents.",
            "nullable": true
          },
          "create": {
            "type": "string",
            "description": "The script that is executed when creating a content.",
            "nullable": true
          },
          "update": {
            "type": "string",
            "description": "The script that is executed when updating a content.",
            "nullable": true
          },
          "delete": {
            "type": "string",
            "description": "The script that is executed when deleting a content.",
            "nullable": true
          },
          "change": {
            "type": "string",
            "description": "The script that is executed when change a content status.",
            "nullable": true
          }
        }
      },
      "FieldRuleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["action", "field"],
        "properties": {
          "action": {
            "description": "The action to perform when the condition is met.",
            "$ref": "#/components/schemas/FieldRuleAction"
          },
          "field": {
            "type": "string",
            "description": "The field to update.",
            "minLength": 1
          },
          "condition": {
            "type": "string",
            "description": "The condition.",
            "nullable": true
          }
        }
      },
      "FieldRuleAction": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Disable", "Hide", "Require"],
        "enum": ["Disable", "Hide", "Require"]
      },
      "AddFieldDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "properties"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field. Must be unique within the schema.",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          },
          "partitioning": {
            "type": "string",
            "description": "Determines the optional partitioning of the field.",
            "nullable": true
          },
          "properties": {
            "description": "The field properties.",
            "$ref": "#/components/schemas/FieldPropertiesDto"
          }
        }
      },
      "ConfigureUIFieldsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fieldsInLists": {
            "type": "array",
            "description": "The name of fields that are used in content lists.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fieldsInReferences": {
            "type": "array",
            "description": "The name of fields that are used in content references.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReorderFieldsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["fieldIds"],
        "properties": {
          "fieldIds": {
            "type": "array",
            "description": "The field ids in the target order.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "UpdateFieldDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["properties"],
        "properties": {
          "properties": {
            "description": "The field properties.",
            "$ref": "#/components/schemas/FieldPropertiesDto"
          }
        }
      },
      "SchemasDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The schemas.",
                "items": {
                  "$ref": "#/components/schemas/SchemaDto"
                }
              }
            }
          }
        ]
      },
      "CreateSchemaDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpsertSchemaDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "type", "isSingleton"],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the schema.",
                "minLength": 1,
                "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
              },
              "type": {
                "description": "The type of the schema.",
                "$ref": "#/components/schemas/SchemaType"
              },
              "isSingleton": {
                "type": "boolean",
                "description": "Set to true to allow a single content item only.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'type' field now."
              }
            }
          }
        ]
      },
      "UpsertSchemaDto": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": ["isPublished"],
        "properties": {
          "properties": {
            "description": "The optional properties.",
            "nullable": true,
            "$ref": "#/components/schemas/SchemaPropertiesDto"
          },
          "scripts": {
            "description": "The optional scripts.",
            "nullable": true,
            "$ref": "#/components/schemas/SchemaScriptsDto"
          },
          "fieldsInReferences": {
            "type": "array",
            "description": "The names of the fields that should be used in references.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fieldsInLists": {
            "type": "array",
            "description": "The names of the fields that should be shown in lists, including meta fields.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fields": {
            "type": "array",
            "description": "Optional fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpsertSchemaFieldDto"
            }
          },
          "previewUrls": {
            "type": "object",
            "description": "The optional preview urls.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "fieldRules": {
            "type": "array",
            "description": "The optional field Rules.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldRuleDto"
            }
          },
          "category": {
            "type": "string",
            "description": "The category.",
            "nullable": true
          },
          "isPublished": {
            "type": "boolean",
            "description": "Set it to true to autopublish the schema."
          }
        }
      },
      "UpsertSchemaFieldDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "properties", "isHidden", "isLocked", "isDisabled"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field. Must be unique within the schema.",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          },
          "isHidden": {
            "type": "boolean",
            "description": "Defines if the field is hidden."
          },
          "isLocked": {
            "type": "boolean",
            "description": "Defines if the field is locked."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Defines if the field is disabled."
          },
          "partitioning": {
            "type": "string",
            "description": "Determines the optional partitioning of the field.",
            "nullable": true
          },
          "properties": {
            "description": "The field properties.",
            "$ref": "#/components/schemas/FieldPropertiesDto"
          },
          "nested": {
            "type": "array",
            "description": "The nested fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpsertSchemaNestedFieldDto"
            }
          }
        }
      },
      "UpsertSchemaNestedFieldDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "properties", "isHidden", "isLocked", "isDisabled"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field. Must be unique within the schema.",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          },
          "isHidden": {
            "type": "boolean",
            "description": "Defines if the field is hidden."
          },
          "isLocked": {
            "type": "boolean",
            "description": "Defines if the field is locked."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Defines if the field is disabled."
          },
          "properties": {
            "description": "The field properties.",
            "$ref": "#/components/schemas/FieldPropertiesDto"
          }
        }
      },
      "UpdateSchemaDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["validateOnPublish"],
        "properties": {
          "label": {
            "type": "string",
            "description": "Optional label for the editor.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "hints": {
            "type": "string",
            "description": "Hints to describe the schema.",
            "maxLength": 1000,
            "minLength": 0,
            "nullable": true
          },
          "contentsSidebarUrl": {
            "type": "string",
            "description": "The url to a the sidebar plugin for content lists.",
            "nullable": true
          },
          "contentSidebarUrl": {
            "type": "string",
            "description": "The url to a the sidebar plugin for content items.",
            "nullable": true
          },
          "contentEditorUrl": {
            "type": "string",
            "description": "The url to the editor plugin.",
            "nullable": true
          },
          "validateOnPublish": {
            "type": "boolean",
            "description": "True to validate the content items on publish."
          },
          "tags": {
            "type": "array",
            "description": "Tags for automation processes.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SynchronizeSchemaDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpsertSchemaDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["noFieldDeletion", "noFieldRecreation"],
            "properties": {
              "noFieldDeletion": {
                "type": "boolean",
                "description": "True, when fields should not be deleted."
              },
              "noFieldRecreation": {
                "type": "boolean",
                "description": "True, when fields with different types should not be recreated."
              }
            }
          }
        ]
      },
      "ChangeCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the category.",
            "nullable": true
          }
        }
      },
      "ConfigurePreviewUrlsDto": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ConfigureFieldRulesDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fieldRules": {
            "type": "array",
            "description": "The field rules to configure.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldRuleDto"
            }
          }
        }
      },
      "RuleElementDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["description", "display", "properties"],
        "properties": {
          "description": {
            "type": "string",
            "description": "Describes the action or trigger type."
          },
          "display": {
            "type": "string",
            "description": "The label for the action or trigger type."
          },
          "title": {
            "type": "string",
            "description": "Optional title.",
            "nullable": true
          },
          "iconColor": {
            "type": "string",
            "description": "The color for the icon.",
            "nullable": true
          },
          "iconImage": {
            "type": "string",
            "description": "The image for the icon.",
            "nullable": true
          },
          "readMore": {
            "type": "string",
            "description": "The optional link to the product that is integrated.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "The properties.",
            "items": {
              "$ref": "#/components/schemas/RuleElementPropertyDto"
            }
          }
        }
      },
      "RuleElementPropertyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["editor", "name", "display", "isFormattable", "isRequired"],
        "properties": {
          "editor": {
            "description": "The html editor.",
            "$ref": "#/components/schemas/RuleFieldEditor"
          },
          "name": {
            "type": "string",
            "description": "The name of the editor."
          },
          "display": {
            "type": "string",
            "description": "The label to use."
          },
          "options": {
            "type": "array",
            "description": "The options, if the editor is a dropdown.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "The optional description.",
            "nullable": true
          },
          "isFormattable": {
            "type": "boolean",
            "description": "Indicates if the property is formattable."
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the property is required."
          }
        }
      },
      "RuleFieldEditor": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Checkbox", "Dropdown", "Email", "Javascript", "Number", "Password", "Text", "TextArea", "Url"],
        "enum": ["Checkbox", "Dropdown", "Email", "Javascript", "Number", "Password", "Text", "TextArea", "Url"]
      },
      "RulesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The rules.",
                "items": {
                  "$ref": "#/components/schemas/RuleDto"
                }
              },
              "runningRuleId": {
                "type": "string",
                "description": "The ID of the rule that is currently rerunning.",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "createdBy",
              "lastModifiedBy",
              "created",
              "lastModified",
              "version",
              "isEnabled",
              "trigger",
              "action",
              "numSucceeded",
              "numFailed"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the rule."
              },
              "createdBy": {
                "type": "string",
                "description": "The user that has created the rule."
              },
              "lastModifiedBy": {
                "type": "string",
                "description": "The user that has updated the rule."
              },
              "created": {
                "type": "string",
                "description": "The date and time when the rule has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The date and time when the rule has been modified last.",
                "format": "date-time"
              },
              "version": {
                "type": "integer",
                "description": "The version of the rule.",
                "format": "int64"
              },
              "isEnabled": {
                "type": "boolean",
                "description": "Determines if the rule is enabled."
              },
              "name": {
                "type": "string",
                "description": "Optional rule name.",
                "nullable": true
              },
              "trigger": {
                "description": "The trigger properties.",
                "$ref": "#/components/schemas/RuleTriggerDto"
              },
              "action": {
                "description": "The action properties.",
                "$ref": "#/components/schemas/RuleActionDto"
              },
              "numSucceeded": {
                "type": "integer",
                "description": "The number of completed executions.",
                "format": "int64"
              },
              "numFailed": {
                "type": "integer",
                "description": "The number of failed executions.",
                "format": "int64"
              },
              "lastExecuted": {
                "type": "string",
                "description": "The date and time when the rule was executed the last time.",
                "format": "date-time",
                "deprecated": true,
                "x-deprecatedMessage": "Removed when migrated to new rule statistics.",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleTriggerDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "triggerType",
          "mapping": {
            "AssetChanged": "#/components/schemas/AssetChangedRuleTriggerDto",
            "Comment": "#/components/schemas/CommentRuleTriggerDto",
            "ContentChanged": "#/components/schemas/ContentChangedRuleTriggerDto",
            "Manual": "#/components/schemas/ManualRuleTriggerDto",
            "SchemaChanged": "#/components/schemas/SchemaChangedRuleTriggerDto",
            "Usage": "#/components/schemas/UsageRuleTriggerDto"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": ["triggerType"],
        "properties": {
          "triggerType": {
            "type": "string"
          }
        }
      },
      "AssetChangedRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "condition": {
                "type": "string",
                "description": "Javascript condition when to trigger.",
                "nullable": true
              }
            }
          }
        ]
      },
      "CommentRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "condition": {
                "type": "string",
                "description": "Javascript condition when to trigger.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentChangedRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["handleAll"],
            "properties": {
              "schemas": {
                "type": "array",
                "description": "The schema settings.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SchemaCondition"
                }
              },
              "referencedSchemas": {
                "type": "array",
                "description": "The schema references.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SchemaCondition"
                }
              },
              "handleAll": {
                "type": "boolean",
                "description": "Determines whether the trigger should handle all content changes events."
              }
            }
          }
        ]
      },
      "SchemaCondition": {
        "type": "object",
        "additionalProperties": false,
        "required": ["schemaId"],
        "properties": {
          "schemaId": {
            "type": "string"
          },
          "condition": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ManualRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SchemaChangedRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "condition": {
                "type": "string",
                "description": "Javascript condition when to trigger.",
                "nullable": true
              }
            }
          }
        ]
      },
      "UsageRuleTriggerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["limit"],
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The number of monthly api calls.",
                "format": "int32"
              },
              "numDays": {
                "type": "integer",
                "description": "The number of days to check or null for the current month.",
                "format": "int32",
                "maximum": 30.0,
                "minimum": 1.0,
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleActionDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "actionType",
          "mapping": {
            "Algolia": "#/components/schemas/AlgoliaRuleActionDto",
            "AzureQueue": "#/components/schemas/AzureQueueRuleActionDto",
            "Comment": "#/components/schemas/CommentRuleActionDto",
            "CreateContent": "#/components/schemas/CreateContentRuleActionDto",
            "Discourse": "#/components/schemas/DiscourseRuleActionDto",
            "ElasticSearch": "#/components/schemas/ElasticSearchRuleActionDto",
            "Email": "#/components/schemas/EmailRuleActionDto",
            "Fastly": "#/components/schemas/FastlyRuleActionDto",
            "Medium": "#/components/schemas/MediumRuleActionDto",
            "Notification": "#/components/schemas/NotificationRuleActionDto",
            "OpenSearch": "#/components/schemas/OpenSearchRuleActionDto",
            "Prerender": "#/components/schemas/PrerenderRuleActionDto",
            "Script": "#/components/schemas/ScriptRuleActionDto",
            "SignalR": "#/components/schemas/SignalRRuleActionDto",
            "Slack": "#/components/schemas/SlackRuleActionDto",
            "Tweet": "#/components/schemas/TweetRuleActionDto",
            "Typesense": "#/components/schemas/TypesenseRuleActionDto",
            "Webhook": "#/components/schemas/WebhookRuleActionDto"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": ["actionType"],
        "properties": {
          "actionType": {
            "type": "string"
          }
        }
      },
      "AlgoliaRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["appId", "apiKey", "indexName", "document", "delete"],
            "properties": {
              "appId": {
                "title": "Application Id",
                "type": "string",
                "description": "The application ID.",
                "minLength": 1
              },
              "apiKey": {
                "title": "Api Key",
                "type": "string",
                "description": "The API key to grant access to Squidex.",
                "minLength": 1
              },
              "indexName": {
                "title": "Index Name",
                "type": "string",
                "description": "The name of the index.",
                "minLength": 1
              },
              "document": {
                "title": "Document",
                "type": "string",
                "description": "The optional custom document."
              },
              "delete": {
                "title": "Deletion",
                "type": "string",
                "description": "The condition when to delete the entry."
              }
            }
          }
        ]
      },
      "AzureQueueRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["connectionString", "queue", "payload"],
            "properties": {
              "connectionString": {
                "title": "Connection",
                "type": "string",
                "description": "The connection string to the storage account.",
                "minLength": 1
              },
              "queue": {
                "title": "Queue",
                "type": "string",
                "description": "The name of the queue.",
                "minLength": 1
              },
              "payload": {
                "title": "Payload (Optional)",
                "type": "string",
                "description": "Leave it empty to use the full event as body."
              }
            }
          }
        ]
      },
      "CommentRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["text", "client"],
            "properties": {
              "text": {
                "title": "Text",
                "type": "string",
                "description": "The comment text.",
                "minLength": 1
              },
              "client": {
                "title": "Client",
                "type": "string",
                "description": "An optional client name."
              }
            }
          }
        ]
      },
      "CreateContentRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["data", "schema", "client", "publish"],
            "properties": {
              "data": {
                "title": "Data",
                "type": "string",
                "description": "The content data.",
                "minLength": 1
              },
              "schema": {
                "title": "Schema",
                "type": "string",
                "description": "The name of the schema.",
                "minLength": 1
              },
              "client": {
                "title": "Client",
                "type": "string",
                "description": "An optional client name."
              },
              "publish": {
                "title": "Publish",
                "type": "boolean",
                "description": "Publish the content."
              }
            }
          }
        ]
      },
      "DiscourseRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["url", "apiKey", "apiUsername", "text", "title"],
            "properties": {
              "url": {
                "title": "Server Url",
                "type": "string",
                "description": "The url to the discourse server.",
                "format": "uri",
                "minLength": 1
              },
              "apiKey": {
                "title": "Api Key",
                "type": "string",
                "description": "The api key to authenticate to your discourse server.",
                "minLength": 1
              },
              "apiUsername": {
                "title": "Api User",
                "type": "string",
                "description": "The api username to authenticate to your discourse server.",
                "minLength": 1
              },
              "text": {
                "title": "Text",
                "type": "string",
                "description": "The text as markdown.",
                "minLength": 1
              },
              "title": {
                "title": "Title",
                "type": "string",
                "description": "The optional title when creating new topics."
              },
              "topic": {
                "title": "Topic",
                "type": "integer",
                "description": "The optional topic id.",
                "format": "int32",
                "nullable": true
              },
              "category": {
                "title": "Category",
                "type": "integer",
                "description": "The optional category id.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "ElasticSearchRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["host", "indexName", "username", "password", "document", "delete"],
            "properties": {
              "host": {
                "title": "Server Url",
                "type": "string",
                "description": "The url to the instance or cluster.",
                "format": "uri",
                "minLength": 1
              },
              "indexName": {
                "title": "Index Name",
                "type": "string",
                "description": "The name of the index.",
                "minLength": 1
              },
              "username": {
                "title": "Username",
                "type": "string",
                "description": "The optional username."
              },
              "password": {
                "title": "Password",
                "type": "string",
                "description": "The optional password."
              },
              "document": {
                "title": "Document",
                "type": "string",
                "description": "The optional custom document."
              },
              "delete": {
                "title": "Deletion",
                "type": "string",
                "description": "The condition when to delete the document."
              }
            }
          }
        ]
      },
      "EmailRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "serverHost",
              "serverPort",
              "serverUsername",
              "serverPassword",
              "messageFrom",
              "messageTo",
              "messageSubject",
              "messageBody"
            ],
            "properties": {
              "serverHost": {
                "title": "Server Host",
                "type": "string",
                "description": "The IP address or host to the SMTP server.",
                "minLength": 1
              },
              "serverPort": {
                "title": "Server Port",
                "type": "integer",
                "description": "The port to the SMTP server.",
                "format": "int32"
              },
              "serverUsername": {
                "title": "Username",
                "type": "string",
                "description": "The username for the SMTP server.",
                "minLength": 1
              },
              "serverPassword": {
                "title": "Password",
                "type": "string",
                "description": "The password for the SMTP server.",
                "minLength": 1
              },
              "messageFrom": {
                "title": "From Address",
                "type": "string",
                "description": "The email sending address.",
                "minLength": 1
              },
              "messageTo": {
                "title": "To Address",
                "type": "string",
                "description": "The email message will be sent to.",
                "minLength": 1
              },
              "messageSubject": {
                "title": "Subject",
                "type": "string",
                "description": "The subject line for this email message.",
                "minLength": 1
              },
              "messageBody": {
                "title": "Body",
                "type": "string",
                "description": "The message body.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "FastlyRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["apiKey", "serviceId"],
            "properties": {
              "apiKey": {
                "title": "Api Key",
                "type": "string",
                "description": "The API key to grant access to Squidex.",
                "minLength": 1
              },
              "serviceId": {
                "title": "Service Id",
                "type": "string",
                "description": "The ID of the fastly service.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "MediumRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["accessToken", "title", "content", "canonicalUrl", "tags", "publicationId", "isHtml"],
            "properties": {
              "accessToken": {
                "title": "Access Token",
                "type": "string",
                "description": "The self issued access token.",
                "minLength": 1
              },
              "title": {
                "title": "Title",
                "type": "string",
                "description": "The title, used for the url.",
                "minLength": 1
              },
              "content": {
                "title": "Content",
                "type": "string",
                "description": "The content, either html or markdown.",
                "minLength": 1
              },
              "canonicalUrl": {
                "title": "Canonical Url",
                "type": "string",
                "description": "The original home of this content, if it was originally published elsewhere."
              },
              "tags": {
                "title": "Tags",
                "type": "string",
                "description": "The optional comma separated list of tags."
              },
              "publicationId": {
                "title": "Publication Id",
                "type": "string",
                "description": "Optional publication id."
              },
              "isHtml": {
                "title": "Is Html",
                "type": "boolean",
                "description": "Indicates whether the content is markdown or html."
              }
            }
          }
        ]
      },
      "NotificationRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["user", "text", "url", "client"],
            "properties": {
              "user": {
                "title": "User",
                "type": "string",
                "description": "The user id or email.",
                "minLength": 1
              },
              "text": {
                "title": "Title",
                "type": "string",
                "description": "The text to send.",
                "minLength": 1
              },
              "url": {
                "title": "Url",
                "type": "string",
                "description": "The optional url to attach to the notification."
              },
              "client": {
                "title": "Client",
                "type": "string",
                "description": "An optional client name."
              }
            }
          }
        ]
      },
      "OpenSearchRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["host", "indexName", "username", "password", "document", "delete"],
            "properties": {
              "host": {
                "title": "Server Url",
                "type": "string",
                "description": "The url to the instance or cluster.",
                "format": "uri",
                "minLength": 1
              },
              "indexName": {
                "title": "Index Name",
                "type": "string",
                "description": "The name of the index.",
                "minLength": 1
              },
              "username": {
                "title": "Username",
                "type": "string",
                "description": "The optional username."
              },
              "password": {
                "title": "Password",
                "type": "string",
                "description": "The optional password."
              },
              "document": {
                "title": "Document",
                "type": "string",
                "description": "The optional custom document."
              },
              "delete": {
                "title": "Deletion",
                "type": "string",
                "description": "The condition when to delete the document."
              }
            }
          }
        ]
      },
      "PrerenderRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["token", "url"],
            "properties": {
              "token": {
                "title": "Token",
                "type": "string",
                "description": "The prerender token from your account.",
                "minLength": 1
              },
              "url": {
                "title": "Url",
                "type": "string",
                "description": "The url to recache.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ScriptRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["script"],
            "properties": {
              "script": {
                "title": "Script",
                "type": "string",
                "description": "The script to render.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SignalRRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["connectionString", "hubName", "action", "methodName", "target", "payload"],
            "properties": {
              "connectionString": {
                "title": "Connection",
                "type": "string",
                "description": "The connection string to the Azure SignalR.",
                "minLength": 1
              },
              "hubName": {
                "title": "Hub Name",
                "type": "string",
                "description": "The name of the hub.",
                "minLength": 1
              },
              "action": {
                "title": "Action",
                "description": "* Broadcast = send to all users.\n * User = send to all target users(s).\n * Group = send to all target group(s).",
                "$ref": "#/components/schemas/ActionTypeEnum"
              },
              "methodName": {
                "title": "Methode Name",
                "type": "string",
                "description": "Set the Name of the hub method received by the customer."
              },
              "target": {
                "title": "Target (Optional)",
                "type": "string",
                "description": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action."
              },
              "payload": {
                "title": "Payload (Optional)",
                "type": "string",
                "description": "Leave it empty to use the full event as body."
              }
            }
          }
        ]
      },
      "ActionTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Broadcast", "User", "Group"],
        "enum": ["Broadcast", "User", "Group"]
      },
      "SlackRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["webhookUrl", "text"],
            "properties": {
              "webhookUrl": {
                "title": "Webhook Url",
                "type": "string",
                "description": "The slack webhook url.",
                "format": "uri",
                "minLength": 1
              },
              "text": {
                "title": "Text",
                "type": "string",
                "description": "The text that is sent as message to slack.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TweetRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["accessToken", "accessSecret", "text"],
            "properties": {
              "accessToken": {
                "title": "Access Token",
                "type": "string",
                "description": " The generated access token.",
                "minLength": 1
              },
              "accessSecret": {
                "title": "Access Secret",
                "type": "string",
                "description": " The generated access secret.",
                "minLength": 1
              },
              "text": {
                "title": "Text",
                "type": "string",
                "description": "The text that is sent as tweet to twitter.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TypesenseRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["host", "indexName", "apiKey", "document", "delete"],
            "properties": {
              "host": {
                "title": "Server Url",
                "type": "string",
                "description": "The url to the instance or cluster.",
                "format": "uri",
                "minLength": 1
              },
              "indexName": {
                "title": "Index Name",
                "type": "string",
                "description": "The name of the index.",
                "minLength": 1
              },
              "apiKey": {
                "title": "Api Key",
                "type": "string",
                "description": "The api key.",
                "minLength": 1
              },
              "document": {
                "title": "Document",
                "type": "string",
                "description": "The optional custom document."
              },
              "delete": {
                "title": "Deletion",
                "type": "string",
                "description": "The condition when to delete the document."
              }
            }
          }
        ]
      },
      "WebhookRuleActionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleActionDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["url", "method", "payload", "payloadType", "headers", "sharedSecret"],
            "properties": {
              "url": {
                "title": "Url",
                "type": "string",
                "description": "The url to the webhook.",
                "format": "uri",
                "minLength": 1
              },
              "method": {
                "title": "Method",
                "description": "The type of the request.",
                "$ref": "#/components/schemas/WebhookMethod"
              },
              "payload": {
                "title": "Payload (Optional)",
                "type": "string",
                "description": "Leave it empty to use the full event as body."
              },
              "payloadType": {
                "title": "Payload Type",
                "type": "string",
                "description": "The mime type of the payload."
              },
              "headers": {
                "title": "Headers (Optional)",
                "type": "string",
                "description": "The message headers in the format '[Key]=[Value]', one entry per line."
              },
              "sharedSecret": {
                "title": "Shared Secret",
                "type": "string",
                "description": "The shared secret that is used to calculate the payload signature."
              }
            }
          }
        ]
      },
      "WebhookMethod": {
        "type": "string",
        "description": "",
        "x-enumNames": ["POST", "PUT", "GET", "DELETE", "PATCH"],
        "enum": ["POST", "PUT", "GET", "DELETE", "PATCH"]
      },
      "CreateRuleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["trigger", "action"],
        "properties": {
          "trigger": {
            "description": "The trigger properties.",
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          "action": {
            "description": "The action properties.",
            "$ref": "#/components/schemas/RuleActionDto"
          }
        }
      },
      "UpdateRuleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional rule name.",
            "nullable": true
          },
          "trigger": {
            "description": "The trigger properties.",
            "nullable": true,
            "$ref": "#/components/schemas/RuleTriggerDto"
          },
          "action": {
            "description": "The action properties.",
            "nullable": true,
            "$ref": "#/components/schemas/RuleActionDto"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Enable or disable the rule.",
            "nullable": true
          }
        }
      },
      "SimulatedRuleEventsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of simulated rule events.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The simulated rule events.",
                "items": {
                  "$ref": "#/components/schemas/SimulatedRuleEventDto"
                }
              }
            }
          }
        ]
      },
      "SimulatedRuleEventDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["eventId", "uniqueId", "eventName", "event", "skipReasons"],
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The unique event id.",
            "format": "guid",
            "minLength": 1
          },
          "uniqueId": {
            "type": "string",
            "description": "The the unique id of the simulated event.",
            "minLength": 1
          },
          "eventName": {
            "type": "string",
            "description": "The name of the event.",
            "minLength": 1
          },
          "event": {
            "description": "The source event."
          },
          "enrichedEvent": {
            "description": "The enriched event.",
            "nullable": true
          },
          "actionName": {
            "type": "string",
            "description": "The data for the action.",
            "nullable": true
          },
          "actionData": {
            "type": "string",
            "description": "The name of the action.",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "The name of the event.",
            "nullable": true
          },
          "skipReasons": {
            "type": "array",
            "description": "The reason why the event has been skipped.",
            "items": {
              "$ref": "#/components/schemas/SkipReason"
            }
          }
        }
      },
      "SkipReason": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "ConditionDoesNotMatch",
          "ConditionPrecheckDoesNotMatch",
          "Disabled",
          "Failed",
          "FromRule",
          "NoAction",
          "NoTrigger",
          "TooOld",
          "WrongEvent",
          "WrongEventForTrigger"
        ],
        "enum": [
          "None",
          "ConditionDoesNotMatch",
          "ConditionPrecheckDoesNotMatch",
          "Disabled",
          "Failed",
          "FromRule",
          "NoAction",
          "NoTrigger",
          "TooOld",
          "WrongEvent",
          "WrongEventForTrigger"
        ]
      },
      "RuleEventsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of rule events.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The rule events.",
                "items": {
                  "$ref": "#/components/schemas/RuleEventDto"
                }
              }
            }
          }
        ]
      },
      "RuleEventDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "created", "description", "eventName", "numCalls", "result", "jobResult"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the event."
              },
              "created": {
                "type": "string",
                "description": "The time when the event has been created.",
                "format": "date-time"
              },
              "description": {
                "type": "string",
                "description": "The description."
              },
              "eventName": {
                "type": "string",
                "description": "The name of the event."
              },
              "lastDump": {
                "type": "string",
                "description": "The last dump.",
                "nullable": true
              },
              "numCalls": {
                "type": "integer",
                "description": "The number of calls.",
                "format": "int32"
              },
              "nextAttempt": {
                "type": "string",
                "description": "The next attempt.",
                "format": "date-time",
                "nullable": true
              },
              "result": {
                "description": "The result of the event.",
                "$ref": "#/components/schemas/RuleResult"
              },
              "jobResult": {
                "description": "The result of the job.",
                "$ref": "#/components/schemas/RuleJobResult"
              }
            }
          }
        ]
      },
      "RuleResult": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Pending", "Success", "Failed", "Timeout"],
        "enum": ["Pending", "Success", "Failed", "Timeout"]
      },
      "RuleJobResult": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Pending", "Success", "Retry", "Failed", "Cancelled"],
        "enum": ["Pending", "Success", "Retry", "Failed", "Cancelled"]
      },
      "PlansDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["plans", "locked"],
        "properties": {
          "plans": {
            "type": "array",
            "description": "The available plans.",
            "items": {
              "$ref": "#/components/schemas/PlanDto"
            }
          },
          "currentPlanId": {
            "type": "string",
            "description": "The current plan id.",
            "nullable": true
          },
          "planOwner": {
            "type": "string",
            "description": "The plan owner.",
            "nullable": true
          },
          "portalLink": {
            "type": "string",
            "description": "The link to the management portal.",
            "format": "uri",
            "nullable": true
          },
          "referral": {
            "description": "The referral management.",
            "nullable": true,
            "$ref": "#/components/schemas/ReferralInfo"
          },
          "locked": {
            "description": "The reason why the plan cannot be changed.",
            "$ref": "#/components/schemas/PlansLockedReason"
          }
        }
      },
      "PlanDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["id", "name", "costs", "maxApiBytes", "maxApiCalls", "maxAssetSize", "maxContributors"],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the plan."
          },
          "name": {
            "type": "string",
            "description": "The name of the plan."
          },
          "costs": {
            "type": "string",
            "description": "The monthly costs of the plan."
          },
          "confirmText": {
            "type": "string",
            "description": "An optional confirm text for the monthly subscription.",
            "nullable": true
          },
          "yearlyConfirmText": {
            "type": "string",
            "description": "An optional confirm text for the yearly subscription.",
            "nullable": true
          },
          "yearlyCosts": {
            "type": "string",
            "description": "The yearly costs of the plan.",
            "nullable": true
          },
          "yearlyId": {
            "type": "string",
            "description": "The yearly ID of the plan.",
            "nullable": true
          },
          "maxApiBytes": {
            "type": "integer",
            "description": "The maximum number of API traffic.",
            "format": "int64"
          },
          "maxApiCalls": {
            "type": "integer",
            "description": "The maximum number of API calls.",
            "format": "int64"
          },
          "maxAssetSize": {
            "type": "integer",
            "description": "The maximum allowed asset size.",
            "format": "int64"
          },
          "maxContributors": {
            "type": "integer",
            "description": "The maximum number of contributors.",
            "format": "int32"
          }
        }
      },
      "ReferralInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": ["code", "earned", "condition"],
        "properties": {
          "code": {
            "type": "string"
          },
          "earned": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          }
        }
      },
      "PlansLockedReason": {
        "type": "string",
        "description": "",
        "x-enumNames": ["None", "NotOwner", "NoPermission", "ManagedByTeam"],
        "enum": ["None", "NotOwner", "NoPermission", "ManagedByTeam"]
      },
      "PlanChangedDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "redirectUri": {
            "type": "string",
            "description": "Optional redirect uri.",
            "nullable": true
          }
        }
      },
      "ChangePlanDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["planId"],
        "properties": {
          "planId": {
            "type": "string",
            "description": "The new plan id.",
            "minLength": 1
          }
        }
      },
      "ExposedValues": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "FeaturesDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["features", "version"],
        "properties": {
          "features": {
            "type": "array",
            "description": "The latest features.",
            "items": {
              "$ref": "#/components/schemas/FeatureDto"
            }
          },
          "version": {
            "type": "integer",
            "description": "The recent version.",
            "format": "int32"
          }
        }
      },
      "FeatureDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "text"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the feature."
          },
          "text": {
            "type": "string",
            "description": "The description text."
          }
        }
      },
      "LanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["iso2Code", "englishName", "nativeName"],
        "properties": {
          "iso2Code": {
            "type": "string",
            "description": "The iso code of the language."
          },
          "englishName": {
            "type": "string",
            "description": "The english name of the language."
          },
          "nativeName": {
            "type": "string",
            "description": "The native name of the language."
          }
        }
      },
      "HistoryEventDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["message", "eventType", "actor", "eventId", "created", "version"],
        "properties": {
          "message": {
            "type": "string",
            "description": "The message for the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the original event."
          },
          "actor": {
            "type": "string",
            "description": "The user who called the action."
          },
          "eventId": {
            "type": "string",
            "description": "Gets a unique id for the event."
          },
          "created": {
            "type": "string",
            "description": "The time when the event happened.",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "description": "The version identifier.",
            "format": "int64"
          }
        }
      },
      "EventConsumersDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The event consumers.",
                "items": {
                  "$ref": "#/components/schemas/EventConsumerDto"
                }
              }
            }
          }
        ]
      },
      "EventConsumerDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "isStopped", "isResetting", "count"],
            "properties": {
              "isStopped": {
                "type": "boolean",
                "description": "Indicates if the event consumer has been started."
              },
              "isResetting": {
                "type": "boolean",
                "description": "Indicates if the event consumer is resetting at the moment."
              },
              "count": {
                "type": "integer",
                "description": "The number of handled events.",
                "format": "int32"
              },
              "name": {
                "type": "string",
                "description": "The name of the event consumer.",
                "minLength": 1
              },
              "error": {
                "type": "string",
                "description": "The error details if the event consumer has been stopped after a failure.",
                "nullable": true
              },
              "position": {
                "type": "string",
                "description": "The position within the vent stream.",
                "nullable": true
              }
            }
          }
        ]
      },
      "QueryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "description": "The optional list of ids to query.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "oData": {
            "type": "string",
            "description": "The optional odata query.",
            "nullable": true
          },
          "q": {
            "description": "The optional json query.",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "The parent id (for assets).",
            "nullable": true
          }
        }
      },
      "ImportContentsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["datas"],
        "properties": {
          "datas": {
            "type": "array",
            "description": "The data to import.",
            "items": {
              "$ref": "#/components/schemas/ContentData"
            }
          },
          "publish": {
            "type": "boolean",
            "description": "True to automatically publish the content.",
            "deprecated": true,
            "x-deprecatedMessage": "Use bulk endpoint now."
          },
          "doNotScript": {
            "type": "boolean",
            "description": "True to turn off scripting for faster inserts. Default: true."
          },
          "optimizeValidation": {
            "type": "boolean",
            "description": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true."
          }
        }
      },
      "ChangeStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["status"],
        "properties": {
          "status": {
            "type": "string",
            "description": "The new status.",
            "minLength": 1
          },
          "dueTime": {
            "type": "string",
            "description": "The due time.",
            "format": "date-time",
            "nullable": true
          },
          "checkReferrers": {
            "type": "boolean",
            "description": "True to check referrers of this content."
          }
        }
      },
      "CommentsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["version"],
        "properties": {
          "createdComments": {
            "type": "array",
            "description": "The created comments including the updates.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            }
          },
          "updatedComments": {
            "type": "array",
            "description": "The updates comments since the last version.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            }
          },
          "deletedComments": {
            "type": "array",
            "description": "The deleted comments since the last version.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "description": "The current version.",
            "format": "int64"
          }
        }
      },
      "CommentDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["id", "time", "user", "text"],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the comment."
          },
          "time": {
            "type": "string",
            "description": "The time when the comment was created or updated last.",
            "format": "date-time"
          },
          "user": {
            "type": "string",
            "description": "The user who created or updated the comment."
          },
          "text": {
            "type": "string",
            "description": "The text of the comment."
          },
          "url": {
            "type": "string",
            "description": "The url where the comment is created.",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UpsertCommentDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["text"],
        "properties": {
          "text": {
            "type": "string",
            "description": "The comment text.",
            "minLength": 1
          },
          "url": {
            "type": "string",
            "description": "The url where the comment is created.",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "BackupJobsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The backups.",
                "items": {
                  "$ref": "#/components/schemas/BackupJobDto"
                }
              }
            }
          }
        ]
      },
      "BackupJobDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "started", "handledEvents", "handledAssets", "status"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the backup job."
              },
              "started": {
                "type": "string",
                "description": "The time when the job has been started.",
                "format": "date-time"
              },
              "stopped": {
                "type": "string",
                "description": "The time when the job has been stopped.",
                "format": "date-time",
                "nullable": true
              },
              "handledEvents": {
                "type": "integer",
                "description": "The number of handled events.",
                "format": "int32"
              },
              "handledAssets": {
                "type": "integer",
                "description": "The number of handled assets.",
                "format": "int32"
              },
              "status": {
                "description": "The status of the operation.",
                "$ref": "#/components/schemas/JobStatus"
              }
            }
          }
        ]
      },
      "JobStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Created", "Started", "Completed", "Failed"],
        "enum": ["Created", "Started", "Completed", "Failed"]
      },
      "RestoreJobDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["url", "log", "started", "status"],
        "properties": {
          "url": {
            "type": "string",
            "description": "The uri to load from.",
            "format": "uri"
          },
          "log": {
            "type": "array",
            "description": "The status log.",
            "items": {
              "type": "string"
            }
          },
          "started": {
            "type": "string",
            "description": "The time when the job has been started.",
            "format": "date-time"
          },
          "stopped": {
            "type": "string",
            "description": "The time when the job has been stopped.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "description": "The status of the operation.",
            "$ref": "#/components/schemas/JobStatus"
          }
        }
      },
      "RestoreRequestDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["url"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the app.",
            "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The url to the restore file.",
            "format": "uri",
            "minLength": 1
          }
        }
      },
      "ResizeMode": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Crop", "CropUpsize", "Pad", "BoxPad", "Max", "Min", "Stretch"],
        "enum": ["Crop", "CropUpsize", "Pad", "BoxPad", "Max", "Min", "Stretch"]
      },
      "ImageFormat": {
        "type": "string",
        "description": "",
        "x-enumNames": ["AVIF", "BMP", "GIF", "JPEG", "PNG", "TGA", "TIFF", "WEBP"],
        "enum": ["AVIF", "BMP", "GIF", "JPEG", "PNG", "TGA", "TIFF", "WEBP"]
      },
      "AssetFoldersDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items", "path"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of assets.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The assets folders.",
                "items": {
                  "$ref": "#/components/schemas/AssetFolderDto"
                }
              },
              "path": {
                "type": "array",
                "description": "The path to the current folder.",
                "items": {
                  "$ref": "#/components/schemas/AssetFolderDto"
                }
              }
            }
          }
        ]
      },
      "AssetFolderDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "parentId", "folderName", "version"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the asset."
              },
              "parentId": {
                "type": "string",
                "description": "The ID of the parent folder. Empty for files without parent."
              },
              "folderName": {
                "type": "string",
                "description": "The folder name."
              },
              "version": {
                "type": "integer",
                "description": "The version of the asset folder.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "AssetFolderScope": {
        "type": "string",
        "description": "",
        "x-enumNames": ["PathAndItems", "Path", "Items"],
        "enum": ["PathAndItems", "Path", "Items"]
      },
      "CreateAssetFolderDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["folderName"],
        "properties": {
          "folderName": {
            "type": "string",
            "description": "The name of the folder.",
            "minLength": 1
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent folder."
          }
        }
      },
      "RenameAssetFolderDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["folderName"],
        "properties": {
          "folderName": {
            "type": "string",
            "description": "The name of the folder.",
            "minLength": 1
          }
        }
      },
      "MoveAssetFolderDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "parentId": {
            "type": "string",
            "description": "The parent folder id."
          }
        }
      },
      "RenameTagDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["tagName"],
        "properties": {
          "tagName": {
            "type": "string",
            "description": "The new name for the tag.",
            "minLength": 1
          }
        }
      },
      "AssetsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["total", "items"],
            "properties": {
              "total": {
                "type": "integer",
                "description": "The total number of assets.",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "description": "The assets.",
                "items": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          }
        ]
      },
      "AssetDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "parentId",
              "fileName",
              "isProtected",
              "slug",
              "mimeType",
              "fileType",
              "metadataText",
              "metadata",
              "fileSize",
              "fileVersion",
              "type",
              "createdBy",
              "lastModifiedBy",
              "created",
              "lastModified",
              "version",
              "isImage"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the asset."
              },
              "parentId": {
                "type": "string",
                "description": "The ID of the parent folder. Empty for files without parent."
              },
              "fileName": {
                "type": "string",
                "description": "The file name."
              },
              "fileHash": {
                "type": "string",
                "description": "The file hash.",
                "nullable": true
              },
              "isProtected": {
                "type": "boolean",
                "description": "True, when the asset is not public."
              },
              "slug": {
                "type": "string",
                "description": "The slug."
              },
              "mimeType": {
                "type": "string",
                "description": "The mime type."
              },
              "fileType": {
                "type": "string",
                "description": "The file type."
              },
              "metadataText": {
                "type": "string",
                "description": "The formatted text representation of the metadata."
              },
              "editToken": {
                "type": "string",
                "description": "The UI token.",
                "nullable": true
              },
              "metadata": {
                "type": "object",
                "description": "The asset metadata.",
                "additionalProperties": {
                  "description": "Any"
                }
              },
              "tags": {
                "type": "array",
                "description": "The asset tags.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "fileSize": {
                "type": "integer",
                "description": "The size of the file in bytes.",
                "format": "int64"
              },
              "fileVersion": {
                "type": "integer",
                "description": "The version of the file.",
                "format": "int64"
              },
              "type": {
                "description": "The type of the asset.",
                "$ref": "#/components/schemas/AssetType"
              },
              "createdBy": {
                "type": "string",
                "description": "The user that has created the schema."
              },
              "lastModifiedBy": {
                "type": "string",
                "description": "The user that has updated the asset."
              },
              "created": {
                "type": "string",
                "description": "The date and time when the asset has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The date and time when the asset has been modified last.",
                "format": "date-time"
              },
              "version": {
                "type": "integer",
                "description": "The version of the asset.",
                "format": "int64"
              },
              "_meta": {
                "description": "The metadata.",
                "nullable": true,
                "$ref": "#/components/schemas/AssetMeta"
              },
              "isImage": {
                "type": "boolean",
                "description": "Determines of the created file is an image.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'type' field now."
              },
              "pixelWidth": {
                "type": "integer",
                "description": "The width of the image in pixels if the asset is an image.",
                "format": "int32",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'metadata' field now.",
                "nullable": true
              },
              "pixelHeight": {
                "type": "integer",
                "description": "The height of the image in pixels if the asset is an image.",
                "format": "int32",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'metadata' field now.",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssetMeta": {
        "type": "object",
        "additionalProperties": false,
        "required": ["isDuplicate"],
        "properties": {
          "isDuplicate": {
            "type": "string",
            "description": "Indicates whether the asset is a duplicate."
          }
        }
      },
      "BulkUpdateAssetsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "jobs": {
            "type": "array",
            "description": "The contents to update or insert.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BulkUpdateAssetsJobDto"
            }
          },
          "checkReferrers": {
            "type": "boolean",
            "description": "True to check referrers of deleted assets."
          },
          "optimizeValidation": {
            "type": "boolean",
            "description": "True to turn off costly validation: Folder checks. Default: true."
          },
          "doNotScript": {
            "type": "boolean",
            "description": "True to turn off scripting for faster inserts. Default: true."
          }
        }
      },
      "BulkUpdateAssetsJobDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional ID of the asset to update."
          },
          "type": {
            "description": "The update type.",
            "$ref": "#/components/schemas/BulkUpdateAssetType"
          },
          "parentId": {
            "type": "string",
            "description": "The parent folder id."
          },
          "fileName": {
            "type": "string",
            "description": "The new name of the asset.",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "description": "The new slug of the asset.",
            "nullable": true
          },
          "isProtected": {
            "type": "boolean",
            "description": "True, when the asset is not public.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "description": "The new asset tags.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The asset metadata.",
            "nullable": true,
            "additionalProperties": {
              "description": "Any"
            }
          },
          "permanent": {
            "type": "boolean",
            "description": "True to delete the asset permanently."
          },
          "expectedVersion": {
            "type": "integer",
            "description": "The expected version.",
            "format": "int64"
          }
        }
      },
      "BulkUpdateAssetType": {
        "type": "string",
        "description": "",
        "x-enumNames": ["Annotate", "Move", "Delete"],
        "enum": ["Annotate", "Move", "Delete"]
      },
      "AnnotateAssetDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The new name of the asset.",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "description": "The new slug of the asset.",
            "nullable": true
          },
          "isProtected": {
            "type": "boolean",
            "description": "True, when the asset is not public.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "description": "The new asset tags.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The asset metadata.",
            "nullable": true,
            "additionalProperties": {
              "description": "Any"
            }
          }
        }
      },
      "MoveAssetDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "parentId": {
            "type": "string",
            "description": "The parent folder id."
          }
        }
      },
      "AssetScriptsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["version"],
            "properties": {
              "query": {
                "type": "string",
                "description": "The script that is executed for each asset when querying assets.",
                "nullable": true
              },
              "queryPre": {
                "type": "string",
                "description": "The script that is executed for all assets when querying assets.",
                "nullable": true
              },
              "create": {
                "type": "string",
                "description": "The script that is executed when creating an asset.",
                "nullable": true
              },
              "update": {
                "type": "string",
                "description": "The script that is executed when updating a content.",
                "nullable": true
              },
              "annotate": {
                "type": "string",
                "description": "The script that is executed when annotating a content.",
                "nullable": true
              },
              "move": {
                "type": "string",
                "description": "The script that is executed when moving a content.",
                "nullable": true
              },
              "delete": {
                "type": "string",
                "description": "The script that is executed when deleting a content.",
                "nullable": true
              },
              "version": {
                "type": "integer",
                "description": "The version of the app.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "UpdateAssetScriptsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "type": "string",
            "description": "The script that is executed for each asset when querying assets.",
            "nullable": true
          },
          "queryPre": {
            "type": "string",
            "description": "The script that is executed for all assets when querying assets.",
            "nullable": true
          },
          "create": {
            "type": "string",
            "description": "The script that is executed when creating an asset.",
            "nullable": true
          },
          "update": {
            "type": "string",
            "description": "The script that is executed when updating a content.",
            "nullable": true
          },
          "annotate": {
            "type": "string",
            "description": "The script that is executed when annotating a content.",
            "nullable": true
          },
          "move": {
            "type": "string",
            "description": "The script that is executed when moving a content.",
            "nullable": true
          },
          "delete": {
            "type": "string",
            "description": "The script that is executed when deleting a content.",
            "nullable": true
          }
        }
      },
      "ClientsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The clients.",
                "items": {
                  "$ref": "#/components/schemas/ClientDto"
                }
              }
            }
          }
        ]
      },
      "ClientDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "secret", "name", "apiCallsLimit", "apiTrafficLimit", "allowAnonymous"],
            "properties": {
              "id": {
                "type": "string",
                "description": "The client id."
              },
              "secret": {
                "type": "string",
                "description": "The client secret."
              },
              "name": {
                "type": "string",
                "description": "The client name."
              },
              "role": {
                "type": "string",
                "description": "The role of the client.",
                "nullable": true
              },
              "apiCallsLimit": {
                "type": "integer",
                "description": "The number of allowed api calls per month for this client.",
                "format": "int64"
              },
              "apiTrafficLimit": {
                "type": "integer",
                "description": "The number of allowed api traffic bytes per month for this client.",
                "format": "int64"
              },
              "allowAnonymous": {
                "type": "boolean",
                "description": "True to allow anonymous access without an access token for this client."
              }
            }
          }
        ]
      },
      "CreateClientDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the client.",
            "minLength": 1,
            "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          }
        }
      },
      "UpdateClientDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The new display name of the client.",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "The role of the client.",
            "nullable": true
          },
          "allowAnonymous": {
            "type": "boolean",
            "description": "True to allow anonymous access without an access token for this client.",
            "nullable": true
          },
          "apiCallsLimit": {
            "type": "integer",
            "description": "The number of allowed api calls per month for this client.",
            "format": "int64",
            "nullable": true
          },
          "apiTrafficLimit": {
            "type": "integer",
            "description": "The number of allowed api traffic bytes per month for this client.",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "AppLanguagesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The languages.",
                "items": {
                  "$ref": "#/components/schemas/AppLanguageDto"
                }
              }
            }
          }
        ]
      },
      "AppLanguageDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["iso2Code", "englishName", "fallback", "isMaster", "isOptional"],
            "properties": {
              "iso2Code": {
                "type": "string",
                "description": "The iso code of the language."
              },
              "englishName": {
                "type": "string",
                "description": "The english name of the language."
              },
              "fallback": {
                "type": "array",
                "description": "The fallback languages.",
                "items": {
                  "type": "string"
                }
              },
              "isMaster": {
                "type": "boolean",
                "description": "Indicates if the language is the master language."
              },
              "isOptional": {
                "type": "boolean",
                "description": "Indicates if the language is optional."
              }
            }
          }
        ]
      },
      "AddLanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["language"],
        "properties": {
          "language": {
            "type": "string",
            "description": "The language to add.",
            "minLength": 1
          }
        }
      },
      "UpdateLanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isMaster": {
            "type": "boolean",
            "description": "Set the value to true to make the language the master.",
            "nullable": true
          },
          "isOptional": {
            "type": "boolean",
            "description": "Set the value to true to make the language optional."
          },
          "fallback": {
            "type": "array",
            "description": "Optional fallback languages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RolesDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The roles.",
                "items": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          }
        ]
      },
      "RoleDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "numClients", "numContributors", "isDefaultRole", "permissions", "properties"],
            "properties": {
              "name": {
                "type": "string",
                "description": "The role name."
              },
              "numClients": {
                "type": "integer",
                "description": "The number of clients with this role.",
                "format": "int32"
              },
              "numContributors": {
                "type": "integer",
                "description": "The number of contributors with this role.",
                "format": "int32"
              },
              "isDefaultRole": {
                "type": "boolean",
                "description": "Indicates if the role is an builtin default role."
              },
              "permissions": {
                "type": "array",
                "description": "Associated list of permissions.",
                "items": {
                  "type": "string"
                }
              },
              "properties": {
                "type": "object",
                "description": "Associated list of UI properties.",
                "additionalProperties": {
                  "description": "Any"
                }
              }
            }
          }
        ]
      },
      "AddRoleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The role name.",
            "minLength": 1
          }
        }
      },
      "UpdateRoleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["permissions"],
        "properties": {
          "permissions": {
            "type": "array",
            "description": "Associated list of permissions.",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "description": "Associated list of UI properties.",
            "additionalProperties": {
              "description": "Any"
            }
          }
        }
      },
      "AppDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "version",
              "created",
              "lastModified",
              "permissions",
              "canAccessApi",
              "canAccessContent",
              "roleProperties"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the app."
              },
              "name": {
                "type": "string",
                "description": "The name of the app.",
                "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
              },
              "label": {
                "type": "string",
                "description": "The optional label of the app.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "The optional description of the app.",
                "nullable": true
              },
              "version": {
                "type": "integer",
                "description": "The version of the app.",
                "format": "int64"
              },
              "created": {
                "type": "string",
                "description": "The timestamp when the app has been created.",
                "format": "date-time"
              },
              "lastModified": {
                "type": "string",
                "description": "The timestamp when the app has been modified last.",
                "format": "date-time"
              },
              "teamId": {
                "type": "string",
                "description": "The ID of the team.",
                "nullable": true
              },
              "permissions": {
                "type": "array",
                "description": "The permission level of the user.",
                "items": {
                  "type": "string"
                }
              },
              "canAccessApi": {
                "type": "boolean",
                "description": "Indicates if the user can access the api.",
                "deprecated": true,
                "x-deprecatedMessage": "Use 'roleProperties' field now."
              },
              "canAccessContent": {
                "type": "boolean",
                "description": "Indicates if the user can access at least one content."
              },
              "roleName": {
                "type": "string",
                "description": "The role name of the user.",
                "nullable": true
              },
              "roleProperties": {
                "type": "object",
                "description": "The properties from the role.",
                "additionalProperties": {
                  "description": "Any"
                }
              }
            }
          }
        ]
      },
      "CreateAppDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the app.",
            "minLength": 1,
            "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          },
          "template": {
            "type": "string",
            "description": "Initialize the app with the inbuilt template.",
            "nullable": true
          }
        }
      },
      "UpdateAppDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "label": {
            "type": "string",
            "description": "The optional label of your app.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The optional description of your app.",
            "nullable": true
          }
        }
      },
      "TransferToTeamDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "teamId": {
            "type": "string",
            "description": "The ID of the team.",
            "nullable": true
          }
        }
      },
      "AppSettingsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["patterns", "editors", "hideScheduler", "hideDateTimeModeButton", "version"],
            "properties": {
              "patterns": {
                "type": "array",
                "description": "The configured app patterns.",
                "items": {
                  "$ref": "#/components/schemas/PatternDto"
                }
              },
              "editors": {
                "type": "array",
                "description": "The configured UI editors.",
                "items": {
                  "$ref": "#/components/schemas/EditorDto"
                }
              },
              "hideScheduler": {
                "type": "boolean",
                "description": "Hide the scheduler for content items."
              },
              "hideDateTimeModeButton": {
                "type": "boolean",
                "description": "Hide the datetime mode button."
              },
              "version": {
                "type": "integer",
                "description": "The version of the app.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "PatternDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "regex"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the suggestion."
          },
          "regex": {
            "type": "string",
            "description": "The regex pattern."
          },
          "message": {
            "type": "string",
            "description": "The regex message.",
            "nullable": true
          }
        }
      },
      "EditorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "url"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the editor."
          },
          "url": {
            "type": "string",
            "description": "The url to the editor."
          }
        }
      },
      "UpdateAppSettingsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["patterns", "editors"],
        "properties": {
          "patterns": {
            "type": "array",
            "description": "The configured app patterns.",
            "items": {
              "$ref": "#/components/schemas/PatternDto"
            }
          },
          "editors": {
            "type": "array",
            "description": "The configured UI editors.",
            "items": {
              "$ref": "#/components/schemas/EditorDto"
            }
          },
          "hideScheduler": {
            "type": "boolean",
            "description": "Hide the scheduler for content items."
          },
          "hideDateTimeModeButton": {
            "type": "boolean",
            "description": "Hide the datetime mode button."
          }
        }
      },
      "WorkflowsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": ["items", "errors"],
            "properties": {
              "items": {
                "type": "array",
                "description": "The workflow.",
                "items": {
                  "$ref": "#/components/schemas/WorkflowDto"
                }
              },
              "errors": {
                "type": "array",
                "description": "The errros that should be fixed.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "WorkflowDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The workflow id."
              },
              "name": {
                "type": "string",
                "description": "The name of the workflow.",
                "nullable": true
              },
              "steps": {
                "type": "object",
                "description": "The workflow steps.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/WorkflowStepDto"
                }
              },
              "schemaIds": {
                "type": "array",
                "description": "The schema ids.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "initial": {
                "type": "string",
                "description": "The initial step."
              }
            }
          }
        ]
      },
      "WorkflowStepDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "transitions": {
            "type": "object",
            "description": "The transitions.",
            "additionalProperties": {
              "$ref": "#/components/schemas/WorkflowTransitionDto"
            }
          },
          "color": {
            "type": "string",
            "description": "The optional color.",
            "nullable": true
          },
          "validate": {
            "type": "boolean",
            "description": "True if the content should be validated when moving to this step."
          },
          "noUpdate": {
            "type": "boolean",
            "description": "Indicates if updates should not be allowed."
          },
          "noUpdateExpression": {
            "type": "string",
            "description": "Optional expression that must evaluate to true when you want to prevent updates.",
            "nullable": true
          },
          "noUpdateRoles": {
            "type": "array",
            "description": "Optional list of roles to restrict the updates for users with these roles.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkflowTransitionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "expression": {
            "type": "string",
            "description": "The optional expression.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "The optional restricted role.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddWorkflowDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the workflow.",
            "minLength": 1
          }
        }
      },
      "UpdateWorkflowDto": {
        "type": "object",
        "additionalProperties": false,
        "required": ["steps", "initial"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the workflow.",
            "nullable": true
          },
          "steps": {
            "type": "object",
            "description": "The workflow steps.",
            "additionalProperties": {
              "$ref": "#/components/schemas/WorkflowStepDto"
            }
          },
          "schemaIds": {
            "type": "array",
            "description": "The schema ids.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "initial": {
            "type": "string",
            "description": "The initial step.",
            "minLength": 1
          }
        }
      }
    },
    "securitySchemes": {
      "squidex-oauth-auth": {
        "type": "openIdConnect",
        "description": "Squidex uses OpenId Connect (OIDC) with the Client Credentials Flow (defined in OAuth 2.0 RFC 6749, section 4.4).\r\n\r\nThe OpenId Connect Client Credentials flow can be used for machine to machine authentication. In this grant a specific user is not authorized but rather the credentials are verified and a generic `access_token` is returned.\r\n\r\nThe `access_token` is a signed JSON Web Token (JWT) which contains expiry information. \r\n\r\nTo retrieve an access token you must pass the Client ID and Client Secret to the token endpoint to authenticate yourself and get a token:\r\n\r\n    $ curl\r\n        -X POST 'https://localhost:5001/identity-server/connect/token' \r\n        -H 'Content-Type: application/x-www-form-urlencoded' \r\n        -d 'grant_type=client_credentials&\r\n            client_id=[CLIENT_ID]&\r\n            client_secret=[CLIENT_SECRET]&\r\n\t\t\tscope=squidex-api'\r\n\r\nPass this token to all consecutiv requests to the API via the `Authorization` header:\r\n\r\n     Authorization: Bearer <token>",
        "openIdConnectUrl": "https://localhost:5001/identity-server/.well-known/openid-configuration"
      }
    }
  },
  "security": [
    {
      "squidex-oauth-auth": ["squidex-api"]
    }
  ],
  "externalDocs": {
    "url": "https://docs.squidex.io"
  },
  "x-fern-sdk-variables": {
    "appName": {
      "type": "string"
    }
  }
}
