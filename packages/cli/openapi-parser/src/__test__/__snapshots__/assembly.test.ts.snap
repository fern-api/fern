// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser assembly parse open api 1`] = `
{
  "description": "AssemblyAI API",
  "endpoints": [
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Upload your audio or video file directly to the AssemblyAI API if it isn't accessible via a URL already.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [],
      "generatedRequestName": "FilesUploadRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "uploadFile",
      "path": "/v2/upload",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": undefined,
        "type": "octetStream",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "File uploaded successfully",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "FilesUploadResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "UploadedFile",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "files",
        ],
        "methodName": "upload",
      },
      "server": [],
      "summary": "Upload an audio or video file which can be transcribed.",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Retrieve a list of transcripts you have created.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "page_details": {
                "properties": {
                  "current_url": {
                    "primitive": {
                      "string": "current_url",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                  "limit": {
                    "primitive": {
                      "int": 1,
                      "type": "int",
                    },
                    "type": "primitive",
                  },
                  "next_url": {
                    "primitive": {
                      "string": "next_url",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                  "prev_url": {
                    "primitive": {
                      "string": "prev_url",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                  "result_count": {
                    "primitive": {
                      "int": 1,
                      "type": "int",
                    },
                    "type": "primitive",
                  },
                },
                "type": "object",
              },
              "transcripts": {
                "array": [
                  {
                    "properties": {
                      "audio_url": {
                        "primitive": {
                          "string": "audio_url",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "completed": {
                        "primitive": {
                          "datetime": "2024-01-15T09:30:00Z",
                          "type": "datetime",
                        },
                        "type": "primitive",
                      },
                      "created": {
                        "primitive": {
                          "datetime": "2024-01-15T09:30:00Z",
                          "type": "datetime",
                        },
                        "type": "primitive",
                      },
                      "id": {
                        "primitive": {
                          "string": "id",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "resource_url": {
                        "primitive": {
                          "string": "resource_url",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "status": {
                        "enum": "queued",
                        "type": "enum",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptListRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "listTranscripts",
      "path": "/v2/transcript",
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Maximum amount of transcripts to retrieve",
          "name": "limit",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestLimit",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "Maximum amount of transcripts to retrieve",
              "generatedName": "TranscriptListRequestLimit",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Maximum amount of transcripts to retrieve",
                "generatedName": "TranscriptListRequestLimit",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "description": "Filter by transcript status",
          "name": "status",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
              "generatedName": "TranscriptListRequestStatus",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
                "generatedName": "TranscriptListRequestStatus",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "enum",
                "values": [
                  {
                    "casing": {
                      "camel": undefined,
                      "pascal": undefined,
                      "screamingSnake": undefined,
                      "snake": undefined,
                    },
                    "description": "The audio file is in the queue to be processed by the API.",
                    "generatedName": "queued",
                    "nameOverride": undefined,
                    "value": "queued",
                  },
                  {
                    "casing": {
                      "camel": undefined,
                      "pascal": undefined,
                      "screamingSnake": undefined,
                      "snake": undefined,
                    },
                    "description": "The audio file is being processed by the API.",
                    "generatedName": "processing",
                    "nameOverride": undefined,
                    "value": "processing",
                  },
                  {
                    "casing": {
                      "camel": undefined,
                      "pascal": undefined,
                      "screamingSnake": undefined,
                      "snake": undefined,
                    },
                    "description": "The transcription job has been completed successfully.",
                    "generatedName": "completed",
                    "nameOverride": undefined,
                    "value": "completed",
                  },
                  {
                    "casing": {
                      "camel": undefined,
                      "pascal": undefined,
                      "screamingSnake": undefined,
                      "snake": undefined,
                    },
                    "description": "An error occurred while processing the audio file.",
                    "generatedName": "error",
                    "nameOverride": undefined,
                    "value": "error",
                  },
                ],
              },
            },
          },
        },
        {
          "description": "Only get transcripts created on this date",
          "name": "created_on",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestCreatedOn",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "Only get transcripts created on this date",
              "generatedName": "TranscriptListRequestCreatedOn",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Only get transcripts created on this date",
                "generatedName": "TranscriptListRequestCreatedOn",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "description": "Get transcripts that were created before this transcript ID",
          "name": "before_id",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestBeforeId",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "Get transcripts that were created before this transcript ID",
              "generatedName": "TranscriptListRequestBeforeId",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Get transcripts that were created before this transcript ID",
                "generatedName": "TranscriptListRequestBeforeId",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "description": "Get transcripts that were created after this transcript ID",
          "name": "after_id",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestAfterId",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "Get transcripts that were created after this transcript ID",
              "generatedName": "TranscriptListRequestAfterId",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Get transcripts that were created after this transcript ID",
                "generatedName": "TranscriptListRequestAfterId",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "description": "Only get throttled transcripts, overrides the status filter",
          "name": "throttled_only",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListRequestThrottledOnly",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": "Only get throttled transcripts, overrides the status filter",
              "generatedName": "TranscriptListRequestThrottledOnly",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Only get throttled transcripts, overrides the status filter",
                "generatedName": "TranscriptListRequestThrottledOnly",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "A list of transcripts filtered by \`limit\` and \`status\`",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptListResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "TranscriptList",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "list",
      },
      "server": [],
      "summary": "List transcripts",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Create a transcript from an audio or video file that is accessible via a URL.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "audio_url": {
                "primitive": {
                  "string": "audio_url",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "acoustic_model": {
                "primitive": {
                  "string": "acoustic_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "audio_duration": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "audio_end_at": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_start_from": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_url": {
                "primitive": {
                  "string": "audio_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "auto_chapters": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "count": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "rank": {
                            "primitive": {
                              "float": 1.1,
                              "type": "float",
                            },
                            "type": "primitive",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamps": {
                            "array": [
                              {
                                "properties": {
                                  "end": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                  "start": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              "boost_param": {
                "primitive": {
                  "string": "boost_param",
                  "type": "string",
                },
                "type": "primitive",
              },
              "chapters": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "gist": {
                        "primitive": {
                          "string": "gist",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "headline": {
                        "primitive": {
                          "string": "headline",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "summary": {
                        "primitive": {
                          "string": "summary",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "confidence": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "content_safety": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "content_safety_labels": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "labels": {
                            "array": [
                              {
                                "properties": {
                                  "confidence": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                  "label": {
                                    "primitive": {
                                      "string": "label",
                                      "type": "string",
                                    },
                                    "type": "primitive",
                                  },
                                  "severity": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          "sentences_idx_end": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "sentences_idx_start": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "severity_score_summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "severity_score_summary",
                                  "type": "string",
                                },
                                "value": {
                                  "properties": {
                                    "high": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "low": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "medium": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                  },
                                  "type": "object",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "summary",
                                  "type": "string",
                                },
                                "value": {
                                  "primitive": {
                                    "double": 1.1,
                                    "type": "double",
                                  },
                                  "type": "primitive",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamp": {
                            "properties": {
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                },
                "type": "object",
              },
              "custom_spelling": {
                "array": [
                  {
                    "properties": {
                      "from": {
                        "array": [
                          {
                            "primitive": {
                              "string": "from",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        ],
                        "type": "array",
                      },
                      "to": {
                        "primitive": {
                          "string": "to",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "custom_topics": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "disfluencies": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "dual_channel": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "entities": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "entity_type": {
                        "enum": "banking_information",
                        "type": "enum",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "entity_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "error": {
                "primitive": {
                  "string": "error",
                  "type": "string",
                },
                "type": "primitive",
              },
              "filter_profanity": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "format_text": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                  "summary": {
                    "map": [
                      {
                        "key": {
                          "string": "summary",
                          "type": "string",
                        },
                        "value": {
                          "primitive": {
                            "double": 1.1,
                            "type": "double",
                          },
                          "type": "primitive",
                        },
                      },
                    ],
                    "type": "map",
                  },
                },
                "type": "object",
              },
              "id": {
                "primitive": {
                  "string": "id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "language_code": {
                "enum": "en",
                "type": "enum",
              },
              "language_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "language_model": {
                "primitive": {
                  "string": "language_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "punctuate": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio_quality": {
                "primitive": {
                  "string": "redact_pii_audio_quality",
                  "type": "string",
                },
                "type": "primitive",
              },
              "redact_pii_policies": {
                "array": [
                  {
                    "enum": "medical_process",
                    "type": "enum",
                  },
                ],
                "type": "array",
              },
              "redact_pii_sub": {
                "enum": "entity_type",
                "type": "enum",
              },
              "sentiment_analysis": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "sentiment_analysis_results": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "sentiment": {
                        "enum": "POSITIVE",
                        "type": "enum",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "speaker_labels": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "speakers_expected": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "speech_threshold": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "speed_boost": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "status": {
                "enum": "queued",
                "type": "enum",
              },
              "summarization": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "summary": {
                "primitive": {
                  "string": "summary",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_model": {
                "primitive": {
                  "string": "summary_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_type": {
                "primitive": {
                  "string": "summary_type",
                  "type": "string",
                },
                "type": "primitive",
              },
              "text": {
                "primitive": {
                  "string": "text",
                  "type": "string",
                },
                "type": "primitive",
              },
              "throttled": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "topics": {
                "array": [
                  {
                    "primitive": {
                      "string": "topics",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "utterances": {
                "array": [
                  {
                    "properties": {
                      "channel": {
                        "primitive": {
                          "string": "channel",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "words": {
                        "array": [
                          {
                            "properties": {
                              "confidence": {
                                "primitive": {
                                  "double": 1.1,
                                  "type": "double",
                                },
                                "type": "primitive",
                              },
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "text": {
                                "primitive": {
                                  "string": "text",
                                  "type": "string",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "webhook_auth": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "webhook_auth_header_name": {
                "primitive": {
                  "string": "webhook_auth_header_name",
                  "type": "string",
                },
                "type": "primitive",
              },
              "webhook_status_code": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "webhook_url": {
                "primitive": {
                  "string": "webhook_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "word_boost": {
                "array": [
                  {
                    "primitive": {
                      "string": "word_boost",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "words": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptCreateRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "createTranscript",
      "path": "/v2/transcript",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptCreateRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "CreateTranscriptParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "Transcript created and queued for processing.",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptCreateResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "Transcript",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "create",
      },
      "server": [],
      "summary": "Create a transcript from an audio file",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Get the transcript resource. The transcript is ready when the "status" is "completed".",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "primitive": {
                  "string": "transcript_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "acoustic_model": {
                "primitive": {
                  "string": "acoustic_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "audio_duration": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "audio_end_at": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_start_from": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_url": {
                "primitive": {
                  "string": "audio_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "auto_chapters": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "count": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "rank": {
                            "primitive": {
                              "float": 1.1,
                              "type": "float",
                            },
                            "type": "primitive",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamps": {
                            "array": [
                              {
                                "properties": {
                                  "end": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                  "start": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              "boost_param": {
                "primitive": {
                  "string": "boost_param",
                  "type": "string",
                },
                "type": "primitive",
              },
              "chapters": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "gist": {
                        "primitive": {
                          "string": "gist",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "headline": {
                        "primitive": {
                          "string": "headline",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "summary": {
                        "primitive": {
                          "string": "summary",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "confidence": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "content_safety": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "content_safety_labels": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "labels": {
                            "array": [
                              {
                                "properties": {
                                  "confidence": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                  "label": {
                                    "primitive": {
                                      "string": "label",
                                      "type": "string",
                                    },
                                    "type": "primitive",
                                  },
                                  "severity": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          "sentences_idx_end": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "sentences_idx_start": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "severity_score_summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "severity_score_summary",
                                  "type": "string",
                                },
                                "value": {
                                  "properties": {
                                    "high": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "low": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "medium": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                  },
                                  "type": "object",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "summary",
                                  "type": "string",
                                },
                                "value": {
                                  "primitive": {
                                    "double": 1.1,
                                    "type": "double",
                                  },
                                  "type": "primitive",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamp": {
                            "properties": {
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                },
                "type": "object",
              },
              "custom_spelling": {
                "array": [
                  {
                    "properties": {
                      "from": {
                        "array": [
                          {
                            "primitive": {
                              "string": "from",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        ],
                        "type": "array",
                      },
                      "to": {
                        "primitive": {
                          "string": "to",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "custom_topics": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "disfluencies": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "dual_channel": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "entities": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "entity_type": {
                        "enum": "banking_information",
                        "type": "enum",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "entity_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "error": {
                "primitive": {
                  "string": "error",
                  "type": "string",
                },
                "type": "primitive",
              },
              "filter_profanity": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "format_text": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                  "summary": {
                    "map": [
                      {
                        "key": {
                          "string": "summary",
                          "type": "string",
                        },
                        "value": {
                          "primitive": {
                            "double": 1.1,
                            "type": "double",
                          },
                          "type": "primitive",
                        },
                      },
                    ],
                    "type": "map",
                  },
                },
                "type": "object",
              },
              "id": {
                "primitive": {
                  "string": "id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "language_code": {
                "enum": "en",
                "type": "enum",
              },
              "language_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "language_model": {
                "primitive": {
                  "string": "language_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "punctuate": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio_quality": {
                "primitive": {
                  "string": "redact_pii_audio_quality",
                  "type": "string",
                },
                "type": "primitive",
              },
              "redact_pii_policies": {
                "array": [
                  {
                    "enum": "medical_process",
                    "type": "enum",
                  },
                ],
                "type": "array",
              },
              "redact_pii_sub": {
                "enum": "entity_type",
                "type": "enum",
              },
              "sentiment_analysis": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "sentiment_analysis_results": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "sentiment": {
                        "enum": "POSITIVE",
                        "type": "enum",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "speaker_labels": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "speakers_expected": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "speech_threshold": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "speed_boost": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "status": {
                "enum": "queued",
                "type": "enum",
              },
              "summarization": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "summary": {
                "primitive": {
                  "string": "summary",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_model": {
                "primitive": {
                  "string": "summary_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_type": {
                "primitive": {
                  "string": "summary_type",
                  "type": "string",
                },
                "type": "primitive",
              },
              "text": {
                "primitive": {
                  "string": "text",
                  "type": "string",
                },
                "type": "primitive",
              },
              "throttled": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "topics": {
                "array": [
                  {
                    "primitive": {
                      "string": "topics",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "utterances": {
                "array": [
                  {
                    "properties": {
                      "channel": {
                        "primitive": {
                          "string": "channel",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "words": {
                        "array": [
                          {
                            "properties": {
                              "confidence": {
                                "primitive": {
                                  "double": 1.1,
                                  "type": "double",
                                },
                                "type": "primitive",
                              },
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "text": {
                                "primitive": {
                                  "string": "text",
                                  "type": "string",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "webhook_auth": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "webhook_auth_header_name": {
                "primitive": {
                  "string": "webhook_auth_header_name",
                  "type": "string",
                },
                "type": "primitive",
              },
              "webhook_status_code": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "webhook_url": {
                "primitive": {
                  "string": "webhook_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "word_boost": {
                "array": [
                  {
                    "primitive": {
                      "string": "word_boost",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "words": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptGetRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "getTranscript",
      "path": "/v2/transcript/{transcript_id}",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "The transcript resource",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptGetResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "Transcript",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "get",
      },
      "server": [],
      "summary": "Get the transcript",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Delete the transcript",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "primitive": {
                  "string": "transcript_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "acoustic_model": {
                "primitive": {
                  "string": "acoustic_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "audio_duration": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "audio_end_at": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_start_from": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "audio_url": {
                "primitive": {
                  "string": "audio_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "auto_chapters": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "auto_highlights_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "count": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "rank": {
                            "primitive": {
                              "float": 1.1,
                              "type": "float",
                            },
                            "type": "primitive",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamps": {
                            "array": [
                              {
                                "properties": {
                                  "end": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                  "start": {
                                    "primitive": {
                                      "int": 1,
                                      "type": "int",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              "boost_param": {
                "primitive": {
                  "string": "boost_param",
                  "type": "string",
                },
                "type": "primitive",
              },
              "chapters": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "gist": {
                        "primitive": {
                          "string": "gist",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "headline": {
                        "primitive": {
                          "string": "headline",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "summary": {
                        "primitive": {
                          "string": "summary",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "confidence": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "content_safety": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "content_safety_labels": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "labels": {
                            "array": [
                              {
                                "properties": {
                                  "confidence": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                  "label": {
                                    "primitive": {
                                      "string": "label",
                                      "type": "string",
                                    },
                                    "type": "primitive",
                                  },
                                  "severity": {
                                    "primitive": {
                                      "double": 1.1,
                                      "type": "double",
                                    },
                                    "type": "primitive",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          "sentences_idx_end": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "sentences_idx_start": {
                            "primitive": {
                              "int": 1,
                              "type": "int",
                            },
                            "type": "primitive",
                          },
                          "severity_score_summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "severity_score_summary",
                                  "type": "string",
                                },
                                "value": {
                                  "properties": {
                                    "high": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "low": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                    "medium": {
                                      "primitive": {
                                        "double": 1.1,
                                        "type": "double",
                                      },
                                      "type": "primitive",
                                    },
                                  },
                                  "type": "object",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "summary": {
                            "map": [
                              {
                                "key": {
                                  "string": "summary",
                                  "type": "string",
                                },
                                "value": {
                                  "primitive": {
                                    "double": 1.1,
                                    "type": "double",
                                  },
                                  "type": "primitive",
                                },
                              },
                            ],
                            "type": "map",
                          },
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                          "timestamp": {
                            "properties": {
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                },
                "type": "object",
              },
              "custom_spelling": {
                "array": [
                  {
                    "properties": {
                      "from": {
                        "array": [
                          {
                            "primitive": {
                              "string": "from",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        ],
                        "type": "array",
                      },
                      "to": {
                        "primitive": {
                          "string": "to",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "custom_topics": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "disfluencies": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "dual_channel": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "entities": {
                "array": [
                  {
                    "properties": {
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "entity_type": {
                        "enum": "banking_information",
                        "type": "enum",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "entity_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "error": {
                "primitive": {
                  "string": "error",
                  "type": "string",
                },
                "type": "primitive",
              },
              "filter_profanity": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "format_text": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "iab_categories_result": {
                "properties": {
                  "results": {
                    "array": [
                      {
                        "properties": {
                          "text": {
                            "primitive": {
                              "string": "text",
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "status": {
                    "enum": "success",
                    "type": "enum",
                  },
                  "summary": {
                    "map": [
                      {
                        "key": {
                          "string": "summary",
                          "type": "string",
                        },
                        "value": {
                          "primitive": {
                            "double": 1.1,
                            "type": "double",
                          },
                          "type": "primitive",
                        },
                      },
                    ],
                    "type": "map",
                  },
                },
                "type": "object",
              },
              "id": {
                "primitive": {
                  "string": "id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "language_code": {
                "enum": "en",
                "type": "enum",
              },
              "language_detection": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "language_model": {
                "primitive": {
                  "string": "language_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "punctuate": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "redact_pii_audio_quality": {
                "primitive": {
                  "string": "redact_pii_audio_quality",
                  "type": "string",
                },
                "type": "primitive",
              },
              "redact_pii_policies": {
                "array": [
                  {
                    "enum": "medical_process",
                    "type": "enum",
                  },
                ],
                "type": "array",
              },
              "redact_pii_sub": {
                "enum": "entity_type",
                "type": "enum",
              },
              "sentiment_analysis": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "sentiment_analysis_results": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "sentiment": {
                        "enum": "POSITIVE",
                        "type": "enum",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "speaker_labels": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "speakers_expected": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "speech_threshold": {
                "primitive": {
                  "float": 1.1,
                  "type": "float",
                },
                "type": "primitive",
              },
              "speed_boost": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "status": {
                "enum": "queued",
                "type": "enum",
              },
              "summarization": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "summary": {
                "primitive": {
                  "string": "summary",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_model": {
                "primitive": {
                  "string": "summary_model",
                  "type": "string",
                },
                "type": "primitive",
              },
              "summary_type": {
                "primitive": {
                  "string": "summary_type",
                  "type": "string",
                },
                "type": "primitive",
              },
              "text": {
                "primitive": {
                  "string": "text",
                  "type": "string",
                },
                "type": "primitive",
              },
              "throttled": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "topics": {
                "array": [
                  {
                    "primitive": {
                      "string": "topics",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "utterances": {
                "array": [
                  {
                    "properties": {
                      "channel": {
                        "primitive": {
                          "string": "channel",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "words": {
                        "array": [
                          {
                            "properties": {
                              "confidence": {
                                "primitive": {
                                  "double": 1.1,
                                  "type": "double",
                                },
                                "type": "primitive",
                              },
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "text": {
                                "primitive": {
                                  "string": "text",
                                  "type": "string",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "webhook_auth": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "webhook_auth_header_name": {
                "primitive": {
                  "string": "webhook_auth_header_name",
                  "type": "string",
                },
                "type": "primitive",
              },
              "webhook_status_code": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
              "webhook_url": {
                "primitive": {
                  "string": "webhook_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "word_boost": {
                "array": [
                  {
                    "primitive": {
                      "string": "word_boost",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
              "words": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "speaker": {
                        "primitive": {
                          "string": "speaker",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptDeleteRequest",
      "headers": [],
      "internal": undefined,
      "method": "DELETE",
      "operationId": "deleteTranscript",
      "path": "/v2/transcript/{transcript_id}",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptDeleteRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "The deleted transcript response.",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptDeleteResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "Transcript",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "delete",
      },
      "server": [],
      "summary": "Delete the transcript",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Export your transcript in SRT or VTT format, to be plugged into a video player for subtitles and closed captions.",
      "errorStatusCode": [],
      "examples": [],
      "generatedRequestName": "TranscriptGetSubtitlesRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "getSubtitles",
      "path": "/v2/transcript/{transcript_id}/{subtitle_format}",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetSubtitlesRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
        {
          "description": "The format of the captions.",
          "name": "subtitle_format",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetSubtitlesRequestSubtitleFormat",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "SubtitleFormat",
            "type": "reference",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [
        {
          "description": "The maximum number of characters per caption",
          "name": "chars_per_caption",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetSubtitlesRequestCharsPerCaption",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "nullable",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptGetSubtitlesRequestCharsPerCaption",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "The exported captions as text",
        "type": "text",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "getSubtitles",
      },
      "server": [],
      "summary": "Export transcript as SRT or VTT captions.",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Get the transcript split by sentences. The API will attempt to semantically segment the transcript into sentences to create more reader-friendly transcripts.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "primitive": {
                  "string": "transcript_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "audio_duration": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "confidence": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "id": {
                "primitive": {
                  "string": "id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "sentences": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "words": {
                        "array": [
                          {
                            "properties": {
                              "confidence": {
                                "primitive": {
                                  "double": 1.1,
                                  "type": "double",
                                },
                                "type": "primitive",
                              },
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "text": {
                                "primitive": {
                                  "string": "text",
                                  "type": "string",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptGetSentencesRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "getTranscriptSentences",
      "path": "/v2/transcript/{transcript_id}/sentences",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetSentencesRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "Exported sentences",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptGetSentencesResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "SentencesResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "getSentences",
      },
      "server": [],
      "summary": "Get the transcript split by sentences",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Get the transcript split by paragraphs. The API will attempt to semantically segment your transcript into paragraphs to create more reader-friendly transcripts.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "primitive": {
                  "string": "transcript_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "audio_duration": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "confidence": {
                "primitive": {
                  "double": 1.1,
                  "type": "double",
                },
                "type": "primitive",
              },
              "id": {
                "primitive": {
                  "string": "id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "paragraphs": {
                "array": [
                  {
                    "properties": {
                      "confidence": {
                        "primitive": {
                          "double": 1.1,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                      "end": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "start": {
                        "primitive": {
                          "int": 1,
                          "type": "int",
                        },
                        "type": "primitive",
                      },
                      "text": {
                        "primitive": {
                          "string": "text",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "words": {
                        "array": [
                          {
                            "properties": {
                              "confidence": {
                                "primitive": {
                                  "double": 1.1,
                                  "type": "double",
                                },
                                "type": "primitive",
                              },
                              "end": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "start": {
                                "primitive": {
                                  "int": 1,
                                  "type": "int",
                                },
                                "type": "primitive",
                              },
                              "text": {
                                "primitive": {
                                  "string": "text",
                                  "type": "string",
                                },
                                "type": "primitive",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptGetParagraphsRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "getTranscriptParagraphs",
      "path": "/v2/transcript/{transcript_id}/paragraphs",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetParagraphsRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "Exported paragraphs",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptGetParagraphsResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "ParagraphsResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "getParagraphs",
      },
      "server": [],
      "summary": "Get the transcript split by paragraphs",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Search through the transcript for a specific set of keywords. You can search for individual words, numbers, or phrases containing up to five words or numbers.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [],
      "generatedRequestName": "TranscriptWordSearchRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "wordSearch",
      "path": "/v2/transcript/{transcript_id}/word-search",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordSearchRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [
        {
          "description": "Keywords to search for",
          "name": "words",
          "parameterNameOverride": undefined,
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordSearchRequestWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptWordSearchRequestWordsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "Word search response",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptWordSearchResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "WordSearchResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "wordSearch",
      },
      "server": [],
      "summary": "Search the given transcript for words, numbers, or phrases",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "primitive": {
                  "string": "transcript_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "redacted_audio_url": {
                "primitive": {
                  "string": "redacted_audio_url",
                  "type": "string",
                },
                "type": "primitive",
              },
              "status": {
                "literal": {
                  "string": "redacted_audio_ready",
                  "type": "string",
                },
                "type": "literal",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "TranscriptGetRedactedAudioRequest",
      "headers": [],
      "internal": undefined,
      "method": "GET",
      "operationId": "getRedactedAudio",
      "path": "/v2/transcript/{transcript_id}/redacted-audio",
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptGetRedactedAudioRequestTranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "The redacted audio object containing the status and URL to the redacted audio.",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "TranscriptGetRedactedAudioResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RedactedAudioResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "transcript",
        ],
        "methodName": "getRedactedAudio",
      },
      "server": [],
      "summary": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
      "tags": [
        "transcript",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Create a temporary authentication token for real-time transcription",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "expires_in": {
                "primitive": {
                  "int": 1,
                  "type": "int",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "token": {
                "primitive": {
                  "string": "token",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "RealtimeCreateTemporaryTokenRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "createRealtimeToken",
      "path": "/v2/realtime/token",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "RealtimeCreateTemporaryTokenRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "CreateRealtimeTemporaryTokenParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "Temporary authentication token generated.",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "RealtimeCreateTemporaryTokenResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeTemporaryTokenResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "realtime",
        ],
        "methodName": "createTemporaryToken",
      },
      "server": [],
      "summary": "Create a temporary authentication token for real-time transcription",
      "tags": [
        "realtime",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Custom Summary allows you to distill a piece of audio into a few impactful sentences. You can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "array": [
                  {
                    "primitive": {
                      "string": "transcript_ids",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "request_id": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "response": {
                "primitive": {
                  "string": "response",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "LemurSummaryRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "lemurSummary",
      "path": "/lemur/v3/generate/summary",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "LemurSummaryRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurSummaryParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "LeMUR summary response",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "LemurSummaryResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurSummaryResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "lemur",
        ],
        "methodName": "summary",
      },
      "server": [],
      "summary": "Generate a custom summary from one or more transcripts.",
      "tags": [
        "LeMUR",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Question & Answer allows you to ask free-form questions about a single transcript or a group of transcripts. The questions can be any whose answers you find useful, such as judging whether a caller is likely to become a customer or whether all items on a meeting's agenda were covered.",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "questions": {
                "array": [
                  {
                    "properties": {
                      "question": {
                        "primitive": {
                          "string": "question",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "transcript_ids": {
                "array": [
                  {
                    "primitive": {
                      "string": "transcript_ids",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "request_id": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "response": {
                "array": [
                  {
                    "properties": {
                      "answer": {
                        "primitive": {
                          "string": "answer",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "question": {
                        "primitive": {
                          "string": "question",
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "LemurQuestionAnswerRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "lemurQuestionAnswer",
      "path": "/lemur/v3/generate/question-answer",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "LemurQuestionAnswerRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurQuestionAnswerParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "LeMUR question & answer response",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "LemurQuestionAnswerResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurQuestionAnswerResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "lemur",
        ],
        "methodName": "questionAnswer",
      },
      "server": [],
      "summary": "Create answers to one or more questions about one or more transcripts.",
      "tags": [
        "LeMUR",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Use LeMUR to generate a list of Action Items from a transcript",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "array": [
                  {
                    "primitive": {
                      "string": "transcript_ids",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "request_id": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "response": {
                "primitive": {
                  "string": "response",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "LemurActionItemsRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "lemurActionItems",
      "path": "/lemur/v3/generate/action-items",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "LemurActionItemsRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurActionItemsParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "LeMUR action items response",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "LemurActionItemsResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurActionItemsResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "lemur",
        ],
        "methodName": "actionItems",
      },
      "server": [],
      "summary": "Extract action items from one or more meeting transcripts.",
      "tags": [
        "LeMUR",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Use LeMUR to ask anything with Custom Task",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "prompt": {
                "primitive": {
                  "string": "prompt",
                  "type": "string",
                },
                "type": "primitive",
              },
              "transcript_ids": {
                "array": [
                  {
                    "primitive": {
                      "string": "transcript_ids",
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "request_id": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "response": {
                "primitive": {
                  "string": "response",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "LemurTaskRequest",
      "headers": [],
      "internal": undefined,
      "method": "POST",
      "operationId": "lemurTask",
      "path": "/lemur/v3/generate/task",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "contentType": undefined,
        "description": undefined,
        "fullExamples": [],
        "schema": {
          "description": undefined,
          "generatedName": "LemurTaskRequest",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurTaskParameters",
          "type": "reference",
        },
        "type": "json",
      },
      "requestNameOverride": undefined,
      "response": {
        "description": "LeMUR task response",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "LemurTaskResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurTaskResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "lemur",
        ],
        "methodName": "task",
      },
      "server": [],
      "summary": "Ask LeMUR to use one or more transcripts with a Custom Task to handle your specialized task.",
      "tags": [
        "LeMUR",
      ],
    },
    {
      "audiences": [],
      "authed": true,
      "availability": undefined,
      "description": "Delete the data for a previously submitted LeMUR request.
The LLM response data, as well as any context provided in the original request will be removed.
",
      "errorStatusCode": [
        400,
        401,
        404,
        429,
        500,
        503,
        504,
      ],
      "examples": [
        {
          "codeSamples": [],
          "description": undefined,
          "headers": [],
          "name": undefined,
          "pathParameters": [
            {
              "name": "request_id",
              "value": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          ],
          "queryParameters": [],
          "request": undefined,
          "response": {
            "properties": {
              "deleted": {
                "primitive": {
                  "boolean": true,
                  "type": "boolean",
                },
                "type": "primitive",
              },
              "request_id": {
                "primitive": {
                  "string": "request_id",
                  "type": "string",
                },
                "type": "primitive",
              },
              "request_id_to_purge": {
                "primitive": {
                  "string": "request_id_to_purge",
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            "type": "object",
          },
        },
      ],
      "generatedRequestName": "LemurPurgeRequestDataRequest",
      "headers": [],
      "internal": undefined,
      "method": "DELETE",
      "operationId": "purgeLemurRequestData",
      "path": "/lemur/v3/{request_id}",
      "pathParameters": [
        {
          "description": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request.",
          "name": "request_id",
          "schema": {
            "description": undefined,
            "generatedName": "LemurPurgeRequestDataRequestRequestId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
          "variableReference": undefined,
        },
      ],
      "queryParameters": [],
      "request": undefined,
      "requestNameOverride": undefined,
      "response": {
        "description": "LeMUR request data deleted.",
        "fullExamples": [],
        "responseProperty": undefined,
        "schema": {
          "description": undefined,
          "generatedName": "LemurPurgeRequestDataResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "PurgeLemurRequestDataResponse",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": {
        "groupName": [
          "lemur",
        ],
        "methodName": "purgeRequestData",
      },
      "server": [],
      "summary": "Delete the data for a previously submitted LeMUR request.",
      "tags": [
        "LeMUR",
      ],
    },
  ],
  "errors": {
    "400": {
      "description": undefined,
      "generatedName": "BadRequestError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "generatedName": "BadRequestErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": "Error",
        "type": "reference",
      },
    },
    "401": {
      "description": undefined,
      "generatedName": "UnauthorizedError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "generatedName": "UnauthorizedErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": "Error",
        "type": "reference",
      },
    },
    "404": {
      "description": undefined,
      "generatedName": "NotFoundError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "generatedName": "NotFoundErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": "Error",
        "type": "reference",
      },
    },
    "429": {
      "description": undefined,
      "generatedName": "TooManyRequestsError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "generatedName": "TooManyRequestsErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": "Error",
        "type": "reference",
      },
    },
    "500": {
      "description": undefined,
      "generatedName": "InternalServerError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "generatedName": "InternalServerErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": "Error",
        "type": "reference",
      },
    },
    "503": {
      "description": undefined,
      "generatedName": "ServiceUnavailableError",
      "nameOverride": null,
      "schema": {
        "description": undefined,
        "example": undefined,
        "generatedName": "ServiceUnavailableErrorBody",
        "groupName": undefined,
        "nameOverride": undefined,
        "type": "unknown",
      },
    },
  },
  "globalHeaders": undefined,
  "hasEndpointsMarkedInternal": false,
  "nonRequestReferencedSchemas": [
    "UploadedFile",
    "TranscriptListParameters/properties/limit",
    "TranscriptListParameters/properties/status",
    "TranscriptListParameters/properties/created_on",
    "TranscriptListParameters/properties/before_id",
    "TranscriptListParameters/properties/after_id",
    "TranscriptListParameters/properties/throttled_only",
    "TranscriptList",
    "Transcript",
    "SubtitleFormat",
    "SentencesResponse",
    "ParagraphsResponse",
    "WordSearchResponse",
    "RedactedAudioResponse",
    "RealtimeTemporaryTokenResponse",
    "LemurSummaryResponse",
    "LemurQuestionAnswerResponse",
    "LemurActionItemsResponse",
    "LemurTaskResponse",
    "PurgeLemurRequestDataResponse",
    "RedactedAudioStatus",
    "WordSearchMatch",
    "WordSearchTimestamp",
    "TranscriptLanguageCode",
    "TranscriptBoostParam",
    "PiiPolicy",
    "SubstitutionPolicy",
    "TranscriptCustomSpelling",
    "SummaryModel",
    "SummaryType",
    "CreateTranscriptOptionalParameters",
    "TranscriptWord",
    "TranscriptStatus",
    "TranscriptUtterance",
    "AutoHighlightsResult",
    "AudioIntelligenceModelStatus",
    "ContentSafetyLabelResult",
    "TopicDetectionResult",
    "Chapter",
    "SentimentAnalysisResult",
    "Entity",
    "EntityType",
    "Sentiment",
    "Timestamp",
    "ContentSafetyLabel",
    "SeverityScoreSummary",
    "AutoHighlightResult",
    "TranscriptSentence",
    "TranscriptParagraph",
    "PageDetails",
    "TranscriptListItem",
    "LemurBaseResponse",
    "LemurQuestionAnswer",
    "LemurModel",
    "LemurBaseParameters",
    "LemurQuestion",
    "Error",
  ],
  "schemas": {
    "AudioData": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "AudioData",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "audioDataAudioData",
          "key": "audio_data",
          "schema": {
            "description": "Raw audio data, base64 encoded. This can be the raw data recorded directly from a microphone or read from an audio file.",
            "generatedName": "AudioDataAudioData",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "AudioIntelligenceModelStatus": {
      "description": "Will be either success, or unavailable in the rare case that the model failed.",
      "generatedName": "AudioIntelligenceModelStatus",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "success",
          "nameOverride": undefined,
          "value": "success",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "unavailable",
          "nameOverride": undefined,
          "value": "unavailable",
        },
      ],
    },
    "AutoHighlightResult": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "AutoHighlightResult",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "autoHighlightResultCount",
          "key": "count",
          "schema": {
            "description": "The total number of times the key phrase appears in the audio file",
            "generatedName": "AutoHighlightResultCount",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "autoHighlightResultRank",
          "key": "rank",
          "schema": {
            "description": "The total relevancy to the overall audio file of this key phrase - a greater number means more relevant",
            "generatedName": "AutoHighlightResultRank",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "float",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "autoHighlightResultText",
          "key": "text",
          "schema": {
            "description": "The text itself of the key phrase",
            "generatedName": "AutoHighlightResultText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "autoHighlightResultTimestamps",
          "key": "timestamps",
          "schema": {
            "description": "The timestamp of the of the key phrase",
            "generatedName": "AutoHighlightResultTimestamps",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "AutoHighlightResultTimestampsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "Timestamp",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "AutoHighlightsResult": {
      "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.
See [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.
",
      "generatedName": "AutoHighlightsResult",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "nullable",
      "value": {
        "allOf": [],
        "allOfPropertyConflicts": [],
        "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.
See [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.
",
        "generatedName": "AutoHighlightsResult",
        "groupName": undefined,
        "nameOverride": undefined,
        "properties": [
          {
            "audiences": [],
            "conflict": {},
            "generatedName": "autoHighlightsResultResults",
            "key": "results",
            "schema": {
              "description": "A temporally-sequential array of Key Phrases",
              "generatedName": "AutoHighlightsResultResults",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "AutoHighlightsResultResultsItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": "AutoHighlightResult",
                "type": "reference",
              },
            },
          },
        ],
        "type": "object",
      },
    },
    "Chapter": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "Chapter of the audio file",
      "generatedName": "Chapter",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "chapterGist",
          "key": "gist",
          "schema": {
            "description": "An ultra-short summary (just a few words) of the content spoken in the chapter",
            "generatedName": "ChapterGist",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "chapterHeadline",
          "key": "headline",
          "schema": {
            "description": "A single sentence summary of the content spoken during the chapter",
            "generatedName": "ChapterHeadline",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "chapterSummary",
          "key": "summary",
          "schema": {
            "description": "A one paragraph summary of the content spoken during the chapter",
            "generatedName": "ChapterSummary",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "chapterStart",
          "key": "start",
          "schema": {
            "description": "The starting time, in milliseconds, for the chapter",
            "generatedName": "ChapterStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "chapterEnd",
          "key": "end",
          "schema": {
            "description": "The starting time, in milliseconds, for the chapter",
            "generatedName": "ChapterEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "ContentSafetyLabel": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "ContentSafetyLabel",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelLabel",
          "key": "label",
          "schema": {
            "description": "The label of the sensitive topic",
            "generatedName": "ContentSafetyLabelLabel",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelConfidence",
          "key": "confidence",
          "schema": {
            "description": "The confidence score for the topic being discussed, from 0 to 1",
            "generatedName": "ContentSafetyLabelConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelSeverity",
          "key": "severity",
          "schema": {
            "description": "How severely the topic is discussed in the section, from 0 to 1",
            "generatedName": "ContentSafetyLabelSeverity",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "ContentSafetyLabelResult": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "ContentSafetyLabelResult",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultText",
          "key": "text",
          "schema": {
            "description": "The transcript of the section flagged by the Content Moderation model",
            "generatedName": "ContentSafetyLabelResultText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultLabels",
          "key": "labels",
          "schema": {
            "description": "An array of objects, one per sensitive topic that was detected in the section",
            "generatedName": "ContentSafetyLabelResultLabels",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "ContentSafetyLabelResultLabelsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "ContentSafetyLabel",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultSentencesIdxStart",
          "key": "sentences_idx_start",
          "schema": {
            "description": "The sentence index at which the section begins",
            "generatedName": "ContentSafetyLabelResultSentencesIdxStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultSentencesIdxEnd",
          "key": "sentences_idx_end",
          "schema": {
            "description": "The sentence index at which the section ends",
            "generatedName": "ContentSafetyLabelResultSentencesIdxEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultTimestamp",
          "key": "timestamp",
          "schema": {
            "description": "Timestamp information for the section",
            "generatedName": "ContentSafetyLabelResultTimestamp",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "Timestamp",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultSummary",
          "key": "summary",
          "schema": {
            "description": "A summary of the Content Moderation confidence results for the entire audio file",
            "generatedName": "ContentSafetyLabelResultSummary",
            "groupName": undefined,
            "key": {
              "description": undefined,
              "generatedName": "ContentSafetyLabelResultSummaryKey",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
            "nameOverride": undefined,
            "type": "map",
            "value": {
              "description": "A confidence score for the presence of the sensitive topic "topic" across the entire audio file",
              "generatedName": "ContentSafetyLabelResultSummaryValue",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "double",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "contentSafetyLabelResultSeverityScoreSummary",
          "key": "severity_score_summary",
          "schema": {
            "description": "A summary of the Content Moderation severity results for the entire audio file",
            "generatedName": "ContentSafetyLabelResultSeverityScoreSummary",
            "groupName": undefined,
            "key": {
              "description": undefined,
              "generatedName": "ContentSafetyLabelResultSeverityScoreSummaryKey",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
            "nameOverride": undefined,
            "type": "map",
            "value": {
              "description": undefined,
              "generatedName": "ContentSafetyLabelResultSeverityScoreSummaryValue",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "SeverityScoreSummary",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "CreateRealtimeTemporaryTokenParameters": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "CreateRealtimeTemporaryTokenParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createRealtimeTemporaryTokenParametersExpiresIn",
          "key": "expires_in",
          "schema": {
            "description": "The amount of time until the token expires in seconds.",
            "generatedName": "CreateRealtimeTemporaryTokenParametersExpiresIn",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "CreateTranscriptOptionalParameters": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "The parameters for creating a transcript",
      "generatedName": "CreateTranscriptOptionalParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersLanguageCode",
          "key": "language_code",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersLanguageCode",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).
The default value is 'en_us'.
",
              "generatedName": "CreateTranscriptOptionalParametersLanguageCode",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptLanguageCode",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersPunctuate",
          "key": "punctuate",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersPunctuate",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable Automatic Punctuation, can be true or false.",
              "generatedName": "CreateTranscriptOptionalParametersPunctuate",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersFormatText",
          "key": "format_text",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersFormatText",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable Text Formatting, can be true or false.",
              "generatedName": "CreateTranscriptOptionalParametersFormatText",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersDualChannel",
          "key": "dual_channel",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersDualChannel",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Dual Channel](https://assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) transcription, can be true or false.",
              "generatedName": "CreateTranscriptOptionalParametersDualChannel",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersWebhookUrl",
          "key": "webhook_url",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersWebhookUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request.",
              "generatedName": "CreateTranscriptOptionalParametersWebhookUrl",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderName",
          "key": "webhook_auth_header_name",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderName",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
              "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderName",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
                "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderName",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderValue",
          "key": "webhook_auth_header_value",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderValue",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
              "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderValue",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
                "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderValue",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersAutoHighlights",
          "key": "auto_highlights",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersAutoHighlights",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
              "generatedName": "CreateTranscriptOptionalParametersAutoHighlights",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersAudioStartFrom",
          "key": "audio_start_from",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersAudioStartFrom",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The point in time, in milliseconds, to begin transcription from in your media file",
              "generatedName": "CreateTranscriptOptionalParametersAudioStartFrom",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersAudioEndAt",
          "key": "audio_end_at",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersAudioEndAt",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The point in time, in milliseconds, to stop transcribing in your media file",
              "generatedName": "CreateTranscriptOptionalParametersAudioEndAt",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersWordBoost",
          "key": "word_boost",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersWordBoost",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request.",
              "generatedName": "CreateTranscriptOptionalParametersWordBoost",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "CreateTranscriptOptionalParametersWordBoostItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersBoostParam",
          "key": "boost_param",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersBoostParam",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The word boost parameter value, if provided in the transcription request.",
              "generatedName": "CreateTranscriptOptionalParametersBoostParam",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptBoostParam",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersFilterProfanity",
          "key": "filter_profanity",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersFilterProfanity",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Filter profanity from the transcribed text, can be true or false.",
              "generatedName": "CreateTranscriptOptionalParametersFilterProfanity",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersRedactPii",
          "key": "redact_pii",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersRedactPii",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Redact PII from the transcribed text using the Redact PII model, can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersRedactPii",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersRedactPiiAudio",
          "key": "redact_pii_audio",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersRedactPiiAudio",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Generate a copy of the original media file with spoken PII "beeped" out, can be true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
              "generatedName": "CreateTranscriptOptionalParametersRedactPiiAudio",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersRedactPiiAudioQuality",
          "key": "redact_pii_audio_quality",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersRedactPiiAudioQuality",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
              "generatedName": "CreateTranscriptOptionalParametersRedactPiiAudioQuality",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersRedactPiiPolicies",
          "key": "redact_pii_policies",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersRedactPiiPolicies",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of PII Redaction policies to enable. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
              "generatedName": "CreateTranscriptOptionalParametersRedactPiiPolicies",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "CreateTranscriptOptionalParametersRedactPiiPoliciesItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": "PiiPolicy",
                "type": "reference",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersRedactPiiSub",
          "key": "redact_pii_sub",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersRedactPiiSub",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The replacement logic for detected PII, can be "entity_type" or "hash". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
              "generatedName": "CreateTranscriptOptionalParametersRedactPiiSub",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "SubstitutionPolicy",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSpeakerLabels",
          "key": "speaker_labels",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSpeakerLabels",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersSpeakerLabels",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSpeakersExpected",
          "key": "speakers_expected",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSpeakersExpected",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
              "generatedName": "CreateTranscriptOptionalParametersSpeakersExpected",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                "generatedName": "CreateTranscriptOptionalParametersSpeakersExpected",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersContentSafety",
          "key": "content_safety",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersContentSafety",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersContentSafety",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersIabCategories",
          "key": "iab_categories",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersIabCategories",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersIabCategories",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersLanguageDetection",
          "key": "language_detection",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersLanguageDetection",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false.",
              "generatedName": "CreateTranscriptOptionalParametersLanguageDetection",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersCustomSpelling",
          "key": "custom_spelling",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersCustomSpelling",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Customize how words are spelled and formatted using to and from values",
              "generatedName": "CreateTranscriptOptionalParametersCustomSpelling",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "CreateTranscriptOptionalParametersCustomSpellingItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": "TranscriptCustomSpelling",
                "type": "reference",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersDisfluencies",
          "key": "disfluencies",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersDisfluencies",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Transcribe Filler Words, like "umm", in your media file; can be true or false.",
              "generatedName": "CreateTranscriptOptionalParametersDisfluencies",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSentimentAnalysis",
          "key": "sentiment_analysis",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSentimentAnalysis",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersSentimentAnalysis",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersAutoChapters",
          "key": "auto_chapters",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersAutoChapters",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersAutoChapters",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersEntityDetection",
          "key": "entity_detection",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersEntityDetection",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersEntityDetection",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSpeechThreshold",
          "key": "speech_threshold",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSpeechThreshold",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Reject audio files that contain less than this fraction of speech.
Valid values are in the range [0, 1] inclusive.
",
              "generatedName": "CreateTranscriptOptionalParametersSpeechThreshold",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Reject audio files that contain less than this fraction of speech.
Valid values are in the range [0, 1] inclusive.
",
                "generatedName": "CreateTranscriptOptionalParametersSpeechThreshold",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "float",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSummarization",
          "key": "summarization",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSummarization",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Summarization](https://www.assemblyai.com/docs/Models/summarization), can be true or false",
              "generatedName": "CreateTranscriptOptionalParametersSummarization",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSummaryModel",
          "key": "summary_model",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSummaryModel",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The model to summarize the transcript",
              "generatedName": "CreateTranscriptOptionalParametersSummaryModel",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "SummaryModel",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersSummaryType",
          "key": "summary_type",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersSummaryType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The type of summary",
              "generatedName": "CreateTranscriptOptionalParametersSummaryType",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "SummaryType",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersCustomTopics",
          "key": "custom_topics",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersCustomTopics",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether custom topics was enabled in the transcription request, either true or false",
              "generatedName": "CreateTranscriptOptionalParametersCustomTopics",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptOptionalParametersTopics",
          "key": "topics",
          "schema": {
            "description": undefined,
            "generatedName": "createTranscriptOptionalParametersTopics",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
              "generatedName": "CreateTranscriptOptionalParametersTopics",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "CreateTranscriptOptionalParametersTopicsItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "CreateTranscriptParameters": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "CreateTranscriptOptionalParameters",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "CreateTranscriptOptionalParameters",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": "The parameters for creating a transcript",
      "generatedName": "CreateTranscriptParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "createTranscriptParametersAudioUrl",
          "key": "audio_url",
          "schema": {
            "description": "The URL of the audio or video file to transcribe.",
            "generatedName": "CreateTranscriptParametersAudioUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "Entity": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "A detected entity",
      "generatedName": "Entity",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "entityEntityType",
          "key": "entity_type",
          "schema": {
            "description": "The type of entity for the detected entity",
            "generatedName": "EntityEntityType",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "EntityType",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "entityText",
          "key": "text",
          "schema": {
            "description": "The text for the detected entity",
            "generatedName": "EntityText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "entityStart",
          "key": "start",
          "schema": {
            "description": "The starting time, in milliseconds, at which the detected entity appears in the audio file",
            "generatedName": "EntityStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "entityEnd",
          "key": "end",
          "schema": {
            "description": "The ending time, in milliseconds, for the detected entity in the audio file",
            "generatedName": "EntityEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "EntityType": {
      "description": "The type of entity for the detected entity",
      "generatedName": "EntityType",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Banking information, including account and routing numbers",
          "generatedName": "banking_information",
          "nameOverride": undefined,
          "value": "banking_information",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Blood type (e.g., O-, AB positive)",
          "generatedName": "blood_type",
          "nameOverride": undefined,
          "value": "blood_type",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Credit card verification code (e.g., CVV: 080)
",
          "generatedName": "credit_card_cvv",
          "nameOverride": undefined,
          "value": "credit_card_cvv",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Expiration date of a credit card",
          "generatedName": "credit_card_expiration",
          "nameOverride": undefined,
          "value": "credit_card_expiration",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Credit card number",
          "generatedName": "credit_card_number",
          "nameOverride": undefined,
          "value": "credit_card_number",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Specific calendar date (e.g., December 18)",
          "generatedName": "date",
          "nameOverride": undefined,
          "value": "date",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Date of Birth (e.g., Date of Birth: March 7, 1961)
",
          "generatedName": "date_of_birth",
          "nameOverride": undefined,
          "value": "date_of_birth",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Driver's license number (e.g., DL #356933-540)
",
          "generatedName": "drivers_license",
          "nameOverride": undefined,
          "value": "drivers_license",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)",
          "generatedName": "drug",
          "nameOverride": undefined,
          "value": "drug",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Email address (e.g., support@assemblyai.com)",
          "generatedName": "email_address",
          "nameOverride": undefined,
          "value": "email_address",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name of an event or holiday (e.g., Olympics, Yom Kippur)",
          "generatedName": "event",
          "nameOverride": undefined,
          "value": "event",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)",
          "generatedName": "injury",
          "nameOverride": undefined,
          "value": "injury",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name of a natural language (e.g., Spanish, French)",
          "generatedName": "language",
          "nameOverride": undefined,
          "value": "language",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Any location reference including mailing address, postal code, city, state, province, or country",
          "generatedName": "location",
          "nameOverride": undefined,
          "value": "location",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)",
          "generatedName": "medical_condition",
          "nameOverride": undefined,
          "value": "medical_condition",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)",
          "generatedName": "medical_process",
          "nameOverride": undefined,
          "value": "medical_process",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name and/or amount of currency (e.g., 15 pesos, $94.50)",
          "generatedName": "money_amount",
          "nameOverride": undefined,
          "value": "money_amount",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)",
          "generatedName": "nationality",
          "nameOverride": undefined,
          "value": "nationality",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Job title or profession (e.g., professor, actors, engineer, CPA)",
          "generatedName": "occupation",
          "nameOverride": undefined,
          "value": "occupation",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name of an organization (e.g., CNN, McDonalds, University of Alaska)",
          "generatedName": "organization",
          "nameOverride": undefined,
          "value": "organization",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)",
          "generatedName": "password",
          "nameOverride": undefined,
          "value": "password",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Number associated with an age (e.g., 27, 75)",
          "generatedName": "person_age",
          "nameOverride": undefined,
          "value": "person_age",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Name of a person (e.g., Bob, Doug Jones)",
          "generatedName": "person_name",
          "nameOverride": undefined,
          "value": "person_name",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Telephone or fax number",
          "generatedName": "phone_number",
          "nameOverride": undefined,
          "value": "phone_number",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)",
          "generatedName": "political_affiliation",
          "nameOverride": undefined,
          "value": "political_affiliation",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Terms indicating religious affiliation (e.g., Hindu, Catholic)",
          "generatedName": "religion",
          "nameOverride": undefined,
          "value": "religion",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)",
          "generatedName": "time",
          "nameOverride": undefined,
          "value": "time",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Internet addresses (e.g., www.assemblyai.com)",
          "generatedName": "url",
          "nameOverride": undefined,
          "value": "url",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "Social Security Number or equivalent",
          "generatedName": "us_social_security_number",
          "nameOverride": undefined,
          "value": "us_social_security_number",
        },
      ],
    },
    "Error": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "Error",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "errorError",
          "key": "error",
          "schema": {
            "description": "Error message",
            "generatedName": "ErrorError",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "errorStatus",
          "key": "status",
          "schema": {
            "description": undefined,
            "generatedName": "errorStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "ErrorStatus",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "literal",
              "value": {
                "string": "error",
                "type": "string",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "FinalTranscript": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "RealtimeBaseTranscript",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeBaseTranscript",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "FinalTranscript",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "finalTranscriptMessageType",
          "key": "message_type",
          "schema": {
            "description": "Describes the type of message.",
            "generatedName": "FinalTranscriptMessageType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "literal",
            "value": {
              "string": "FinalTranscript",
              "type": "string",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "finalTranscriptPunctuated",
          "key": "punctuated",
          "schema": {
            "description": "Whether the text has been punctuated and cased.",
            "generatedName": "FinalTranscriptPunctuated",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "finalTranscriptTextFormatted",
          "key": "text_formatted",
          "schema": {
            "description": "Whether the text has been formatted (e.g. Dollar -> $)",
            "generatedName": "FinalTranscriptTextFormatted",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurActionItemsParameters": {
      "description": undefined,
      "generatedName": "LemurActionItemsParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "schema": "LemurBaseParameters",
      "type": "reference",
    },
    "LemurActionItemsResponse": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseResponse",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurActionItemsResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurActionItemsResponseResponse",
          "key": "response",
          "schema": {
            "description": "The response generated by LeMUR.",
            "generatedName": "LemurActionItemsResponseResponse",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurBaseParameters": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurBaseParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseParametersTranscriptIds",
          "key": "transcript_ids",
          "schema": {
            "description": "A list of completed transcripts with text. Up to 100 files max, or 100 hours max. Whichever is lower.",
            "generatedName": "LemurBaseParametersTranscriptIds",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "LemurBaseParametersTranscriptIdsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseParametersContext",
          "key": "context",
          "schema": {
            "description": undefined,
            "generatedName": "lemurBaseParametersContext",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "oneOf": {
                "description": "Context to provide the model. This can be a string or a free-form JSON value.",
                "generatedName": "LemurBaseParametersContext",
                "groupName": undefined,
                "nameOverride": undefined,
                "schemas": [
                  {
                    "description": undefined,
                    "generatedName": "LemurBaseParametersContext",
                    "groupName": undefined,
                    "nameOverride": undefined,
                    "schema": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                  {
                    "description": undefined,
                    "generatedName": "LemurBaseParametersContextOne",
                    "groupName": undefined,
                    "key": {
                      "description": undefined,
                      "generatedName": "LemurBaseParametersContextOneKey",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": {
                        "maxLength": undefined,
                        "minLength": undefined,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                    "nameOverride": undefined,
                    "type": "map",
                    "value": {
                      "generatedName": "LemurBaseParametersContextOneValue",
                      "nameOverride": undefined,
                      "type": "unknown",
                    },
                  },
                ],
                "type": "undisciminated",
              },
              "type": "oneOf",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseParametersFinalModel",
          "key": "final_model",
          "schema": {
            "description": undefined,
            "generatedName": "lemurBaseParametersFinalModel",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "LemurBaseParametersFinalModel",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "LemurModel",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseParametersMaxOutputSize",
          "key": "max_output_size",
          "schema": {
            "description": undefined,
            "generatedName": "lemurBaseParametersMaxOutputSize",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Max output size in tokens. Up to 4000 allowed.",
              "generatedName": "LemurBaseParametersMaxOutputSize",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseParametersTemperature",
          "key": "temperature",
          "schema": {
            "description": undefined,
            "generatedName": "lemurBaseParametersTemperature",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The temperature to use for the model.
Higher values result in answers that are more creative, lower values are more conservative.
Can be any value between 0.0 and 1.0 inclusive.
",
              "generatedName": "LemurBaseParametersTemperature",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "float",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "LemurBaseResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurBaseResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurBaseResponseRequestId",
          "key": "request_id",
          "schema": {
            "description": "The ID of the LeMUR request",
            "generatedName": "LemurBaseResponseRequestId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurModel": {
      "description": "The model that is used for the final prompt after compression is performed (options: "basic" and "default").
",
      "generatedName": "LemurModel",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "default",
          "nameOverride": undefined,
          "value": "default",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "basic",
          "nameOverride": undefined,
          "value": "basic",
        },
      ],
    },
    "LemurQuestion": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurQuestion",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionQuestion",
          "key": "question",
          "schema": {
            "description": "The question you wish to ask. For more complex questions use default model.",
            "generatedName": "LemurQuestionQuestion",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionContext",
          "key": "context",
          "schema": {
            "description": undefined,
            "generatedName": "lemurQuestionContext",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "oneOf": {
                "description": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
                "generatedName": "LemurQuestionContext",
                "groupName": undefined,
                "nameOverride": undefined,
                "schemas": [
                  {
                    "description": undefined,
                    "generatedName": "LemurQuestionContext",
                    "groupName": undefined,
                    "nameOverride": undefined,
                    "schema": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "type": "string",
                    },
                    "type": "primitive",
                  },
                  {
                    "description": undefined,
                    "generatedName": "LemurQuestionContextOne",
                    "groupName": undefined,
                    "key": {
                      "description": undefined,
                      "generatedName": "LemurQuestionContextOneKey",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": {
                        "maxLength": undefined,
                        "minLength": undefined,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                    "nameOverride": undefined,
                    "type": "map",
                    "value": {
                      "generatedName": "LemurQuestionContextOneValue",
                      "nameOverride": undefined,
                      "type": "unknown",
                    },
                  },
                ],
                "type": "undisciminated",
              },
              "type": "oneOf",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerFormat",
          "key": "answer_format",
          "schema": {
            "description": undefined,
            "generatedName": "lemurQuestionAnswerFormat",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "How you want the answer to be returned. This can be any text. Can't be used with answer_options. Examples: "short sentence", "bullet points"
",
              "generatedName": "LemurQuestionAnswerFormat",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerOptions",
          "key": "answer_options",
          "schema": {
            "description": undefined,
            "generatedName": "lemurQuestionAnswerOptions",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "What discrete options to return. Useful for precise responses. Can't be used with answer_format. Example: ["Yes", "No"]
",
              "generatedName": "LemurQuestionAnswerOptions",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "LemurQuestionAnswerOptionsItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "LemurQuestionAnswer": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "An answer generated by LeMUR and its question.",
      "generatedName": "LemurQuestionAnswer",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerQuestion",
          "key": "question",
          "schema": {
            "description": "The question for LeMUR to answer.",
            "generatedName": "LemurQuestionAnswerQuestion",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerAnswer",
          "key": "answer",
          "schema": {
            "description": "The answer generated by LeMUR.",
            "generatedName": "LemurQuestionAnswerAnswer",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurQuestionAnswerParameters": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseParameters",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseParameters",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurQuestionAnswerParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerParametersQuestions",
          "key": "questions",
          "schema": {
            "description": "A list of questions to ask.",
            "generatedName": "LemurQuestionAnswerParametersQuestions",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "LemurQuestionAnswerParametersQuestionsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "LemurQuestion",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "LemurQuestionAnswerResponse": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseResponse",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurQuestionAnswerResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurQuestionAnswerResponseResponse",
          "key": "response",
          "schema": {
            "description": "The answers generated by LeMUR and their questions.",
            "generatedName": "LemurQuestionAnswerResponseResponse",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "LemurQuestionAnswerResponseResponseItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "LemurQuestionAnswer",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "LemurSummaryParameters": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseParameters",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseParameters",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurSummaryParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurSummaryParametersAnswerFormat",
          "key": "answer_format",
          "schema": {
            "description": undefined,
            "generatedName": "lemurSummaryParametersAnswerFormat",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "How you want the summary to be returned. This can be any text. Examples: "TLDR", "bullet points"
",
              "generatedName": "LemurSummaryParametersAnswerFormat",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "LemurSummaryResponse": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseResponse",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurSummaryResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurSummaryResponseResponse",
          "key": "response",
          "schema": {
            "description": "The response generated by LeMUR.",
            "generatedName": "LemurSummaryResponseResponse",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurTaskParameters": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseParameters",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseParameters",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurTaskParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurTaskParametersPrompt",
          "key": "prompt",
          "schema": {
            "description": "Your text to prompt the model to produce a desired output, including any context you want to pass into the model.",
            "generatedName": "LemurTaskParametersPrompt",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "LemurTaskResponse": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "LemurBaseResponse",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "LemurBaseResponse",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "LemurTaskResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "lemurTaskResponseResponse",
          "key": "response",
          "schema": {
            "description": "The response generated by LeMUR.",
            "generatedName": "LemurTaskResponseResponse",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "MessageType": {
      "description": undefined,
      "generatedName": "MessageType",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "SessionBegins",
          "nameOverride": undefined,
          "value": "SessionBegins",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "PartialTranscript",
          "nameOverride": undefined,
          "value": "PartialTranscript",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "FinalTranscript",
          "nameOverride": undefined,
          "value": "FinalTranscript",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "SessionTerminated",
          "nameOverride": undefined,
          "value": "SessionTerminated",
        },
      ],
    },
    "PageDetails": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "PageDetails",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "pageDetailsLimit",
          "key": "limit",
          "schema": {
            "description": undefined,
            "generatedName": "PageDetailsLimit",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "pageDetailsResultCount",
          "key": "result_count",
          "schema": {
            "description": undefined,
            "generatedName": "PageDetailsResultCount",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "pageDetailsCurrentUrl",
          "key": "current_url",
          "schema": {
            "description": undefined,
            "generatedName": "PageDetailsCurrentUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "pageDetailsPrevUrl",
          "key": "prev_url",
          "schema": {
            "description": undefined,
            "generatedName": "PageDetailsPrevUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "pageDetailsNextUrl",
          "key": "next_url",
          "schema": {
            "description": undefined,
            "generatedName": "pageDetailsNextUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "PageDetailsNextUrl",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": undefined,
                "generatedName": "PageDetailsNextUrl",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "ParagraphsResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "ParagraphsResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "paragraphsResponseId",
          "key": "id",
          "schema": {
            "description": undefined,
            "generatedName": "ParagraphsResponseId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "paragraphsResponseConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "ParagraphsResponseConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "paragraphsResponseAudioDuration",
          "key": "audio_duration",
          "schema": {
            "description": undefined,
            "generatedName": "ParagraphsResponseAudioDuration",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "paragraphsResponseParagraphs",
          "key": "paragraphs",
          "schema": {
            "description": undefined,
            "generatedName": "ParagraphsResponseParagraphs",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "ParagraphsResponseParagraphsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptParagraph",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "PartialTranscript": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "RealtimeBaseTranscript",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeBaseTranscript",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "PartialTranscript",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "partialTranscriptMessageType",
          "key": "message_type",
          "schema": {
            "description": "Describes the type of message.",
            "generatedName": "PartialTranscriptMessageType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "literal",
            "value": {
              "string": "PartialTranscript",
              "type": "string",
            },
          },
        },
      ],
      "type": "object",
    },
    "PiiPolicy": {
      "description": undefined,
      "generatedName": "PiiPolicy",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "medical_process",
          "nameOverride": undefined,
          "value": "medical_process",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "medical_condition",
          "nameOverride": undefined,
          "value": "medical_condition",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "blood_type",
          "nameOverride": undefined,
          "value": "blood_type",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "drug",
          "nameOverride": undefined,
          "value": "drug",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "injury",
          "nameOverride": undefined,
          "value": "injury",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "number_sequence",
          "nameOverride": undefined,
          "value": "number_sequence",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "email_address",
          "nameOverride": undefined,
          "value": "email_address",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "date_of_birth",
          "nameOverride": undefined,
          "value": "date_of_birth",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "phone_number",
          "nameOverride": undefined,
          "value": "phone_number",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "us_social_security_number",
          "nameOverride": undefined,
          "value": "us_social_security_number",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "credit_card_number",
          "nameOverride": undefined,
          "value": "credit_card_number",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "credit_card_expiration",
          "nameOverride": undefined,
          "value": "credit_card_expiration",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "credit_card_cvv",
          "nameOverride": undefined,
          "value": "credit_card_cvv",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "date",
          "nameOverride": undefined,
          "value": "date",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "nationality",
          "nameOverride": undefined,
          "value": "nationality",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "event",
          "nameOverride": undefined,
          "value": "event",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "language",
          "nameOverride": undefined,
          "value": "language",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "location",
          "nameOverride": undefined,
          "value": "location",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "money_amount",
          "nameOverride": undefined,
          "value": "money_amount",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "person_name",
          "nameOverride": undefined,
          "value": "person_name",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "person_age",
          "nameOverride": undefined,
          "value": "person_age",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "organization",
          "nameOverride": undefined,
          "value": "organization",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "political_affiliation",
          "nameOverride": undefined,
          "value": "political_affiliation",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "occupation",
          "nameOverride": undefined,
          "value": "occupation",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "religion",
          "nameOverride": undefined,
          "value": "religion",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "drivers_license",
          "nameOverride": undefined,
          "value": "drivers_license",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "banking_information",
          "nameOverride": undefined,
          "value": "banking_information",
        },
      ],
    },
    "PurgeLemurRequestDataResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "PurgeLemurRequestDataResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "purgeLemurRequestDataResponseRequestId",
          "key": "request_id",
          "schema": {
            "description": "The ID of the LeMUR request",
            "generatedName": "PurgeLemurRequestDataResponseRequestId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "purgeLemurRequestDataResponseRequestIdToPurge",
          "key": "request_id_to_purge",
          "schema": {
            "description": "The ID of the deletion request of the LeMUR request",
            "generatedName": "PurgeLemurRequestDataResponseRequestIdToPurge",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "purgeLemurRequestDataResponseDeleted",
          "key": "deleted",
          "schema": {
            "description": "Whether the request data was deleted.",
            "generatedName": "PurgeLemurRequestDataResponseDeleted",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "RealtimeBaseMessage": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "RealtimeBaseMessage",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseMessageMessageType",
          "key": "message_type",
          "schema": {
            "description": "Describes the type of the message.",
            "generatedName": "RealtimeBaseMessageMessageType",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "MessageType",
            "type": "reference",
          },
        },
      ],
      "type": "object",
    },
    "RealtimeBaseTranscript": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "RealtimeBaseTranscript",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptAudioStart",
          "key": "audio_start",
          "schema": {
            "description": "Start time of audio sample relative to session start, in milliseconds.",
            "generatedName": "RealtimeBaseTranscriptAudioStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptAudioEnd",
          "key": "audio_end",
          "schema": {
            "description": "End time of audio sample relative to session start, in milliseconds.",
            "generatedName": "RealtimeBaseTranscriptAudioEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptConfidence",
          "key": "confidence",
          "schema": {
            "description": "The confidence score of the entire transcription, between 0 and 1.",
            "generatedName": "RealtimeBaseTranscriptConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptText",
          "key": "text",
          "schema": {
            "description": "The partial transcript for your audio.",
            "generatedName": "RealtimeBaseTranscriptText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptWords",
          "key": "words",
          "schema": {
            "description": "An array of objects, with the information for each word in the transcription text. Includes the start/end time (in milliseconds) of the word, the confidence score of the word, and the text (i.e. the word itself).",
            "generatedName": "RealtimeBaseTranscriptWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "RealtimeBaseTranscriptWordsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "Word",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeBaseTranscriptCreated",
          "key": "created",
          "schema": {
            "description": "The timestamp for the partial transcript.",
            "generatedName": "RealtimeBaseTranscriptCreated",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "datetime",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "RealtimeError": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "RealtimeError",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeErrorError",
          "key": "error",
          "schema": {
            "description": undefined,
            "generatedName": "RealtimeErrorError",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "RealtimeMessage": {
      "oneOf": {
        "description": undefined,
        "generatedName": "RealtimeMessage",
        "groupName": undefined,
        "nameOverride": undefined,
        "schemas": [
          {
            "description": undefined,
            "generatedName": "RealtimeMessageZero",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "SessionBegins",
            "type": "reference",
          },
          {
            "description": undefined,
            "generatedName": "RealtimeMessageOne",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "PartialTranscript",
            "type": "reference",
          },
          {
            "description": undefined,
            "generatedName": "RealtimeMessageTwo",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "FinalTranscript",
            "type": "reference",
          },
          {
            "description": undefined,
            "generatedName": "RealtimeMessageThree",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "SessionTerminated",
            "type": "reference",
          },
          {
            "description": undefined,
            "generatedName": "RealtimeMessageFour",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "RealtimeError",
            "type": "reference",
          },
        ],
        "type": "undisciminated",
      },
      "type": "oneOf",
    },
    "RealtimeTemporaryTokenResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "RealtimeTemporaryTokenResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "realtimeTemporaryTokenResponseToken",
          "key": "token",
          "schema": {
            "description": "The temporary authentication token for real-time transcription",
            "generatedName": "RealtimeTemporaryTokenResponseToken",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "RealtimeTranscript": {
      "oneOf": {
        "description": undefined,
        "generatedName": "RealtimeTranscript",
        "groupName": undefined,
        "nameOverride": undefined,
        "schemas": [
          {
            "description": undefined,
            "generatedName": "RealtimeTranscriptZero",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "PartialTranscript",
            "type": "reference",
          },
          {
            "description": undefined,
            "generatedName": "RealtimeTranscriptOne",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "FinalTranscript",
            "type": "reference",
          },
        ],
        "type": "undisciminated",
      },
      "type": "oneOf",
    },
    "RealtimeTranscriptType": {
      "description": undefined,
      "generatedName": "RealtimeTranscriptType",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "PartialTranscript",
          "nameOverride": undefined,
          "value": "PartialTranscript",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "FinalTranscript",
          "nameOverride": undefined,
          "value": "FinalTranscript",
        },
      ],
    },
    "RedactedAudioResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "RedactedAudioResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "redactedAudioResponseStatus",
          "key": "status",
          "schema": {
            "description": "The status of the redacted audio",
            "generatedName": "RedactedAudioResponseStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "RedactedAudioStatus",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "redactedAudioResponseRedactedAudioUrl",
          "key": "redacted_audio_url",
          "schema": {
            "description": "The URL of the redacted audio file",
            "generatedName": "RedactedAudioResponseRedactedAudioUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "RedactedAudioStatus": {
      "description": "The status of the redacted audio",
      "generatedName": "RedactedAudioStatus",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "literal",
      "value": {
        "string": "redacted_audio_ready",
        "type": "string",
      },
    },
    "SentencesResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "SentencesResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentencesResponseId",
          "key": "id",
          "schema": {
            "description": undefined,
            "generatedName": "SentencesResponseId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentencesResponseConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "SentencesResponseConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentencesResponseAudioDuration",
          "key": "audio_duration",
          "schema": {
            "description": undefined,
            "generatedName": "SentencesResponseAudioDuration",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentencesResponseSentences",
          "key": "sentences",
          "schema": {
            "description": undefined,
            "generatedName": "SentencesResponseSentences",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "SentencesResponseSentencesItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptSentence",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "Sentiment": {
      "description": undefined,
      "generatedName": "Sentiment",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "POSITIVE",
          "nameOverride": undefined,
          "value": "POSITIVE",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "NEUTRAL",
          "nameOverride": undefined,
          "value": "NEUTRAL",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "NEGATIVE",
          "nameOverride": undefined,
          "value": "NEGATIVE",
        },
      ],
    },
    "SentimentAnalysisResult": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "The result of the sentiment analysis model.",
      "generatedName": "SentimentAnalysisResult",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultText",
          "key": "text",
          "schema": {
            "description": "The transcript of the sentence",
            "generatedName": "SentimentAnalysisResultText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultStart",
          "key": "start",
          "schema": {
            "description": "The starting time, in milliseconds, of the sentence",
            "generatedName": "SentimentAnalysisResultStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultEnd",
          "key": "end",
          "schema": {
            "description": "The ending time, in milliseconds, of the sentence",
            "generatedName": "SentimentAnalysisResultEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultSentiment",
          "key": "sentiment",
          "schema": {
            "description": "The detected sentiment for the sentence, one of POSITIVE, NEUTRAL, NEGATIVE",
            "generatedName": "SentimentAnalysisResultSentiment",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "Sentiment",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultConfidence",
          "key": "confidence",
          "schema": {
            "description": "The confidence score for the detected sentiment of the sentence, from 0 to 1",
            "generatedName": "SentimentAnalysisResultConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sentimentAnalysisResultSpeaker",
          "key": "speaker",
          "schema": {
            "description": undefined,
            "generatedName": "sentimentAnalysisResultSpeaker",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The speaker of the sentence if Speaker Diarization is enabled, else null",
              "generatedName": "SentimentAnalysisResultSpeaker",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The speaker of the sentence if Speaker Diarization is enabled, else null",
                "generatedName": "SentimentAnalysisResultSpeaker",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "SessionBegins": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "RealtimeBaseMessage",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeBaseMessage",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "SessionBegins",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {
            "RealtimeBaseMessage": {
              "differentSchema": true,
            },
          },
          "generatedName": "sessionBeginsMessageType",
          "key": "message_type",
          "schema": {
            "description": "Describes the type of the message.",
            "generatedName": "SessionBeginsMessageType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "literal",
            "value": {
              "string": "SessionBegins",
              "type": "string",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sessionBeginsSessionId",
          "key": "session_id",
          "schema": {
            "description": "Unique identifier for the established session.",
            "generatedName": "SessionBeginsSessionId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "sessionBeginsExpiresAt",
          "key": "expires_at",
          "schema": {
            "description": "Timestamp when this session will expire.",
            "generatedName": "SessionBeginsExpiresAt",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "datetime",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "SessionTerminated": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "RealtimeBaseMessage",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeBaseMessage",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "SessionTerminated",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {
            "RealtimeBaseMessage": {
              "differentSchema": true,
            },
          },
          "generatedName": "sessionTerminatedMessageType",
          "key": "message_type",
          "schema": {
            "description": "Describes the type of the message.",
            "generatedName": "SessionTerminatedMessageType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "literal",
            "value": {
              "string": "SessionTerminated",
              "type": "string",
            },
          },
        },
      ],
      "type": "object",
    },
    "SeverityScoreSummary": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "SeverityScoreSummary",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "severityScoreSummaryLow",
          "key": "low",
          "schema": {
            "description": undefined,
            "generatedName": "SeverityScoreSummaryLow",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "severityScoreSummaryMedium",
          "key": "medium",
          "schema": {
            "description": undefined,
            "generatedName": "SeverityScoreSummaryMedium",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "severityScoreSummaryHigh",
          "key": "high",
          "schema": {
            "description": undefined,
            "generatedName": "SeverityScoreSummaryHigh",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "SubstitutionPolicy": {
      "description": "The replacement logic for detected PII, can be "entity_type" or "hash". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
      "generatedName": "SubstitutionPolicy",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "nullable",
      "value": {
        "description": "The replacement logic for detected PII, can be "entity_type" or "hash". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
        "generatedName": "SubstitutionPolicy",
        "groupName": undefined,
        "nameOverride": undefined,
        "type": "enum",
        "values": [
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "entity_type",
            "nameOverride": undefined,
            "value": "entity_type",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "hash",
            "nameOverride": undefined,
            "value": "hash",
          },
        ],
      },
    },
    "SubtitleFormat": {
      "description": "Format of the subtitles",
      "generatedName": "SubtitleFormat",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "srt",
          "nameOverride": undefined,
          "value": "srt",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "vtt",
          "nameOverride": undefined,
          "value": "vtt",
        },
      ],
    },
    "SummaryModel": {
      "description": "The model to summarize the transcript",
      "generatedName": "SummaryModel",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "informative",
          "nameOverride": undefined,
          "value": "informative",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "conversational",
          "nameOverride": undefined,
          "value": "conversational",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "catchy",
          "nameOverride": undefined,
          "value": "catchy",
        },
      ],
    },
    "SummaryType": {
      "description": "The type of summary",
      "generatedName": "SummaryType",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "bullets",
          "nameOverride": undefined,
          "value": "bullets",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "bullets_verbose",
          "nameOverride": undefined,
          "value": "bullets_verbose",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "gist",
          "nameOverride": undefined,
          "value": "gist",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "headline",
          "nameOverride": undefined,
          "value": "headline",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "paragraph",
          "nameOverride": undefined,
          "value": "paragraph",
        },
      ],
    },
    "TerminateSession": {
      "allOf": [
        {
          "description": undefined,
          "generatedName": "RealtimeBaseMessage",
          "groupName": undefined,
          "nameOverride": undefined,
          "schema": "RealtimeBaseMessage",
          "type": "reference",
        },
      ],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TerminateSession",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "terminateSessionTerminateSession",
          "key": "terminate_session",
          "schema": {
            "description": "A boolean value to communicate that you wish to end your real-time session forever.",
            "generatedName": "TerminateSessionTerminateSession",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "Timestamp": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "Timestamp containing a start and end property in milliseconds.",
      "generatedName": "Timestamp",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "timestampStart",
          "key": "start",
          "schema": {
            "description": "The start time in milliseconds",
            "generatedName": "TimestampStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "timestampEnd",
          "key": "end",
          "schema": {
            "description": "The end time in milliseconds",
            "generatedName": "TimestampEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "TopicDetectionResult": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "THe result of the topic detection model.",
      "generatedName": "TopicDetectionResult",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "topicDetectionResultText",
          "key": "text",
          "schema": {
            "description": "The text in the transcript in which a detected topic occurs",
            "generatedName": "TopicDetectionResultText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "topicDetectionResultLabels",
          "key": "labels",
          "schema": {
            "description": undefined,
            "generatedName": "topicDetectionResultLabels",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "TopicDetectionResultLabels",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "allOf": [],
                "allOfPropertyConflicts": [],
                "description": undefined,
                "generatedName": "TopicDetectionResultLabelsItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "properties": [
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "topicDetectionResultLabelsItemRelevance",
                    "key": "relevance",
                    "schema": {
                      "description": "How relevant the detected topic is of a detected topic",
                      "generatedName": "TopicDetectionResultLabelsItemRelevance",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": {
                        "type": "double",
                      },
                      "type": "primitive",
                    },
                  },
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "topicDetectionResultLabelsItemLabel",
                    "key": "label",
                    "schema": {
                      "description": "The IAB taxonomical label for the label of the detected topic, where > denotes supertopic/subtopic relationship",
                      "generatedName": "TopicDetectionResultLabelsItemLabel",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": {
                        "maxLength": undefined,
                        "minLength": undefined,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "topicDetectionResultTimestamp",
          "key": "timestamp",
          "schema": {
            "description": undefined,
            "generatedName": "topicDetectionResultTimestamp",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "TopicDetectionResultTimestamp",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "Timestamp",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "Transcript": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "A transcript object",
      "generatedName": "Transcript",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptId",
          "key": "id",
          "schema": {
            "description": "The unique identifier of your transcription",
            "generatedName": "TranscriptId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptLanguageModel",
          "key": "language_model",
          "schema": {
            "description": "The language model that was used for the transcription",
            "generatedName": "TranscriptLanguageModel",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAcousticModel",
          "key": "acoustic_model",
          "schema": {
            "description": "The acoustic model that was used for the transcription",
            "generatedName": "TranscriptAcousticModel",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptStatus",
          "key": "status",
          "schema": {
            "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
            "generatedName": "TranscriptStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "TranscriptStatus",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptLanguageCode",
          "key": "language_code",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptLanguageCode",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The language of your audio file.
Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).
The default value is 'en_us'.
",
              "generatedName": "TranscriptLanguageCode",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptLanguageCode",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAudioUrl",
          "key": "audio_url",
          "schema": {
            "description": "The URL of the media that was transcribed",
            "generatedName": "TranscriptAudioUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptText",
          "key": "text",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptText",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The textual transcript of your media file",
              "generatedName": "TranscriptText",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The textual transcript of your media file",
                "generatedName": "TranscriptText",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWords",
          "key": "words",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of temporally-sequential word objects, one for each word in the transcript.
See [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.
",
              "generatedName": "TranscriptWords",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "An array of temporally-sequential word objects, one for each word in the transcript.
See [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.
",
                "generatedName": "TranscriptWords",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptWordsItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "TranscriptWord",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtterances",
          "key": "utterances",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptUtterances",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.
See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.
",
              "generatedName": "TranscriptUtterances",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.
See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.
",
                "generatedName": "TranscriptUtterances",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptUtterancesItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "TranscriptUtterance",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
              "generatedName": "TranscriptConfidence",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
                "generatedName": "TranscriptConfidence",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "double",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAudioDuration",
          "key": "audio_duration",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptAudioDuration",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The duration of this transcript object's media file, in seconds",
              "generatedName": "TranscriptAudioDuration",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The duration of this transcript object's media file, in seconds",
                "generatedName": "TranscriptAudioDuration",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "float",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptPunctuate",
          "key": "punctuate",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptPunctuate",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
              "generatedName": "TranscriptPunctuate",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
                "generatedName": "TranscriptPunctuate",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptFormatText",
          "key": "format_text",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptFormatText",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether Text Formatting was enabled in the transcription request, either true or false",
              "generatedName": "TranscriptFormatText",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether Text Formatting was enabled in the transcription request, either true or false",
                "generatedName": "TranscriptFormatText",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptDualChannel",
          "key": "dual_channel",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptDualChannel",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
              "generatedName": "TranscriptDualChannel",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
                "generatedName": "TranscriptDualChannel",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWebhookUrl",
          "key": "webhook_url",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWebhookUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
              "generatedName": "TranscriptWebhookUrl",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
                "generatedName": "TranscriptWebhookUrl",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWebhookStatusCode",
          "key": "webhook_status_code",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWebhookStatusCode",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
              "generatedName": "TranscriptWebhookStatusCode",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
                "generatedName": "TranscriptWebhookStatusCode",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWebhookAuth",
          "key": "webhook_auth",
          "schema": {
            "description": "Whether webhook authentication details were provided in the transcription request",
            "generatedName": "TranscriptWebhookAuth",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWebhookAuthHeaderName",
          "key": "webhook_auth_header_name",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWebhookAuthHeaderName",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The header name which should be sent back with webhook calls, if provided in the transcription request",
              "generatedName": "TranscriptWebhookAuthHeaderName",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The header name which should be sent back with webhook calls, if provided in the transcription request",
                "generatedName": "TranscriptWebhookAuthHeaderName",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSpeedBoost",
          "key": "speed_boost",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSpeedBoost",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether speed boost was enabled in the transcription request",
              "generatedName": "TranscriptSpeedBoost",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether speed boost was enabled in the transcription request",
                "generatedName": "TranscriptSpeedBoost",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAutoHighlights",
          "key": "auto_highlights",
          "schema": {
            "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
            "generatedName": "TranscriptAutoHighlights",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAutoHighlightsResult",
          "key": "auto_highlights_result",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptAutoHighlightsResult",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.
See [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.
",
              "generatedName": "TranscriptAutoHighlightsResult",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "AutoHighlightsResult",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAudioStartFrom",
          "key": "audio_start_from",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptAudioStartFrom",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
              "generatedName": "TranscriptAudioStartFrom",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
                "generatedName": "TranscriptAudioStartFrom",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAudioEndAt",
          "key": "audio_end_at",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptAudioEndAt",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
              "generatedName": "TranscriptAudioEndAt",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
                "generatedName": "TranscriptAudioEndAt",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordBoost",
          "key": "word_boost",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWordBoost",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request",
              "generatedName": "TranscriptWordBoost",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "TranscriptWordBoostItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptBoostParam",
          "key": "boost_param",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptBoostParam",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The word boost parameter value, if provided in the transcription request",
              "generatedName": "TranscriptBoostParam",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The word boost parameter value, if provided in the transcription request",
                "generatedName": "TranscriptBoostParam",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptFilterProfanity",
          "key": "filter_profanity",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptFilterProfanity",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
              "generatedName": "TranscriptFilterProfanity",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
                "generatedName": "TranscriptFilterProfanity",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptRedactPii",
          "key": "redact_pii",
          "schema": {
            "description": "Whether [PII Redaction](https://www.assemblyai.com/docs/Models/pii_redaction) was enabled in the transcription request, either true or false",
            "generatedName": "TranscriptRedactPii",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptRedactPiiAudio",
          "key": "redact_pii_audio",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptRedactPiiAudio",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),
either true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
              "generatedName": "TranscriptRedactPiiAudio",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),
either true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
                "generatedName": "TranscriptRedactPiiAudio",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptRedactPiiAudioQuality",
          "key": "redact_pii_audio_quality",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptRedactPiiAudioQuality",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.
See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
              "generatedName": "TranscriptRedactPiiAudioQuality",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.
See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
                "generatedName": "TranscriptRedactPiiAudioQuality",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptRedactPiiPolicies",
          "key": "redact_pii_policies",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptRedactPiiPolicies",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.
See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
              "generatedName": "TranscriptRedactPiiPolicies",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.
See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.
",
                "generatedName": "TranscriptRedactPiiPolicies",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptRedactPiiPoliciesItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "PiiPolicy",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptRedactPiiSub",
          "key": "redact_pii_sub",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptRedactPiiSub",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The replacement logic for detected PII, can be "entity_type" or "hash". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
              "generatedName": "TranscriptRedactPiiSub",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "SubstitutionPolicy",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSpeakerLabels",
          "key": "speaker_labels",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSpeakerLabels",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
              "generatedName": "TranscriptSpeakerLabels",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
                "generatedName": "TranscriptSpeakerLabels",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSpeakersExpected",
          "key": "speakers_expected",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSpeakersExpected",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
              "generatedName": "TranscriptSpeakersExpected",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                "generatedName": "TranscriptSpeakersExpected",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptContentSafety",
          "key": "content_safety",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptContentSafety",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
              "generatedName": "TranscriptContentSafety",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
                "generatedName": "TranscriptContentSafety",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptContentSafetyLabels",
          "key": "content_safety_labels",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptContentSafetyLabels",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.
See [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.
",
              "generatedName": "TranscriptContentSafetyLabels",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "allOf": [],
                "allOfPropertyConflicts": [],
                "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.
See [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.
",
                "generatedName": "TranscriptContentSafetyLabels",
                "groupName": undefined,
                "nameOverride": undefined,
                "properties": [
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "transcriptContentSafetyLabelsStatus",
                    "key": "status",
                    "schema": {
                      "description": "Will be either success, or unavailable in the rare case that the Content Safety Labels model failed.",
                      "generatedName": "TranscriptContentSafetyLabelsStatus",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": "AudioIntelligenceModelStatus",
                      "type": "reference",
                    },
                  },
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "transcriptContentSafetyLabelsResults",
                    "key": "results",
                    "schema": {
                      "description": undefined,
                      "generatedName": "TranscriptContentSafetyLabelsResults",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "type": "array",
                      "value": {
                        "description": undefined,
                        "generatedName": "TranscriptContentSafetyLabelsResultsItem",
                        "groupName": undefined,
                        "nameOverride": undefined,
                        "schema": "ContentSafetyLabelResult",
                        "type": "reference",
                      },
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptIabCategories",
          "key": "iab_categories",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptIabCategories",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
              "generatedName": "TranscriptIabCategories",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
                "generatedName": "TranscriptIabCategories",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptIabCategoriesResult",
          "key": "iab_categories_result",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptIabCategoriesResult",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.
See [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.
",
              "generatedName": "TranscriptIabCategoriesResult",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "allOf": [],
                "allOfPropertyConflicts": [],
                "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.
See [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.
",
                "generatedName": "TranscriptIabCategoriesResult",
                "groupName": undefined,
                "nameOverride": undefined,
                "properties": [
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "transcriptIabCategoriesResultStatus",
                    "key": "status",
                    "schema": {
                      "description": "Will be either success, or unavailable in the rare case that the Content Moderation model failed.",
                      "generatedName": "TranscriptIabCategoriesResultStatus",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "schema": "AudioIntelligenceModelStatus",
                      "type": "reference",
                    },
                  },
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "transcriptIabCategoriesResultResults",
                    "key": "results",
                    "schema": {
                      "description": "An array of results for the Topic Detection model.",
                      "generatedName": "TranscriptIabCategoriesResultResults",
                      "groupName": undefined,
                      "nameOverride": undefined,
                      "type": "array",
                      "value": {
                        "description": undefined,
                        "generatedName": "TranscriptIabCategoriesResultResultsItem",
                        "groupName": undefined,
                        "nameOverride": undefined,
                        "schema": "TopicDetectionResult",
                        "type": "reference",
                      },
                    },
                  },
                  {
                    "audiences": [],
                    "conflict": {},
                    "generatedName": "transcriptIabCategoriesResultSummary",
                    "key": "summary",
                    "schema": {
                      "description": "The overall relevance of topic to the entire audio file",
                      "generatedName": "TranscriptIabCategoriesResultSummary",
                      "groupName": undefined,
                      "key": {
                        "description": undefined,
                        "generatedName": "TranscriptIabCategoriesResultSummaryKey",
                        "groupName": undefined,
                        "nameOverride": undefined,
                        "schema": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                      "nameOverride": undefined,
                      "type": "map",
                      "value": {
                        "description": undefined,
                        "generatedName": "TranscriptIabCategoriesResultSummaryValue",
                        "groupName": undefined,
                        "nameOverride": undefined,
                        "schema": {
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptLanguageDetection",
          "key": "language_detection",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptLanguageDetection",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
              "generatedName": "TranscriptLanguageDetection",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
                "generatedName": "TranscriptLanguageDetection",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptCustomSpelling",
          "key": "custom_spelling",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptCustomSpelling",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Customize how words are spelled and formatted using to and from values",
              "generatedName": "TranscriptCustomSpelling",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Customize how words are spelled and formatted using to and from values",
                "generatedName": "TranscriptCustomSpelling",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptCustomSpellingItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "TranscriptCustomSpelling",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptAutoChapters",
          "key": "auto_chapters",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptAutoChapters",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
              "generatedName": "TranscriptAutoChapters",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
                "generatedName": "TranscriptAutoChapters",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptChapters",
          "key": "chapters",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptChapters",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of temporally sequential chapters for the audio file",
              "generatedName": "TranscriptChapters",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "An array of temporally sequential chapters for the audio file",
                "generatedName": "TranscriptChapters",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptChaptersItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "Chapter",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSummarization",
          "key": "summarization",
          "schema": {
            "description": "Whether [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request, either true or false",
            "generatedName": "TranscriptSummarization",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSummaryType",
          "key": "summary_type",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSummaryType",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
              "generatedName": "TranscriptSummaryType",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                "generatedName": "TranscriptSummaryType",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSummaryModel",
          "key": "summary_model",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSummaryModel",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The Summarization model used to generate the summary,
if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request
",
              "generatedName": "TranscriptSummaryModel",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The Summarization model used to generate the summary,
if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request
",
                "generatedName": "TranscriptSummaryModel",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSummary",
          "key": "summary",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSummary",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
              "generatedName": "TranscriptSummary",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                "generatedName": "TranscriptSummary",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptCustomTopics",
          "key": "custom_topics",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptCustomTopics",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Whether custom topics was enabled in the transcription request, either true or false",
              "generatedName": "TranscriptCustomTopics",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Whether custom topics was enabled in the transcription request, either true or false",
                "generatedName": "TranscriptCustomTopics",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptTopics",
          "key": "topics",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptTopics",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
              "generatedName": "TranscriptTopics",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "array",
              "value": {
                "description": undefined,
                "generatedName": "TranscriptTopicsItem",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptDisfluencies",
          "key": "disfluencies",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptDisfluencies",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Transcribe Filler Words, like "umm", in your media file; can be true or false",
              "generatedName": "TranscriptDisfluencies",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Transcribe Filler Words, like "umm", in your media file; can be true or false",
                "generatedName": "TranscriptDisfluencies",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentimentAnalysis",
          "key": "sentiment_analysis",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSentimentAnalysis",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
              "generatedName": "TranscriptSentimentAnalysis",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
                "generatedName": "TranscriptSentimentAnalysis",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentimentAnalysisResults",
          "key": "sentiment_analysis_results",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSentimentAnalysisResults",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.
See [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.
",
              "generatedName": "TranscriptSentimentAnalysisResults",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.
See [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.
",
                "generatedName": "TranscriptSentimentAnalysisResults",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptSentimentAnalysisResultsItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "SentimentAnalysisResult",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptEntityDetection",
          "key": "entity_detection",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptEntityDetection",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
              "generatedName": "TranscriptEntityDetection",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
                "generatedName": "TranscriptEntityDetection",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptEntities",
          "key": "entities",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptEntities",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "An array of results for the Entity Detection model, if it was enabled during the transcription request.
See [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.
",
              "generatedName": "TranscriptEntities",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "An array of results for the Entity Detection model, if it was enabled during the transcription request.
See [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.
",
                "generatedName": "TranscriptEntities",
                "groupName": undefined,
                "nameOverride": undefined,
                "type": "array",
                "value": {
                  "description": undefined,
                  "generatedName": "TranscriptEntitiesItem",
                  "groupName": undefined,
                  "nameOverride": undefined,
                  "schema": "Entity",
                  "type": "reference",
                },
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSpeechThreshold",
          "key": "speech_threshold",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptSpeechThreshold",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.
Valid values are in the range [0, 1] inclusive.
",
              "generatedName": "TranscriptSpeechThreshold",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.
Valid values are in the range [0, 1] inclusive.
",
                "generatedName": "TranscriptSpeechThreshold",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "float",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptThrottled",
          "key": "throttled",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptThrottled",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "True while a request is throttled and false when a request is no longer throttled",
              "generatedName": "TranscriptThrottled",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": "True while a request is throttled and false when a request is no longer throttled",
                "generatedName": "TranscriptThrottled",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "type": "boolean",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptError",
          "key": "error",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptError",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Error message of why the transcript failed",
              "generatedName": "TranscriptError",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptBoostParam": {
      "description": "The word boost parameter value, if provided in the transcription request.",
      "generatedName": "TranscriptBoostParam",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "low",
          "nameOverride": undefined,
          "value": "low",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "default",
          "nameOverride": undefined,
          "value": "default",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": undefined,
          "generatedName": "high",
          "nameOverride": undefined,
          "value": "high",
        },
      ],
    },
    "TranscriptCustomSpelling": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": "Object containing words or phrases to replace, and the word or phrase to replace with",
      "generatedName": "TranscriptCustomSpelling",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptCustomSpellingFrom",
          "key": "from",
          "schema": {
            "description": "Words or phrases to replace",
            "generatedName": "TranscriptCustomSpellingFrom",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": "Word or phrase to replace",
              "generatedName": "TranscriptCustomSpellingFromItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptCustomSpellingTo",
          "key": "to",
          "schema": {
            "description": "Word or phrase to replace with",
            "generatedName": "TranscriptCustomSpellingTo",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "TranscriptLanguageCode": {
      "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).
The default value is 'en_us'.
",
      "generatedName": "TranscriptLanguageCode",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "nullable",
      "value": {
        "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).
The default value is 'en_us'.
",
        "generatedName": "TranscriptLanguageCode",
        "groupName": undefined,
        "nameOverride": undefined,
        "type": "enum",
        "values": [
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "en",
            "nameOverride": undefined,
            "value": "en",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "en_au",
            "nameOverride": undefined,
            "value": "en_au",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "en_uk",
            "nameOverride": undefined,
            "value": "en_uk",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "en_us",
            "nameOverride": undefined,
            "value": "en_us",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "es",
            "nameOverride": undefined,
            "value": "es",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "fr",
            "nameOverride": undefined,
            "value": "fr",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "de",
            "nameOverride": undefined,
            "value": "de",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "it",
            "nameOverride": undefined,
            "value": "it",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "pt",
            "nameOverride": undefined,
            "value": "pt",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "nl",
            "nameOverride": undefined,
            "value": "nl",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "hi",
            "nameOverride": undefined,
            "value": "hi",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "ja",
            "nameOverride": undefined,
            "value": "ja",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "zh",
            "nameOverride": undefined,
            "value": "zh",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "fi",
            "nameOverride": undefined,
            "value": "fi",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "ko",
            "nameOverride": undefined,
            "value": "ko",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "pl",
            "nameOverride": undefined,
            "value": "pl",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "ru",
            "nameOverride": undefined,
            "value": "ru",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "tr",
            "nameOverride": undefined,
            "value": "tr",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "uk",
            "nameOverride": undefined,
            "value": "uk",
          },
          {
            "casing": {
              "camel": undefined,
              "pascal": undefined,
              "screamingSnake": undefined,
              "snake": undefined,
            },
            "description": undefined,
            "generatedName": "vi",
            "nameOverride": undefined,
            "value": "vi",
          },
        ],
      },
    },
    "TranscriptList": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptList",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListPageDetails",
          "key": "page_details",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListPageDetails",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "PageDetails",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListTranscripts",
          "key": "transcripts",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListTranscripts",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptListTranscriptsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptListItem",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptListItem": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptListItem",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemId",
          "key": "id",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListItemId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemResourceUrl",
          "key": "resource_url",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListItemResourceUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemStatus",
          "key": "status",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListItemStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": "TranscriptStatus",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemCreated",
          "key": "created",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListItemCreated",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "datetime",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemCompleted",
          "key": "completed",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListItemCompleted",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptListItemCompleted",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "datetime",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListItemAudioUrl",
          "key": "audio_url",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptListItemAudioUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "TranscriptListParameters": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptListParameters",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersLimit",
          "key": "limit",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersLimit",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Maximum amount of transcripts to retrieve",
              "generatedName": "TranscriptListParametersLimit",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersStatus",
          "key": "status",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersStatus",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Filter by transcript status",
              "generatedName": "TranscriptListParametersStatus",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptStatus",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersCreatedOn",
          "key": "created_on",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersCreatedOn",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Only get transcripts created on this date",
              "generatedName": "TranscriptListParametersCreatedOn",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersBeforeId",
          "key": "before_id",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersBeforeId",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Get transcripts that were created before this transcript ID",
              "generatedName": "TranscriptListParametersBeforeId",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersAfterId",
          "key": "after_id",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersAfterId",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Get transcripts that were created after this transcript ID",
              "generatedName": "TranscriptListParametersAfterId",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "maxLength": undefined,
                "minLength": undefined,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptListParametersThrottledOnly",
          "key": "throttled_only",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptListParametersThrottledOnly",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": "Only get throttled transcripts, overrides the status filter",
              "generatedName": "TranscriptListParametersThrottledOnly",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptParagraph": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptParagraph",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptParagraphText",
          "key": "text",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptParagraphText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptParagraphStart",
          "key": "start",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptParagraphStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptParagraphEnd",
          "key": "end",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptParagraphEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptParagraphConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptParagraphConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptParagraphWords",
          "key": "words",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptParagraphWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptParagraphWordsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptWord",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptSentence": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptSentence",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentenceText",
          "key": "text",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptSentenceText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentenceStart",
          "key": "start",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptSentenceStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentenceEnd",
          "key": "end",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptSentenceEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentenceConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptSentenceConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptSentenceWords",
          "key": "words",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptSentenceWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptSentenceWordsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptWord",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptStatus": {
      "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
      "generatedName": "TranscriptStatus",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "enum",
      "values": [
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "The audio file is in the queue to be processed by the API.",
          "generatedName": "queued",
          "nameOverride": undefined,
          "value": "queued",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "The audio file is being processed by the API.",
          "generatedName": "processing",
          "nameOverride": undefined,
          "value": "processing",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "The transcription job has been completed successfully.",
          "generatedName": "completed",
          "nameOverride": undefined,
          "value": "completed",
        },
        {
          "casing": {
            "camel": undefined,
            "pascal": undefined,
            "screamingSnake": undefined,
            "snake": undefined,
          },
          "description": "An error occurred while processing the audio file.",
          "generatedName": "error",
          "nameOverride": undefined,
          "value": "error",
        },
      ],
    },
    "TranscriptUtterance": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptUtterance",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceChannel",
          "key": "channel",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceChannel",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceStart",
          "key": "start",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceEnd",
          "key": "end",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceText",
          "key": "text",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptUtteranceWords",
          "key": "words",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptUtteranceWords",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptUtteranceWordsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "TranscriptWord",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "TranscriptWord": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "TranscriptWord",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordConfidence",
          "key": "confidence",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordStart",
          "key": "start",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordEnd",
          "key": "end",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordText",
          "key": "text",
          "schema": {
            "description": undefined,
            "generatedName": "TranscriptWordText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "transcriptWordSpeaker",
          "key": "speaker",
          "schema": {
            "description": undefined,
            "generatedName": "transcriptWordSpeaker",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "optional",
            "value": {
              "description": undefined,
              "generatedName": "TranscriptWordSpeaker",
              "groupName": undefined,
              "nameOverride": undefined,
              "type": "nullable",
              "value": {
                "description": undefined,
                "generatedName": "TranscriptWordSpeaker",
                "groupName": undefined,
                "nameOverride": undefined,
                "schema": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "UploadedFile": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "UploadedFile",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "uploadedFileUploadUrl",
          "key": "upload_url",
          "schema": {
            "description": "A URL that points to your audio file, accessible only by AssemblyAI's servers",
            "generatedName": "UploadedFileUploadUrl",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "Word": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "Word",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordStart",
          "key": "start",
          "schema": {
            "description": "Start time of the word in milliseconds",
            "generatedName": "WordStart",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordEnd",
          "key": "end",
          "schema": {
            "description": "End time of the word in milliseconds",
            "generatedName": "WordEnd",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordConfidence",
          "key": "confidence",
          "schema": {
            "description": "Confidence score of the word",
            "generatedName": "WordConfidence",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "double",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordText",
          "key": "text",
          "schema": {
            "description": "The word itself",
            "generatedName": "WordText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "type": "object",
    },
    "WordSearchMatch": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "WordSearchMatch",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchMatchText",
          "key": "text",
          "schema": {
            "description": "The matched word",
            "generatedName": "WordSearchMatchText",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchMatchCount",
          "key": "count",
          "schema": {
            "description": "The total amount of times the word is in the transcript",
            "generatedName": "WordSearchMatchCount",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchMatchTimestamps",
          "key": "timestamps",
          "schema": {
            "description": "An array of timestamps",
            "generatedName": "WordSearchMatchTimestamps",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "WordSearchMatchTimestampsItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "WordSearchTimestamp",
              "type": "reference",
            },
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchMatchIndexes",
          "key": "indexes",
          "schema": {
            "description": "An array of all index locations for that word within the \`words\` array of the completed transcript",
            "generatedName": "WordSearchMatchIndexes",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "WordSearchMatchIndexesItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": {
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "WordSearchResponse": {
      "allOf": [],
      "allOfPropertyConflicts": [],
      "description": undefined,
      "generatedName": "WordSearchResponse",
      "groupName": undefined,
      "nameOverride": undefined,
      "properties": [
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchResponseId",
          "key": "id",
          "schema": {
            "description": "The ID of the transcript",
            "generatedName": "WordSearchResponseId",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "maxLength": undefined,
              "minLength": undefined,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchResponseTotalCount",
          "key": "total_count",
          "schema": {
            "description": "The total count of all matched instances. For e.g., word 1 matched 2 times, and word 2 matched 3 times, \`total_count\` will equal 5.",
            "generatedName": "WordSearchResponseTotalCount",
            "groupName": undefined,
            "nameOverride": undefined,
            "schema": {
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "conflict": {},
          "generatedName": "wordSearchResponseMatches",
          "key": "matches",
          "schema": {
            "description": "The matches of the search",
            "generatedName": "WordSearchResponseMatches",
            "groupName": undefined,
            "nameOverride": undefined,
            "type": "array",
            "value": {
              "description": undefined,
              "generatedName": "WordSearchResponseMatchesItem",
              "groupName": undefined,
              "nameOverride": undefined,
              "schema": "WordSearchMatch",
              "type": "reference",
            },
          },
        },
      ],
      "type": "object",
    },
    "WordSearchTimestamp": {
      "description": "An array of timestamps structured as [\`start_time\`, \`end_time\`] in milliseconds",
      "generatedName": "WordSearchTimestamp",
      "groupName": undefined,
      "nameOverride": undefined,
      "type": "array",
      "value": {
        "description": undefined,
        "generatedName": "WordSearchTimestampItem",
        "groupName": undefined,
        "nameOverride": undefined,
        "schema": {
          "type": "int",
        },
        "type": "primitive",
      },
    },
  },
  "securitySchemes": {
    "ApiKey": {
      "headerEnvVar": undefined,
      "headerName": "Authorization",
      "headerVariableName": undefined,
      "prefix": undefined,
      "type": "header",
    },
  },
  "servers": [
    {
      "description": "AssemblyAI API",
      "name": undefined,
      "url": "https://api.assemblyai.com",
    },
  ],
  "tags": {
    "orderedTagIds": [
      "transcript",
      "LeMUR",
      "realtime",
    ],
    "tagsById": {
      "LeMUR": {
        "description": "LeMUR related operations",
        "id": "LeMUR",
      },
      "realtime": {
        "description": "Real-time transcription",
        "id": "realtime",
      },
      "transcript": {
        "description": "Transcript related operations",
        "id": "transcript",
      },
    },
  },
  "title": "AssemblyAI API",
  "variables": {},
  "webhooks": [],
}
`;
