{
  "types": {
    "UserLinks": {
      "name": "UserLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "URL of this user on this API",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "User": {
      "description": "User object",
      "name": "User",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of this user",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "bio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "profileImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "URL of this user’s profile on Val Town’s website",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "UserLinks"
            }
          }
        ]
      }
    },
    "ResultSetLastInsertRowid0": {
      "name": "ResultSetLastInsertRowid0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ResultSetLastInsertRowid1": {
      "name": "ResultSetLastInsertRowid1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "ResultSetLastInsertRowid": {
      "description": "ROWID of the last inserted row.\n\nThis value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
      "name": "ResultSetLastInsertRowid",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ResultSetLastInsertRowid0",
            "type": {
              "type": "id",
              "value": "ResultSetLastInsertRowid0"
            }
          },
          {
            "typeName": "ResultSetLastInsertRowid1",
            "type": {
              "type": "id",
              "value": "ResultSetLastInsertRowid1"
            }
          }
        ]
      }
    },
    "ResultSet": {
      "description": "Result of executing an SQL statement.",
      "name": "ResultSet",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Names of columns.\n\nNames of columns can be defined using the `AS` keyword in SQL:\n\n```sql\nSELECT author AS author, COUNT(*) AS count FROM books GROUP BY author\n```",
            "key": "columns",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Types of columns.\n\nThe types are currently shown for types declared in a SQL table. For column types of function calls, for example, an empty string is returned.",
            "key": "columnTypes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Rows produced by the statement.",
            "key": "rows",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Number of rows that were affected by an UPDATE, INSERT or DELETE operation.\n\nThis value is not specified for other SQL statements.",
            "key": "rowsAffected",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "ROWID of the last inserted row.\n\nThis value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
            "key": "lastInsertRowid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ResultSetLastInsertRowid"
                }
              }
            }
          }
        ]
      }
    },
    "ExtendedValPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "ExtendedValPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "ExtendedValType": {
      "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
      "name": "ExtendedValType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "interval"
          },
          {
            "value": "http"
          },
          {
            "value": "express"
          },
          {
            "value": "email"
          },
          {
            "value": "script"
          },
          {
            "value": "rpc"
          },
          {
            "value": "httpnext"
          }
        ]
      }
    },
    "ExtendedValLinks": {
      "name": "ExtendedValLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of this val on this API",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The endpoint to retrieve this val’s versions",
            "key": "versions",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The URL of this Val’s source code as a module",
            "key": "module",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "ExtendedValAuthor": {
      "description": "The user who created this val",
      "name": "ExtendedValAuthor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ExtendedVal": {
      "description": "A Val",
      "name": "ExtendedVal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of this val",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "This val’s id",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The version of this val, starting at zero",
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether this val is available publicly on Val Town",
            "key": "public",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "key": "createdAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "key": "privacy",
            "valueType": {
              "type": "id",
              "value": "ExtendedValPrivacy"
            }
          },
          {
            "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ExtendedValType"
            }
          },
          {
            "description": "The URL of this val on the Val Town website",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "ExtendedValLinks"
            }
          },
          {
            "key": "author",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ExtendedValAuthor"
              }
            }
          },
          {
            "description": "How many likes this val has received",
            "key": "likeCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "referenceCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "readme",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BasicValPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "BasicValPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "BasicValType": {
      "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
      "name": "BasicValType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "interval"
          },
          {
            "value": "http"
          },
          {
            "value": "express"
          },
          {
            "value": "email"
          },
          {
            "value": "script"
          },
          {
            "value": "rpc"
          },
          {
            "value": "httpnext"
          }
        ]
      }
    },
    "BasicValLinks": {
      "name": "BasicValLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of this val on this API",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The endpoint to retrieve this val’s versions",
            "key": "versions",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The URL of this Val’s source code as a module",
            "key": "module",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "BasicValAuthor": {
      "description": "The user who created this val",
      "name": "BasicValAuthor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BasicVal": {
      "description": "A Val",
      "name": "BasicVal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of this val",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "This val’s id",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The version of this val, starting at zero",
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether this val is available publicly on Val Town",
            "key": "public",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "key": "createdAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "key": "privacy",
            "valueType": {
              "type": "id",
              "value": "BasicValPrivacy"
            }
          },
          {
            "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "BasicValType"
            }
          },
          {
            "description": "The URL of this val on the Val Town website",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "BasicValLinks"
            }
          },
          {
            "key": "author",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BasicValAuthor"
              }
            }
          }
        ]
      }
    },
    "PaginationLinks": {
      "description": "Links to use for pagination",
      "name": "PaginationLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "URL of this page",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "URL of the previous page, if any",
            "key": "prev",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "URL of the next page, if any",
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        ]
      }
    },
    "search_vals_Response_200": {
      "description": "A paginated result set",
      "name": "search_vals_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BasicVal"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1AliasUsernameValNameGetResponsesSchemaPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "V1AliasUsernameValNameGetResponsesSchemaPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "V1AliasUsernameValNameGetResponsesSchemaType": {
      "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
      "name": "V1AliasUsernameValNameGetResponsesSchemaType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "interval"
          },
          {
            "value": "http"
          },
          {
            "value": "express"
          },
          {
            "value": "email"
          },
          {
            "value": "script"
          },
          {
            "value": "rpc"
          },
          {
            "value": "httpnext"
          }
        ]
      }
    },
    "V1AliasUsernameValNameGetResponsesSchemaLinks": {
      "name": "V1AliasUsernameValNameGetResponsesSchemaLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of this val on this API",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The endpoint to retrieve this val’s versions",
            "key": "versions",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The URL of this Val’s source code as a module",
            "key": "module",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "V1AliasUsernameValNameGetResponsesSchemaAuthor": {
      "description": "The user who created this val",
      "name": "V1AliasUsernameValNameGetResponsesSchemaAuthor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "alias_val_Response_200": {
      "description": "A Val",
      "name": "alias_val_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of this val",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "This val’s id",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The version of this val, starting at zero",
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether this val is available publicly on Val Town",
            "key": "public",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "key": "createdAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "key": "privacy",
            "valueType": {
              "type": "id",
              "value": "V1AliasUsernameValNameGetResponsesSchemaPrivacy"
            }
          },
          {
            "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "V1AliasUsernameValNameGetResponsesSchemaType"
            }
          },
          {
            "description": "The URL of this val on the Val Town website",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "V1AliasUsernameValNameGetResponsesSchemaLinks"
            }
          },
          {
            "key": "author",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1AliasUsernameValNameGetResponsesSchemaAuthor"
              }
            }
          },
          {
            "description": "How many likes this val has received",
            "key": "likeCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "referenceCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "readme",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1MeGetResponsesSchemaLinks": {
      "name": "V1MeGetResponsesSchemaLinks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "URL of this user on this API",
            "key": "self",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "V1MeGetResponsesSchemaTier": {
      "description": "Your account tier",
      "name": "V1MeGetResponsesSchemaTier",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "free"
          },
          {
            "value": "pro"
          }
        ]
      }
    },
    "me_get_Response_200": {
      "description": "Your user information, with tier and email included",
      "name": "me_get_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of this user",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "bio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "profileImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "URL of this user’s profile on Val Town’s website",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "V1MeGetResponsesSchemaLinks"
            }
          },
          {
            "key": "tier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1MeGetResponsesSchemaTier"
              }
            }
          },
          {
            "description": "Your email address",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "me_likes_Response_200": {
      "description": "A paginated result set",
      "name": "me_likes_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BasicVal"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1MeCommentsGetParametersSchema": {
      "name": "V1MeCommentsGetParametersSchema",
      "shape": {
        "type": "enum",
        "default": "any",
        "values": [
          {
            "value": "any"
          },
          {
            "value": "received"
          },
          {
            "value": "given"
          }
        ]
      }
    },
    "V1MeCommentsGetResponsesSchemaDataItemsAuthor": {
      "name": "V1MeCommentsGetResponsesSchemaDataItemsAuthor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1MeCommentsGetResponsesSchemaDataItemsValPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "V1MeCommentsGetResponsesSchemaDataItemsValPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "V1MeCommentsGetResponsesSchemaDataItemsValAuthor": {
      "description": "The user who created this val",
      "name": "V1MeCommentsGetResponsesSchemaDataItemsValAuthor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1MeCommentsGetResponsesSchemaDataItemsVal": {
      "name": "V1MeCommentsGetResponsesSchemaDataItemsVal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the val that is being commented on",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "key": "privacy",
            "valueType": {
              "type": "id",
              "value": "V1MeCommentsGetResponsesSchemaDataItemsValPrivacy"
            }
          },
          {
            "key": "author",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1MeCommentsGetResponsesSchemaDataItemsValAuthor"
              }
            }
          }
        ]
      }
    },
    "V1MeCommentsGetResponsesSchemaDataItems": {
      "name": "V1MeCommentsGetResponsesSchemaDataItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Text of the given comment, in Markdown",
            "key": "comment",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The comment’s id",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "createdAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "author",
            "valueType": {
              "type": "id",
              "value": "V1MeCommentsGetResponsesSchemaDataItemsAuthor"
            }
          },
          {
            "key": "val",
            "valueType": {
              "type": "id",
              "value": "V1MeCommentsGetResponsesSchemaDataItemsVal"
            }
          }
        ]
      }
    },
    "me_comments_Response_200": {
      "description": "A paginated result set",
      "name": "me_comments_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V1MeCommentsGetResponsesSchemaDataItems"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1MeReferencesGetResponsesSchemaDataItemsReference": {
      "description": "A val in a dependency relationship",
      "name": "V1MeReferencesGetResponsesSchemaDataItemsReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The id of this val",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "author_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "The name of this val",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1MeReferencesGetResponsesSchemaDataItemsDependsOn": {
      "description": "A val in a dependency relationship",
      "name": "V1MeReferencesGetResponsesSchemaDataItemsDependsOn",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The id of this val",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "author_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "The name of this val",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1MeReferencesGetResponsesSchemaDataItems": {
      "description": "A description of a dependency from one val (reference) to another (dependsOn) that was introduced at a particular time.",
      "name": "V1MeReferencesGetResponsesSchemaDataItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A val in a dependency relationship",
            "key": "reference",
            "valueType": {
              "type": "id",
              "value": "V1MeReferencesGetResponsesSchemaDataItemsReference"
            }
          },
          {
            "description": "A val in a dependency relationship",
            "key": "dependsOn",
            "valueType": {
              "type": "id",
              "value": "V1MeReferencesGetResponsesSchemaDataItemsDependsOn"
            }
          },
          {
            "key": "referencedAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "me_references_Response_200": {
      "description": "A paginated result set",
      "name": "me_references_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V1MeReferencesGetResponsesSchemaDataItems"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1BlobGetResponsesSchemaItems": {
      "name": "V1BlobGetResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Size in bytes of the object",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Creation date of the object",
            "key": "lastModified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "users_vals_Response_200": {
      "description": "A paginated result set",
      "name": "users_vals_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BasicVal"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatement0": {
      "description": "Simple SQL statement to run in SQLite",
      "name": "V1SqliteExecutePostRequestBodySchemaStatement0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items0": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items1": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items2": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items": {
      "description": "A value to be used as a parameter",
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items0",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items0"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items1",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items1"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items2",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items2"
            }
          }
        ]
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args0": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "optional",
            "itemType": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf0Items"
            }
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf10": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf10",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf11": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf11",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf12": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf12",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf1": {
      "description": "A value to be used as a parameter",
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf1",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf10",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf10"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf11",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf11"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf12",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf12"
            }
          }
        ]
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args1": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "map",
          "keyType": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "optional",
            "itemType": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1ArgsOneOf1"
            }
          }
        }
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args": {
      "description": "List of arguments to be used in the given statement",
      "name": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args0",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args0"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args1",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args1"
            }
          }
        ]
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatement1": {
      "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
      "name": "V1SqliteExecutePostRequestBodySchemaStatement1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "SQL statement, with ? placeholders for arguments",
            "key": "sql",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "List of arguments to be used in the given statement",
            "key": "args",
            "valueType": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatementOneOf1Args"
            }
          }
        ]
      }
    },
    "V1SqliteExecutePostRequestBodySchemaStatement": {
      "name": "V1SqliteExecutePostRequestBodySchemaStatement",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatement0",
            "description": "Simple SQL statement to run in SQLite",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatement0"
            }
          },
          {
            "typeName": "V1SqliteExecutePostRequestBodySchemaStatement1",
            "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
            "type": {
              "type": "id",
              "value": "V1SqliteExecutePostRequestBodySchemaStatement1"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItems0": {
      "description": "Simple SQL statement to run in SQLite",
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItems0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items0": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items1": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items2": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items": {
      "description": "A value to be used as a parameter",
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items0",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items0"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items1",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items1"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items2",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items2"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args0": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "optional",
            "itemType": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf0Items"
            }
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf10": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf10",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf11": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf11",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf12": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf12",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf1": {
      "description": "A value to be used as a parameter",
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf1",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf10",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf10"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf11",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf11"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf12",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf12"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args1": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "map",
          "keyType": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "optional",
            "itemType": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1ArgsOneOf1"
            }
          }
        }
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args": {
      "description": "List of arguments to be used in the given statement",
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args0",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args0"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args1",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args1"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItems1": {
      "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItems1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "SQL statement, with ? placeholders for arguments",
            "key": "sql",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "List of arguments to be used in the given statement",
            "key": "args",
            "valueType": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItemsOneOf1Args"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaStatementsItems": {
      "name": "V1SqliteBatchPostRequestBodySchemaStatementsItems",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItems0",
            "description": "Simple SQL statement to run in SQLite",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItems0"
            }
          },
          {
            "typeName": "V1SqliteBatchPostRequestBodySchemaStatementsItems1",
            "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
            "type": {
              "type": "id",
              "value": "V1SqliteBatchPostRequestBodySchemaStatementsItems1"
            }
          }
        ]
      }
    },
    "V1SqliteBatchPostRequestBodySchemaMode": {
      "name": "V1SqliteBatchPostRequestBodySchemaMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "write"
          },
          {
            "value": "read"
          },
          {
            "value": "deferred"
          }
        ]
      }
    },
    "V1EvalPostResponsesSchema0": {
      "name": "V1EvalPostResponsesSchema0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EvalPostResponsesSchema1": {
      "name": "V1EvalPostResponsesSchema1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1EvalPostResponsesSchema2": {
      "name": "V1EvalPostResponsesSchema2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [],
        "extraProperties": {
          "type": "unknown"
        }
      }
    },
    "V1EvalPostResponsesSchema3": {
      "name": "V1EvalPostResponsesSchema3",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "unknown"
          }
        }
      }
    },
    "V1EvalPostResponsesSchema4": {
      "name": "V1EvalPostResponsesSchema4",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1EvalPostResponsesSchema": {
      "name": "V1EvalPostResponsesSchema",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EvalPostResponsesSchema0",
            "type": {
              "type": "id",
              "value": "V1EvalPostResponsesSchema0"
            }
          },
          {
            "typeName": "V1EvalPostResponsesSchema1",
            "type": {
              "type": "id",
              "value": "V1EvalPostResponsesSchema1"
            }
          },
          {
            "typeName": "V1EvalPostResponsesSchema2",
            "type": {
              "type": "id",
              "value": "V1EvalPostResponsesSchema2"
            }
          },
          {
            "typeName": "V1EvalPostResponsesSchema3",
            "type": {
              "type": "id",
              "value": "V1EvalPostResponsesSchema3"
            }
          },
          {
            "typeName": "V1EvalPostResponsesSchema4",
            "type": {
              "type": "id",
              "value": "V1EvalPostResponsesSchema4"
            }
          }
        ]
      }
    },
    "V1EvalPostResponsesSchemaType": {
      "name": "V1EvalPostResponsesSchemaType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "error"
          }
        ]
      }
    },
    "vals_evalPost_Response_400": {
      "name": "vals_evalPost_Response_400",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "V1EvalPostResponsesSchemaType"
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EvalCodeGetResponsesSchema0": {
      "name": "V1EvalCodeGetResponsesSchema0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EvalCodeGetResponsesSchema1": {
      "name": "V1EvalCodeGetResponsesSchema1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "V1EvalCodeGetResponsesSchema2": {
      "name": "V1EvalCodeGetResponsesSchema2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [],
        "extraProperties": {
          "type": "unknown"
        }
      }
    },
    "V1EvalCodeGetResponsesSchema3": {
      "name": "V1EvalCodeGetResponsesSchema3",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "unknown"
          }
        }
      }
    },
    "V1EvalCodeGetResponsesSchema4": {
      "name": "V1EvalCodeGetResponsesSchema4",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "V1EvalCodeGetResponsesSchema": {
      "name": "V1EvalCodeGetResponsesSchema",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EvalCodeGetResponsesSchema0",
            "type": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchema0"
            }
          },
          {
            "typeName": "V1EvalCodeGetResponsesSchema1",
            "type": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchema1"
            }
          },
          {
            "typeName": "V1EvalCodeGetResponsesSchema2",
            "type": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchema2"
            }
          },
          {
            "typeName": "V1EvalCodeGetResponsesSchema3",
            "type": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchema3"
            }
          },
          {
            "typeName": "V1EvalCodeGetResponsesSchema4",
            "type": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchema4"
            }
          }
        ]
      }
    },
    "V1EvalCodeGetResponsesSchemaType": {
      "name": "V1EvalCodeGetResponsesSchemaType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "error"
          }
        ]
      }
    },
    "vals_evalGet_Response_400": {
      "description": "The function throw an error or had invalid syntax",
      "name": "vals_evalGet_Response_400",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "V1EvalCodeGetResponsesSchemaType"
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaFrom0": {
      "name": "V1EmailPostRequestBodySchemaFrom0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaFrom1": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaFrom1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaFrom": {
      "name": "V1EmailPostRequestBodySchemaFrom",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaFrom0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaFrom0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaFrom1",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaFrom1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaTo00": {
      "name": "V1EmailPostRequestBodySchemaTo00",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaTo01": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaTo01",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaTo0": {
      "name": "V1EmailPostRequestBodySchemaTo0",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaTo00",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaTo00"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaTo01",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaTo01"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaToOneOf1Items0": {
      "name": "V1EmailPostRequestBodySchemaToOneOf1Items0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaToOneOf1Items1": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaToOneOf1Items1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaToOneOf1Items": {
      "name": "V1EmailPostRequestBodySchemaToOneOf1Items",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaToOneOf1Items0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaToOneOf1Items0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaToOneOf1Items1",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaToOneOf1Items1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaTo1": {
      "name": "V1EmailPostRequestBodySchemaTo1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "V1EmailPostRequestBodySchemaToOneOf1Items"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaTo": {
      "description": "A single email or list of emails for one of the address fields",
      "name": "V1EmailPostRequestBodySchemaTo",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaTo0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaTo0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaTo1",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaTo1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaCc00": {
      "name": "V1EmailPostRequestBodySchemaCc00",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaCc01": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaCc01",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaCc0": {
      "name": "V1EmailPostRequestBodySchemaCc0",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaCc00",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCc00"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaCc01",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCc01"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaCcOneOf1Items0": {
      "name": "V1EmailPostRequestBodySchemaCcOneOf1Items0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaCcOneOf1Items1": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaCcOneOf1Items1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaCcOneOf1Items": {
      "name": "V1EmailPostRequestBodySchemaCcOneOf1Items",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaCcOneOf1Items0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCcOneOf1Items0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaCcOneOf1Items1",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCcOneOf1Items1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaCc1": {
      "name": "V1EmailPostRequestBodySchemaCc1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "V1EmailPostRequestBodySchemaCcOneOf1Items"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaCc": {
      "description": "A single email or list of emails for one of the address fields",
      "name": "V1EmailPostRequestBodySchemaCc",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaCc0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCc0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaCc1",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaCc1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaBcc00": {
      "name": "V1EmailPostRequestBodySchemaBcc00",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaBcc01": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaBcc01",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaBcc0": {
      "name": "V1EmailPostRequestBodySchemaBcc0",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaBcc00",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBcc00"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaBcc01",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBcc01"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaBccOneOf1Items0": {
      "name": "V1EmailPostRequestBodySchemaBccOneOf1Items0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaBccOneOf1Items1": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaBccOneOf1Items1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaBccOneOf1Items": {
      "name": "V1EmailPostRequestBodySchemaBccOneOf1Items",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaBccOneOf1Items0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBccOneOf1Items0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaBccOneOf1Items1",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBccOneOf1Items1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaBcc1": {
      "name": "V1EmailPostRequestBodySchemaBcc1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "V1EmailPostRequestBodySchemaBccOneOf1Items"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaBcc": {
      "description": "A single email or list of emails for one of the address fields",
      "name": "V1EmailPostRequestBodySchemaBcc",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaBcc0",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBcc0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaBcc1",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaBcc1"
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaAttachmentsItems": {
      "name": "V1EmailPostRequestBodySchemaAttachmentsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "content",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "filename",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "disposition",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contentId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaReplyToList0": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaReplyToList0",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaReplyToListOneOf1Items": {
      "description": "An email address and name",
      "name": "V1EmailPostRequestBodySchemaReplyToListOneOf1Items",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1EmailPostRequestBodySchemaReplyToList1": {
      "name": "V1EmailPostRequestBodySchemaReplyToList1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "V1EmailPostRequestBodySchemaReplyToListOneOf1Items"
          }
        }
      }
    },
    "V1EmailPostRequestBodySchemaReplyToList": {
      "description": "A reply-to list of email addresses",
      "name": "V1EmailPostRequestBodySchemaReplyToList",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1EmailPostRequestBodySchemaReplyToList0",
            "description": "An email address and name",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaReplyToList0"
            }
          },
          {
            "typeName": "V1EmailPostRequestBodySchemaReplyToList1",
            "type": {
              "type": "id",
              "value": "V1EmailPostRequestBodySchemaReplyToList1"
            }
          }
        ]
      }
    },
    "emails_send_Response_200": {
      "description": "Successfully sent email",
      "name": "emails_send_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V1ValsPostRequestBodySchemaPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "V1ValsPostRequestBodySchemaPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "V1ValsPostRequestBodySchemaType": {
      "description": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
      "name": "V1ValsPostRequestBodySchemaType",
      "shape": {
        "type": "enum",
        "default": "script",
        "values": [
          {
            "value": "http"
          },
          {
            "value": "script"
          },
          {
            "value": "email"
          }
        ]
      }
    },
    "V1ValsValIdPutRequestBodySchemaPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "V1ValsValIdPutRequestBodySchemaPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "V1ValsValIdPutRequestBodySchemaType": {
      "description": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
      "name": "V1ValsValIdPutRequestBodySchemaType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "http"
          },
          {
            "value": "script"
          },
          {
            "value": "email"
          }
        ]
      }
    },
    "V1ValsValIdVersionsGetResponsesSchemaDataItems": {
      "name": "V1ValsValIdVersionsGetResponsesSchemaDataItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Id of a val",
            "key": "val_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Version of the val",
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "createdAt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "vals_list_Response_200": {
      "description": "A paginated result set",
      "name": "vals_list_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V1ValsValIdVersionsGetResponsesSchemaDataItems"
              }
            }
          },
          {
            "key": "links",
            "valueType": {
              "type": "id",
              "value": "PaginationLinks"
            }
          }
        ]
      }
    },
    "V1ValsValIdVersionsPostRequestBodySchemaPrivacy": {
      "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
      "name": "V1ValsValIdVersionsPostRequestBodySchemaPrivacy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "unlisted"
          },
          {
            "value": "private"
          }
        ]
      }
    },
    "V1ValsValIdVersionsPostRequestBodySchemaType": {
      "description": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
      "name": "V1ValsValIdVersionsPostRequestBodySchemaType",
      "shape": {
        "type": "enum",
        "default": "script",
        "values": [
          {
            "value": "http"
          },
          {
            "value": "script"
          },
          {
            "value": "email"
          }
        ]
      }
    },
    "vals_cancel_Response_200": {
      "description": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled",
      "name": "vals_cancel_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "True if the evaluation was found and cancelled",
            "key": "found",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "search": {
      "subpackageId": "search",
      "name": "search",
      "endpoints": [
        {
          "auth": false,
          "description": "Search for vals across the platform",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "vals",
          "originalEndpointId": "search.vals",
          "name": "Vals",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/search/vals"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            },
            {
              "description": "Search query",
              "key": "query",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "search_vals_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/search/vals",
              "pathParameters": {},
              "queryParameters": {
                "offset": 0,
                "limit": 20,
                "query": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "alias": {
      "subpackageId": "alias",
      "name": "alias",
      "endpoints": [
        {
          "auth": false,
          "description": "Get basic details about a user, given their username",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "username",
          "originalEndpointId": "alias.username",
          "name": "Username",
          "path": {
            "pathParameters": [
              {
                "description": "Username of the user who you are looking for",
                "key": "username",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/alias/"
              },
              {
                "type": "pathParameter",
                "value": "username"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "User"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/alias/",
              "pathParameters": {
                "username": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "https://val.town/u/tmcw",
                  "links": {
                    "self": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "https://val.town/u/tmcw",
                  "links": {
                    "self": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get a val",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "val",
          "originalEndpointId": "alias.val",
          "name": "Val",
          "path": {
            "pathParameters": [
              {
                "description": "Username of the user whose val you are looking for",
                "key": "username",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Name of the val you’re looking for",
                "key": "val_name",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/alias/"
              },
              {
                "type": "pathParameter",
                "value": "username"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "val_name"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "alias_val_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A Val"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/alias/",
              "pathParameters": {
                "username": "foo",
                "val_name": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "me": {
      "subpackageId": "me",
      "name": "me",
      "endpoints": [
        {
          "auth": false,
          "description": "Get profile information for the current user",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "get",
          "originalEndpointId": "me.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/me"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "me_get_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Your user information, with tier and email included"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/me",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "foo",
                  "links": {
                    "self": "foo"
                  },
                  "tier": "pro",
                  "email": "example@example.com"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "foo",
                  "links": {
                    "self": "foo"
                  },
                  "tier": "pro",
                  "email": "example@example.com"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get vals liked by the current user",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "likes",
          "originalEndpointId": "me.likes",
          "name": "Likes",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/me/likes"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "me_likes_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/me/likes",
              "pathParameters": {},
              "queryParameters": {
                "offset": 0,
                "limit": 20
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get comments related to current user, either given or received",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "comments",
          "originalEndpointId": "me.comments",
          "name": "Comments",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/me/comments"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            },
            {
              "description": "Include items created after this date",
              "key": "since",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Include items created before this date",
              "key": "until",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Whether to get comments you have received, given, or both",
              "key": "relationship",
              "type": {
                "type": "id",
                "value": "V1MeCommentsGetParametersSchema"
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "me_comments_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/me/comments",
              "pathParameters": {},
              "queryParameters": {
                "offset": 0,
                "limit": 20,
                "relationship": "any"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "comment": "foo",
                      "id": "foo",
                      "createdAt": "foo",
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      },
                      "val": {
                        "name": "foo",
                        "id": "foo",
                        "version": 42,
                        "privacy": "public",
                        "author": {
                          "id": "foo",
                          "username": "foo"
                        }
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "comment": "foo",
                      "id": "foo",
                      "createdAt": "foo",
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      },
                      "val": {
                        "name": "foo",
                        "id": "foo",
                        "version": 42,
                        "privacy": "public",
                        "author": {
                          "id": "foo",
                          "username": "foo"
                        }
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get vals that depend on any of the user's vals",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "references",
          "originalEndpointId": "me.references",
          "name": "References",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/me/references"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            },
            {
              "description": "Include items created after this date",
              "key": "since",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Include items created before this date",
              "key": "until",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "me_references_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/me/references",
              "pathParameters": {},
              "queryParameters": {
                "offset": 0,
                "limit": 20
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "reference": {
                        "id": "foo",
                        "username": "foo",
                        "author_id": "foo",
                        "name": "foo"
                      },
                      "dependsOn": {
                        "id": "foo",
                        "username": "foo",
                        "author_id": "foo",
                        "name": "foo"
                      },
                      "referencedAt": "foo"
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "reference": {
                        "id": "foo",
                        "username": "foo",
                        "author_id": "foo",
                        "name": "foo"
                      },
                      "dependsOn": {
                        "id": "foo",
                        "username": "foo",
                        "author_id": "foo",
                        "name": "foo"
                      },
                      "referencedAt": "foo"
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "blobs": {
      "subpackageId": "blobs",
      "name": "blobs",
      "endpoints": [
        {
          "auth": false,
          "description": "List blobs in your account",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "list",
          "originalEndpointId": "blobs.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/blob"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "If specified, only include blobs that start with this string",
              "key": "prefix",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1BlobGetResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": "List of blobs that you’ve stored"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/blob",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "hello_world",
                    "size": 20,
                    "lastModified": "2024-06-24T20:00:59.702Z"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "hello_world",
                    "size": 20,
                    "lastModified": "2024-06-24T20:00:59.702Z"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get a blob’s contents.",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "get",
          "originalEndpointId": "blobs.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "Key that uniquely identifies this blob",
                "key": "key",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 512
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/blob/"
              },
              {
                "type": "pathParameter",
                "value": "key"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "fileDownload"
            },
            "statusCode": 200,
            "description": "Binary contents of the returned file"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/blob/",
              "pathParameters": {
                "key": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Store data in blob storage",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "store",
          "originalEndpointId": "blobs.store",
          "name": "Store",
          "path": {
            "pathParameters": [
              {
                "description": "Key that uniquely identifies this blob",
                "key": "key",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 512
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/blob/"
              },
              {
                "type": "pathParameter",
                "value": "key"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "description": "Binary input data"
            },
            "description": "Binary input data"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/blob/",
              "pathParameters": {
                "key": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": "foo",
              "requestBodyV3": {
                "type": "json",
                "value": "foo"
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete a blob",
          "method": "DELETE",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "delete",
          "originalEndpointId": "blobs.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [
              {
                "description": "Key that uniquely identifies this blob",
                "key": "key",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 512
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/blob/"
              },
              {
                "type": "pathParameter",
                "value": "key"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/blob/",
              "pathParameters": {
                "key": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "users": {
      "subpackageId": "users",
      "name": "users",
      "endpoints": [
        {
          "auth": false,
          "description": "Get basic information about a user",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "get",
          "originalEndpointId": "users.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "User Id",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "User"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/users/",
              "pathParameters": {
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "https://val.town/u/tmcw",
                  "links": {
                    "self": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "profileImageUrl": null,
                  "url": "https://val.town/u/tmcw",
                  "links": {
                    "self": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "List a user's vals",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "vals",
          "originalEndpointId": "users.vals",
          "name": "Vals",
          "path": {
            "pathParameters": [
              {
                "description": "User Id",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": "/vals"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "users_vals_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/users/",
              "pathParameters": {
                "user_id": "foo"
              },
              "queryParameters": {
                "offset": 0,
                "limit": 20
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "id": "foo",
                      "version": 42,
                      "code": "foo",
                      "public": true,
                      "createdAt": "foo",
                      "privacy": "public",
                      "type": "interval",
                      "url": "foo",
                      "links": {
                        "self": "foo",
                        "versions": "foo",
                        "module": "foo"
                      },
                      "author": {
                        "id": "foo",
                        "username": "foo"
                      }
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "sqlite": {
      "subpackageId": "sqlite",
      "name": "sqlite",
      "endpoints": [
        {
          "auth": true,
          "description": "Execute a single SQLite statement and return results",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "execute",
          "originalEndpointId": "sqlite.execute",
          "name": "Execute",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/sqlite/execute"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "statement",
                    "valueType": {
                      "type": "id",
                      "value": "V1SqliteExecutePostRequestBodySchemaStatement"
                    }
                  }
                ]
              }
            },
            "description": "A single statement to run"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResultSet"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/sqlite/execute",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "statement": "SELECT 1;"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "statement": "SELECT 1;"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "columns": [
                    "foo"
                  ],
                  "columnTypes": [
                    "foo"
                  ],
                  "rows": [
                    [
                      null
                    ]
                  ],
                  "rowsAffected": 42,
                  "lastInsertRowid": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "columns": [
                    "foo"
                  ],
                  "columnTypes": [
                    "foo"
                  ],
                  "rows": [
                    [
                      null
                    ]
                  ],
                  "rowsAffected": 42,
                  "lastInsertRowid": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Execute a batch of SQLite statements and return results for all of them",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "batch",
          "originalEndpointId": "sqlite.batch",
          "name": "Batch",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/sqlite/batch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "statements",
                    "valueType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "V1SqliteBatchPostRequestBodySchemaStatementsItems"
                      }
                    }
                  },
                  {
                    "key": "mode",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1SqliteBatchPostRequestBodySchemaMode"
                      }
                    }
                  }
                ]
              }
            },
            "description": "A set of statements to be run in a single batch"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResultSet"
                }
              }
            },
            "statusCode": 200,
            "description": "Array of results from the statements executed"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/sqlite/batch",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "statements": [
                  "SELECT 1;"
                ],
                "mode": "read"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "statements": [
                    "SELECT 1;"
                  ],
                  "mode": "read"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "columns": [
                      "id"
                    ],
                    "columnTypes": [
                      "number"
                    ],
                    "rows": [
                      [
                        null
                      ]
                    ],
                    "rowsAffected": 0
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "columns": [
                      "id"
                    ],
                    "columnTypes": [
                      "number"
                    ],
                    "rows": [
                      [
                        null
                      ]
                    ],
                    "rowsAffected": 0
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "vals": {
      "subpackageId": "vals",
      "name": "vals",
      "endpoints": [
        {
          "auth": false,
          "description": "Run JavaScript or TypeScript without saving it permanently as a val",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "evalPost",
          "originalEndpointId": "vals.evalPost",
          "name": "Eval Post",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/eval"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "TypeScript source code",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "maxLength": 8192
                      }
                    }
                  },
                  {
                    "description": "Array of arguments passed to the given function. If this is present, the default export should be a function and will be called with these arguments, and the function result will be returned. If `args` is not present, no function calls are made, but you can still return a value using `export default myVariable`.",
                    "key": "args",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1EvalPostResponsesSchema"
                }
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/eval",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "code": "export default 1"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "code": "export default 1"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Run JavaScript or TypeScript without saving it permanently as a val",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "evalGet",
          "originalEndpointId": "vals.evalGet",
          "name": "Eval Get",
          "path": {
            "pathParameters": [
              {
                "description": "TypeScript source code",
                "key": "code",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 8192
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/eval/"
              },
              {
                "type": "pathParameter",
                "value": "code"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "key": "args",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1EvalCodeGetResponsesSchema"
                }
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/eval/",
              "pathParameters": {
                "code": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "availability": "Deprecated",
          "auth": false,
          "description": "Run a val, specify any parameters in a querystring",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "runGet",
          "originalEndpointId": "vals.runGet",
          "name": "Run Get",
          "path": {
            "pathParameters": [
              {
                "description": "Name of the val, in concatenated style, like username.valname",
                "key": "valname",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[^.]+.[^.]+$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/run/"
              },
              {
                "type": "pathParameter",
                "value": "valname"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "An argument that will be passed to the function as a JavaScript value",
              "key": "args",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/run/",
              "pathParameters": {
                "valname": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "availability": "Deprecated",
          "auth": false,
          "description": "Run a val, with arguments in the request body",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "runPost",
          "originalEndpointId": "vals.runPost",
          "name": "Run Post",
          "path": {
            "pathParameters": [
              {
                "description": "Name of the val, in concatenated style, like username.valname",
                "key": "valname",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[^.]+.[^.]+$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/run/"
              },
              {
                "type": "pathParameter",
                "value": "valname"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "args",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "description": "Arguments to call the method with"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/run/",
              "pathParameters": {
                "valname": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "args": [
                  1
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "args": [
                    1
                  ]
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a new val",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "create",
          "originalEndpointId": "vals.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Val source code as TypeScript",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256000
                      }
                    }
                  },
                  {
                    "description": "This val’s name",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 48
                        }
                      }
                    }
                  },
                  {
                    "description": "Readme contents, as Markdown",
                    "key": "readme",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 8192
                        }
                      }
                    }
                  },
                  {
                    "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "key": "privacy",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsPostRequestBodySchemaPrivacy"
                      }
                    }
                  },
                  {
                    "description": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "key": "type",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsPostRequestBodySchemaType"
                      }
                    }
                  }
                ]
              }
            },
            "description": "Val information provided to create a new val"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExtendedVal"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "code": "console.log(1);",
                "name": "myVal",
                "readme": "# My Val",
                "privacy": "public",
                "type": "script"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "readme": "# My Val",
                  "privacy": "public",
                  "type": "script"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Run an existing val or create a new one",
          "method": "PUT",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "put",
          "originalEndpointId": "vals.put",
          "name": "Put",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Val source code as TypeScript",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256000
                      }
                    }
                  },
                  {
                    "description": "This val’s name",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 48
                      }
                    }
                  }
                ]
              }
            },
            "description": "Create a new val, or version of a val, with new code"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "code": "console.log(1);",
                "name": "myVal"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "code": "console.log(1);",
                  "name": "myVal"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get a val by id",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "get",
          "originalEndpointId": "vals.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExtendedVal"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Update an existing val",
          "method": "PUT",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "update",
          "originalEndpointId": "vals.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "This val’s name",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 48
                        }
                      }
                    }
                  },
                  {
                    "description": "Readme contents, as Markdown",
                    "key": "readme",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 8192
                        }
                      }
                    }
                  },
                  {
                    "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "key": "privacy",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsValIdPutRequestBodySchemaPrivacy"
                      }
                    }
                  },
                  {
                    "description": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "key": "type",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsValIdPutRequestBodySchemaType"
                      }
                    }
                  }
                ]
              }
            },
            "description": "Note: you must supply at least one of the keys in this object in order to update a val"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "myVal",
                "readme": "# Updated readme"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "myVal",
                  "readme": "# Updated readme"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete a val",
          "method": "DELETE",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "delete",
          "originalEndpointId": "vals.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "List versions of a val",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "list",
          "originalEndpointId": "vals.list",
          "name": "List",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": "/versions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "vals_list_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A paginated result set"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo"
              },
              "queryParameters": {
                "offset": 0,
                "limit": 20
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "val_id": "foo",
                      "version": 42,
                      "createdAt": "foo"
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "val_id": "foo",
                      "version": 42,
                      "createdAt": "foo"
                    }
                  ],
                  "links": {
                    "self": "foo",
                    "prev": "foo",
                    "next": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a new version of a val",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "createVersion",
          "originalEndpointId": "vals.createVersion",
          "name": "Create Version",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": "/versions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Val source code as TypeScript",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256000
                      }
                    }
                  },
                  {
                    "description": "This val’s name",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 48
                        }
                      }
                    }
                  },
                  {
                    "description": "Readme contents, as Markdown",
                    "key": "readme",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 8192
                        }
                      }
                    }
                  },
                  {
                    "description": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "key": "privacy",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsValIdVersionsPostRequestBodySchemaPrivacy"
                      }
                    }
                  },
                  {
                    "description": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "key": "type",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1ValsValIdVersionsPostRequestBodySchemaType"
                      }
                    }
                  }
                ]
              }
            },
            "description": "Val information provided to create a new val"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExtendedVal"
              }
            },
            "statusCode": 201,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "code": "console.log(1);",
                "name": "myVal",
                "readme": "# My Val",
                "privacy": "public",
                "type": "script"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "readme": "# My Val",
                  "privacy": "public",
                  "type": "script"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get a specific version of a val",
          "method": "GET",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "getVersion",
          "originalEndpointId": "vals.getVersion",
          "name": "Get Version",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              {
                "description": "The val version",
                "key": "version",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": "/versions/"
              },
              {
                "type": "pathParameter",
                "value": "version"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of items to skip in order to deliver paginated results",
              "key": "offset",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            },
            {
              "description": "Maximum items to return in each paginated response",
              "key": "limit",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 20
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExtendedVal"
              }
            },
            "statusCode": 200,
            "description": "Default Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo",
                "version": 42
              },
              "queryParameters": {
                "offset": 0,
                "limit": 20
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "id": "foo",
                  "version": 42,
                  "code": "foo",
                  "public": true,
                  "createdAt": "foo",
                  "privacy": "public",
                  "type": "interval",
                  "url": "foo",
                  "links": {
                    "self": "foo",
                    "versions": "foo",
                    "module": "foo"
                  },
                  "author": {
                    "id": "foo",
                    "username": "foo"
                  },
                  "likeCount": 42,
                  "referenceCount": 42,
                  "readme": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete a specific version of a val",
          "method": "DELETE",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "deleteVersion",
          "originalEndpointId": "vals.deleteVersion",
          "name": "Delete Version",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              {
                "description": "The val version",
                "key": "version",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": "/versions/"
              },
              {
                "type": "pathParameter",
                "value": "version"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo",
                "version": 42
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Cancel a running val",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "cancel",
          "originalEndpointId": "vals.cancel",
          "name": "Cancel",
          "path": {
            "pathParameters": [
              {
                "description": "Id of a val",
                "key": "val_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              {
                "description": "The ID of the evaluation - the specific time that a val was run - that you want to cancel",
                "key": "evaluation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/vals/"
              },
              {
                "type": "pathParameter",
                "value": "val_id"
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "evaluation_id"
              },
              {
                "type": "literal",
                "value": "/cancel"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "vals_cancel_Response_200"
              }
            },
            "statusCode": 200,
            "description": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/vals/",
              "pathParameters": {
                "val_id": "foo",
                "evaluation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "found": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "found": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "emails": {
      "subpackageId": "emails",
      "name": "emails",
      "endpoints": [
        {
          "auth": true,
          "description": "Send emails",
          "method": "POST",
          "defaultEnvironment": "Production",
          "environments": [
            {
              "id": "Production",
              "baseUrl": "https://api.val.town"
            }
          ],
          "id": "send",
          "originalEndpointId": "emails.send",
          "name": "Send",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/email"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "The subject line of the email",
                    "key": "subject",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "from",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1EmailPostRequestBodySchemaFrom"
                      }
                    }
                  },
                  {
                    "description": "A single email or list of emails for one of the address fields",
                    "key": "to",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1EmailPostRequestBodySchemaTo"
                      }
                    }
                  },
                  {
                    "description": "A single email or list of emails for one of the address fields",
                    "key": "cc",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1EmailPostRequestBodySchemaCc"
                      }
                    }
                  },
                  {
                    "description": "A single email or list of emails for one of the address fields",
                    "key": "bcc",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1EmailPostRequestBodySchemaBcc"
                      }
                    }
                  },
                  {
                    "description": "Text content of the email, for email clients that may not support HTML",
                    "key": "text",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "HTML content of the email. Can be specified alongside text",
                    "key": "html",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of attachments to add to the email",
                    "key": "attachments",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "V1EmailPostRequestBodySchemaAttachmentsItems"
                        }
                      }
                    }
                  },
                  {
                    "description": "A reply-to list of email addresses",
                    "key": "replyToList",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "V1EmailPostRequestBodySchemaReplyToList"
                      }
                    }
                  }
                ]
              }
            },
            "description": "Fields for an email to be sent"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "emails_send_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successfully sent email"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/email",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "subject": "An important message",
                "text": "Hello world",
                "html": "Hello <strong>world</strong>"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "subject": "An important message",
                  "text": "Hello world",
                  "html": "Hello <strong>world</strong>"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "User",
      "ResultSet",
      "ExtendedVal",
      "BasicVal",
      "PaginationLinks"
    ],
    "subpackages": [
      "search",
      "alias",
      "me",
      "blobs",
      "users",
      "sqlite",
      "vals",
      "emails"
    ]
  },
  "auth": {
    "type": "bearerAuth",
    "tokenName": "token"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}