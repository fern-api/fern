{
  "types": {
    "Rawv3MetadataAttributesItems": {
      "name": "Rawv3MetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Rawv3Metadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "Rawv3Metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Rawv3MetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "rawv3": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "rawv3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Rawv3Metadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "IdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "IdTokenMetadata": {
      "name": "IdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "id": {
      "name": "id",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "IdV3TokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "IdV3TokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "IdV3TokenMetadata": {
      "name": "IdV3TokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IdV3TokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "idV3": {
      "name": "idV3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IdV3TokenMetadata"
              }
            }
          }
        ]
      }
    },
    "tokenUri": {
      "name": "tokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MetadataAttributesItems": {
      "name": "MetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MetadataMediaItems": {
      "name": "MetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "metadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "MetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "MetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedContractMediaItems": {
      "name": "OwnedContractMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedContractOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "OwnedContractOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ownedContract": {
      "description": "The object that represents a smart contract and has all data corresponding to that contract",
      "name": "ownedContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the contract, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The symbol of the contract, i.e. BAYC.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The NFT standard used by the contract, i.e. ERC721 or ERC1155.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "OwnedContractMediaItems"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedContractOpensea"
              }
            }
          }
        ]
      }
    },
    "OwnedContractv3OpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "OwnedContractv3OpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedContractv3DisplayNft": {
      "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
      "name": "OwnedContractv3DisplayNft",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedContractv3Image": {
      "description": "Details of the image corresponding to this contract",
      "name": "OwnedContractv3Image",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ownedContractv3": {
      "description": "The object that represents a smart contract and has all data corresponding to that contract",
      "name": "ownedContractv3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "description": "The name of the contract, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The symbol of the contract, i.e. BAYC.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedContractv3OpenseaMetadata"
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "`True` if the contract is detected as spam contract. `False` if it is not spam or has not been evaluated by our system yet",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
            "key": "displayNft",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedContractv3DisplayNft"
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedContractv3Image"
              }
            }
          }
        ]
      }
    },
    "OwnedCollectionv3FloorPrice": {
      "description": "Floor price data for the collection",
      "name": "OwnedCollectionv3FloorPrice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The marketplace the floor price is on",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price of the collection on the marketplace",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The currency of the floor price",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedCollectionv3ContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "OwnedCollectionv3ContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "OwnedCollectionv3Contract": {
      "description": "Contract-level data for a collection, such as contract type, name, and symbol.",
      "name": "OwnedCollectionv3Contract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionv3ContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedCollectionv3DisplayNft": {
      "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
      "name": "OwnedCollectionv3DisplayNft",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedCollectionv3Image": {
      "description": "Details of the image corresponding to this contract",
      "name": "OwnedCollectionv3Image",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ownedCollectionv3": {
      "description": "Metadata for an NFT collection held by an owner address. Includes general metadata about the collection, as well as information specific to the owner such as the total balance and the token ID of a random NFT for display purposes.",
      "name": "ownedCollectionv3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the collection, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The human-readable string used to identify the collection on OpenSea.",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price data for the collection",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionv3FloorPrice"
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Contract-level data for a collection, such as contract type, name, and symbol.",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionv3Contract"
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
            "key": "displayNft",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionv3DisplayNft"
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionv3Image"
              }
            }
          }
        ]
      }
    },
    "OwnedCollectionContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "OwnedCollectionContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "ownedCollectionContract": {
      "description": "Contract-level data for a collection, such as contract type, name, and symbol.",
      "name": "ownedCollectionContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedCollectionContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "MediaItems": {
      "name": "MediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "media": {
      "name": "media",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "MediaItems"
          }
        }
      }
    },
    "OwnedNftContract": {
      "description": "Object - Contract for returned NFT",
      "name": "OwnedNftContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Address of NFT contract.",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "OwnedNftIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "OwnedNftIdTokenMetadata": {
      "name": "OwnedNftIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "OwnedNftId": {
      "name": "OwnedNftId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "OwnedNftTokenUri": {
      "name": "OwnedNftTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftMedia": {
      "name": "OwnedNftMedia",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftMetadataAttributesItems": {
      "name": "OwnedNftMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftMetadataMediaItems": {
      "name": "OwnedNftMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "OwnedNftMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "OwnedNftMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "OwnedNftMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "OwnedNftContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "OwnedNftContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "OwnedNftContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftContractMetadata": {
      "name": "OwnedNftContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "OwnedNftSpamInfo": {
      "description": "Information about whether and why a contract was marked as spam.",
      "name": "OwnedNftSpamInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNftAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "OwnedNftAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ownedNFT": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "ownedNFT",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Object - Contract for returned NFT",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftContract"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftId"
              }
            }
          },
          {
            "description": "String - Token balance",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftTokenUri"
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftMedia"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftContractMetadata"
              }
            }
          },
          {
            "description": "Information about whether and why a contract was marked as spam.",
            "key": "spamInfo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftSpamInfo"
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNftAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3ContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "OwnedNfTv3ContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "OwnedNfTv3ContractOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "OwnedNfTv3ContractOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3Contract": {
      "description": "The contract object that has details of a contract",
      "name": "OwnedNfTv3Contract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3ContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3ContractOpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3Image": {
      "description": "Details of the image corresponding to this contract",
      "name": "OwnedNfTv3Image",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3RawMetadataAttributesItems": {
      "name": "OwnedNfTv3RawMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3RawMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "OwnedNfTv3RawMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "OwnedNfTv3RawMetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3Raw": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "OwnedNfTv3Raw",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3RawMetadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3Collection": {
      "description": "The collection object that has details of a collection",
      "name": "OwnedNfTv3Collection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Collection name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - OpenSea collection slug",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - URL for the external site of the collection",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Banner image URL for the collection",
            "key": "bannerImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OwnedNfTv3AcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "OwnedNfTv3AcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ownedNFTv3": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "ownedNFTv3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The contract object that has details of a contract",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3Contract"
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3Image"
              }
            }
          },
          {
            "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3Raw"
              }
            }
          },
          {
            "description": "The collection object that has details of a collection",
            "key": "collection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3Collection"
              }
            }
          },
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OwnedNfTv3AcquiredAt"
              }
            }
          }
        ]
      }
    },
    "ContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "ContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "ContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "ContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "contractMetadata": {
      "name": "contractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "ContractMetadatav3TokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "ContractMetadatav3TokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "ContractMetadatav3OpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "ContractMetadatav3OpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "contractMetadatav3": {
      "name": "contractMetadatav3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Contract address for the queried NFT collection",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContractMetadatav3TokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContractMetadatav3OpenseaMetadata"
              }
            }
          }
        ]
      }
    },
    "CollectionMetadatav3FloorPrice": {
      "description": "Floor price data for the collection",
      "name": "CollectionMetadatav3FloorPrice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The marketplace the floor price is on",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price of the collection on the marketplace",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The currency of the floor price",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "collectionMetadatav3": {
      "name": "collectionMetadatav3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Name of the queried NFT Collection",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The human-readable string used to identify the collection on OpenSea.",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price data for the collection",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CollectionMetadatav3FloorPrice"
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Contractv3TokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "Contractv3TokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "Contractv3OpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "Contractv3OpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "contractv3": {
      "description": "The contract object that has details of a contract",
      "name": "contractv3",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Contractv3TokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Contractv3OpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetParametersSchema": {
      "name": "V3ApiKeyGetNfTsForOwnerGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VERY_HIGH"
          },
          {
            "value": "HIGH"
          },
          {
            "value": "MEDIUM"
          },
          {
            "value": "LOW"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetParametersSchemaItems": {
      "name": "V3ApiKeyGetNfTsForOwnerGetParametersSchemaItems",
      "shape": {
        "type": "enum",
        "default": "SPAM",
        "values": [
          {
            "value": "SPAM"
          },
          {
            "value": "AIRDROPS"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContract": {
      "description": "The contract object that has details of a contract",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContractOpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadataAttributesItems": {
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRaw": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRaw",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRawMetadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsCollection": {
      "description": "The collection object that has details of a collection",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsCollection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Collection name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - OpenSea collection slug",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - URL for the external site of the collection",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Banner image URL for the collection",
            "key": "bannerImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItems": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The contract object that has details of a contract",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsContract"
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsImage"
              }
            }
          },
          {
            "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsRaw"
              }
            }
          },
          {
            "description": "The collection object that has details of a collection",
            "key": "collection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsCollection"
              }
            }
          },
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItemsAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaValidAt": {
      "description": "Block Information of the block as of which the corresponding data is valid",
      "name": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaValidAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The block number above information is valid as of",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The block hash above information is valid as of",
            "key": "blockHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The block timestamp above information is valid as of",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_getNFTsForOwner-v3_Response_200": {
      "name": "NFT Ownership Endpoints_getNFTsForOwner-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Array of the NFT objects corresponding to the NFTs owned by the owner",
            "key": "ownedNfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaOwnedNftsItems"
                }
              }
            }
          },
          {
            "description": "Integer - Total number of NFTs (distinct `tokenIds`) owned by the given address.",
            "key": "totalCount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block Information of the block as of which the corresponding data is valid",
            "key": "validAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForOwnerGetResponsesSchemaValidAt"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContract": {
      "description": "The contract object that has details of a contract",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContractOpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadataAttributesItems": {
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRaw": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRaw",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRawMetadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsCollection": {
      "description": "The collection object that has details of a collection",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsCollection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Collection name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - OpenSea collection slug",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - URL for the external site of the collection",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Banner image URL for the collection",
            "key": "bannerImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItems": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The contract object that has details of a contract",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsContract"
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsImage"
              }
            }
          },
          {
            "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsRaw"
              }
            }
          },
          {
            "description": "The collection object that has details of a collection",
            "key": "collection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsCollection"
              }
            }
          },
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItemsAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_getNFTsForContract-v3_Response_200": {
      "name": "NFT Metadata Endpoints_getNFTsForContract-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of objects that represent NFTs stored under the queried contract address.",
            "key": "nfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForContractGetResponsesSchemaNftsItems"
                }
              }
            }
          },
          {
            "description": "String - An offset used for pagination. Can be passed back as the \"startToken\" of a subsequent request to get the next page of results. Absent if there are no more results.",
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems": {
      "name": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId"
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata"
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_getNFTsForCollection-v3_Response_200": {
      "name": "NFT Metadata Endpoints_getNFTsForCollection-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of objects that represent NFTs stored under the queried contract address or collection slug.",
            "key": "nfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems"
                }
              }
            }
          },
          {
            "description": "String - An offset used for pagination. Can be passed back as the \"startToken\" of a subsequent request to get the next page of results. Absent if there are no more results.",
            "key": "nextToken",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaContractOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaContractOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaContract": {
      "description": "The contract object that has details of a contract",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaContractOpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadataAttributesItems": {
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaRaw": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaRaw",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaRawMetadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaCollection": {
      "description": "The collection object that has details of a collection",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaCollection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Collection name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - OpenSea collection slug",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - URL for the external site of the collection",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Banner image URL for the collection",
            "key": "bannerImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V3ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_getNFTMetadata-v3_Response_200": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "NFT Metadata Endpoints_getNFTMetadata-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The contract object that has details of a contract",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaContract"
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaImage"
              }
            }
          },
          {
            "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaRaw"
              }
            }
          },
          {
            "description": "The collection object that has details of a collection",
            "key": "collection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaCollection"
              }
            }
          },
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems": {
      "name": "V3ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract": {
      "description": "The contract object that has details of a contract",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractOpenseaMetadata"
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadataAttributesItems": {
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadataAttributesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRaw": {
      "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRaw",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRawMetadata"
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsCollection": {
      "description": "The collection object that has details of a collection",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsCollection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Collection name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - OpenSea collection slug",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - URL for the external site of the collection",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Banner image URL for the collection",
            "key": "bannerImageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItems": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The contract object that has details of a contract",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract"
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsImage"
              }
            }
          },
          {
            "description": "Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsRaw"
              }
            }
          },
          {
            "description": "The collection object that has details of a collection",
            "key": "collection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsCollection"
              }
            }
          },
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractMetadataGetResponsesSchemaTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetContractMetadataGetResponsesSchemaTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetContractMetadataGetResponsesSchemaOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetContractMetadataGetResponsesSchemaOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_getContractMetadata-v3_Response_200": {
      "name": "NFT Metadata Endpoints_getContractMetadata-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Contract address for the queried NFT collection",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractMetadataGetResponsesSchemaTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractMetadataGetResponsesSchemaOpenseaMetadata"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionMetadataGetResponsesSchemaFloorPrice": {
      "description": "Floor price data for the collection",
      "name": "V3ApiKeyGetCollectionMetadataGetResponsesSchemaFloorPrice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The marketplace the floor price is on",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price of the collection on the marketplace",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The currency of the floor price",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_getCollectionMetadata-v3_Response_200": {
      "name": "NFT Metadata Endpoints_getCollectionMetadata-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Name of the queried NFT Collection",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The human-readable string used to identify the collection on OpenSea.",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price data for the collection",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionMetadataGetResponsesSchemaFloorPrice"
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_invalidateContract-v3_Response_200": {
      "description": "<br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.",
      "name": "NFT Metadata Endpoints_invalidateContract-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "<br /> True if the contract was invalidated. <br/> False - if it wasn't.",
            "key": "success",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The number of tokens that were invalidated as a result of running this query.",
            "key": "numTokensInvalidated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItems": {
      "name": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Contract address for the queried NFT collection",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsOpenseaMetadata"
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_getOwnersForNFT-v3_Response_200": {
      "name": "NFT Ownership Endpoints_getOwnersForNFT-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of all addresses that own the given NFT.",
            "key": "owners",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItemsTokenBalancesItems": {
      "name": "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItemsTokenBalancesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "tokenId of the NFT in the collection that an owner has",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the number of the specified token in the collection that the user owns",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItems": {
      "name": "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ownerAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "description": "a list of the token ids and balances for the owner of the collection",
            "key": "tokenBalances",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItemsTokenBalancesItems"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_getOwnersForContract-v3_Response_200": {
      "name": "NFT Ownership Endpoints_getOwnersForContract-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of all addresses that own one of the NFTs from the queried contract address. The format is applicable when `withTokenBalances=true`.",
            "key": "owners",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetOwnersForContractGetResponsesSchemaOwnersItems"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Spam Endpoints_getSpamContracts-v3_Response_200": {
      "description": "Object that contains a list of contract addresses.",
      "name": "NFT Spam Endpoints_getSpamContracts-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A list of contract addresses earmarked as spam by Alchemy.",
            "key": "contractAddresses",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "NFT Spam Endpoints_isSpamContract-v3_Response_200": {
      "description": "This object contains a boolean value indicating the spam status of the contract.",
      "name": "NFT Spam Endpoints_isSpamContract-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "<br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.",
            "key": "isSpamContract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Spam Endpoints_isAirdropNFT-v3_Response_200": {
      "description": "This object contains a boolean value indicating whether the token is an airdrop.",
      "name": "NFT Spam Endpoints_isAirdropNFT-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "<br/> True - if the queried token is marked as an airdrop. <br/> False - if the queried token is not marked as an airdrop.",
            "key": "isAirdrop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeySummarizeNftAttributesGetResponsesSchemaSummary": {
      "description": "Object mapping trait types to the prevalence of each trait within that type.",
      "name": "V3ApiKeySummarizeNftAttributesGetResponsesSchemaSummary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "NFT Metadata Endpoints_summarizeNFTAttributes-v3_Response_200": {
      "description": "Prevalence counts for each attribute within a collection.",
      "name": "NFT Metadata Endpoints_summarizeNFTAttributes-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object mapping trait types to the prevalence of each trait within that type.",
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeySummarizeNftAttributesGetResponsesSchemaSummary"
              }
            }
          },
          {
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceNamePriceCurrency": {
      "description": "String - The currency in which the floor price is denominated. Typically, denominated in ETH",
      "name": "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceNamePriceCurrency",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ETH"
          }
        ]
      }
    },
    "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceName": {
      "description": "Name of the NFT marketplace where the collection is listed (in camel case). Current marketplaces supported - `openSea`, `looksRare`. So instead of the word `nftMarketplaceName` you will see marketplace names like `openSea` here.",
      "name": "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceName",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number - The floor price of the collection on the given marketplace.",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "String - The currency in which the floor price is denominated. Typically, denominated in ETH",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceNamePriceCurrency"
              }
            }
          },
          {
            "description": "String - Link to the collection on the given marketplace.",
            "key": "collectionUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - UTC timestamp of when the floor price was retrieved from the marketplace.",
            "key": "retrievedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Returns the error `unable to fetch floor price` if there was an error fetching floor prices from the given marketplace.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Sales Endpoints_getFloorPrice-v3_Response_200": {
      "name": "NFT Sales Endpoints_getFloorPrice-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the NFT marketplace where the collection is listed (in camel case). Current marketplaces supported - `openSea`, `looksRare`. So instead of the word `nftMarketplaceName` you will see marketplace names like `openSea` here.",
            "key": "nftMarketplaceName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplaceName"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeySearchContractMetadataGetResponsesSchemaItems": {
      "name": "V3ApiKeySearchContractMetadataGetResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Contract address for the queried NFT collection",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeySearchContractMetadataGetResponsesSchemaItemsOpenseaMetadata"
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_isHolderOfContract-v3_Response_200": {
      "description": "Data related to a wallet's ownership of any token in an NFT contract.",
      "name": "NFT Ownership Endpoints_isHolderOfContract-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether the given wallet owns any token in the given NFT contract.",
            "key": "isHolderOfContract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyComputeRarityGetResponsesSchemaRaritiesItems": {
      "name": "V3ApiKeyComputeRarityGetResponsesSchemaRaritiesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the trait category, i.e., Hat, Color, Face, etc.",
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Value for the trait, i.e., White Cap, Blue, Angry, etc.",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floating point value from 0 to 1 representing the prevalence of this value for this trait type.",
            "key": "prevalence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_computeRarity-v3_Response_200": {
      "description": "Object containing the rarity info of the collection.",
      "name": "NFT Metadata Endpoints_computeRarity-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT attributes and their associated prevalence.",
            "key": "rarities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyComputeRarityGetResponsesSchemaRaritiesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetParametersSchema": {
      "name": "V3ApiKeyGetNftSalesGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUYER"
          },
          {
            "value": "SELLER"
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker": {
      "description": "String - Whether the price taker in the trade was the buyer or the seller.",
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUYER"
          },
          {
            "value": "SELLER"
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee": {
      "description": "The payment from buyer to the seller.",
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment from the buyer to seller as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The smart contract address of the token used for the payment.",
            "key": "tokenAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee": {
      "description": "The payment from buyer to the NFT marketplace protocol.",
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment to the marketplace as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The smart contract address of the token used for the payment.",
            "key": "tokenAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee": {
      "description": "The payment from buyer to the royalty address of the NFT collection.",
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment to the royalty collector as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The smart contract address of the token used for the payment.",
            "key": "tokenAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems": {
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The marketplace the sale took place on.",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The address of the marketplace contract.",
            "key": "marketplaceAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The contract address of the collection the NFT belongs to.",
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The decimal token ID of the NFT being sold.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of tokens sold in the sale as a decimal integer string.",
            "key": "quantity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The address of the buyer in the NFT sale.",
            "key": "buyerAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The address of the seller in the NFT sale.",
            "key": "sellerAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Whether the price taker in the trade was the buyer or the seller.",
            "key": "taker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker"
              }
            }
          },
          {
            "description": "The payment from buyer to the seller.",
            "key": "sellerFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee"
              }
            }
          },
          {
            "description": "The payment from buyer to the NFT marketplace protocol.",
            "key": "protocolFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee"
              }
            }
          },
          {
            "description": "The payment from buyer to the royalty address of the NFT collection.",
            "key": "royaltyFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee"
              }
            }
          },
          {
            "description": "Integer - The block number the NFT sale took place in.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Integer - The log number of the sale event emitted within the block.",
            "key": "logIndex",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Integer - The index of the token within the bundle of NFTs sold in the sale.",
            "key": "bundleIndex",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "String - The transaction hash of the transaction containing the sale.",
            "key": "transactionHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetNftSalesGetResponsesSchemaValidAt": {
      "description": "Block Information of the block as of which the corresponding data is valid",
      "name": "V3ApiKeyGetNftSalesGetResponsesSchemaValidAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The block number above information is valid as of",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The block hash above information is valid as of",
            "key": "blockHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The block timestamp above information is valid as of",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Sales Endpoints_getNFTSales-v3_Response_200": {
      "name": "NFT Sales Endpoints_getNFTSales-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of NFT sales that match the query.",
            "key": "nftSales",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems"
                }
              }
            }
          },
          {
            "description": "String - The page key to use to fetch the next page of results. Returns null if there are no more results.",
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block Information of the block as of which the corresponding data is valid",
            "key": "validAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetNftSalesGetResponsesSchemaValidAt"
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetParametersSchemaItems": {
      "name": "V3ApiKeyGetContractsForOwnerGetParametersSchemaItems",
      "shape": {
        "type": "enum",
        "default": "SPAM",
        "values": [
          {
            "value": "SPAM"
          },
          {
            "value": "AIRDROPS"
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetParametersSchema": {
      "name": "V3ApiKeyGetContractsForOwnerGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VERY_HIGH"
          },
          {
            "value": "HIGH"
          },
          {
            "value": "MEDIUM"
          },
          {
            "value": "LOW"
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpenseaMetadata": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpenseaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsDisplayNft": {
      "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
      "name": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsDisplayNft",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems": {
      "description": "The object that represents a smart contract and has all data corresponding to that contract",
      "name": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "description": "The name of the contract, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The symbol of the contract, i.e. BAYC.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "openseaMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpenseaMetadata"
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "`True` if the contract is detected as spam contract. `False` if it is not spam or has not been evaluated by our system yet",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
            "key": "displayNft",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsDisplayNft"
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsImage"
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_getContractsForOwner-v3_Response_200": {
      "name": "NFT Ownership Endpoints_getContractsForOwner-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contracts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems"
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFT contracts held by the given address returned in this page.",
            "key": "totalCount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetParametersSchemaItems": {
      "name": "V3ApiKeyGetCollectionsForOwnerGetParametersSchemaItems",
      "shape": {
        "type": "enum",
        "default": "SPAM",
        "values": [
          {
            "value": "SPAM"
          },
          {
            "value": "AIRDROPS"
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsFloorPrice": {
      "description": "Floor price data for the collection",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsFloorPrice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The marketplace the floor price is on",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price of the collection on the marketplace",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The currency of the floor price",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContractTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContractTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContract": {
      "description": "Contract-level data for a collection, such as contract type, name, and symbol.",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContractTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsDisplayNft": {
      "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsDisplayNft",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsImage": {
      "description": "Details of the image corresponding to this contract",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsImage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "cachedUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the thumbnail version of the NFT",
            "key": "thumbnailUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url that has the NFT image in png",
            "key": "pngUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Url of the image stored in Alchemy cache",
            "key": "contentType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The original Url of the image coming straight from the smart contract",
            "key": "originalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItems": {
      "description": "Metadata for an NFT collection held by an owner address. Includes general metadata about the collection, as well as information specific to the owner such as the total balance and the token ID of a random NFT for display purposes.",
      "name": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the collection, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The human-readable string used to identify the collection on OpenSea.",
            "key": "slug",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floor price data for the collection",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsFloorPrice"
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Contract-level data for a collection, such as contract type, name, and symbol.",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsContract"
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.",
            "key": "displayNft",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsDisplayNft"
              }
            }
          },
          {
            "description": "Details of the image corresponding to this contract",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItemsImage"
              }
            }
          }
        ]
      }
    },
    "NFT Ownership Endpoints_getCollectionsForOwner-v3_Response_200": {
      "name": "NFT Ownership Endpoints_getCollectionsForOwner-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "collections",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetCollectionsForOwnerGetResponsesSchemaCollectionsItems"
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFT collections held by the given address.",
            "key": "totalCount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT Metadata Endpoints_refreshNftMetadata-v3_Response_200": {
      "name": "NFT Metadata Endpoints_refreshNftMetadata-v3_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "If the token is successfully queued for ingestion the value will be \"Queued\".",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Estimated time until the metadata refresh is complete for this token.",
            "key": "estimatedMsToRefresh",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetParametersSchema": {
      "name": "V2ApiKeyGetNfTsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VERY_HIGH"
          },
          {
            "value": "HIGH"
          },
          {
            "value": "MEDIUM"
          },
          {
            "value": "LOW"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetParametersSchemaItems": {
      "name": "V2ApiKeyGetNfTsGetParametersSchemaItems",
      "shape": {
        "type": "enum",
        "default": "SPAM",
        "values": [
          {
            "value": "SPAM"
          },
          {
            "value": "AIRDROPS"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContract": {
      "description": "Object - Contract for returned NFT",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Address of NFT contract.",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadata": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsId": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsTokenUri": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMedia": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMedia",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataAttributesItems": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataMediaItems": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadata": {
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsSpamInfo": {
      "description": "Information about whether and why a contract was marked as spam.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsSpamInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItems": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Object - Contract for returned NFT",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContract"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsId"
              }
            }
          },
          {
            "description": "String - Token balance",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsTokenUri"
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMedia"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsContractMetadata"
              }
            }
          },
          {
            "description": "Information about whether and why a contract was marked as spam.",
            "key": "spamInfo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsSpamInfo"
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItemsAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getNFTs_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getNFTs_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ownedNfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsGetResponsesSchemaOwnedNftsItems"
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - Total number of NFTs (distinct `tokenIds`) owned by the given address.",
            "key": "totalCount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "String - The canonical head block hash of when your request was received i.e. the block corresponding to `latest`",
            "key": "blockHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaContract": {
      "description": "Object - Contract for returned NFT",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Address of NFT contract.",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadata": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaId": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaTokenUri": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaMedia": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaMedia",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataAttributesItems": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataMediaItems": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadata": {
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaSpamInfo": {
      "description": "Information about whether and why a contract was marked as spam.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaSpamInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V2ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getNFTMetadata_Response_200": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "NFT API V2 Methods (Older Version)_getNFTMetadata_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Object - Contract for returned NFT",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaContract"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaId"
              }
            }
          },
          {
            "description": "String - Token balance",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaTokenUri"
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaMedia"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaContractMetadata"
              }
            }
          },
          {
            "description": "Information about whether and why a contract was marked as spam.",
            "key": "spamInfo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaSpamInfo"
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataGetResponsesSchemaAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems": {
      "name": "V2ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract": {
      "description": "Object - Contract for returned NFT",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Address of NFT contract.",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadata": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsId": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsTokenUri": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMedia": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMedia",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataAttributesItems": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataMediaItems": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadata": {
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsSpamInfo": {
      "description": "Information about whether and why a contract was marked as spam.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsSpamInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "\"true\" if contract is spam, else \"false\". **Only available on paid tiers.**",
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of reasons why a contract was classified as spam. **Only available on paid tiers.**",
            "key": "spamClassifications",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt": {
      "description": "Only present if the request specified `orderBy=transferTime`.",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block timestamp of the block where the NFT was most recently acquired.",
            "key": "blockTimestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Block number of the block where the NFT was most recently acquired.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItems": {
      "description": "The object that represents an NFT and has all data corresponding to that NFT",
      "name": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Object - Contract for returned NFT",
            "key": "contract",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContract"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsId"
              }
            }
          },
          {
            "description": "String - Token balance",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Brief human-readable description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsTokenUri"
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMedia"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsContractMetadata"
              }
            }
          },
          {
            "description": "Information about whether and why a contract was marked as spam.",
            "key": "spamInfo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsSpamInfo"
              }
            }
          },
          {
            "description": "Only present if the request specified `orderBy=transferTime`.",
            "key": "acquiredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItemsAcquiredAt"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadata": {
      "name": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getContractMetadata_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getContractMetadata_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Contract address for the queried NFT collection",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractMetadataGetResponsesSchemaContractMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataMediaItems": {
      "name": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadata": {
      "description": "The object that represents a smart contract and has all data corresponding to that contract",
      "name": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the contract, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The symbol of the contract, i.e. BAYC.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The NFT standard used by the contract, i.e. ERC721 or ERC1155.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataMediaItems"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItems": {
      "name": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "description": "The object that represents a smart contract and has all data corresponding to that contract",
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItemsContractMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadataTokenType"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          },
          {
            "key": "tokenMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsIdTokenMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata": {
      "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.",
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The image URL that appears alongside the asset image on NFT platforms.",
            "key": "external_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.",
            "key": "background_color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Name of the NFT asset.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object - Traits/attributes/characteristics for each NFT asset.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataAttributesItems"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadataMediaItems"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems": {
      "name": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsId"
              }
            }
          },
          {
            "key": "tokenUri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsTokenUri"
              }
            }
          },
          {
            "description": "Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsMetadata"
              }
            }
          },
          {
            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field.",
            "key": "timeLastUpdated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItemsContractMetadata"
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getNFTsForCollection_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getNFTsForCollection_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of objects that represent NFTs stored under the queried contract address or collection slug.",
            "key": "nfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsForCollectionGetResponsesSchemaNftsItems"
                }
              }
            }
          },
          {
            "description": "String - An offset used for pagination. Can be passed back as the \"startToken\" of a subsequent request to get the next page of results. Absent if there are no more results.",
            "key": "nextToken",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getOwnersForToken_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getOwnersForToken_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of all addresses that own the given NFT.",
            "key": "owners",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getSpamContracts_Response_200": {
      "description": "Object that has list of contract addresses",
      "name": "NFT API V2 Methods (Older Version)_getSpamContracts_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A list of contract addresses earmarked as spam by Alchemy.",
            "key": "contractAddresses",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_invalidateContract_Response_200": {
      "description": "<br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.",
      "name": "NFT API V2 Methods (Older Version)_invalidateContract_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "<br /> True if the contract was invalidated. <br/> False - if it wasn't.",
            "key": "success",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The number of tokens that were invalidated as a result of running this query.",
            "key": "numTokensInvalidated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplacePriceCurrency": {
      "description": "String - The currency in which the floor price is denominated. Typically, denominated in ETH",
      "name": "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplacePriceCurrency",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ETH"
          }
        ]
      }
    },
    "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplace": {
      "description": "Name of the NFT marketplace where the collection is listed. Current marketplaces supported -  OpenSea, LooksRare",
      "name": "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplace",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number - The floor price of the collection on the given marketplace.",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "String - The currency in which the floor price is denominated. Typically, denominated in ETH",
            "key": "priceCurrency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplacePriceCurrency"
              }
            }
          },
          {
            "description": "String - Link to the collection on the given marketplace.",
            "key": "collectionUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - UTC timestamp of when the floor price was retrieved from the marketplace.",
            "key": "retrievedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Returns an error if there was an error fetching floor prices from the given marketplace.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getFloorPrice_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getFloorPrice_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the NFT marketplace where the collection is listed. Current marketplaces supported -  OpenSea, LooksRare",
            "key": "nftMarketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetFloorPriceGetResponsesSchemaNftMarketplace"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyComputeRarityGetResponsesSchemaRaritiesItems": {
      "name": "V2ApiKeyComputeRarityGetResponsesSchemaRaritiesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the trait category, i.e. Hat, Color, Face, etc.",
            "key": "trait_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Value for the trait, i.e. White Cap, Blue, Angry, etc.",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Floating point value from 0 to 1 representing the prevalence of this value for this trait type.",
            "key": "prevalence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_computeRarity_Response_200": {
      "description": "Object containing the rarity info of the collection",
      "name": "NFT API V2 Methods (Older Version)_computeRarity_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT attributes and their associated prevalence.",
            "key": "rarities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyComputeRarityGetResponsesSchemaRaritiesItems"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataTokenType": {
      "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
      "name": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERC721"
          },
          {
            "value": "ERC1155"
          },
          {
            "value": "NO_SUPPORTED_NFT_STANDARD"
          },
          {
            "value": "NOT_A_CONTRACT"
          }
        ]
      }
    },
    "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadata": {
      "name": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - NFT contract name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - NFT contract symbol abbreviation.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataTokenType"
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadataOpensea"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeySearchContractMetadataGetResponsesSchemaItems": {
      "name": "V2ApiKeySearchContractMetadataGetResponsesSchemaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          },
          {
            "key": "contractMetadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeySearchContractMetadataGetResponsesSchemaItemsContractMetadata"
              }
            }
          }
        ]
      }
    },
    "V2ApiKeySummarizeNftAttributesGetResponsesSchemaSummary": {
      "description": "Object mapping trait types to the prevalence of each trait within that type.",
      "name": "V2ApiKeySummarizeNftAttributesGetResponsesSchemaSummary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "NFT API V2 Methods (Older Version)_summarizeNFTAttributes_Response_200": {
      "description": "Prevalence counts for each attribute within a collection.",
      "name": "NFT API V2 Methods (Older Version)_summarizeNFTAttributes_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Total number of NFTs in a given NFT collection.",
            "key": "totalSupply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Object mapping trait types to the prevalence of each trait within that type.",
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeySummarizeNftAttributesGetResponsesSchemaSummary"
              }
            }
          },
          {
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_isHolderOfCollection_Response_200": {
      "description": "Data related to a wallet's ownership of any token in an NFT collection.",
      "name": "NFT API V2 Methods (Older Version)_isHolderOfCollection_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether the given wallet owns any token in the given NFT collection.",
            "key": "isHolderOfCollection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetParametersSchema": {
      "name": "V2ApiKeyGetNftSalesGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUYER"
          },
          {
            "value": "SELLER"
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker": {
      "description": "String - Whether the price taker in the trade was the buyer or the seller.",
      "name": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUYER"
          },
          {
            "value": "SELLER"
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee": {
      "description": "The payment from buyer to the seller",
      "name": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment from the buyer to seller as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee": {
      "description": "The payment from buyer to the NFT marketplace protocol",
      "name": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment to the marketplace as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee": {
      "description": "The payment from buyer to the royalty address of the NFT collection",
      "name": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The amount of the payment to the royalty collector as a decimal integer string.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The symbol of the token used for the payment.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of decimals of the token used for the payment.",
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems": {
      "name": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - The marketplace the sale took place on.",
            "key": "marketplace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The contract address of the collection the NFT belongs to.",
            "key": "contractAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The decimal token ID of the NFT being sold.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Integer - The number of tokens sold in the sale as a decimal integer string.",
            "key": "quantity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The address of the buyer in the NFT sale.",
            "key": "buyerAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - The address of the seller in the NFT sale.",
            "key": "sellerAddress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Whether the price taker in the trade was the buyer or the seller.",
            "key": "taker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsTaker"
              }
            }
          },
          {
            "description": "The payment from buyer to the seller",
            "key": "sellerFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsSellerFee"
              }
            }
          },
          {
            "description": "The payment from buyer to the NFT marketplace protocol",
            "key": "protocolFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsProtocolFee"
              }
            }
          },
          {
            "description": "The payment from buyer to the royalty address of the NFT collection",
            "key": "royaltyFee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItemsRoyaltyFee"
              }
            }
          },
          {
            "description": "Integer - The block number the NFT sale took place in.",
            "key": "blockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Integer - The log number of the sale event emitted within the block.",
            "key": "logIndex",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Integer - The index of the token within the bundle of NFTs sold in the sale.",
            "key": "bundleIndex",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "String - The transaction hash of the transaction containing the sale.",
            "key": "transactionHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getNFTSales_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getNFTSales_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of NFT sales that match the query",
            "key": "nftSales",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftSalesGetResponsesSchemaNftSalesItems"
                }
              }
            }
          },
          {
            "description": "String - The page key to use to fetch the next page of results. Returns null if there are no more results.",
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractsForOwnerGetParametersSchemaItems": {
      "name": "V2ApiKeyGetContractsForOwnerGetParametersSchemaItems",
      "shape": {
        "type": "enum",
        "default": "SPAM",
        "values": [
          {
            "value": "SPAM"
          },
          {
            "value": "AIRDROPS"
          }
        ]
      }
    },
    "V2ApiKeyGetContractsForOwnerGetParametersSchema": {
      "name": "V2ApiKeyGetContractsForOwnerGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VERY_HIGH"
          },
          {
            "value": "HIGH"
          },
          {
            "value": "MEDIUM"
          },
          {
            "value": "LOW"
          }
        ]
      }
    },
    "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsMediaItems": {
      "name": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsMediaItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Public gateway uri for the raw uri above.",
            "key": "gateway",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL for a resized thumbnail of the NFT media asset.",
            "key": "thumbnail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The size of the media asset in bytes.",
            "key": "bytes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpensea": {
      "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
      "name": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpensea",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "NFT floor price",
            "key": "floorPrice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "OpenSea collection name",
            "key": "collectionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model",
            "key": "safelistRequestStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea CDN image URL",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OpenSea collection description",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Collection homepage",
            "key": "externalUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The twitter username of the collection",
            "key": "twitterUsername",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The discord URL of the collection",
            "key": "discordUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp when the collection was last ingested by us",
            "key": "lastIngestedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems": {
      "description": "The object that represents a smart contract and has all data corresponding to that contract",
      "name": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Address of the held contract",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.",
            "key": "totalBalance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.",
            "key": "numDistinctTokensOwned",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "isSpam",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "One of the tokens from this contract held by the owner.",
            "key": "tokenId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the contract, i.e. \"Bored Ape Yacht Club\".",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The title of the token held by the owner i.e. \"Something #22\".",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The symbol of the contract, i.e. BAYC.",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The NFT standard used by the contract, i.e. ERC721 or ERC1155.",
            "key": "tokenType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Address that deployed the smart contract",
            "key": "contractDeployer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number - The Block Number when the deployment transaction is successfully mined",
            "key": "deployedBlockNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "media",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsMediaItems"
                }
              }
            }
          },
          {
            "description": "Note that the OpenSea metadata object is currently only available on ETH and Polygon Mainnet. Please reach out to us at support@alchemy.com if you would like to access this data on other networks.",
            "key": "opensea",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItemsOpensea"
              }
            }
          }
        ]
      }
    },
    "NFT API V2 Methods (Older Version)_getContractsForOwner_Response_200": {
      "name": "NFT API V2 Methods (Older Version)_getContractsForOwner_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contracts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractsForOwnerGetResponsesSchemaContractsItems"
                }
              }
            }
          },
          {
            "key": "pageKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String - Total number of NFT contracts held by the given address returned in this page.",
            "key": "totalCount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "NFT Ownership Endpoints": {
      "subpackageId": "NFT Ownership Endpoints",
      "name": "NFT Ownership Endpoints",
      "endpoints": [
        {
          "auth": false,
          "description": "getNFTsForOwner - Retrieves all NFTs currently owned by a specified address. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTsForOwner-v3",
          "originalEndpointId": "NFT Ownership Endpoints.getNFTsForOwner-v3",
          "name": "NFTs By Owner",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTsForOwner"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "Array of contract addresses to filter the responses with. Max limit 45 contracts.",
              "key": "contractAddresses[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "Enum - ordering scheme to use for ordering NFTs in the response. If unspecified, NFTs will be ordered by contract address and token ID.\n  - transferTime: NFTs will be ordered by the time they were transferred into the wallet, with newest NFTs first. NOTE: this ordering is only supported on Ethereum Mainnet and Polygon Mainnet.",
              "key": "orderBy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForOwnerGetParametersSchema"
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "excludeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetNfTsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "includeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetNfTsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Enum - the confidence level at which to filter spam at.\n\nConfidence Levels:\n  - VERY_HIGH\n  - HIGH\n  - MEDIUM\n  - LOW\n\nThe confidence level set means that any spam that is at that confidence level or higher will be filtered out. For example, if the confidence level is HIGH, contracts that we have HIGH or VERY_HIGH confidence in being spam will be filtered out from the response. \nDefaults to VERY_HIGH for Ethereum Mainnet and MEDIUM for Matic Mainnet.\n\n**Please note that this filter is only available on paid tiers. Upgrade your account [here](https://dashboard.alchemyapi.io/settings/billing/).**",
              "key": "spamConfidenceLevel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNfTsForOwnerGetParametersSchema"
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of NFTs to be returned per page. Defaults to 100. Max is 100.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_getNFTsForOwner-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the list of all NFTs owned by the given address and satisfying the given input parameters."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "contractAddresses[]": [
                  "foo"
                ],
                "withMetadata": true,
                "orderBy": "transferTime",
                "excludeFilters[]": [
                  "SPAM"
                ],
                "includeFilters[]": [
                  "SPAM"
                ],
                "spamConfidenceLevel": "VERY_HIGH",
                "tokenUriTimeoutInMs": 42,
                "pageKey": "foo",
                "pageSize": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ownedNfts": [
                    {
                      "contract": {
                        "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721",
                        "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                        "deployedBlockNumber": 13736379,
                        "spamClassifications": []
                      },
                      "tokenId": "28",
                      "tokenType": "ERC721",
                      "name": "DuskBreaker #28",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "image": {
                        "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "contentType": "image/png",
                        "size": 1474037,
                        "originalUrl": "https://duskbreakers.gg/breaker_images/28.png"
                      },
                      "raw": {
                        "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
                        "metadata": {
                          "image": "https://duskbreakers.gg/breaker_images/28.png",
                          "name": "DuskBreaker #28",
                          "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                          "attributes": [
                            {
                              "value": "Locust Rider Armor (Red)",
                              "trait_type": "Clothes"
                            },
                            {
                              "value": "Base Drone (Blue)",
                              "trait_type": "Drone"
                            },
                            {
                              "value": "Thin",
                              "trait_type": "Eyebrows"
                            },
                            {
                              "value": "Button",
                              "trait_type": "Nose"
                            },
                            {
                              "value": "Mohawk (Black)",
                              "trait_type": "Hair"
                            },
                            {
                              "value": "Almond 2 (Red)",
                              "trait_type": "Eyes"
                            },
                            {
                              "value": "Big Smile (Purple)",
                              "trait_type": "Mouth"
                            },
                            {
                              "value": "Light Brown",
                              "trait_type": "Skin Tone"
                            },
                            {
                              "value": "Yellow",
                              "trait_type": "Background"
                            },
                            {
                              "value": "Facepaint (Stripe)",
                              "trait_type": "Face Augments"
                            }
                          ]
                        }
                      },
                      "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
                      "timeLastUpdated": "2023-04-19T21:25:39.563Z"
                    },
                    {
                      "contract": {
                        "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721",
                        "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                        "deployedBlockNumber": 13736379,
                        "spamClassifications": []
                      },
                      "tokenId": "29",
                      "tokenType": "ERC721",
                      "name": "DuskBreaker #29",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "image": {
                        "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "contentType": "image/png",
                        "size": 1480183,
                        "originalUrl": "https://duskbreakers.gg/breaker_images/29.png"
                      },
                      "raw": {
                        "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
                        "metadata": {
                          "image": "https://duskbreakers.gg/breaker_images/29.png",
                          "name": "DuskBreaker #29",
                          "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                          "attributes": [
                            {
                              "value": "Standard Issue Armor 1 (Orange)",
                              "trait_type": "Clothes"
                            },
                            {
                              "value": "Dark Metal",
                              "trait_type": "SmartSkin"
                            },
                            {
                              "value": "Base Drone (Purple)",
                              "trait_type": "Drone"
                            },
                            {
                              "value": "Thin",
                              "trait_type": "Eyebrows"
                            },
                            {
                              "value": "Broad",
                              "trait_type": "Nose"
                            },
                            {
                              "value": "Slick Back (Red)",
                              "trait_type": "Hair"
                            },
                            {
                              "value": "Sharp (Blue)",
                              "trait_type": "Eyes"
                            },
                            {
                              "value": "Smirk (Neutral)",
                              "trait_type": "Mouth"
                            },
                            {
                              "value": "Tan",
                              "trait_type": "Skin Tone"
                            },
                            {
                              "value": "Purple",
                              "trait_type": "Background"
                            }
                          ]
                        }
                      },
                      "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
                      "timeLastUpdated": "2023-04-19T21:25:39.704Z"
                    },
                    {
                      "contract": {
                        "address": "0x209cE666978779756Ae1E747608cD93e4dFf45fD",
                        "name": "Knight of Chains Genesis",
                        "symbol": "Knight of Chains Genesis",
                        "tokenType": "ERC1155",
                        "contractDeployer": "0xA92520aFF50c5A1a4d25FCF90c972AA49EbE5299",
                        "deployedBlockNumber": 14847327,
                        "spamClassifications": []
                      },
                      "tokenId": "97",
                      "tokenType": "ERC1155",
                      "image": {},
                      "raw": {
                        "tokenUri": "https://knightsofchain.link/ipfs/97",
                        "metadata": {}
                      },
                      "tokenUri": "https://knightsofchain.link/ipfs/97",
                      "timeLastUpdated": "2023-04-20T15:44:29.965Z"
                    }
                  ],
                  "totalCount": 3,
                  "validAt": {
                    "blockNumber": 17091500,
                    "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
                    "blockTimestamp": "2023-04-21T01:25:59Z"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ownedNfts": [
                    {
                      "contract": {
                        "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721",
                        "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                        "deployedBlockNumber": 13736379,
                        "spamClassifications": []
                      },
                      "tokenId": "28",
                      "tokenType": "ERC721",
                      "name": "DuskBreaker #28",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "image": {
                        "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                        "contentType": "image/png",
                        "size": 1474037,
                        "originalUrl": "https://duskbreakers.gg/breaker_images/28.png"
                      },
                      "raw": {
                        "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
                        "metadata": {
                          "image": "https://duskbreakers.gg/breaker_images/28.png",
                          "name": "DuskBreaker #28",
                          "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                          "attributes": [
                            {
                              "value": "Locust Rider Armor (Red)",
                              "trait_type": "Clothes"
                            },
                            {
                              "value": "Base Drone (Blue)",
                              "trait_type": "Drone"
                            },
                            {
                              "value": "Thin",
                              "trait_type": "Eyebrows"
                            },
                            {
                              "value": "Button",
                              "trait_type": "Nose"
                            },
                            {
                              "value": "Mohawk (Black)",
                              "trait_type": "Hair"
                            },
                            {
                              "value": "Almond 2 (Red)",
                              "trait_type": "Eyes"
                            },
                            {
                              "value": "Big Smile (Purple)",
                              "trait_type": "Mouth"
                            },
                            {
                              "value": "Light Brown",
                              "trait_type": "Skin Tone"
                            },
                            {
                              "value": "Yellow",
                              "trait_type": "Background"
                            },
                            {
                              "value": "Facepaint (Stripe)",
                              "trait_type": "Face Augments"
                            }
                          ]
                        }
                      },
                      "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
                      "timeLastUpdated": "2023-04-19T21:25:39.563Z"
                    },
                    {
                      "contract": {
                        "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721",
                        "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                        "deployedBlockNumber": 13736379,
                        "spamClassifications": []
                      },
                      "tokenId": "29",
                      "tokenType": "ERC721",
                      "name": "DuskBreaker #29",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "image": {
                        "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                        "contentType": "image/png",
                        "size": 1480183,
                        "originalUrl": "https://duskbreakers.gg/breaker_images/29.png"
                      },
                      "raw": {
                        "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
                        "metadata": {
                          "image": "https://duskbreakers.gg/breaker_images/29.png",
                          "name": "DuskBreaker #29",
                          "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                          "attributes": [
                            {
                              "value": "Standard Issue Armor 1 (Orange)",
                              "trait_type": "Clothes"
                            },
                            {
                              "value": "Dark Metal",
                              "trait_type": "SmartSkin"
                            },
                            {
                              "value": "Base Drone (Purple)",
                              "trait_type": "Drone"
                            },
                            {
                              "value": "Thin",
                              "trait_type": "Eyebrows"
                            },
                            {
                              "value": "Broad",
                              "trait_type": "Nose"
                            },
                            {
                              "value": "Slick Back (Red)",
                              "trait_type": "Hair"
                            },
                            {
                              "value": "Sharp (Blue)",
                              "trait_type": "Eyes"
                            },
                            {
                              "value": "Smirk (Neutral)",
                              "trait_type": "Mouth"
                            },
                            {
                              "value": "Tan",
                              "trait_type": "Skin Tone"
                            },
                            {
                              "value": "Purple",
                              "trait_type": "Background"
                            }
                          ]
                        }
                      },
                      "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
                      "timeLastUpdated": "2023-04-19T21:25:39.704Z"
                    },
                    {
                      "contract": {
                        "address": "0x209cE666978779756Ae1E747608cD93e4dFf45fD",
                        "name": "Knight of Chains Genesis",
                        "symbol": "Knight of Chains Genesis",
                        "tokenType": "ERC1155",
                        "contractDeployer": "0xA92520aFF50c5A1a4d25FCF90c972AA49EbE5299",
                        "deployedBlockNumber": 14847327,
                        "spamClassifications": []
                      },
                      "tokenId": "97",
                      "tokenType": "ERC1155",
                      "image": {},
                      "raw": {
                        "tokenUri": "https://knightsofchain.link/ipfs/97",
                        "metadata": {}
                      },
                      "tokenUri": "https://knightsofchain.link/ipfs/97",
                      "timeLastUpdated": "2023-04-20T15:44:29.965Z"
                    }
                  ],
                  "totalCount": 3,
                  "validAt": {
                    "blockNumber": 17091500,
                    "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
                    "blockTimestamp": "2023-04-21T01:25:59Z"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getOwnersForNFT - Retrieves the owner(s) for a specific token. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getOwnersForNFT-v3",
          "originalEndpointId": "NFT Ownership Endpoints.getOwnersForNFT-v3",
          "name": "Owners By NFT",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getOwnersForNFT"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_getOwnersForNFT-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the owner(s) of the specified NFT."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "owners": [
                    "0x9f4F78A6c4a5E6F8AFA81631b9120ae3C831b494"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "owners": [
                    "0x9f4F78A6c4a5E6F8AFA81631b9120ae3C831b494"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getOwnersForContract - Retrieves all owners associated with a specific NFT contract. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getOwnersForContract-v3",
          "originalEndpointId": "NFT Ownership Endpoints.getOwnersForContract-v3",
          "name": "Owners By Contract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getOwnersForContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "Boolean - If set to `true` the query will include the token balances per token id for each owner. `false` by default.",
              "key": "withTokenBalances",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "String - used for contracts with >50,000 owners. `pageKey` field can be passed back as request parameter to get the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_getOwnersForContract-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of all owners for the specified contract."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "withTokenBalances": true,
                "pageKey": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "owners": [
                    {
                      "ownerAddress": "foo",
                      "tokenBalances": [
                        {
                          "tokenId": "foo",
                          "balance": 42
                        }
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "owners": [
                    {
                      "ownerAddress": "foo",
                      "tokenBalances": [
                        {
                          "tokenId": "foo",
                          "balance": 42
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "isHolderOfContract - Determines whether a specific wallet holds any NFT from a given contract. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isHolderOfContract-v3",
          "originalEndpointId": "NFT Ownership Endpoints.isHolderOfContract-v3",
          "name": "Is Holder Of Contract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isHolderOfContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Wallet address to check for contract ownership.",
              "key": "wallet",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_isHolderOfContract-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns whether the specified wallet holds any NFT from the given contract."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "wallet": "foo",
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "isHolderOfContract": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "isHolderOfContract": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getContractsForOwner - Retrieves all NFT contracts held by a specified owner address.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractsForOwner-v3",
          "originalEndpointId": "NFT Ownership Endpoints.getContractsForOwner-v3",
          "name": "Contracts By Owner",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractsForOwner"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of NFTs to be returned per page. Defaults to 100. Max is 100.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "includeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetContractsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "excludeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetContractsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Enum - ordering scheme to use for ordering NFTs in the response. If unspecified, NFTs will be ordered by contract address and token ID.\n  - transferTime: NFTs will be ordered by the time they were transferred into the wallet, with newest NFTs first. NOTE: this ordering is only supported on Ethereum Mainnet and Polygon Mainnet.",
              "key": "orderBy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetContractsForOwnerGetParametersSchema"
                }
              }
            },
            {
              "description": "Enum - the confidence level at which to filter spam at.\n\nConfidence Levels:\n  - VERY_HIGH\n  - HIGH\n  - MEDIUM\n  - LOW\n\nThe confidence level set means that any spam that is at that confidence level or higher will be filtered out. For example, if the confidence level is HIGH, contracts that we have HIGH or VERY_HIGH confidence in being spam will be filtered out from the response. \nDefaults to VERY_HIGH for Ethereum Mainnet and MEDIUM for Matic Mainnet.\n\n**Please note that this filter is only available on paid tiers. Upgrade your account [here](https://dashboard.alchemyapi.io/settings/billing/).**",
              "key": "spamConfidenceLevel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetContractsForOwnerGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_getContractsForOwner-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of NFT contracts held by the specified owner address."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "pageKey": "foo",
                "pageSize": 42,
                "withMetadata": true,
                "includeFilters[]": [
                  "SPAM"
                ],
                "excludeFilters[]": [
                  "SPAM"
                ],
                "orderBy": "transferTime",
                "spamConfidenceLevel": "VERY_HIGH"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contracts": [
                    {
                      "address": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
                      "totalBalance": 912,
                      "numDistinctTokensOwned": 80,
                      "isSpam": true
                    },
                    {
                      "address": "0x0015f391949f25c3211063104ad4afc99210f85c",
                      "totalBalance": 17,
                      "numDistinctTokensOwned": 6,
                      "isSpam": true
                    },
                    {
                      "address": "0x005b92d71a934dbe48e985b6469881cf4b0308fc",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": true
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contracts": [
                    {
                      "address": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
                      "totalBalance": 912,
                      "numDistinctTokensOwned": 80,
                      "isSpam": true
                    },
                    {
                      "address": "0x0015f391949f25c3211063104ad4afc99210f85c",
                      "totalBalance": 17,
                      "numDistinctTokensOwned": 6,
                      "isSpam": true
                    },
                    {
                      "address": "0x005b92d71a934dbe48e985b6469881cf4b0308fc",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": true
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Retrieves all NFT collections held by a specified owner address.\n\n<Note>This endpoint is only supported on Ethereum. Use `getContractsForOwner` for support across all other chains we support!</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getCollectionsForOwner-v3",
          "originalEndpointId": "NFT Ownership Endpoints.getCollectionsForOwner-v3",
          "name": "Collections By Owner",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getCollectionsForOwner"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of NFTs to be returned per page. Defaults to 100. Max is 100.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "includeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetCollectionsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "excludeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V3ApiKeyGetCollectionsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Ownership Endpoints_getCollectionsForOwner-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of NFT collections held by the specified owner address."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "pageKey": "foo",
                "pageSize": 42,
                "withMetadata": true,
                "includeFilters[]": [
                  "SPAM"
                ],
                "excludeFilters[]": [
                  "SPAM"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "collections": [
                    {
                      "name": "The Humanoids ",
                      "slug": "thehumanoids",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": "false"
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "collections": [
                    {
                      "name": "The Humanoids ",
                      "slug": "thehumanoids",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": "false"
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "NFT Metadata Endpoints": {
      "subpackageId": "NFT Metadata Endpoints",
      "name": "NFT Metadata Endpoints",
      "endpoints": [
        {
          "auth": false,
          "description": "getNFTsForContract - Retrieves all NFTs associated with a specific NFT contract. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTsForContract-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getNFTsForContract-v3",
          "name": "NFTs By Contract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTsForContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "String - A tokenID offset used for pagination. Can be a hex string, or a decimal. Users can specify the offset themselves to start from a custom offset, or to fetch multiple token ranges in parallel.",
              "key": "startToken",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Integer - Sets the total number of NFTs returned in the response. Defaults to 100.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_getNFTsForContract-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of NFTs associated with the specified contract address."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "withMetadata": true,
                "startToken": "foo",
                "limit": 42,
                "tokenUriTimeoutInMs": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "contract": {
                        "address": "foo",
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "openseaMetadata": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        },
                        "isSpam": "foo",
                        "spamClassifications": [
                          "foo"
                        ]
                      },
                      "tokenId": "foo",
                      "tokenType": "foo",
                      "name": "foo",
                      "description": "foo",
                      "image": {
                        "cachedUrl": "foo",
                        "thumbnailUrl": "foo",
                        "pngUrl": "foo",
                        "contentType": "foo",
                        "size": 42,
                        "originalUrl": "foo"
                      },
                      "raw": {
                        "tokenUri": "foo",
                        "metadata": {
                          "image": "foo",
                          "name": "foo",
                          "description": "foo",
                          "attributes": [
                            {
                              "value": "foo",
                              "trait_type": "foo"
                            }
                          ]
                        },
                        "error": "foo"
                      },
                      "collection": {
                        "name": "foo",
                        "slug": "foo",
                        "externalUrl": "foo",
                        "bannerImageUrl": "foo"
                      },
                      "tokenUri": "foo",
                      "timeLastUpdated": "foo",
                      "acquiredAt": {
                        "blockTimestamp": "foo",
                        "blockNumber": "foo"
                      }
                    }
                  ],
                  "pageKey": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "contract": {
                        "address": "foo",
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "openseaMetadata": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        },
                        "isSpam": "foo",
                        "spamClassifications": [
                          "foo"
                        ]
                      },
                      "tokenId": "foo",
                      "tokenType": "foo",
                      "name": "foo",
                      "description": "foo",
                      "image": {
                        "cachedUrl": "foo",
                        "thumbnailUrl": "foo",
                        "pngUrl": "foo",
                        "contentType": "foo",
                        "size": 42,
                        "originalUrl": "foo"
                      },
                      "raw": {
                        "tokenUri": "foo",
                        "metadata": {
                          "image": "foo",
                          "name": "foo",
                          "description": "foo",
                          "attributes": [
                            {
                              "value": "foo",
                              "trait_type": "foo"
                            }
                          ]
                        },
                        "error": "foo"
                      },
                      "collection": {
                        "name": "foo",
                        "slug": "foo",
                        "externalUrl": "foo",
                        "bannerImageUrl": "foo"
                      },
                      "tokenUri": "foo",
                      "timeLastUpdated": "foo",
                      "acquiredAt": {
                        "blockTimestamp": "foo",
                        "blockNumber": "foo"
                      }
                    }
                  ],
                  "pageKey": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getNFTsForCollection - Retrieves all NFTs associated with a specific NFT collection. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTsForCollection-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getNFTsForCollection-v3",
          "name": "NFTs By Collection",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTsForCollection"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                  }
                }
              }
            },
            {
              "description": "String - OpenSea slug for the NFT collection.",
              "key": "collectionSlug",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "boredapeyachtclub"
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "String - A tokenID offset used for pagination. Can be a hex string, or a decimal. Users can specify the offset themselves to start from a custom offset, or to fetch multiple token ranges in parallel.",
              "key": "startToken",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Integer - Sets the total number of NFTs returned in the response. Defaults to 100.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_getNFTsForCollection-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of NFTs associated with the specified collection."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "collectionSlug": "foo",
                "withMetadata": true,
                "startToken": "foo",
                "limit": 42,
                "tokenUriTimeoutInMs": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "id": {
                        "tokenId": "foo",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "tokenUri": {
                        "raw": "foo",
                        "gateway": "foo"
                      },
                      "metadata": {
                        "image": "foo",
                        "external_url": "foo",
                        "background_color": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ],
                        "media": [
                          {
                            "raw": "foo",
                            "gateway": "foo",
                            "thumbnail": "foo",
                            "format": "foo",
                            "bytes": 42
                          }
                        ]
                      },
                      "timeLastUpdated": "foo",
                      "contractMetadata": {
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "opensea": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        }
                      }
                    }
                  ],
                  "nextToken": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "id": {
                        "tokenId": "foo",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "tokenUri": {
                        "raw": "foo",
                        "gateway": "foo"
                      },
                      "metadata": {
                        "image": "foo",
                        "external_url": "foo",
                        "background_color": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ],
                        "media": [
                          {
                            "raw": "foo",
                            "gateway": "foo",
                            "thumbnail": "foo",
                            "format": "foo",
                            "bytes": 42
                          }
                        ]
                      },
                      "timeLastUpdated": "foo",
                      "contractMetadata": {
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "opensea": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        }
                      }
                    }
                  ],
                  "nextToken": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getNFTMetadata - Retrieves the metadata associated with a specific NFT. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTMetadata-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getNFTMetadata-v3",
          "name": "NFT Metadata By Token ID",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            },
            {
              "description": "String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.",
              "key": "tokenType",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Defaults to false for faster response times.  If true will refresh metadata for given token. If false will check the cache and use it or refresh if cache doesn't exist.",
              "key": "refreshCache",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_getNFTMetadata-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the metadata of the specified NFT."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo",
                "tokenType": "foo",
                "tokenUriTimeoutInMs": 42,
                "refreshCache": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contract": {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    },
                    "isSpam": "foo",
                    "spamClassifications": [
                      "foo"
                    ]
                  },
                  "tokenId": "foo",
                  "tokenType": "foo",
                  "name": "foo",
                  "description": "foo",
                  "image": {
                    "cachedUrl": "foo",
                    "thumbnailUrl": "foo",
                    "pngUrl": "foo",
                    "contentType": "foo",
                    "size": 42,
                    "originalUrl": "foo"
                  },
                  "raw": {
                    "tokenUri": "foo",
                    "metadata": {
                      "image": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": [
                        {
                          "value": "foo",
                          "trait_type": "foo"
                        }
                      ]
                    },
                    "error": "foo"
                  },
                  "collection": {
                    "name": "foo",
                    "slug": "foo",
                    "externalUrl": "foo",
                    "bannerImageUrl": "foo"
                  },
                  "tokenUri": "foo",
                  "timeLastUpdated": "foo",
                  "acquiredAt": {
                    "blockTimestamp": "foo",
                    "blockNumber": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contract": {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    },
                    "isSpam": "foo",
                    "spamClassifications": [
                      "foo"
                    ]
                  },
                  "tokenId": "foo",
                  "tokenType": "foo",
                  "name": "foo",
                  "description": "foo",
                  "image": {
                    "cachedUrl": "foo",
                    "thumbnailUrl": "foo",
                    "pngUrl": "foo",
                    "contentType": "foo",
                    "size": 42,
                    "originalUrl": "foo"
                  },
                  "raw": {
                    "tokenUri": "foo",
                    "metadata": {
                      "image": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": [
                        {
                          "value": "foo",
                          "trait_type": "foo"
                        }
                      ]
                    },
                    "error": "foo"
                  },
                  "collection": {
                    "name": "foo",
                    "slug": "foo",
                    "externalUrl": "foo",
                    "bannerImageUrl": "foo"
                  },
                  "tokenUri": "foo",
                  "timeLastUpdated": "foo",
                  "acquiredAt": {
                    "blockTimestamp": "foo",
                    "blockNumber": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getNFTMetadataBatch - Retrieves metadata for up to 100 specified NFT contracts in a single request. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "POST",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTMetadataBatch-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getNFTMetadataBatch-v3",
          "name": "NFT Metadata By Token ID [Batch]",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTMetadataBatch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "List of token objects to batch request NFT metadata for. Maximum 100.",
                    "key": "tokens",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "V3ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems"
                        }
                      }
                    }
                  },
                  {
                    "key": "tokenUriTimeoutInMs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "key": "refreshCache",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftMetadataBatchPostResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": "Returns an array of NFT metadata corresponding to the batch query."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "contract": {
                      "address": "foo",
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "openseaMetadata": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      },
                      "isSpam": "foo",
                      "spamClassifications": [
                        "foo"
                      ]
                    },
                    "tokenId": "foo",
                    "tokenType": "foo",
                    "name": "foo",
                    "description": "foo",
                    "image": {
                      "cachedUrl": "foo",
                      "thumbnailUrl": "foo",
                      "pngUrl": "foo",
                      "contentType": "foo",
                      "size": 42,
                      "originalUrl": "foo"
                    },
                    "raw": {
                      "tokenUri": "foo",
                      "metadata": {
                        "image": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ]
                      },
                      "error": "foo"
                    },
                    "collection": {
                      "name": "foo",
                      "slug": "foo",
                      "externalUrl": "foo",
                      "bannerImageUrl": "foo"
                    },
                    "tokenUri": "foo",
                    "timeLastUpdated": "foo",
                    "acquiredAt": {
                      "blockTimestamp": "foo",
                      "blockNumber": "foo"
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "contract": {
                      "address": "foo",
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "openseaMetadata": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      },
                      "isSpam": "foo",
                      "spamClassifications": [
                        "foo"
                      ]
                    },
                    "tokenId": "foo",
                    "tokenType": "foo",
                    "name": "foo",
                    "description": "foo",
                    "image": {
                      "cachedUrl": "foo",
                      "thumbnailUrl": "foo",
                      "pngUrl": "foo",
                      "contentType": "foo",
                      "size": 42,
                      "originalUrl": "foo"
                    },
                    "raw": {
                      "tokenUri": "foo",
                      "metadata": {
                        "image": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ]
                      },
                      "error": "foo"
                    },
                    "collection": {
                      "name": "foo",
                      "slug": "foo",
                      "externalUrl": "foo",
                      "bannerImageUrl": "foo"
                    },
                    "tokenUri": "foo",
                    "timeLastUpdated": "foo",
                    "acquiredAt": {
                      "blockTimestamp": "foo",
                      "blockNumber": "foo"
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getContractMetadata - Retrieves high-level collection or contract-level information for an NFT. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractMetadata-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getContractMetadata-v3",
          "name": "Contract Metadata By Address",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_getContractMetadata-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the contract metadata for the specified address."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "address": "foo",
                  "name": "foo",
                  "symbol": "foo",
                  "totalSupply": "foo",
                  "tokenType": "ERC721",
                  "contractDeployer": "foo",
                  "deployedBlockNumber": 42,
                  "openseaMetadata": {
                    "floorPrice": 42,
                    "collectionName": "foo",
                    "safelistRequestStatus": "foo",
                    "imageUrl": "foo",
                    "description": "foo",
                    "externalUrl": "foo",
                    "twitterUsername": "foo",
                    "discordUrl": "foo",
                    "lastIngestedAt": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "address": "foo",
                  "name": "foo",
                  "symbol": "foo",
                  "totalSupply": "foo",
                  "tokenType": "ERC721",
                  "contractDeployer": "foo",
                  "deployedBlockNumber": 42,
                  "openseaMetadata": {
                    "floorPrice": 42,
                    "collectionName": "foo",
                    "safelistRequestStatus": "foo",
                    "imageUrl": "foo",
                    "description": "foo",
                    "externalUrl": "foo",
                    "twitterUsername": "foo",
                    "discordUrl": "foo",
                    "lastIngestedAt": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getCollectionMetadata - Retrieves high-level collection or contract-level information for an NFT collection. This endpoint is supported on Ethereum and many L2s, including Polygon, Arbitrum, Optimism, Base, World Chain and more. See the full list of supported networks [here](https://dashboard.alchemy.com/chains?service=token-api&utm_source=readme&utm_medium=link&utm_campaign=docs_method_chains_link_v1_tokens).",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getCollectionMetadata-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getCollectionMetadata-v3",
          "name": "Collection Metadata By Slug",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getCollectionMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - OpenSea slug for the NFT collection.",
              "key": "collectionSlug",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "boredapeyachtclub"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_getCollectionMetadata-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the collection metadata for the specified slug."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "collectionSlug": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "slug": "foo",
                  "floorPrice": {
                    "marketplace": "foo",
                    "floorPrice": 42,
                    "priceCurrency": "foo"
                  },
                  "description": "foo",
                  "externalUrl": "foo",
                  "twitterUsername": "foo",
                  "discordUrl": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "slug": "foo",
                  "floorPrice": {
                    "marketplace": "foo",
                    "floorPrice": 42,
                    "priceCurrency": "foo"
                  },
                  "description": "foo",
                  "externalUrl": "foo",
                  "twitterUsername": "foo",
                  "discordUrl": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Marks all cached tokens for the specified contract as stale, ensuring the next query fetches live data instead of cached data.\n\n<Note>Please note that this endpoint is only available on **Ethereum**, **Polygon**, **Arbitrum**, **Optimism** & **Base** networks.</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "invalidateContract-v3",
          "originalEndpointId": "NFT Metadata Endpoints.invalidateContract-v3",
          "name": "Invalidate Contract Cache",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/invalidateContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_invalidateContract-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns confirmation of cache invalidation along with the number of tokens invalidated."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "success": "foo",
                  "numTokensInvalidated": 42
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "success": "foo",
                  "numTokensInvalidated": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "getContractMetadataBatch - Retrieves metadata for a list of specified contract addresses in a single request.",
          "method": "POST",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractMetadataBatch-v3",
          "originalEndpointId": "NFT Metadata Endpoints.getContractMetadataBatch-v3",
          "name": "Contract Metadata By Address [Batch]",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractMetadataBatch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "List of contract addresses to batch metadata requests for.",
                    "key": "contractAddresses",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetContractMetadataBatchPostResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": "Returns an array of contract metadata corresponding to the batch query."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Generates a summary of attribute prevalence for a specific NFT collection.\n\n<Note>Please note that this endpoint is only available on Ethereum (mainnet) & Polygon (mainnet & mumbai).</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "summarizeNFTAttributes-v3",
          "originalEndpointId": "NFT Metadata Endpoints.summarizeNFTAttributes-v3",
          "name": "Attributes Summary By Contract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/summarizeNFTAttributes"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_summarizeNFTAttributes-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a summary of attribute prevalence for the specified NFT collection."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "totalSupply": "10000",
                  "summary": {
                    "Earrings": {
                      "WoW Coins": 437,
                      "Pizza Lovers": 188,
                      "Lucky Charms": 415,
                      "White Ovals": 210,
                      "Artist Palettes": 21,
                      "Queen's Emeralds": 206,
                      "Silver Drops": 822,
                      "Flower Power": 366,
                      "Pearls": 833,
                      "Spikes": 776,
                      "Yam's Fave": 381,
                      "Classic Hoops": 780,
                      "Ocean Hoops": 770,
                      "Triple Rings": 823,
                      "60s Fantasy": 399,
                      "Lightning Bolts": 226,
                      "Empresses Of Darkness": 103
                    },
                    "Necklace": {
                      "WoW Coin": 481,
                      "Malka": 494,
                      "Amazonite Energy": 490,
                      "Satin Choker": 721,
                      "Back To The 90s": 706,
                      "Empress of Darkness": 58,
                      "Spike Choker": 449,
                      "Golden Bib": 251,
                      "Golden Flakes": 710,
                      "Art Lover": 29,
                      "Rainbow": 474,
                      "Gold Ruler": 477,
                      "Wolf Pendant": 229,
                      "Tutti Frutti Beads": 691,
                      "Sun Keeper": 730
                    },
                    "Eyes": {
                      "Purple To The Left": 158,
                      "Heterochromia To The Left": 57,
                      "Brown To The Right": 455,
                      "Black Eye Roll": 881,
                      "Yellow To The Left": 141,
                      "Purple Eye Roll": 145,
                      "Green Straight": 433,
                      "Blue To The Left": 407,
                      "Green To The Right": 410,
                      "Black Straight": 794,
                      "Purple To The Right": 145,
                      "Black To The Right": 870,
                      "Green Eye Roll": 413,
                      "Yellow Straight": 128,
                      "Brown To The Left": 465,
                      "Brown Eye Roll": 416,
                      "Heterochromia To The Right": 76,
                      "Blue Straight": 415,
                      "Black To The Left": 877,
                      "Heterochromia Eye Roll": 85,
                      "Purple Straight": 158,
                      "Brown Straight": 434,
                      "Yellow Eye Roll": 141,
                      "Heterochromia Straight": 77,
                      "Yellow To The Right": 139,
                      "Blue To The Right": 416,
                      "Green To The Left": 424,
                      "Blue Eye Roll": 440
                    },
                    "Background": {
                      "Green Purple": 905,
                      "Purple Pink": 905,
                      "Dark Emerald": 924,
                      "Yellow Pink": 896,
                      "Pink Pastel": 849,
                      "Blue Green": 924,
                      "Soft Purple": 983,
                      "Green Orange": 907,
                      "Dark Purple": 876,
                      "Red Turquoise": 914,
                      "Orange Yellow": 917
                    },
                    "Mouth": {
                      "Cigarette": 502,
                      "Whistle": 868,
                      "Slight Smile": 1666,
                      "Stern": 1733,
                      "Countryside": 927,
                      "Huh": 506,
                      "Slightly Open": 1661,
                      "Bubble Gum": 404,
                      "Surprised": 1733
                    },
                    "Clothes": {
                      "80s Silk Shirt": 400,
                      "70s Shirt": 421,
                      "Fantasy Shirt": 542,
                      "Adventurer": 583,
                      "Striped Tee": 567,
                      "Naiade": 98,
                      "Tunic": 193,
                      "Checkmate": 396,
                      "Painter's Overall": 550,
                      "Witch Dress": 198,
                      "Little Red Dress": 437,
                      "Cabaret Corset": 535,
                      "Polka Dot Top": 573,
                      "Freedom Is Power Tee": 368,
                      "Warrior Armor": 177,
                      "Emerald Elven Cape": 117,
                      "Faux Fur Coat": 404,
                      "Red Leather Jacket": 374,
                      "White Tee": 533,
                      "Tuxedo": 100,
                      "Steampunk Octopus Top": 186,
                      "Queen's Dress": 391,
                      "Cherry Tee": 590,
                      "NFT Goddesses Top": 189,
                      "Gala Dress": 192,
                      "Psychedelic Dress": 492,
                      "Futuristic Dress": 394
                    },
                    "Facial Features": {
                      "Nose Piercing": 598,
                      "Red Eyeliner": 608,
                      "Leader": 224,
                      "Neck Tattoo": 227,
                      "Pearl Eyes": 207,
                      "Red Blue Bolt": 97,
                      "Rose Tattoo": 286,
                      "Feline Eyes": 590,
                      "Elven Warrior": 99,
                      "Marilyn": 633,
                      "Freckles": 581,
                      "Flashy Blue": 304,
                      "Sunset": 297,
                      "Heart Tattoo": 591,
                      "Rainbow": 578,
                      "Eyebrow Tattoo MMXXI": 303,
                      "Eye Scar": 308,
                      "Treble Bass Clef Tattoo": 210,
                      "Crystal Queen": 221,
                      "Antoinette": 582,
                      "Cyber Warrior": 120,
                      "Eyebrow Piercing": 619,
                      "Claw Scar": 236
                    },
                    "Hairstyle": {
                      "Badass Bob": 178,
                      "Curly Ponytail": 390,
                      "Finger Waves": 398,
                      "Colorful": 186,
                      "Fuchsia": 562,
                      "Retro": 408,
                      "Royal": 227,
                      "Boy Cut": 566,
                      "Bob": 653,
                      "Bun": 607,
                      "Long Dark": 416,
                      "Curly Pearl Updo": 122,
                      "Lucky Green": 417,
                      "Lioness": 600,
                      "Natural Red": 608,
                      "Double Buns": 182,
                      "Cotton Candy": 228,
                      "Rose Hair": 388,
                      "Purple Rainbow": 187,
                      "Lollipop": 612,
                      "Silver": 205,
                      "Braided Ponytail": 561,
                      "Platinum Pixie": 570,
                      "Black And White": 110,
                      "Feeling Turquoise": 412
                    },
                    "Lips Color": {
                      "Space": 195,
                      "Gold": 622,
                      "Purple": 1967,
                      "Burgundy": 1995,
                      "Party Pink": 1114,
                      "Passion Red": 3008,
                      "Flashy Blue": 1099
                    },
                    "Skin Tone": {
                      "Rainbow Bright": 197,
                      "Light Warm Yellow": 1021,
                      "Burning Red": 497,
                      "Cyber Green": 511,
                      "Night Goddess": 85,
                      "Deep Warm Gold": 1026,
                      "Light Medium Warm Gold": 997,
                      "Deep Bronze": 1047,
                      "Medium Olive": 976,
                      "Deep Neutral": 996,
                      "Medium Gold": 937,
                      "Light Warm Olive": 1031,
                      "Cool Blue": 486,
                      "Golden": 193
                    },
                    "Face Accessories": {
                      "Oversized Statement Sunglasses": 396,
                      "Psychedelic Sunglasses": 390,
                      "Resting Butterfly": 83,
                      "Red Round Sunglasses": 695,
                      "Classic Aviator WoW": 414,
                      "Black Mask": 398,
                      "Cateye Sunglasses": 221,
                      "On Fire": 116,
                      "70s Feels": 718,
                      "3D Glasses": 216,
                      "Round Glasses": 704,
                      "Black Round Retro": 403,
                      "Hypnotic Glasses": 209
                    }
                  },
                  "contractAddress": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "totalSupply": "10000",
                  "summary": {
                    "Earrings": {
                      "WoW Coins": 437,
                      "Pizza Lovers": 188,
                      "Lucky Charms": 415,
                      "White Ovals": 210,
                      "Artist Palettes": 21,
                      "Queen's Emeralds": 206,
                      "Silver Drops": 822,
                      "Flower Power": 366,
                      "Pearls": 833,
                      "Spikes": 776,
                      "Yam's Fave": 381,
                      "Classic Hoops": 780,
                      "Ocean Hoops": 770,
                      "Triple Rings": 823,
                      "60s Fantasy": 399,
                      "Lightning Bolts": 226,
                      "Empresses Of Darkness": 103
                    },
                    "Necklace": {
                      "WoW Coin": 481,
                      "Malka": 494,
                      "Amazonite Energy": 490,
                      "Satin Choker": 721,
                      "Back To The 90s": 706,
                      "Empress of Darkness": 58,
                      "Spike Choker": 449,
                      "Golden Bib": 251,
                      "Golden Flakes": 710,
                      "Art Lover": 29,
                      "Rainbow": 474,
                      "Gold Ruler": 477,
                      "Wolf Pendant": 229,
                      "Tutti Frutti Beads": 691,
                      "Sun Keeper": 730
                    },
                    "Eyes": {
                      "Purple To The Left": 158,
                      "Heterochromia To The Left": 57,
                      "Brown To The Right": 455,
                      "Black Eye Roll": 881,
                      "Yellow To The Left": 141,
                      "Purple Eye Roll": 145,
                      "Green Straight": 433,
                      "Blue To The Left": 407,
                      "Green To The Right": 410,
                      "Black Straight": 794,
                      "Purple To The Right": 145,
                      "Black To The Right": 870,
                      "Green Eye Roll": 413,
                      "Yellow Straight": 128,
                      "Brown To The Left": 465,
                      "Brown Eye Roll": 416,
                      "Heterochromia To The Right": 76,
                      "Blue Straight": 415,
                      "Black To The Left": 877,
                      "Heterochromia Eye Roll": 85,
                      "Purple Straight": 158,
                      "Brown Straight": 434,
                      "Yellow Eye Roll": 141,
                      "Heterochromia Straight": 77,
                      "Yellow To The Right": 139,
                      "Blue To The Right": 416,
                      "Green To The Left": 424,
                      "Blue Eye Roll": 440
                    },
                    "Background": {
                      "Green Purple": 905,
                      "Purple Pink": 905,
                      "Dark Emerald": 924,
                      "Yellow Pink": 896,
                      "Pink Pastel": 849,
                      "Blue Green": 924,
                      "Soft Purple": 983,
                      "Green Orange": 907,
                      "Dark Purple": 876,
                      "Red Turquoise": 914,
                      "Orange Yellow": 917
                    },
                    "Mouth": {
                      "Cigarette": 502,
                      "Whistle": 868,
                      "Slight Smile": 1666,
                      "Stern": 1733,
                      "Countryside": 927,
                      "Huh": 506,
                      "Slightly Open": 1661,
                      "Bubble Gum": 404,
                      "Surprised": 1733
                    },
                    "Clothes": {
                      "80s Silk Shirt": 400,
                      "70s Shirt": 421,
                      "Fantasy Shirt": 542,
                      "Adventurer": 583,
                      "Striped Tee": 567,
                      "Naiade": 98,
                      "Tunic": 193,
                      "Checkmate": 396,
                      "Painter's Overall": 550,
                      "Witch Dress": 198,
                      "Little Red Dress": 437,
                      "Cabaret Corset": 535,
                      "Polka Dot Top": 573,
                      "Freedom Is Power Tee": 368,
                      "Warrior Armor": 177,
                      "Emerald Elven Cape": 117,
                      "Faux Fur Coat": 404,
                      "Red Leather Jacket": 374,
                      "White Tee": 533,
                      "Tuxedo": 100,
                      "Steampunk Octopus Top": 186,
                      "Queen's Dress": 391,
                      "Cherry Tee": 590,
                      "NFT Goddesses Top": 189,
                      "Gala Dress": 192,
                      "Psychedelic Dress": 492,
                      "Futuristic Dress": 394
                    },
                    "Facial Features": {
                      "Nose Piercing": 598,
                      "Red Eyeliner": 608,
                      "Leader": 224,
                      "Neck Tattoo": 227,
                      "Pearl Eyes": 207,
                      "Red Blue Bolt": 97,
                      "Rose Tattoo": 286,
                      "Feline Eyes": 590,
                      "Elven Warrior": 99,
                      "Marilyn": 633,
                      "Freckles": 581,
                      "Flashy Blue": 304,
                      "Sunset": 297,
                      "Heart Tattoo": 591,
                      "Rainbow": 578,
                      "Eyebrow Tattoo MMXXI": 303,
                      "Eye Scar": 308,
                      "Treble Bass Clef Tattoo": 210,
                      "Crystal Queen": 221,
                      "Antoinette": 582,
                      "Cyber Warrior": 120,
                      "Eyebrow Piercing": 619,
                      "Claw Scar": 236
                    },
                    "Hairstyle": {
                      "Badass Bob": 178,
                      "Curly Ponytail": 390,
                      "Finger Waves": 398,
                      "Colorful": 186,
                      "Fuchsia": 562,
                      "Retro": 408,
                      "Royal": 227,
                      "Boy Cut": 566,
                      "Bob": 653,
                      "Bun": 607,
                      "Long Dark": 416,
                      "Curly Pearl Updo": 122,
                      "Lucky Green": 417,
                      "Lioness": 600,
                      "Natural Red": 608,
                      "Double Buns": 182,
                      "Cotton Candy": 228,
                      "Rose Hair": 388,
                      "Purple Rainbow": 187,
                      "Lollipop": 612,
                      "Silver": 205,
                      "Braided Ponytail": 561,
                      "Platinum Pixie": 570,
                      "Black And White": 110,
                      "Feeling Turquoise": 412
                    },
                    "Lips Color": {
                      "Space": 195,
                      "Gold": 622,
                      "Purple": 1967,
                      "Burgundy": 1995,
                      "Party Pink": 1114,
                      "Passion Red": 3008,
                      "Flashy Blue": 1099
                    },
                    "Skin Tone": {
                      "Rainbow Bright": 197,
                      "Light Warm Yellow": 1021,
                      "Burning Red": 497,
                      "Cyber Green": 511,
                      "Night Goddess": 85,
                      "Deep Warm Gold": 1026,
                      "Light Medium Warm Gold": 997,
                      "Deep Bronze": 1047,
                      "Medium Olive": 976,
                      "Deep Neutral": 996,
                      "Medium Gold": 937,
                      "Light Warm Olive": 1031,
                      "Cool Blue": 486,
                      "Golden": 193
                    },
                    "Face Accessories": {
                      "Oversized Statement Sunglasses": 396,
                      "Psychedelic Sunglasses": 390,
                      "Resting Butterfly": 83,
                      "Red Round Sunglasses": 695,
                      "Classic Aviator WoW": 414,
                      "Black Mask": 398,
                      "Cateye Sunglasses": 221,
                      "On Fire": 116,
                      "70s Feels": 718,
                      "3D Glasses": 216,
                      "Round Glasses": 704,
                      "Black Round Retro": 403,
                      "Hypnotic Glasses": 209
                    }
                  },
                  "contractAddress": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Searches for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\n\n<Warning>This endpoint is currently in BETA. Please report any feedback you have for this endpoint via Alchemy's [Discord](https://discord.gg/alchemy).</Warning>\n\n<Note>Please note that this endpoint is only available on **Ethereum**, **Polygon**, **Arbitrum**, **Optimism** & **Base** networks.</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "searchContractMetadata-v3",
          "originalEndpointId": "NFT Metadata Endpoints.searchContractMetadata-v3",
          "name": "Search Contract Metadata",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/searchContractMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - The search string that you want to search for in contract metadata",
              "key": "query",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "bored"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeySearchContractMetadataGetResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": "Returns the list of NFT contracts where the metadata has one or more keywords from the search string."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "query": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "openseaMetadata": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Calculates the rarity of each attribute within an NFT.\n\n<Note>Please note that this endpoint is only available on Ethereum (mainnet) & Polygon (mainnet & mumbai).</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "computeRarity-v3",
          "originalEndpointId": "NFT Metadata Endpoints.computeRarity-v3",
          "name": "Attribute Rarity By NFT",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/computeRarity"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_computeRarity-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the rarity information for each attribute of the specified NFT."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rarities": [
                    {
                      "trait_type": "foo",
                      "value": "foo",
                      "prevalence": 42
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rarities": [
                    {
                      "trait_type": "foo",
                      "value": "foo",
                      "prevalence": 42
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Submits a request for Alchemy to refresh the cached metadata of a specific NFT token.\n\n<Note>Please note that this endpoint is only supported on Ethereum (Mainnet & Sepolia), Polygon (Mainnet, Mumbai & Amoy), Arbitrum One (mainnet), Optimism (mainnet) & Base (mainnet). For other chains, you could use the `getNFTMetadata` endpoint with the `refreshCache` parameter set to `true` to refresh the metadata!</Note>\n",
          "method": "POST",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "refreshNftMetadata-v3",
          "originalEndpointId": "NFT Metadata Endpoints.refreshNftMetadata-v3",
          "name": "Refresh NFT Metadata",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/refreshNftMetadata"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Contract address of the token you want to refresh.",
                    "key": "contractAddress",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                        }
                      }
                    }
                  },
                  {
                    "description": "Token ID of the token you want to refresh. Must belong to the contract address.",
                    "key": "tokenId",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "default": "44"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Metadata Endpoints_refreshNftMetadata-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the status of the refresh request along with the estimated time to complete."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "status": "Queued",
                  "estimatedMsToRefresh": "10000"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "status": "Queued",
                  "estimatedMsToRefresh": "10000"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "NFT Spam Endpoints": {
      "subpackageId": "NFT Spam Endpoints",
      "name": "NFT Spam Endpoints",
      "endpoints": [
        {
          "auth": false,
          "description": "Returns a list of all spam contracts marked by Alchemy.\n\n<Note>Please note that this API endpoint is only available to paid tier customers. Upgrade your account [here](https://dashboard.alchemy.com/account/).</Note>\n\n<Note>Spam NFT functionality is available on Mainnet for the following chains: Base, Arbitrum, Optimism, Ethereum, Polygon, Worldchain, Avax, Gnosis, Zksync, and Blast. More to come soon!</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getSpamContracts-v3",
          "originalEndpointId": "NFT Spam Endpoints.getSpamContracts-v3",
          "name": "Spam Contracts",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getSpamContracts"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Spam Endpoints_getSpamContracts-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of all spam contracts marked by Alchemy."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contractAddresses": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contractAddresses": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Determines whether a specific contract is marked as spam by Alchemy.\n\n<Note>Please note that this API endpoint is only available to paid tier customers. Upgrade your account [here](https://dashboard.alchemy.com/account/).</Note>\n\n<Note>Spam NFT functionality is available on Mainnet for the following chains: Base, Arbitrum, Optimism, Ethereum, Polygon, Worldchain, Avax, Gnosis, Zksync, and Blast. More to come soon!</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isSpamContract-v3",
          "originalEndpointId": "NFT Spam Endpoints.isSpamContract-v3",
          "name": "Is Spam Contract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isSpamContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Spam Endpoints_isSpamContract-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns whether the specified contract is marked as spam."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "isSpamContract": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "isSpamContract": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Determines whether a specific token is marked as an airdrop. Airdrops are defined as NFTs minted to a user address in a transaction sent by a different address.\n\n<Note>Please note that this endpoint is only available on Ethereum (mainnet only) & Polygon (mainnet, amoy & mumbai).</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isAirdropNFT-v3",
          "originalEndpointId": "NFT Spam Endpoints.isAirdropNFT-v3",
          "name": "Is Airdrop NFT",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isAirdropNFT"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Spam Endpoints_isAirdropNFT-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns whether the specified token is marked as an airdrop."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "isAirdrop": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "isAirdrop": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Reports a specific address to the API if it is suspected to be spam.\n\n<Note>Spam NFT functionality is available on Mainnet for the following chains: Base, Arbitrum, Optimism, Ethereum, Polygon, Worldchain, Avax, Gnosis, Zksync, and Blast. More to come soon!</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "reportSpam-v3",
          "originalEndpointId": "NFT Spam Endpoints.reportSpam-v3",
          "name": "Report Spam Address",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/reportSpam"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - any valid blockchain address for NFT collections, contracts, mints, etc.",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "statusCode": 200,
            "description": "Returns a confirmation message if the address was successfully reported as spam."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "address": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": "foo"
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "NFT Sales Endpoints": {
      "subpackageId": "NFT Sales Endpoints",
      "name": "NFT Sales Endpoints",
      "endpoints": [
        {
          "auth": false,
          "description": "Retrieves the floor prices of an NFT collection across different marketplaces.\n\n<Note>Please note that this endpoint is only available on Ethereum mainnet for Opensea & Looksrare marketplaces.</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getFloorPrice-v3",
          "originalEndpointId": "NFT Sales Endpoints.getFloorPrice-v3",
          "name": "Floor Prices By Slug",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getFloorPrice"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                  }
                }
              }
            },
            {
              "description": "String - OpenSea slug for the NFT collection.",
              "key": "collectionSlug",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "boredapeyachtclub"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Sales Endpoints_getFloorPrice-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the floor prices of the specified NFT collection across different marketplaces."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "collectionSlug": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nftMarketplaceName": {
                    "floorPrice": 42,
                    "priceCurrency": "ETH",
                    "collectionUrl": "foo",
                    "retrievedAt": "foo",
                    "error": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nftMarketplaceName": {
                    "floorPrice": 42,
                    "priceCurrency": "ETH",
                    "collectionUrl": "foo",
                    "retrievedAt": "foo",
                    "error": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Retrieves NFT sales that have occurred through on-chain marketplaces.\n\n<Note>Please note that this endpoint is only available on Ethereum (Seaport, Wyvern, X2Y2, Blur, LooksRare, Cryptopunks), Polygon (Seaport) & Optimism (Seaport) mainnets.</Note>\n",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTSales-v3",
          "originalEndpointId": "NFT Sales Endpoints.getNFTSales-v3",
          "name": "NFT Sales",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTSales"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and \"latest\". Defaults to \"0\".",
              "key": "fromBlock",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0"
                  }
                }
              }
            },
            {
              "description": "String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and \"latest\". Defaults to \"latest\".",
              "key": "toBlock",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "latest"
                  }
                }
              }
            },
            {
              "description": "Enum - Whether to return the results ascending from startBlock or descending from startBlock. Defaults to descending (false).",
              "key": "order",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "Enum - The name of the NFT marketplace to filter sales by. The endpoint currently supports \"seaport\", \"wyvern\", \"looksrare\", \"x2y2\", \"blur\", and \"cryptopunks\". Defaults to returning sales from all supported marketplaces.",
              "key": "marketplace",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "String - The contract address of an NFT collection to filter sales by. Defaults to returning all NFT contracts.",
              "key": "contractAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                  }
                }
              }
            },
            {
              "description": "String - The token ID of an NFT within the collection specified by contractAddress to filter sales by. Defaults to returning all token IDs.",
              "key": "tokenId",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "44"
                  }
                }
              }
            },
            {
              "description": "String - The address of the NFT buyer to filter sales by. Defaults to returning sales involving any buyer.",
              "key": "buyerAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "String - The address of the NFT seller to filter sales by. Defaults to returning sales involving any seller.",
              "key": "sellerAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Enum - Filter by whether the buyer or seller was the taker in the NFT trade. Allowed filter values are \"BUYER\" and \"SELLER\". Defaults to returning both buyer and seller taker trades.",
              "key": "taker",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "Integer - The maximum number of NFT sales to return. Maximum and default values are 1000.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT Sales Endpoints_getNFTSales-v3_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns a list of NFT sales that match the query parameters."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "fromBlock": "foo",
                "toBlock": "foo",
                "order": "asc",
                "marketplace": "seaport",
                "contractAddress": "foo",
                "tokenId": "foo",
                "buyerAddress": "foo",
                "sellerAddress": "foo",
                "taker": "BUYER",
                "limit": 42,
                "pageKey": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nftSales": [
                    {
                      "marketplace": "seaport",
                      "contractAddress": "0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
                      "tokenId": "13749",
                      "quantity": "1",
                      "buyerAddress": "0x78f6c2458b53d0735208992c693bb2b2dafebb52",
                      "sellerAddress": "0x558a18f94cabdea4e47c5965384f457d8e870419",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "11100000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "300000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "600000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 130,
                      "bundleIndex": 0,
                      "transactionHash": "0xecfa1b29c9016bd2556fde637c6b48484eeb14f273af54c49317e3856ab7cb16"
                    },
                    {
                      "marketplace": "looksrare",
                      "contractAddress": "0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258",
                      "tokenId": "75417",
                      "quantity": "1",
                      "buyerAddress": "0xb3aa9923489bc2bfec323bf05346acd4afbc92a0",
                      "sellerAddress": "0x206ccba024c236dced07c35b4e9eb0bade7ef166",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "2222700000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "47800000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "119500000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 197,
                      "bundleIndex": 0,
                      "transactionHash": "0x4c23163e4f855e143e573776bc6129bee370dff6ce760e71553fc93201b292e2"
                    }
                  ],
                  "pageKey": "MTUwMDAwNzgsODcsMA",
                  "validAt": {
                    "blockNumber": 17091500,
                    "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
                    "blockTimestamp": "2023-04-21T01:25:59Z"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nftSales": [
                    {
                      "marketplace": "seaport",
                      "contractAddress": "0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
                      "tokenId": "13749",
                      "quantity": "1",
                      "buyerAddress": "0x78f6c2458b53d0735208992c693bb2b2dafebb52",
                      "sellerAddress": "0x558a18f94cabdea4e47c5965384f457d8e870419",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "11100000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "300000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "600000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 130,
                      "bundleIndex": 0,
                      "transactionHash": "0xecfa1b29c9016bd2556fde637c6b48484eeb14f273af54c49317e3856ab7cb16"
                    },
                    {
                      "marketplace": "looksrare",
                      "contractAddress": "0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258",
                      "tokenId": "75417",
                      "quantity": "1",
                      "buyerAddress": "0xb3aa9923489bc2bfec323bf05346acd4afbc92a0",
                      "sellerAddress": "0x206ccba024c236dced07c35b4e9eb0bade7ef166",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "2222700000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "47800000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "119500000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 197,
                      "bundleIndex": 0,
                      "transactionHash": "0x4c23163e4f855e143e573776bc6129bee370dff6ce760e71553fc93201b292e2"
                    }
                  ],
                  "pageKey": "MTUwMDAwNzgsODcsMA",
                  "validAt": {
                    "blockNumber": 17091500,
                    "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
                    "blockTimestamp": "2023-04-21T01:25:59Z"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "NFT API V2 Methods (Older Version)": {
      "subpackageId": "NFT API V2 Methods (Older Version)",
      "name": "NFT API V2 Methods (Older Version)",
      "endpoints": [
        {
          "auth": false,
          "description": "Gets all NFTs currently owned by a given address.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTs",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getNFTs",
          "name": "getNFTs",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTs"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "Array of contract addresses to filter the responses with. Max limit 45 contracts.",
              "key": "contractAddresses[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "Enum - ordering scheme to use for ordering NFTs in the response. If unspecified, NFTs will be ordered by contract address and token ID.\n  - transferTime: NFTs will be ordered by the time they were transferred into the wallet, with newest NFTs first. NOTE: this ordering is only supported on Ethereum Mainnet and Polygon Mainnet.",
              "key": "orderBy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsGetParametersSchema"
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "excludeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V2ApiKeyGetNfTsGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "includeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V2ApiKeyGetNfTsGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Enum - the confidence level at which to filter spam at.\n\nConfidence Levels:\n  - VERY_HIGH\n  - HIGH\n  - MEDIUM\n  - LOW\n\nThe confidence level set means that any spam that is at that confidence level or higher will be filtered out. For example, if the confidence level is HIGH, contracts that we have HIGH or VERY_HIGH confidence in being spam will be filtered out from the response. \nDefaults to VERY_HIGH for Ethereum Mainnet and MEDIUM for Matic Mainnet.\n\n**Please note that this filter is only available on paid tiers. Upgrade your account [here](https://dashboard.alchemyapi.io/settings/billing/).**",
              "key": "spamConfidenceLevel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNfTsGetParametersSchema"
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of NFTs to be returned per page. Defaults to 100. Max is 100.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getNFTs_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Returns the list of all NFTs owned by the given address and satisfying the given input parameters."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "contractAddresses[]": [
                  "foo"
                ],
                "withMetadata": true,
                "orderBy": "transferTime",
                "excludeFilters[]": [
                  "SPAM"
                ],
                "includeFilters[]": [
                  "SPAM"
                ],
                "spamConfidenceLevel": "VERY_HIGH",
                "tokenUriTimeoutInMs": 42,
                "pageKey": "foo",
                "pageSize": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ownedNfts": [
                    {
                      "contract": {
                        "address": "0x0beed7099af7514ccedf642cfea435731176fb02"
                      },
                      "id": {
                        "tokenId": "28",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "title": "DuskBreaker #28",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "tokenUri": {
                        "raw": "https://duskbreakers.gg/api/breakers/28",
                        "gateway": "https://duskbreakers.gg/api/breakers/28"
                      },
                      "media": {},
                      "metadata": {
                        "image": "https://duskbreakers.gg/breaker_images/28.png",
                        "external_url": "https://duskbreakers.gg",
                        "name": "DuskBreaker #28",
                        "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                        "attributes": [
                          {
                            "value": "Locust Rider Armor (Red)",
                            "trait_type": "Clothes"
                          },
                          {
                            "value": "Big Smile (Purple)",
                            "trait_type": "Mouth"
                          },
                          {
                            "value": "Yellow",
                            "trait_type": "Background"
                          }
                        ]
                      },
                      "timeLastUpdated": "2022-02-16T22:52:54.719Z",
                      "contractMetadata": {
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721"
                      }
                    },
                    {
                      "contract": {
                        "address": "0x97597002980134bea46250aa0510c9b90d87a587"
                      },
                      "id": {
                        "tokenId": "5527",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "title": "Runner #5527",
                      "description": "Chain Runners are Mega City renegades 100% generated on chain.",
                      "tokenUri": {
                        "raw": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041",
                        "gateway": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041"
                      },
                      "media": {},
                      "metadata": {
                        "image": "https://img.chainrunners.xyz/api/v1/tokens/png/5527",
                        "name": "Runner #5527",
                        "description": "Chain Runners are Mega City renegades 100% generated on chain.",
                        "attributes": [
                          {
                            "value": "Purple Green Diag",
                            "trait_type": "Background"
                          },
                          {
                            "value": "Human",
                            "trait_type": "Race"
                          },
                          {
                            "value": "Cig",
                            "trait_type": "Mouth Accessory"
                          }
                        ]
                      },
                      "timeLastUpdated": "2022-02-18T00:42:04.401Z",
                      "contractMetadata": {
                        "name": "Chain Runners",
                        "symbol": "RUN",
                        "totalSupply": "10000",
                        "tokenType": "ERC721"
                      }
                    }
                  ],
                  "totalCount": 6,
                  "blockHash": "0xeb2d26af5b6175344a14091777535a2cb21c681665a734a8285f889981987630"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ownedNfts": [
                    {
                      "contract": {
                        "address": "0x0beed7099af7514ccedf642cfea435731176fb02"
                      },
                      "id": {
                        "tokenId": "28",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "title": "DuskBreaker #28",
                      "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                      "tokenUri": {
                        "raw": "https://duskbreakers.gg/api/breakers/28",
                        "gateway": "https://duskbreakers.gg/api/breakers/28"
                      },
                      "media": {},
                      "metadata": {
                        "image": "https://duskbreakers.gg/breaker_images/28.png",
                        "external_url": "https://duskbreakers.gg",
                        "name": "DuskBreaker #28",
                        "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                        "attributes": [
                          {
                            "value": "Locust Rider Armor (Red)",
                            "trait_type": "Clothes"
                          },
                          {
                            "value": "Big Smile (Purple)",
                            "trait_type": "Mouth"
                          },
                          {
                            "value": "Yellow",
                            "trait_type": "Background"
                          }
                        ]
                      },
                      "timeLastUpdated": "2022-02-16T22:52:54.719Z",
                      "contractMetadata": {
                        "name": "DuskBreakers",
                        "symbol": "DUSK",
                        "totalSupply": "10000",
                        "tokenType": "ERC721"
                      }
                    },
                    {
                      "contract": {
                        "address": "0x97597002980134bea46250aa0510c9b90d87a587"
                      },
                      "id": {
                        "tokenId": "5527",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "title": "Runner #5527",
                      "description": "Chain Runners are Mega City renegades 100% generated on chain.",
                      "tokenUri": {
                        "raw": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041",
                        "gateway": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041"
                      },
                      "media": {},
                      "metadata": {
                        "image": "https://img.chainrunners.xyz/api/v1/tokens/png/5527",
                        "name": "Runner #5527",
                        "description": "Chain Runners are Mega City renegades 100% generated on chain.",
                        "attributes": [
                          {
                            "value": "Purple Green Diag",
                            "trait_type": "Background"
                          },
                          {
                            "value": "Human",
                            "trait_type": "Race"
                          },
                          {
                            "value": "Cig",
                            "trait_type": "Mouth Accessory"
                          }
                        ]
                      },
                      "timeLastUpdated": "2022-02-18T00:42:04.401Z",
                      "contractMetadata": {
                        "name": "Chain Runners",
                        "symbol": "RUN",
                        "totalSupply": "10000",
                        "tokenType": "ERC721"
                      }
                    }
                  ],
                  "totalCount": 6,
                  "blockHash": "0xeb2d26af5b6175344a14091777535a2cb21c681665a734a8285f889981987630"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets the metadata associated with a given NFT.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTMetadata",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getNFTMetadata",
          "name": "getNFTMetadata",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            },
            {
              "description": "String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.",
              "key": "tokenType",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Defaults to false for faster response times.  If true will refresh metadata for given token. If false will check the cache and use it or refresh if cache doesn't exist.",
              "key": "refreshCache",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getNFTMetadata_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo",
                "tokenType": "foo",
                "tokenUriTimeoutInMs": 42,
                "refreshCache": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contract": {
                    "address": "foo"
                  },
                  "id": {
                    "tokenId": "foo",
                    "tokenMetadata": {
                      "tokenType": "ERC721"
                    }
                  },
                  "balance": "foo",
                  "title": "foo",
                  "description": "foo",
                  "tokenUri": {
                    "raw": "foo",
                    "gateway": "foo"
                  },
                  "media": {
                    "raw": "foo",
                    "gateway": "foo",
                    "thumbnail": "foo",
                    "format": "foo",
                    "bytes": 42
                  },
                  "metadata": {
                    "image": "foo",
                    "external_url": "foo",
                    "background_color": "foo",
                    "name": "foo",
                    "description": "foo",
                    "attributes": [
                      {
                        "value": "foo",
                        "trait_type": "foo"
                      }
                    ],
                    "media": [
                      {
                        "raw": "foo",
                        "gateway": "foo",
                        "thumbnail": "foo",
                        "format": "foo",
                        "bytes": 42
                      }
                    ]
                  },
                  "timeLastUpdated": "foo",
                  "error": "foo",
                  "contractMetadata": {
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "opensea": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  },
                  "spamInfo": {
                    "isSpam": "foo",
                    "spamClassifications": [
                      "foo"
                    ]
                  },
                  "acquiredAt": {
                    "blockTimestamp": "foo",
                    "blockNumber": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contract": {
                    "address": "foo"
                  },
                  "id": {
                    "tokenId": "foo",
                    "tokenMetadata": {
                      "tokenType": "ERC721"
                    }
                  },
                  "balance": "foo",
                  "title": "foo",
                  "description": "foo",
                  "tokenUri": {
                    "raw": "foo",
                    "gateway": "foo"
                  },
                  "media": {
                    "raw": "foo",
                    "gateway": "foo",
                    "thumbnail": "foo",
                    "format": "foo",
                    "bytes": 42
                  },
                  "metadata": {
                    "image": "foo",
                    "external_url": "foo",
                    "background_color": "foo",
                    "name": "foo",
                    "description": "foo",
                    "attributes": [
                      {
                        "value": "foo",
                        "trait_type": "foo"
                      }
                    ],
                    "media": [
                      {
                        "raw": "foo",
                        "gateway": "foo",
                        "thumbnail": "foo",
                        "format": "foo",
                        "bytes": 42
                      }
                    ]
                  },
                  "timeLastUpdated": "foo",
                  "error": "foo",
                  "contractMetadata": {
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "opensea": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  },
                  "spamInfo": {
                    "isSpam": "foo",
                    "spamClassifications": [
                      "foo"
                    ]
                  },
                  "acquiredAt": {
                    "blockTimestamp": "foo",
                    "blockNumber": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets the metadata associated with up to 100 given NFT contracts.",
          "method": "POST",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTMetadataBatch",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getNFTMetadataBatch",
          "name": "getNFTMetadataBatch",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTMetadataBatch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "List of token objects to batch request NFT metadata for. Maximum 100.",
                    "key": "tokens",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "V2ApiKeyGetNftMetadataBatchPostRequestBodySchemaTokensItems"
                        }
                      }
                    }
                  },
                  {
                    "key": "tokenUriTimeoutInMs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "key": "refreshCache",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftMetadataBatchPostResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "contract": {
                      "address": "foo"
                    },
                    "id": {
                      "tokenId": "foo",
                      "tokenMetadata": {
                        "tokenType": "ERC721"
                      }
                    },
                    "balance": "foo",
                    "title": "foo",
                    "description": "foo",
                    "tokenUri": {
                      "raw": "foo",
                      "gateway": "foo"
                    },
                    "media": {
                      "raw": "foo",
                      "gateway": "foo",
                      "thumbnail": "foo",
                      "format": "foo",
                      "bytes": 42
                    },
                    "metadata": {
                      "image": "foo",
                      "external_url": "foo",
                      "background_color": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": [
                        {
                          "value": "foo",
                          "trait_type": "foo"
                        }
                      ],
                      "media": [
                        {
                          "raw": "foo",
                          "gateway": "foo",
                          "thumbnail": "foo",
                          "format": "foo",
                          "bytes": 42
                        }
                      ]
                    },
                    "timeLastUpdated": "foo",
                    "error": "foo",
                    "contractMetadata": {
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    },
                    "spamInfo": {
                      "isSpam": "foo",
                      "spamClassifications": [
                        "foo"
                      ]
                    },
                    "acquiredAt": {
                      "blockTimestamp": "foo",
                      "blockNumber": "foo"
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "contract": {
                      "address": "foo"
                    },
                    "id": {
                      "tokenId": "foo",
                      "tokenMetadata": {
                        "tokenType": "ERC721"
                      }
                    },
                    "balance": "foo",
                    "title": "foo",
                    "description": "foo",
                    "tokenUri": {
                      "raw": "foo",
                      "gateway": "foo"
                    },
                    "media": {
                      "raw": "foo",
                      "gateway": "foo",
                      "thumbnail": "foo",
                      "format": "foo",
                      "bytes": 42
                    },
                    "metadata": {
                      "image": "foo",
                      "external_url": "foo",
                      "background_color": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": [
                        {
                          "value": "foo",
                          "trait_type": "foo"
                        }
                      ],
                      "media": [
                        {
                          "raw": "foo",
                          "gateway": "foo",
                          "thumbnail": "foo",
                          "format": "foo",
                          "bytes": 42
                        }
                      ]
                    },
                    "timeLastUpdated": "foo",
                    "error": "foo",
                    "contractMetadata": {
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    },
                    "spamInfo": {
                      "isSpam": "foo",
                      "spamClassifications": [
                        "foo"
                      ]
                    },
                    "acquiredAt": {
                      "blockTimestamp": "foo",
                      "blockNumber": "foo"
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Queries NFT high-level collection/contract level information.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractMetadata",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getContractMetadata",
          "name": "getContractMetadata",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getContractMetadata_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "address": "foo",
                  "contractMetadata": {
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "opensea": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "address": "foo",
                  "contractMetadata": {
                    "name": "foo",
                    "symbol": "foo",
                    "totalSupply": "foo",
                    "tokenType": "ERC721",
                    "contractDeployer": "foo",
                    "deployedBlockNumber": 42,
                    "opensea": {
                      "floorPrice": 42,
                      "collectionName": "foo",
                      "safelistRequestStatus": "foo",
                      "imageUrl": "foo",
                      "description": "foo",
                      "externalUrl": "foo",
                      "twitterUsername": "foo",
                      "discordUrl": "foo",
                      "lastIngestedAt": "foo"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets the metadata associated with the given list of contract addresses",
          "method": "POST",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractMetadataBatch",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getContractMetadataBatch",
          "name": "getContractMetadataBatch",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractMetadataBatch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "list of contract addresses to batch metadata requests for",
                    "key": "contractAddresses",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractMetadataBatchPostResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "contractMetadata": {
                      "address": "foo",
                      "totalBalance": 42,
                      "numDistinctTokensOwned": 42,
                      "isSpam": true,
                      "tokenId": "foo",
                      "name": "foo",
                      "title": "foo",
                      "symbol": "foo",
                      "tokenType": "foo",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "media": [
                        {
                          "raw": "foo",
                          "gateway": "foo",
                          "thumbnail": "foo",
                          "format": "foo",
                          "bytes": 42
                        }
                      ],
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "contractMetadata": {
                      "address": "foo",
                      "totalBalance": 42,
                      "numDistinctTokensOwned": 42,
                      "isSpam": true,
                      "tokenId": "foo",
                      "name": "foo",
                      "title": "foo",
                      "symbol": "foo",
                      "tokenType": "foo",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "media": [
                        {
                          "raw": "foo",
                          "gateway": "foo",
                          "thumbnail": "foo",
                          "format": "foo",
                          "bytes": 42
                        }
                      ],
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets all NFTs for a given NFT contract.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTsForCollection",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getNFTsForCollection",
          "name": "getNFTsForCollection",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTsForCollection"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                  }
                }
              }
            },
            {
              "description": "String - OpenSea slug for the NFT collection.",
              "key": "collectionSlug",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "boredapeyachtclub"
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "String - A tokenID offset used for pagination. Can be a hex string, or a decimal. Users can specify the offset themselves to start from a custom offset, or to fetch multiple token ranges in parallel.",
              "key": "startToken",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Integer - Sets the total number of NFTs returned in the response. Defaults to 100.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
              "key": "tokenUriTimeoutInMs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getNFTsForCollection_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "collectionSlug": "foo",
                "withMetadata": true,
                "startToken": "foo",
                "limit": 42,
                "tokenUriTimeoutInMs": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "id": {
                        "tokenId": "foo",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "tokenUri": {
                        "raw": "foo",
                        "gateway": "foo"
                      },
                      "metadata": {
                        "image": "foo",
                        "external_url": "foo",
                        "background_color": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ],
                        "media": [
                          {
                            "raw": "foo",
                            "gateway": "foo",
                            "thumbnail": "foo",
                            "format": "foo",
                            "bytes": 42
                          }
                        ]
                      },
                      "timeLastUpdated": "foo",
                      "contractMetadata": {
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "opensea": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        }
                      }
                    }
                  ],
                  "nextToken": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nfts": [
                    {
                      "id": {
                        "tokenId": "foo",
                        "tokenMetadata": {
                          "tokenType": "ERC721"
                        }
                      },
                      "tokenUri": {
                        "raw": "foo",
                        "gateway": "foo"
                      },
                      "metadata": {
                        "image": "foo",
                        "external_url": "foo",
                        "background_color": "foo",
                        "name": "foo",
                        "description": "foo",
                        "attributes": [
                          {
                            "value": "foo",
                            "trait_type": "foo"
                          }
                        ],
                        "media": [
                          {
                            "raw": "foo",
                            "gateway": "foo",
                            "thumbnail": "foo",
                            "format": "foo",
                            "bytes": 42
                          }
                        ]
                      },
                      "timeLastUpdated": "foo",
                      "contractMetadata": {
                        "name": "foo",
                        "symbol": "foo",
                        "totalSupply": "foo",
                        "tokenType": "ERC721",
                        "contractDeployer": "foo",
                        "deployedBlockNumber": 42,
                        "opensea": {
                          "floorPrice": 42,
                          "collectionName": "foo",
                          "safelistRequestStatus": "foo",
                          "imageUrl": "foo",
                          "description": "foo",
                          "externalUrl": "foo",
                          "twitterUsername": "foo",
                          "discordUrl": "foo",
                          "lastIngestedAt": "foo"
                        }
                      }
                    }
                  ],
                  "nextToken": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get the owner(s) for a token.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getOwnersForToken",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getOwnersForToken",
          "name": "getOwnersForToken",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getOwnersForToken"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of owners to be returned per page.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getOwnersForToken_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo",
                "pageKey": "foo",
                "pageSize": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "owners": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "owners": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets all owners for a given NFT contract.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getOwnersForCollection",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getOwnersForCollection",
          "name": "getOwnersForCollection",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getOwnersForCollection"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "Boolean - If set to `true` the query will include the token balances per token id for each owner. `false` by default.",
              "key": "withTokenBalances",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "String - used for collections with >50,000 owners. `pageKey` field can be passed back as request parameter to get the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "withTokenBalances": true,
                "pageKey": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  "foo"
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  "foo"
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns a list of all spam contracts marked by Alchemy.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getSpamContracts",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getSpamContracts",
          "name": "getSpamContracts",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getSpamContracts"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getSpamContracts_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contractAddresses": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contractAddresses": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns whether a contract is marked as spam or not by Alchemy.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isSpamContract",
          "originalEndpointId": "NFT API V2 Methods (Older Version).isSpamContract",
          "name": "isSpamContract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isSpamContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": true
              },
              "responseBodyV3": {
                "type": "json",
                "value": true
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isAirdrop",
          "originalEndpointId": "NFT API V2 Methods (Older Version).isAirdrop",
          "name": "isAirdrop",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isAirdrop"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": true
              },
              "responseBodyV3": {
                "type": "json",
                "value": true
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Marks all cached tokens for the particular contract as stale. So the next time the endpoint is queried it fetches live data instead of fetching from cache.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "invalidateContract",
          "originalEndpointId": "NFT API V2 Methods (Older Version).invalidateContract",
          "name": "invalidateContract",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/invalidateContract"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_invalidateContract_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "success": "foo",
                  "numTokensInvalidated": 42
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "success": "foo",
                  "numTokensInvalidated": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns the floor prices of a NFT collection by marketplace.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getFloorPrice",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getFloorPrice",
          "name": "getFloorPrice",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getFloorPrice"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getFloorPrice_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nftMarketplace": {
                    "floorPrice": 42,
                    "priceCurrency": "ETH",
                    "collectionUrl": "foo",
                    "retrievedAt": "foo",
                    "error": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nftMarketplace": {
                    "floorPrice": 42,
                    "priceCurrency": "ETH",
                    "collectionUrl": "foo",
                    "retrievedAt": "foo",
                    "error": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Computes the rarity of each attribute of an NFT.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "computeRarity",
          "originalEndpointId": "NFT API V2 Methods (Older Version).computeRarity",
          "name": "computeRarity",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/computeRarity"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            },
            {
              "description": "String - The ID of the token. Can be in hex or decimal format.",
              "key": "tokenId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "44"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_computeRarity_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo",
                "tokenId": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rarities": [
                    {
                      "trait_type": "foo",
                      "value": "foo",
                      "prevalence": 42
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rarities": [
                    {
                      "trait_type": "foo",
                      "value": "foo",
                      "prevalence": 42
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "searchContractMetadata",
          "originalEndpointId": "NFT API V2 Methods (Older Version).searchContractMetadata",
          "name": "searchContractMetadata",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/searchContractMetadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - The search string that you want to search for in contract metadata",
              "key": "query",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "bored"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeySearchContractMetadataGetResponsesSchemaItems"
                }
              }
            },
            "statusCode": 200,
            "description": "Returns the list of NFT contracts where the metadata has one or more keywords from the search string."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "query": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "contractMetadata": {
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "address": "foo",
                    "contractMetadata": {
                      "name": "foo",
                      "symbol": "foo",
                      "totalSupply": "foo",
                      "tokenType": "ERC721",
                      "contractDeployer": "foo",
                      "deployedBlockNumber": 42,
                      "opensea": {
                        "floorPrice": 42,
                        "collectionName": "foo",
                        "safelistRequestStatus": "foo",
                        "imageUrl": "foo",
                        "description": "foo",
                        "externalUrl": "foo",
                        "twitterUsername": "foo",
                        "discordUrl": "foo",
                        "lastIngestedAt": "foo"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Generate a summary of attribute prevalence for an NFT collection.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "summarizeNFTAttributes",
          "originalEndpointId": "NFT API V2 Methods (Older Version).summarizeNFTAttributes",
          "name": "summarizeNFTAttributes",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/summarizeNFTAttributes"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_summarizeNFTAttributes_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "totalSupply": "foo",
                  "summary": {},
                  "contractAddress": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "totalSupply": "foo",
                  "summary": {},
                  "contractAddress": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Checks whether a wallet holds a NFT in a given collection",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "isHolderOfCollection",
          "originalEndpointId": "NFT API V2 Methods (Older Version).isHolderOfCollection",
          "name": "isHolderOfCollection",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/isHolderOfCollection"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "String - Contract address for the NFT contract (ERC721 and ERC1155 supported).",
              "key": "contractAddress",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_isHolderOfCollection_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "contractAddress": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "isHolderOfCollection": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "isHolderOfCollection": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets NFT sales that have happened through on-chain marketplaces",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getNFTSales",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getNFTSales",
          "name": "getNFTSales",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getNFTSales"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and \"latest\". Defaults to \"0\".",
              "key": "fromBlock",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0"
                  }
                }
              }
            },
            {
              "description": "String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and \"latest\". Defaults to \"latest\".",
              "key": "toBlock",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "latest"
                  }
                }
              }
            },
            {
              "description": "Enum - Whether to return the results ascending from startBlock or descending from startBlock. Defaults to descending (false).",
              "key": "order",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "Enum - The name of the NFT marketplace to filter sales by. The endpoint currently supports \"seaport\", \"wyvern\", \"looksrare\", \"x2y2\", \"blur\", and \"cryptopunks\". Defaults to returning sales from all supported marketplaces.",
              "key": "marketplace",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "String - The contract address of a NFT collection to filter sales by. Defaults to returning all NFT contracts.",
              "key": "contractAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                  }
                }
              }
            },
            {
              "description": "String - The token ID of an NFT within the collection specified by contractAddress to filter sales by. Defaults to returning all token IDs.",
              "key": "tokenId",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "44"
                  }
                }
              }
            },
            {
              "description": "String - The address of the NFT buyer to filter sales by. Defaults to returning sales involving any buyer.",
              "key": "buyerAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "String - The address of the NFT seller to filter sales by. Defaults to returning sales involving any seller.",
              "key": "sellerAddress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Enum - Filter by whether the buyer or seller was the taker in the NFT trade. Allowed filter values are \"BUYER\" and \"SELLER\". Defaults to returning both buyer and seller taker trades.",
              "key": "taker",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetNftSalesGetParametersSchema"
                }
              }
            },
            {
              "description": "Integer - The maximum number of NFT sales to return. Maximum and default values are 1000.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getNFTSales_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "fromBlock": "foo",
                "toBlock": "foo",
                "order": "asc",
                "marketplace": "seaport",
                "contractAddress": "foo",
                "tokenId": "foo",
                "buyerAddress": "foo",
                "sellerAddress": "foo",
                "taker": "BUYER",
                "limit": 42,
                "pageKey": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "nftSales": [
                    {
                      "marketplace": "seaport",
                      "contractAddress": "0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
                      "tokenId": "13749",
                      "quantity": "1",
                      "buyerAddress": "0x78f6c2458b53d0735208992c693bb2b2dafebb52",
                      "sellerAddress": "0x558a18f94cabdea4e47c5965384f457d8e870419",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "11100000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "300000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "600000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 130,
                      "bundleIndex": 0,
                      "transactionHash": "0xecfa1b29c9016bd2556fde637c6b48484eeb14f273af54c49317e3856ab7cb16"
                    },
                    {
                      "marketplace": "looksrare",
                      "contractAddress": "0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258",
                      "tokenId": "75417",
                      "quantity": "1",
                      "buyerAddress": "0xb3aa9923489bc2bfec323bf05346acd4afbc92a0",
                      "sellerAddress": "0x206ccba024c236dced07c35b4e9eb0bade7ef166",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "2222700000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "47800000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "119500000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 197,
                      "bundleIndex": 0,
                      "transactionHash": "0x4c23163e4f855e143e573776bc6129bee370dff6ce760e71553fc93201b292e2"
                    }
                  ],
                  "pageKey": "MTUwMDAwNzgsODcsMA"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "nftSales": [
                    {
                      "marketplace": "seaport",
                      "contractAddress": "0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
                      "tokenId": "13749",
                      "quantity": "1",
                      "buyerAddress": "0x78f6c2458b53d0735208992c693bb2b2dafebb52",
                      "sellerAddress": "0x558a18f94cabdea4e47c5965384f457d8e870419",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "11100000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "300000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "600000000000000000",
                        "symbol": "ETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 130,
                      "bundleIndex": 0,
                      "transactionHash": "0xecfa1b29c9016bd2556fde637c6b48484eeb14f273af54c49317e3856ab7cb16"
                    },
                    {
                      "marketplace": "looksrare",
                      "contractAddress": "0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258",
                      "tokenId": "75417",
                      "quantity": "1",
                      "buyerAddress": "0xb3aa9923489bc2bfec323bf05346acd4afbc92a0",
                      "sellerAddress": "0x206ccba024c236dced07c35b4e9eb0bade7ef166",
                      "taker": "BUYER",
                      "sellerFee": {
                        "amount": "2222700000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "protocolFee": {
                        "amount": "47800000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "royaltyFee": {
                        "amount": "119500000000000000",
                        "symbol": "WETH",
                        "decimals": 18
                      },
                      "blockNumber": 15000002,
                      "logIndex": 197,
                      "bundleIndex": 0,
                      "transactionHash": "0x4c23163e4f855e143e573776bc6129bee370dff6ce760e71553fc93201b292e2"
                    }
                  ],
                  "pageKey": "MTUwMDAwNzgsODcsMA"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Gets all NFT contracts held by an owner address.",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "getContractsForOwner",
          "originalEndpointId": "NFT API V2 Methods (Older Version).getContractsForOwner",
          "name": "getContractsForOwner",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/getContractsForOwner"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - Address for NFT owner (can be in ENS format for Eth Mainnet).",
              "key": "owner",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                }
              }
            },
            {
              "description": "String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
              "key": "pageKey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Number of NFTs to be returned per page. Defaults to 100. Max is 100.",
              "key": "pageSize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.",
              "key": "withMetadata",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "includeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V2ApiKeyGetContractsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:\n  - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. Please note that this filter is currently supported only on Ethereum Mainnet and Matic Mainnet, and is **available exclusively on paid tiers**.\n  - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.\n  - To learn more about spam, you can refer to this: <span class=\"custom-style\"><a href=\"https://www.alchemy.com/overviews/spam-nfts\" target=\"_blank\">Spam NFTs and how to fix them</a></span>",
              "key": "excludeFilters[]",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "V2ApiKeyGetContractsForOwnerGetParametersSchemaItems"
                  }
                }
              }
            },
            {
              "description": "Enum - ordering scheme to use for ordering NFTs in the response. If unspecified, NFTs will be ordered by contract address and token ID.\n  - transferTime: NFTs will be ordered by the time they were transferred into the wallet, with newest NFTs first. NOTE: this ordering is only supported on Ethereum Mainnet and Polygon Mainnet.",
              "key": "orderBy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractsForOwnerGetParametersSchema"
                }
              }
            },
            {
              "description": "Enum - the confidence level at which to filter spam at.\n\nConfidence Levels:\n  - VERY_HIGH\n  - HIGH\n  - MEDIUM\n  - LOW\n\nThe confidence level set means that any spam that is at that confidence level or higher will be filtered out. For example, if the confidence level is HIGH, contracts that we have HIGH or VERY_HIGH confidence in being spam will be filtered out from the response. \nDefaults to VERY_HIGH for Ethereum Mainnet and MEDIUM for Matic Mainnet.\n\n**Please note that this filter is only available on paid tiers. Upgrade your account [here](https://dashboard.alchemyapi.io/settings/billing/).**",
              "key": "spamConfidenceLevel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2ApiKeyGetContractsForOwnerGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "NFT API V2 Methods (Older Version)_getContractsForOwner_Response_200"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "owner": "foo",
                "pageKey": "foo",
                "pageSize": 42,
                "withMetadata": true,
                "includeFilters[]": [
                  "SPAM"
                ],
                "excludeFilters[]": [
                  "SPAM"
                ],
                "orderBy": "transferTime",
                "spamConfidenceLevel": "VERY_HIGH"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contracts": [
                    {
                      "address": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
                      "totalBalance": 912,
                      "numDistinctTokensOwned": 80,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000001"
                    },
                    {
                      "address": "0x0015f391949f25c3211063104ad4afc99210f85c",
                      "totalBalance": 17,
                      "numDistinctTokensOwned": 6,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000002"
                    },
                    {
                      "address": "0x005b92d71a934dbe48e985b6469881cf4b0308fc",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000003"
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contracts": [
                    {
                      "address": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
                      "totalBalance": 912,
                      "numDistinctTokensOwned": 80,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000001"
                    },
                    {
                      "address": "0x0015f391949f25c3211063104ad4afc99210f85c",
                      "totalBalance": 17,
                      "numDistinctTokensOwned": 6,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000002"
                    },
                    {
                      "address": "0x005b92d71a934dbe48e985b6469881cf4b0308fc",
                      "totalBalance": 1,
                      "numDistinctTokensOwned": 1,
                      "isSpam": true,
                      "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000003"
                    }
                  ],
                  "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b",
                  "totalCount": "2120"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Report a particular address to our APIs if you think it is spam",
          "method": "GET",
          "defaultEnvironment": "eth-mainnet",
          "environments": [
            {
              "id": "eth-mainnet",
              "baseUrl": "https://eth-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "eth-sepolia",
              "baseUrl": "https://eth-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "eth-holesky",
              "baseUrl": "https://eth-holesky.g.alchemy.com/nft"
            },
            {
              "id": "avax-mainnet",
              "baseUrl": "https://avax-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "avax-fuji",
              "baseUrl": "https://avax-fuji.g.alchemy.com/nft"
            },
            {
              "id": "zksync-mainnet",
              "baseUrl": "https://zksync-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "opt-mainnet",
              "baseUrl": "https://opt-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-mainnet",
              "baseUrl": "https://polygon-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "polygon-amoy",
              "baseUrl": "https://polygon-amoy.g.alchemy.com/nft"
            },
            {
              "id": "arb-mainnet",
              "baseUrl": "https://arb-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "arb-sepolia",
              "baseUrl": "https://arb-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "fantom-mainnet",
              "baseUrl": "https://fantom-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "fantom-testnet",
              "baseUrl": "https://fantom-testnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-mainnet",
              "baseUrl": "https://blast-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "blast-sepolia",
              "baseUrl": "https://blast-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "base-mainnet",
              "baseUrl": "https://base-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "base-sepolia",
              "baseUrl": "https://base-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "soneium-mainnet",
              "baseUrl": "https://soneium-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "soneium-minato",
              "baseUrl": "https://soneium-minato.g.alchemy.com/nft"
            },
            {
              "id": "scroll-mainnet",
              "baseUrl": "https://scroll-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "scroll-sepolia",
              "baseUrl": "https://scroll-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "shape-mainnet",
              "baseUrl": "https://shape-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "shape-sepolia",
              "baseUrl": "https://shape-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "lens-sepolia",
              "baseUrl": "https://lens-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "starknet-mainnet",
              "baseUrl": "https://starknet-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "starknet-sepolia",
              "baseUrl": "https://starknet-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-mainnet",
              "baseUrl": "https://rootstock-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "rootstock-testnet",
              "baseUrl": "https://rootstock-testnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-mainnet",
              "baseUrl": "https://linea-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "linea-sepolia",
              "baseUrl": "https://linea-sepolia.g.alchemy.com/nft"
            },
            {
              "id": "settlus-septestnet",
              "baseUrl": "https://settlus-septestnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-mainnet",
              "baseUrl": "https://abstract-mainnet.g.alchemy.com/nft"
            },
            {
              "id": "abstract-testnet",
              "baseUrl": "https://abstract-testnet.g.alchemy.com/nft"
            },
            {
              "id": "apechain-mainnet",
              "baseUrl": "https://apechain-mainnet.g.alchemy.com/nft"
            }
          ],
          "id": "reportSpam",
          "originalEndpointId": "NFT API V2 Methods (Older Version).reportSpam",
          "name": "reportSpam",
          "path": {
            "pathParameters": [
              {
                "key": "apiKey",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "docs-demo"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/"
              },
              {
                "type": "pathParameter",
                "value": "apiKey"
              },
              {
                "type": "literal",
                "value": "/reportSpam"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String - any valid blockchain address for NFT collections, contracts, mints, etc.",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/",
              "pathParameters": {
                "apiKey": "foo"
              },
              "queryParameters": {
                "address": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": "foo"
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "rawv3",
      "id",
      "idV3",
      "tokenUri",
      "metadata",
      "ownedContract",
      "ownedContractv3",
      "ownedCollectionv3",
      "ownedCollectionContract",
      "media",
      "ownedNFT",
      "ownedNFTv3",
      "contractMetadata",
      "contractMetadatav3",
      "collectionMetadatav3",
      "contractv3"
    ],
    "subpackages": [
      "NFT Ownership Endpoints",
      "NFT Metadata Endpoints",
      "NFT Spam Endpoints",
      "NFT Sales Endpoints",
      "NFT API V2 Methods (Older Version)"
    ]
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}