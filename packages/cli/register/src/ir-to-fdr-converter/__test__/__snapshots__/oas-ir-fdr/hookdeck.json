{
  "types": {
    "OrderByDirection0": {
      "name": "OrderByDirection0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          }
        ]
      }
    },
    "OrderByDirection1": {
      "name": "OrderByDirection1",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "desc"
          }
        ]
      }
    },
    "OrderByDirection2": {
      "name": "OrderByDirection2",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ASC"
          }
        ]
      }
    },
    "OrderByDirection3": {
      "name": "OrderByDirection3",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "DESC"
          }
        ]
      }
    },
    "OrderByDirection": {
      "name": "OrderByDirection",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "OrderByDirection0",
            "type": {
              "type": "id",
              "value": "OrderByDirection0"
            }
          },
          {
            "typeName": "OrderByDirection1",
            "type": {
              "type": "id",
              "value": "OrderByDirection1"
            }
          },
          {
            "typeName": "OrderByDirection2",
            "type": {
              "type": "id",
              "value": "OrderByDirection2"
            }
          },
          {
            "typeName": "OrderByDirection3",
            "type": {
              "type": "id",
              "value": "OrderByDirection3"
            }
          }
        ]
      }
    },
    "SeekPaginationOrderBy": {
      "name": "SeekPaginationOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "SeekPaginationDir1": {
      "name": "SeekPaginationDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "OrderByDirection"
          }
        }
      }
    },
    "SeekPaginationDir": {
      "name": "SeekPaginationDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "OrderByDirection",
            "type": {
              "type": "id",
              "value": "OrderByDirection"
            }
          },
          {
            "typeName": "SeekPaginationDir1",
            "type": {
              "type": "id",
              "value": "SeekPaginationDir1"
            }
          }
        ]
      }
    },
    "SeekPagination": {
      "name": "SeekPagination",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "order_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPaginationOrderBy"
              }
            }
          },
          {
            "key": "dir",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPaginationDir"
              }
            }
          },
          {
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "prev",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssueType": {
      "description": "Issue type",
      "name": "IssueType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          },
          {
            "value": "transformation"
          },
          {
            "value": "backpressure"
          }
        ]
      }
    },
    "IssueTriggerStrategy": {
      "description": "The strategy uses to open the issue",
      "name": "IssueTriggerStrategy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "first_attempt"
          },
          {
            "value": "final_attempt"
          }
        ]
      }
    },
    "IssueTriggerDeliveryConfigsConnections": {
      "description": "A pattern to match on the connection name or array of connection IDs. Use `*` as wildcard.",
      "name": "IssueTriggerDeliveryConfigsConnections",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggerDeliveryConfigs": {
      "description": "Configurations for a 'delivery' issue trigger",
      "name": "IssueTriggerDeliveryConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "strategy",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerStrategy"
            }
          },
          {
            "description": "A pattern to match on the connection name or array of connection IDs. Use `*` as wildcard.",
            "key": "connections",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerDeliveryConfigsConnections"
            }
          }
        ]
      }
    },
    "TransformationExecutionLogLevel": {
      "description": "The minimum log level to open the issue on",
      "name": "TransformationExecutionLogLevel",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "debug"
          },
          {
            "value": "info"
          },
          {
            "value": "warn"
          },
          {
            "value": "error"
          },
          {
            "value": "fatal"
          }
        ]
      }
    },
    "IssueTriggerTransformationConfigsTransformations": {
      "description": "A pattern to match on the transformation name or array of transformation IDs. Use `*` as wildcard.",
      "name": "IssueTriggerTransformationConfigsTransformations",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggerTransformationConfigs": {
      "description": "Configurations for a 'Transformation' issue trigger",
      "name": "IssueTriggerTransformationConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "log_level",
            "valueType": {
              "type": "id",
              "value": "TransformationExecutionLogLevel"
            }
          },
          {
            "description": "A pattern to match on the transformation name or array of transformation IDs. Use `*` as wildcard.",
            "key": "transformations",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerTransformationConfigsTransformations"
            }
          }
        ]
      }
    },
    "IssueTriggerBackpressureDelay": {
      "description": "The minimum delay (backpressure) to open the issue for min of 1 minute (60000) and max of 1 day (86400000)",
      "name": "IssueTriggerBackpressureDelay",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer",
            "minimum": 60000,
            "maximum": 86400000
          }
        }
      }
    },
    "IssueTriggerBackpressureConfigsDestinations": {
      "description": "A pattern to match on the destination name or array of destination IDs. Use `*` as wildcard.",
      "name": "IssueTriggerBackpressureConfigsDestinations",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggerBackpressureConfigs": {
      "description": "Configurations for a 'Backpressure' issue trigger",
      "name": "IssueTriggerBackpressureConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "delay",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerBackpressureDelay"
            }
          },
          {
            "description": "A pattern to match on the destination name or array of destination IDs. Use `*` as wildcard.",
            "key": "destinations",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerBackpressureConfigsDestinations"
            }
          }
        ]
      }
    },
    "IssueTriggerReference": {
      "description": "Configuration object for the specific issue type selected",
      "name": "IssueTriggerReference",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggerDeliveryConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerDeliveryConfigs"
            }
          },
          {
            "typeName": "IssueTriggerTransformationConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerTransformationConfigs"
            }
          },
          {
            "typeName": "IssueTriggerBackpressureConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerBackpressureConfigs"
            }
          }
        ]
      }
    },
    "IssueTriggerSlackChannel": {
      "description": "Slack channel for an issue trigger",
      "name": "IssueTriggerSlackChannel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name",
            "key": "channel_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "IssueTriggerIntegrationChannel": {
      "description": "Integration channel for an issue trigger",
      "name": "IssueTriggerIntegrationChannel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IssueTriggerEmailChannel": {
      "description": "Email channel for an issue trigger",
      "name": "IssueTriggerEmailChannel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IssueTriggerChannels": {
      "description": "Notification channels object for the specific channel type",
      "name": "IssueTriggerChannels",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "slack",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssueTriggerSlackChannel"
              }
            }
          },
          {
            "key": "opsgenie",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssueTriggerIntegrationChannel"
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssueTriggerEmailChannel"
              }
            }
          }
        ]
      }
    },
    "IssueTrigger": {
      "name": "IssueTrigger",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the issue trigger",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional unique name to use as reference when using the API",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "IssueType"
            }
          },
          {
            "key": "configs",
            "valueType": {
              "type": "id",
              "value": "IssueTriggerReference"
            }
          },
          {
            "key": "channels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssueTriggerChannels"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue trigger was disabled",
            "key": "disabled_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue trigger was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue trigger was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue trigger was deleted",
            "key": "deleted_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggerPaginatedResult": {
      "name": "IssueTriggerPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IssueTrigger"
                }
              }
            }
          }
        ]
      }
    },
    "ApiErrorResponseData": {
      "name": "ApiErrorResponseData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "APIErrorResponse": {
      "description": "Error response model",
      "name": "APIErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Error code",
            "key": "code",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status code",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "Error description",
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "ApiErrorResponseData"
                }
              }
            }
          }
        ]
      }
    },
    "DeletedIssueTriggerResponse": {
      "name": "DeletedIssueTriggerResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "AttemptTrigger": {
      "description": "How the attempt was triggered",
      "name": "AttemptTrigger",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INITIAL"
          },
          {
            "value": "MANUAL"
          },
          {
            "value": "BULK_RETRY"
          },
          {
            "value": "UNPAUSE"
          },
          {
            "value": "AUTOMATIC"
          }
        ]
      }
    },
    "AttemptErrorCodes": {
      "description": "Attempt could not complete because of an error",
      "name": "AttemptErrorCodes",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TIMEOUT"
          },
          {
            "value": "NOT_FOUND"
          },
          {
            "value": "CONNECTION_REFUSED"
          },
          {
            "value": "CONNECTION_RESET"
          },
          {
            "value": "MISSING_URL"
          },
          {
            "value": "CLI"
          },
          {
            "value": "CLI_UNAVAILABLE"
          },
          {
            "value": "SELF_SIGNED_CERT"
          },
          {
            "value": "ERR_TLS_CERT_ALTNAME_INVALID"
          },
          {
            "value": "SSL_ERROR_CA_UNKNOWN"
          },
          {
            "value": "TTL_EXPIRED"
          },
          {
            "value": "DATA_ARCHIVED"
          },
          {
            "value": "SSL_CERT_EXPIRED"
          },
          {
            "value": "BULK_RETRY_CANCELLED"
          },
          {
            "value": "DNS_LOOKUP_FAILED"
          },
          {
            "value": "HOST_UNREACHABLE"
          },
          {
            "value": "PROTOCOL_ERROR"
          },
          {
            "value": "SOCKET_CLOSED"
          },
          {
            "value": "UNKNOWN"
          }
        ]
      }
    },
    "AttemptStatus": {
      "description": "Attempt status",
      "name": "AttemptStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "QUEUED"
          },
          {
            "value": "FAILED"
          },
          {
            "value": "SUCCESSFUL"
          },
          {
            "value": "HOLD"
          }
        ]
      }
    },
    "AttemptState": {
      "name": "AttemptState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "DELIVERING"
          },
          {
            "value": "QUEUED"
          },
          {
            "value": "PENDING"
          },
          {
            "value": "COMPLETED"
          },
          {
            "value": "HOLD"
          }
        ]
      }
    },
    "EventAttemptBody": {
      "description": "Response body from the destination",
      "name": "EventAttemptBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "EventAttempt": {
      "name": "EventAttempt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attempt ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Team ID",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Event ID",
            "key": "event_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Attempt's HTTP response code",
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Sequential number of attempts (up to and including this one) made for the associated event",
            "key": "attempt_number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "trigger",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttemptTrigger"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttemptErrorCodes"
              }
            }
          },
          {
            "description": "Response body from the destination",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "EventAttemptBody"
                }
              }
            }
          },
          {
            "description": "URL of the destination where delivery was attempted",
            "key": "requested_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ID of associated bulk retry",
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "AttemptStatus"
            }
          },
          {
            "description": "Date the attempt was successful",
            "key": "successful_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the attempt was delivered",
            "key": "delivered_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the destination responded to this attempt",
            "key": "responded_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Time elapsed between attempt initiation and final delivery (in ms)",
            "key": "delivery_latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Time elapsed between attempt initiation and a response from the destination (in ms)",
            "key": "response_latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Date the attempt was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the attempt was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttemptState"
              }
            }
          },
          {
            "description": "Date the attempt was archived",
            "key": "archived_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "destination_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "EventAttemptPaginatedResult": {
      "name": "EventAttemptPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "EventAttempt"
                }
              }
            }
          }
        ]
      }
    },
    "ShortEventDataParsedQuery": {
      "name": "ShortEventDataParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "ShortEventDataHeaders": {
      "name": "ShortEventDataHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "ShortEventDataBody": {
      "name": "ShortEventDataBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "ShortEventData": {
      "name": "ShortEventData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "path",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "ShortEventDataParsedQuery"
                }
              }
            }
          },
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "ShortEventDataHeaders"
                }
              }
            }
          },
          {
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "ShortEventDataBody"
                }
              }
            }
          },
          {
            "key": "is_large_payload",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Bookmark": {
      "name": "Bookmark",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the bookmark",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the associated connection",
            "key": "webhook_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the bookmarked event data",
            "key": "event_data_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Descriptive name of the bookmark",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Alternate alias for the bookmark",
            "key": "alias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ShortEventData"
              }
            }
          },
          {
            "description": "Date the bookmark was last manually triggered",
            "key": "last_used_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the bookmark was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the bookmark was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "BookmarkPaginatedResult": {
      "name": "BookmarkPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Bookmark"
                }
              }
            }
          }
        ]
      }
    },
    "EventStatus": {
      "name": "EventStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "SCHEDULED"
          },
          {
            "value": "QUEUED"
          },
          {
            "value": "HOLD"
          },
          {
            "value": "SUCCESSFUL"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "EventDataParsedQuery": {
      "name": "EventDataParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventDataHeaders": {
      "name": "EventDataHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventDataBody": {
      "name": "EventDataBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventData": {
      "name": "EventData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "path",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "EventDataParsedQuery"
                }
              }
            }
          },
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "EventDataHeaders"
                }
              }
            }
          },
          {
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "EventDataBody"
                }
              }
            }
          },
          {
            "key": "is_large_payload",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Event": {
      "name": "Event",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the event",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the associated connection",
            "key": "webhook_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the associated source",
            "key": "source_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the associated destination",
            "key": "destination_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the request data",
            "key": "event_data_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the request that created the event",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Number of delivery attempts made",
            "key": "attempts",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "EventData"
                }
              }
            }
          },
          {
            "description": "Date of the most recently attempted retry",
            "key": "last_attempt_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date of the next scheduled retry",
            "key": "next_attempt_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Event status",
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "description": "Date of the latest successful attempt",
            "key": "successful_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "ID of the CLI the event is sent to",
            "key": "cli_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Date the event was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the event was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "created_at_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "last_attempt_at_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "EventArray": {
      "name": "EventArray",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "Event"
          }
        }
      }
    },
    "DeletedBookmarkResponse": {
      "name": "DeletedBookmarkResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Bookmark ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "DestinationRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "DestinationRateLimitPeriod",
      "shape": {
        "type": "enum",
        "default": "second",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "Destination": {
      "description": "Associated [Destination](#destination-object) object",
      "name": "Destination",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the destination",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A unique, human-friendly name for the destination",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "path_forwarding_disabled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "HTTP endpoint of the destination",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "URL"
                  }
                }
              }
            }
          },
          {
            "description": "Path for the CLI destination",
            "key": "cli_path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.",
            "key": "rate_limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "rate_limit_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DestinationRateLimitPeriod"
              }
            }
          },
          {
            "description": "Date the destination was archived",
            "key": "archived_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the destination was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the destination was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "DestinationPaginatedResult": {
      "name": "DestinationPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Destination"
                }
              }
            }
          }
        ]
      }
    },
    "EventPaginatedResult": {
      "name": "EventPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Event"
                }
              }
            }
          }
        ]
      }
    },
    "RawBody": {
      "name": "RawBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "body",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RetriedEvent": {
      "name": "RetriedEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "event",
            "valueType": {
              "type": "id",
              "value": "Event"
            }
          },
          {
            "key": "attempt",
            "valueType": {
              "type": "id",
              "value": "EventAttempt"
            }
          }
        ]
      }
    },
    "BatchOperationQuery": {
      "description": "Query object to filter records",
      "name": "BatchOperationQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "BatchOperation": {
      "name": "BatchOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the bulk retry",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Query object to filter records",
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BatchOperationQuery"
                }
              }
            }
          },
          {
            "description": "Date the bulk retry was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Last time the bulk retry was updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the bulk retry was cancelled",
            "key": "cancelled_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the bulk retry was completed",
            "key": "completed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Number of batches required to complete the bulk retry",
            "key": "estimated_batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Number of estimated events to be retried",
            "key": "estimated_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Number of batches currently processed",
            "key": "processed_batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Number of events that were successfully delivered",
            "key": "completed_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Indicates if the bulk retry is currently in progress",
            "key": "in_progress",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Progression of the batch operations, values 0 - 1",
            "key": "progress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "description": "Number of events that failed to be delivered",
            "key": "failed_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "BatchOperationPaginatedResult": {
      "name": "BatchOperationPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "BatchOperation"
                }
              }
            }
          }
        ]
      }
    },
    "BatchOperationPlan": {
      "name": "BatchOperationPlan",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number of batches required to complete the bulk retry",
            "key": "estimated_batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Number of estimated events to be retried",
            "key": "estimated_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Progression of the batch operations, values 0 - 1",
            "key": "progress",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IntegrationProvider": {
      "description": "The provider name",
      "name": "IntegrationProvider",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "twitter"
          },
          {
            "value": "stripe"
          },
          {
            "value": "recharge"
          },
          {
            "value": "github"
          },
          {
            "value": "shopify"
          },
          {
            "value": "postmark"
          },
          {
            "value": "typeform"
          },
          {
            "value": "hmac"
          },
          {
            "value": "basic_auth"
          },
          {
            "value": "api_key"
          },
          {
            "value": "xero"
          },
          {
            "value": "svix"
          },
          {
            "value": "zoom"
          },
          {
            "value": "akeneo"
          },
          {
            "value": "adyen"
          },
          {
            "value": "gitlab"
          },
          {
            "value": "property-finder"
          },
          {
            "value": "woocommerce"
          },
          {
            "value": "oura"
          },
          {
            "value": "commercelayer"
          },
          {
            "value": "mailgun"
          },
          {
            "value": "pipedrive"
          },
          {
            "value": "sendgrid"
          }
        ]
      }
    },
    "IntegrationFeature": {
      "name": "IntegrationFeature",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VERIFICATION"
          },
          {
            "value": "HANDSHAKE"
          },
          {
            "value": "POLLING"
          }
        ]
      }
    },
    "HMACAlgorithms": {
      "name": "HMACAlgorithms",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "md5"
          },
          {
            "value": "sha1"
          },
          {
            "value": "sha256"
          },
          {
            "value": "sha512"
          }
        ]
      }
    },
    "HmacIntegrationConfigsEncoding": {
      "name": "HmacIntegrationConfigsEncoding",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "base64"
          },
          {
            "value": "hex"
          }
        ]
      }
    },
    "HMACIntegrationConfigs": {
      "name": "HMACIntegrationConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_secret_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "algorithm",
            "valueType": {
              "type": "id",
              "value": "HMACAlgorithms"
            }
          },
          {
            "key": "header_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "encoding",
            "valueType": {
              "type": "id",
              "value": "HmacIntegrationConfigsEncoding"
            }
          }
        ]
      }
    },
    "APIKeyIntegrationConfigs": {
      "name": "APIKeyIntegrationConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "header_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "api_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "HandledHMACConfigs": {
      "name": "HandledHMACConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_secret_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "BasicAuthIntegrationConfigs": {
      "name": "BasicAuthIntegrationConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "password",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ShopifyIntegrationConfigsRateLimitPeriod": {
      "name": "ShopifyIntegrationConfigsRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "minute"
          },
          {
            "value": "second"
          }
        ]
      }
    },
    "ShopifyIntegrationConfigs": {
      "name": "ShopifyIntegrationConfigs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_secret_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "rate_limit_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "ShopifyIntegrationConfigsRateLimitPeriod"
                }
              }
            }
          },
          {
            "key": "rate_limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "key": "api_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "api_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "shop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IntegrationConfigs": {
      "description": "Decrypted Key/Value object of the associated configuration for that provider",
      "name": "IntegrationConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "HMACIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "HMACIntegrationConfigs"
            }
          },
          {
            "typeName": "APIKeyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "APIKeyIntegrationConfigs"
            }
          },
          {
            "typeName": "HandledHMACConfigs",
            "type": {
              "type": "id",
              "value": "HandledHMACConfigs"
            }
          },
          {
            "typeName": "BasicAuthIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "BasicAuthIntegrationConfigs"
            }
          },
          {
            "typeName": "ShopifyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "ShopifyIntegrationConfigs"
            }
          }
        ]
      }
    },
    "Integration": {
      "name": "Integration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the integration",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Label of the integration",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "provider",
            "valueType": {
              "type": "id",
              "value": "IntegrationProvider"
            }
          },
          {
            "description": "List of features to enable (see features list below)",
            "key": "features",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "IntegrationFeature"
              }
            }
          },
          {
            "description": "Decrypted Key/Value object of the associated configuration for that provider",
            "key": "configs",
            "valueType": {
              "type": "id",
              "value": "IntegrationConfigs"
            }
          },
          {
            "description": "List of source IDs the integration is attached to",
            "key": "sources",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Date the integration was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the integration was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "IntegrationPaginatedResult": {
      "name": "IntegrationPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Integration"
                }
              }
            }
          }
        ]
      }
    },
    "AttachedIntegrationToSource": {
      "name": "AttachedIntegrationToSource",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "success",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "DetachedIntegrationFromSource": {
      "name": "DetachedIntegrationFromSource",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "DeletedIntegration": {
      "name": "DeletedIntegration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "IssueStatus": {
      "description": "Issue status",
      "name": "IssueStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "DeliveryIssueAggregationKeys": {
      "description": "Keys used as the aggregation keys a 'delivery' type issue",
      "name": "DeliveryIssueAggregationKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_id",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "response_status",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttemptErrorCodes"
              }
            }
          }
        ]
      }
    },
    "DeliveryIssueReference": {
      "description": "Reference to the event and attempt an issue is being created for.",
      "name": "DeliveryIssueReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "event_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "attempt_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "DeliveryIssueData": {
      "description": "Delivery issue data",
      "name": "DeliveryIssueData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "trigger_event",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Event"
              }
            }
          },
          {
            "key": "trigger_attempt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EventAttempt"
              }
            }
          }
        ]
      }
    },
    "DeliveryIssueWithDataType": {
      "name": "DeliveryIssueWithDataType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          }
        ]
      }
    },
    "DeliveryIssueWithData": {
      "description": "Delivery issue",
      "name": "DeliveryIssueWithData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issue ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "IssueStatus"
            }
          },
          {
            "description": "ISO timestamp for when the issue was last opened",
            "key": "opened_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was first opened",
            "key": "first_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue last occured",
            "key": "last_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ID of the team member who last updated the issue status",
            "key": "last_updated_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was dismissed",
            "key": "dismissed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "auto_resolved_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "merged_with",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueWithDataType"
            }
          },
          {
            "key": "aggregation_keys",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueAggregationKeys"
            }
          },
          {
            "key": "reference",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueReference"
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DeliveryIssueData"
              }
            }
          }
        ]
      }
    },
    "TransformationIssueAggregationKeys": {
      "description": "Keys used as the aggregation keys a 'transformation' type issue",
      "name": "TransformationIssueAggregationKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transformation_id",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "log_level",
            "valueType": {
              "type": "id",
              "value": "TransformationExecutionLogLevel"
            }
          }
        ]
      }
    },
    "TransformationIssueReference": {
      "description": "Reference to the event request transformation an issue is being created for.",
      "name": "TransformationIssueReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transformation_execution_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Deprecated but still found on historical issues",
            "key": "trigger_event_request_transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ConsoleLineType": {
      "name": "ConsoleLineType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "error"
          },
          {
            "value": "log"
          },
          {
            "value": "warn"
          },
          {
            "value": "info"
          },
          {
            "value": "debug"
          }
        ]
      }
    },
    "ConsoleLine": {
      "name": "ConsoleLine",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ConsoleLineType"
            }
          },
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransformationExecution": {
      "name": "TransformationExecution",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "transformed_event_data_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "original_event_data_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "transformation_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "webhook_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "log_level",
            "valueType": {
              "type": "id",
              "value": "TransformationExecutionLogLevel"
            }
          },
          {
            "key": "logs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ConsoleLine"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "original_event_data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ShortEventData"
              }
            }
          },
          {
            "key": "transformed_event_data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ShortEventData"
              }
            }
          },
          {
            "key": "issue_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "TransformationIssueData": {
      "description": "Transformation issue data",
      "name": "TransformationIssueData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transformation_execution",
            "valueType": {
              "type": "id",
              "value": "TransformationExecution"
            }
          },
          {
            "key": "trigger_attempt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EventAttempt"
              }
            }
          }
        ]
      }
    },
    "TransformationIssueWithDataType": {
      "name": "TransformationIssueWithDataType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "transformation"
          }
        ]
      }
    },
    "TransformationIssueWithData": {
      "description": "Transformation issue",
      "name": "TransformationIssueWithData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issue ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "IssueStatus"
            }
          },
          {
            "description": "ISO timestamp for when the issue was last opened",
            "key": "opened_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was first opened",
            "key": "first_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue last occured",
            "key": "last_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ID of the team member who last updated the issue status",
            "key": "last_updated_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was dismissed",
            "key": "dismissed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "auto_resolved_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "merged_with",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueWithDataType"
            }
          },
          {
            "key": "aggregation_keys",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueAggregationKeys"
            }
          },
          {
            "key": "reference",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueReference"
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransformationIssueData"
              }
            }
          }
        ]
      }
    },
    "IssueWithData": {
      "name": "IssueWithData",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "DeliveryIssueWithData",
            "type": {
              "type": "id",
              "value": "DeliveryIssueWithData"
            }
          },
          {
            "typeName": "TransformationIssueWithData",
            "type": {
              "type": "id",
              "value": "TransformationIssueWithData"
            }
          }
        ]
      }
    },
    "IssueWithDataPaginatedResult": {
      "name": "IssueWithDataPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IssueWithData"
                }
              }
            }
          }
        ]
      }
    },
    "IssueCount": {
      "name": "IssueCount",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number of issues",
            "key": "count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "DeliveryIssueType": {
      "name": "DeliveryIssueType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          }
        ]
      }
    },
    "DeliveryIssue": {
      "description": "Delivery issue",
      "name": "DeliveryIssue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issue ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "IssueStatus"
            }
          },
          {
            "description": "ISO timestamp for when the issue was last opened",
            "key": "opened_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was first opened",
            "key": "first_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue last occured",
            "key": "last_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ID of the team member who last updated the issue status",
            "key": "last_updated_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was dismissed",
            "key": "dismissed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "auto_resolved_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "merged_with",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueType"
            }
          },
          {
            "key": "aggregation_keys",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueAggregationKeys"
            }
          },
          {
            "key": "reference",
            "valueType": {
              "type": "id",
              "value": "DeliveryIssueReference"
            }
          }
        ]
      }
    },
    "TransformationIssueType": {
      "name": "TransformationIssueType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "transformation"
          }
        ]
      }
    },
    "TransformationIssue": {
      "description": "Transformation issue",
      "name": "TransformationIssue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issue ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "IssueStatus"
            }
          },
          {
            "description": "ISO timestamp for when the issue was last opened",
            "key": "opened_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was first opened",
            "key": "first_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue last occured",
            "key": "last_seen_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "ID of the team member who last updated the issue status",
            "key": "last_updated_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was dismissed",
            "key": "dismissed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "auto_resolved_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "merged_with",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ISO timestamp for when the issue was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueType"
            }
          },
          {
            "key": "aggregation_keys",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueAggregationKeys"
            }
          },
          {
            "key": "reference",
            "valueType": {
              "type": "id",
              "value": "TransformationIssueReference"
            }
          }
        ]
      }
    },
    "Issue": {
      "description": "Issue",
      "name": "Issue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "DeliveryIssue",
            "type": {
              "type": "id",
              "value": "DeliveryIssue"
            }
          },
          {
            "typeName": "TransformationIssue",
            "type": {
              "type": "id",
              "value": "TransformationIssue"
            }
          }
        ]
      }
    },
    "RequestRejectionCause": {
      "name": "RequestRejectionCause",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "SOURCE_ARCHIVED"
          },
          {
            "value": "NO_WEBHOOK"
          },
          {
            "value": "VERIFICATION_FAILED"
          },
          {
            "value": "UNSUPPORTED_HTTP_METHOD"
          },
          {
            "value": "UNSUPPORTED_CONTENT_TYPE"
          },
          {
            "value": "UNPARSABLE_JSON"
          },
          {
            "value": "PAYLOAD_TOO_LARGE"
          },
          {
            "value": "INGESTION_FATAL"
          },
          {
            "value": "UNKNOWN"
          }
        ]
      }
    },
    "RequestIngestPriority": {
      "description": "The priority attributed to the request when received",
      "name": "RequestIngestPriority",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "NORMAL"
          },
          {
            "value": "LOW"
          }
        ]
      }
    },
    "RequestDataParsedQuery": {
      "name": "RequestDataParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestDataHeaders": {
      "name": "RequestDataHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestDataBody": {
      "name": "RequestDataBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestData": {
      "name": "RequestData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "path",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "RequestDataParsedQuery"
                }
              }
            }
          },
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "RequestDataHeaders"
                }
              }
            }
          },
          {
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "RequestDataBody"
                }
              }
            }
          },
          {
            "key": "is_large_payload",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Request": {
      "name": "Request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the request",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether or not the request was verified when received",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "ID of the request data",
            "key": "original_event_data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Hash of the request data payload used to check for duplicates",
            "key": "duplicate_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Count of duplicate hits found",
            "key": "duplicate_hits",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "rejection_cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "description": "The priority attributed to the request when received",
            "key": "ingest_priority",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "RequestIngestPriority"
                }
              }
            }
          },
          {
            "description": "The time the request was originally received",
            "key": "ingested_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "ingested_at_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ID of the associated source",
            "key": "source_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The count of events created from this request (CLI events not included)",
            "key": "events_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "The count of CLI events created from this request",
            "key": "cli_events_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "ignored_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "RequestData"
                }
              }
            }
          },
          {
            "description": "Date the event was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "\tDate the event was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "RequestPaginatedResult": {
      "name": "RequestPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Request"
                }
              }
            }
          }
        ]
      }
    },
    "RetryRequest": {
      "name": "RetryRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "request",
            "valueType": {
              "type": "id",
              "value": "Request"
            }
          },
          {
            "key": "events",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "Event"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IgnoredEventCause": {
      "name": "IgnoredEventCause",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ARCHIVED"
          },
          {
            "value": "FILTERED"
          },
          {
            "value": "TRANSFORMATION_FAILED"
          },
          {
            "value": "CLI_DISCONNECTED"
          }
        ]
      }
    },
    "FilteredMeta": {
      "name": "FilteredMeta",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "body"
          },
          {
            "value": "headers"
          },
          {
            "value": "path"
          },
          {
            "value": "query"
          }
        ]
      }
    },
    "TransformationFailedMeta": {
      "name": "TransformationFailedMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transformation_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "IgnoredEventMeta": {
      "name": "IgnoredEventMeta",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "FilteredMeta",
            "type": {
              "type": "id",
              "value": "FilteredMeta"
            }
          },
          {
            "typeName": "TransformationFailedMeta",
            "type": {
              "type": "id",
              "value": "TransformationFailedMeta"
            }
          }
        ]
      }
    },
    "IgnoredEvent": {
      "name": "IgnoredEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "webhook_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "cause",
            "valueType": {
              "type": "id",
              "value": "IgnoredEventCause"
            }
          },
          {
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "IgnoredEventMeta"
                }
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "IgnoredEventPaginatedResult": {
      "name": "IgnoredEventPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IgnoredEvent"
                }
              }
            }
          }
        ]
      }
    },
    "RetryStrategy": {
      "description": "Algorithm to use when calculating delay between retries",
      "name": "RetryStrategy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "linear"
          },
          {
            "value": "exponential"
          }
        ]
      }
    },
    "RetryRuleType": {
      "description": "A retry rule must be of type `retry`",
      "name": "RetryRuleType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "retry"
          }
        ]
      }
    },
    "RetryRule": {
      "name": "RetryRule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A retry rule must be of type `retry`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "RetryRuleType"
            }
          },
          {
            "key": "strategy",
            "valueType": {
              "type": "id",
              "value": "RetryStrategy"
            }
          },
          {
            "description": "Time in MS between each retry",
            "key": "interval",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Maximum number of retries to attempt",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "AlertStrategy": {
      "description": "Alert strategy to use",
      "name": "AlertStrategy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "each_attempt"
          },
          {
            "value": "last_attempt"
          }
        ]
      }
    },
    "AlertRuleType": {
      "description": "An alert rule must be of type `alert`",
      "name": "AlertRuleType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "alert"
          }
        ]
      }
    },
    "AlertRule": {
      "name": "AlertRule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An alert rule must be of type `alert`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "AlertRuleType"
            }
          },
          {
            "key": "strategy",
            "valueType": {
              "type": "id",
              "value": "AlertStrategy"
            }
          }
        ]
      }
    },
    "ConnectionFilterProperty": {
      "description": "JSON using our filter syntax to filter on request headers",
      "name": "ConnectionFilterProperty",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "FilterRuleType": {
      "description": "A filter rule must be of type `filter`",
      "name": "FilterRuleType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "filter"
          }
        ]
      }
    },
    "FilterRule": {
      "name": "FilterRule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A filter rule must be of type `filter`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "FilterRuleType"
            }
          },
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionFilterProperty"
              }
            }
          },
          {
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionFilterProperty"
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionFilterProperty"
              }
            }
          },
          {
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionFilterProperty"
              }
            }
          }
        ]
      }
    },
    "TransformReferenceType": {
      "description": "A transformation rule must be of type `transformation`",
      "name": "TransformReferenceType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "transform"
          }
        ]
      }
    },
    "TransformReference": {
      "name": "TransformReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A transformation rule must be of type `transformation`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "TransformReferenceType"
            }
          },
          {
            "description": "ID of the attached transformation object. Optional input, always set once the rule is defined",
            "key": "transformation_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransformFullType": {
      "description": "A transformation rule must be of type `transformation`",
      "name": "TransformFullType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "transform"
          }
        ]
      }
    },
    "TransformFullTransformationEnv": {
      "description": "A key-value object of environment variables to encrypt and expose to your transformation code",
      "name": "TransformFullTransformationEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformFullTransformation": {
      "description": "You can optionally define a new transformation while creating a transform rule",
      "name": "TransformFullTransformation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique name of the transformation",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A string representation of your JavaScript (ES6) code to run",
            "key": "code",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A key-value object of environment variables to encrypt and expose to your transformation code",
            "key": "env",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformFullTransformationEnv"
                }
              }
            }
          }
        ]
      }
    },
    "TransformFull": {
      "name": "TransformFull",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A transformation rule must be of type `transformation`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "TransformFullType"
            }
          },
          {
            "description": "ID of the attached transformation object. Optional input, always set once the rule is defined",
            "key": "transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "You can optionally define a new transformation while creating a transform rule",
            "key": "transformation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransformFullTransformation"
              }
            }
          }
        ]
      }
    },
    "TransformRule": {
      "name": "TransformRule",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformReference",
            "type": {
              "type": "id",
              "value": "TransformReference"
            }
          },
          {
            "typeName": "TransformFull",
            "type": {
              "type": "id",
              "value": "TransformFull"
            }
          }
        ]
      }
    },
    "DelayRuleType": {
      "description": "A delay rule must be of type `delay`",
      "name": "DelayRuleType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delay"
          }
        ]
      }
    },
    "DelayRule": {
      "name": "DelayRule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A delay rule must be of type `delay`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "DelayRuleType"
            }
          },
          {
            "description": "Delay to introduce in MS",
            "key": "delay",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "Rule": {
      "name": "Rule",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RetryRule",
            "type": {
              "type": "id",
              "value": "RetryRule"
            }
          },
          {
            "typeName": "AlertRule",
            "type": {
              "type": "id",
              "value": "AlertRule"
            }
          },
          {
            "typeName": "FilterRule",
            "type": {
              "type": "id",
              "value": "FilterRule"
            }
          },
          {
            "typeName": "TransformRule",
            "type": {
              "type": "id",
              "value": "TransformRule"
            }
          },
          {
            "typeName": "DelayRule",
            "type": {
              "type": "id",
              "value": "DelayRule"
            }
          }
        ]
      }
    },
    "Ruleset": {
      "description": "Associated [Ruleset](#ruleset-object) object",
      "name": "Ruleset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the ruleset",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A unique name for the ruleset",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Array of rules to apply",
            "key": "rules",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Rule"
              }
            }
          },
          {
            "description": "Default ruleset of Workspace",
            "key": "is_team_default",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Date the ruleset was archived",
            "key": "archived_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the ruleset was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the ruleset was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "RulesetPaginatedResult": {
      "name": "RulesetPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Ruleset"
                }
              }
            }
          }
        ]
      }
    },
    "SourceIntegration": {
      "description": "Integration object",
      "name": "SourceIntegration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the integration",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Label of the integration",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "provider",
            "valueType": {
              "type": "id",
              "value": "IntegrationProvider"
            }
          },
          {
            "description": "List of enabled features",
            "key": "features",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "IntegrationFeature"
              }
            }
          }
        ]
      }
    },
    "Source": {
      "description": "Associated [Source](#source-object) object",
      "name": "Source",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the source",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name for the source",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A unique URL that must be supplied to your webhook's provider",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "URL"
              }
            }
          },
          {
            "description": "ID of the integration",
            "key": "integration_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Integration object",
            "key": "integration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "SourceIntegration"
                }
              }
            }
          },
          {
            "description": "Date the source was archived",
            "key": "archived_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the source was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the source was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "SourcePaginatedResult": {
      "name": "SourcePaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Source"
                }
              }
            }
          }
        ]
      }
    },
    "TopicsValue": {
      "description": "Supported topics",
      "name": "TopicsValue",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "issue.opened"
          },
          {
            "value": "issue.updated"
          },
          {
            "value": "deprecated.attempt-failed"
          },
          {
            "value": "event.successful"
          }
        ]
      }
    },
    "ToggleWebhookNotifications": {
      "name": "ToggleWebhookNotifications",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "enabled",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "TopicsValue"
                  }
                }
              }
            }
          },
          {
            "key": "source_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransformationEnv": {
      "description": "Key-value environment variables to be passed to the transformation",
      "name": "TransformationEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Transformation": {
      "name": "Transformation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the transformation",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A unique, human-friendly name for the transformation",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "JavaScript code to be executed",
            "key": "code",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "encrypted_env",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Key-value environment variables to be passed to the transformation",
            "key": "env",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationEnv"
                }
              }
            }
          },
          {
            "description": "Date the transformation was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the transformation was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "TransformationPaginatedResult": {
      "name": "TransformationPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Transformation"
                }
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutputRequestHeaders": {
      "name": "TransformationExecutorOutputRequestHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutputRequestQuery": {
      "name": "TransformationExecutorOutputRequestQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutputRequestParsedQuery": {
      "name": "TransformationExecutorOutputRequestParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutputRequestBody": {
      "name": "TransformationExecutorOutputRequestBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutputRequest": {
      "name": "TransformationExecutorOutputRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecutorOutputRequestHeaders"
                }
              }
            }
          },
          {
            "key": "path",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecutorOutputRequestQuery"
                }
              }
            }
          },
          {
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecutorOutputRequestParsedQuery"
                }
              }
            }
          },
          {
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecutorOutputRequestBody"
                }
              }
            }
          }
        ]
      }
    },
    "TransformationExecutorOutput": {
      "name": "TransformationExecutorOutput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "execution_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "log_level",
            "valueType": {
              "type": "id",
              "value": "TransformationExecutionLogLevel"
            }
          },
          {
            "key": "request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecutorOutputRequest"
                }
              }
            }
          },
          {
            "key": "console",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "ConsoleLine"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "TransformationExecutionPaginatedResult": {
      "name": "TransformationExecutionPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TransformationExecution"
                }
              }
            }
          }
        ]
      }
    },
    "Connection": {
      "name": "Connection",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the connection",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique name of the connection for this source",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID of the workspace",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "destination",
            "valueType": {
              "type": "id",
              "value": "Destination"
            }
          },
          {
            "key": "source",
            "valueType": {
              "type": "id",
              "value": "Source"
            }
          },
          {
            "key": "ruleset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Ruleset"
              }
            }
          },
          {
            "description": "Array of rules applied to connection after factoring for the ruleset",
            "key": "resolved_rules",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "Rule"
                  }
                }
              }
            }
          },
          {
            "description": "Array of rules configured on the connection",
            "key": "rules",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "Rule"
                  }
                }
              }
            }
          },
          {
            "description": "Date the connection was archived",
            "key": "archived_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the connection was paused",
            "key": "paused_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Date the connection was last updated",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date the connection was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "ConnectionPaginatedResult": {
      "name": "ConnectionPaginatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pagination",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SeekPagination"
              }
            }
          },
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Connection"
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggersGetParametersDisabledAt1": {
      "name": "IssueTriggersGetParametersDisabledAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssueTriggersGetParametersDisabledAt": {
      "description": "Date when the issue trigger was disabled",
      "name": "IssueTriggersGetParametersDisabledAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssueTriggersGetParametersDisabledAt1",
            "type": {
              "type": "id",
              "value": "IssueTriggersGetParametersDisabledAt1"
            }
          }
        ]
      }
    },
    "IssueTriggersGetParametersOrderBy0": {
      "name": "IssueTriggersGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "type"
          }
        ]
      }
    },
    "IssueTriggersGetParametersOrderBySchemaOneOf1Items": {
      "name": "IssueTriggersGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "type"
          }
        ]
      }
    },
    "IssueTriggersGetParametersOrderBy1": {
      "name": "IssueTriggersGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssueTriggersGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "IssueTriggersGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "IssueTriggersGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggersGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "IssueTriggersGetParametersOrderBy0"
            }
          },
          {
            "typeName": "IssueTriggersGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "IssueTriggersGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "IssueTriggersGetParametersDir0": {
      "name": "IssueTriggersGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssueTriggersGetParametersDirSchemaOneOf1Items": {
      "name": "IssueTriggersGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssueTriggersGetParametersDir1": {
      "name": "IssueTriggersGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssueTriggersGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "IssueTriggersGetParametersDir": {
      "description": "Sort direction",
      "name": "IssueTriggersGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggersGetParametersDir0",
            "type": {
              "type": "id",
              "value": "IssueTriggersGetParametersDir0"
            }
          },
          {
            "typeName": "IssueTriggersGetParametersDir1",
            "type": {
              "type": "id",
              "value": "IssueTriggersGetParametersDir1"
            }
          }
        ]
      }
    },
    "IssueTriggersPostRequestBodyContentApplicationJsonSchemaConfigs": {
      "description": "Configuration object for the specific issue type selected",
      "name": "IssueTriggersPostRequestBodyContentApplicationJsonSchemaConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggerDeliveryConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerDeliveryConfigs"
            }
          },
          {
            "typeName": "IssueTriggerTransformationConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerTransformationConfigs"
            }
          },
          {
            "typeName": "IssueTriggerBackpressureConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerBackpressureConfigs"
            }
          }
        ]
      }
    },
    "IssueTriggersPutRequestBodyContentApplicationJsonSchemaConfigs": {
      "description": "Configuration object for the specific issue type selected",
      "name": "IssueTriggersPutRequestBodyContentApplicationJsonSchemaConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggerDeliveryConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerDeliveryConfigs"
            }
          },
          {
            "typeName": "IssueTriggerTransformationConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerTransformationConfigs"
            }
          },
          {
            "typeName": "IssueTriggerBackpressureConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerBackpressureConfigs"
            }
          }
        ]
      }
    },
    "IssueTriggersIdPutRequestBodyContentApplicationJsonSchemaConfigs": {
      "description": "Configuration object for the specific issue type selected",
      "name": "IssueTriggersIdPutRequestBodyContentApplicationJsonSchemaConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssueTriggerDeliveryConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerDeliveryConfigs"
            }
          },
          {
            "typeName": "IssueTriggerTransformationConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerTransformationConfigs"
            }
          },
          {
            "typeName": "IssueTriggerBackpressureConfigs",
            "type": {
              "type": "id",
              "value": "IssueTriggerBackpressureConfigs"
            }
          }
        ]
      }
    },
    "AttemptsGetParametersEventId": {
      "description": "Event the attempt is associated with",
      "name": "AttemptsGetParametersEventId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "AttemptsGetParametersOrderBy0": {
      "name": "AttemptsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "AttemptsGetParametersOrderBySchemaOneOf1Items": {
      "name": "AttemptsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "AttemptsGetParametersOrderBy1": {
      "name": "AttemptsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "AttemptsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "AttemptsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "AttemptsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "AttemptsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "AttemptsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "AttemptsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "AttemptsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "AttemptsGetParametersDir0": {
      "name": "AttemptsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "AttemptsGetParametersDirSchemaOneOf1Items": {
      "name": "AttemptsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "AttemptsGetParametersDir1": {
      "name": "AttemptsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "AttemptsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "AttemptsGetParametersDir": {
      "description": "Sort direction",
      "name": "AttemptsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "AttemptsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "AttemptsGetParametersDir0"
            }
          },
          {
            "typeName": "AttemptsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "AttemptsGetParametersDir1"
            }
          }
        ]
      }
    },
    "BookmarksGetParametersId": {
      "description": "Filter by bookmark IDs",
      "name": "BookmarksGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bookmark ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersName": {
      "description": "Filter by bookmark name",
      "name": "BookmarksGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bookmark name",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersWebhookId": {
      "description": "Filter by associated connection ID",
      "name": "BookmarksGetParametersWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Connection ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersEventDataId": {
      "description": "Filter by associated event data ID",
      "name": "BookmarksGetParametersEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersLabel": {
      "description": "Filter by label",
      "name": "BookmarksGetParametersLabel",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bookmark label",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersLastUsedAt1": {
      "name": "BookmarksGetParametersLastUsedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Last used date",
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Last used date",
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Last used date",
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "description": "Last used date",
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BookmarksGetParametersLastUsedAt": {
      "description": "Filter by last used date",
      "name": "BookmarksGetParametersLastUsedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Last used date",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BookmarksGetParametersLastUsedAt1",
            "type": {
              "type": "id",
              "value": "BookmarksGetParametersLastUsedAt1"
            }
          }
        ]
      }
    },
    "BookmarksGetParametersOrderBy0": {
      "name": "BookmarksGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BookmarksGetParametersOrderBySchemaOneOf1Items": {
      "name": "BookmarksGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BookmarksGetParametersOrderBy1": {
      "name": "BookmarksGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BookmarksGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "BookmarksGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "BookmarksGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BookmarksGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "BookmarksGetParametersOrderBy0"
            }
          },
          {
            "typeName": "BookmarksGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "BookmarksGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "BookmarksGetParametersDir0": {
      "name": "BookmarksGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BookmarksGetParametersDirSchemaOneOf1Items": {
      "name": "BookmarksGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BookmarksGetParametersDir1": {
      "name": "BookmarksGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BookmarksGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "BookmarksGetParametersDir": {
      "description": "Sort direction",
      "name": "BookmarksGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BookmarksGetParametersDir0",
            "type": {
              "type": "id",
              "value": "BookmarksGetParametersDir0"
            }
          },
          {
            "typeName": "BookmarksGetParametersDir1",
            "type": {
              "type": "id",
              "value": "BookmarksGetParametersDir1"
            }
          }
        ]
      }
    },
    "BookmarksIdTriggerPostRequestBodyContentApplicationJsonSchemaTarget": {
      "description": "Bookmark target",
      "name": "BookmarksIdTriggerPostRequestBodyContentApplicationJsonSchemaTarget",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "http"
          },
          {
            "value": "cli"
          }
        ]
      }
    },
    "DestinationsGetParametersId": {
      "description": "Filter by destination IDs",
      "name": "DestinationsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersName1": {
      "name": "DestinationsGetParametersName1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersName": {
      "description": "The destination name",
      "name": "DestinationsGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "typeName": "DestinationsGetParametersName1",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersName1"
            }
          }
        ]
      }
    },
    "DestinationsGetParametersArchivedAt1": {
      "name": "DestinationsGetParametersArchivedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersArchivedAt": {
      "description": "Date the destination was archived",
      "name": "DestinationsGetParametersArchivedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "DestinationsGetParametersArchivedAt1",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersArchivedAt1"
            }
          }
        ]
      }
    },
    "DestinationsGetParametersUrl": {
      "description": "HTTP endpoint of the destination",
      "name": "DestinationsGetParametersUrl",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "URL"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "URL"
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersCliPath1": {
      "name": "DestinationsGetParametersCliPath1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersCliPath": {
      "description": "Path for the CLI destination",
      "name": "DestinationsGetParametersCliPath",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "typeName": "DestinationsGetParametersCliPath1",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersCliPath1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "DestinationsGetParametersOrderBy0": {
      "name": "DestinationsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "DestinationsGetParametersOrderBySchemaOneOf1Items": {
      "name": "DestinationsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "DestinationsGetParametersOrderBy1": {
      "name": "DestinationsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "DestinationsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "DestinationsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "DestinationsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "DestinationsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "DestinationsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "DestinationsGetParametersDir0": {
      "name": "DestinationsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "DestinationsGetParametersDirSchemaOneOf1Items": {
      "name": "DestinationsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "DestinationsGetParametersDir1": {
      "name": "DestinationsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "DestinationsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "DestinationsGetParametersDir": {
      "description": "Sort direction",
      "name": "DestinationsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "DestinationsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersDir0"
            }
          },
          {
            "typeName": "DestinationsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "DestinationsGetParametersDir1"
            }
          }
        ]
      }
    },
    "DestinationsPostRequestBodyContentApplicationJsonSchemaRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "DestinationsPostRequestBodyContentApplicationJsonSchemaRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "DestinationsPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "DestinationsPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "DestinationsIdPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "DestinationsIdPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "EventsGetParametersId": {
      "description": "Filter by event IDs",
      "name": "EventsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersStatus1": {
      "name": "EventsGetParametersStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventStatus"
          }
        }
      }
    },
    "EventsGetParametersStatus": {
      "description": "Lifecyle status of the event",
      "name": "EventsGetParametersStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventStatus",
            "type": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "typeName": "EventsGetParametersStatus1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersStatus1"
            }
          }
        ]
      }
    },
    "EventsGetParametersIssueId": {
      "name": "EventsGetParametersIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersWebhookId": {
      "description": "Filter by webhook connection IDs",
      "name": "EventsGetParametersWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Webhook ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersDestinationId": {
      "description": "Filter by destination IDs",
      "name": "EventsGetParametersDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Destination ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersSourceId": {
      "description": "Filter by source IDs",
      "name": "EventsGetParametersSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersAttempts1": {
      "name": "EventsGetParametersAttempts1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersAttempts": {
      "description": "Filter by number of attempts",
      "name": "EventsGetParametersAttempts",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "EventsGetParametersAttempts1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersAttempts1"
            }
          }
        ]
      }
    },
    "EventsGetParametersResponseStatus1": {
      "name": "EventsGetParametersResponseStatus1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersResponseStatus": {
      "description": "Filter by HTTP response status code",
      "name": "EventsGetParametersResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 200,
                "maximum": 600
              }
            }
          },
          {
            "typeName": "EventsGetParametersResponseStatus1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersResponseStatus1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersSuccessfulAt1": {
      "name": "EventsGetParametersSuccessfulAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersSuccessfulAt": {
      "description": "Filter by `successful_at` date using a date operator",
      "name": "EventsGetParametersSuccessfulAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "EventsGetParametersSuccessfulAt1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersSuccessfulAt1"
            }
          }
        ]
      }
    },
    "EventsGetParametersCreatedAt1": {
      "name": "EventsGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersCreatedAt": {
      "description": "Filter by `created_at` date using a date operator",
      "name": "EventsGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "EventsGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "EventsGetParametersErrorCode": {
      "name": "EventsGetParametersErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersCliId1": {
      "name": "EventsGetParametersCliId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersCliId": {
      "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
      "name": "EventsGetParametersCliId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "EventsGetParametersCliId1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersCliId1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersCliUserId": {
      "name": "EventsGetParametersCliUserId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersLastAttemptAt1": {
      "name": "EventsGetParametersLastAttemptAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersLastAttemptAt": {
      "description": "Filter by `last_attempt_at` date using a date operator",
      "name": "EventsGetParametersLastAttemptAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "EventsGetParametersLastAttemptAt1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersLastAttemptAt1"
            }
          }
        ]
      }
    },
    "EventsGetParametersEventDataId": {
      "name": "EventsGetParametersEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "EventsGetParametersHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "EventsGetParametersBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "EventsGetParametersParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersBulkRetryId": {
      "name": "EventsGetParametersBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "EventsGetParametersInclude": {
      "description": "Include the data object in the event model",
      "name": "EventsGetParametersInclude",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "data"
          }
        ]
      }
    },
    "EventsGetParametersOrderBy0": {
      "name": "EventsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "EventsGetParametersOrderBySchemaOneOf1Items": {
      "name": "EventsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "EventsGetParametersOrderBy1": {
      "name": "EventsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "EventsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "EventsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "EventsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "EventsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "EventsGetParametersDir0": {
      "name": "EventsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "EventsGetParametersDirSchemaOneOf1Items": {
      "name": "EventsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "EventsGetParametersDir1": {
      "name": "EventsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "EventsGetParametersDir": {
      "description": "Sort direction",
      "name": "EventsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "EventsGetParametersDir0"
            }
          },
          {
            "typeName": "EventsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "EventsGetParametersDir1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCancelledAt1": {
      "name": "BulkEventsRetryGetParametersCancelledAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCancelledAt": {
      "description": "Filter by date the bulk retry was cancelled",
      "name": "BulkEventsRetryGetParametersCancelledAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersCancelledAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersCancelledAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCompletedAt1": {
      "name": "BulkEventsRetryGetParametersCompletedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCompletedAt": {
      "description": "Filter by date the bulk retry completed",
      "name": "BulkEventsRetryGetParametersCompletedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersCompletedAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersCompletedAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCreatedAt1": {
      "name": "BulkEventsRetryGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersCreatedAt": {
      "description": "Filter by date the bulk retry was created",
      "name": "BulkEventsRetryGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersId": {
      "description": "Filter by bulk retry IDs",
      "name": "BulkEventsRetryGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bulk retry ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaId": {
      "description": "Filter by event IDs",
      "name": "BulkEventsRetryGetParametersQuerySchemaId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaStatus1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventStatus"
          }
        }
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaStatus": {
      "description": "Lifecyle status of the event",
      "name": "BulkEventsRetryGetParametersQuerySchemaStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventStatus",
            "type": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaStatus1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaIssueId": {
      "name": "BulkEventsRetryGetParametersQuerySchemaIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaWebhookId": {
      "description": "Filter by webhook connection IDs",
      "name": "BulkEventsRetryGetParametersQuerySchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Webhook ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaDestinationId": {
      "description": "Filter by destination IDs",
      "name": "BulkEventsRetryGetParametersQuerySchemaDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Destination ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaSourceId": {
      "description": "Filter by source IDs",
      "name": "BulkEventsRetryGetParametersQuerySchemaSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaAttempts1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaAttempts1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaAttempts": {
      "description": "Filter by number of attempts",
      "name": "BulkEventsRetryGetParametersQuerySchemaAttempts",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaAttempts1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaAttempts1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaResponseStatus1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaResponseStatus1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaResponseStatus": {
      "description": "Filter by HTTP response status code",
      "name": "BulkEventsRetryGetParametersQuerySchemaResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 200,
                "maximum": 600
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaResponseStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaResponseStatus1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt": {
      "description": "Filter by `successful_at` date using a date operator",
      "name": "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaCreatedAt1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaCreatedAt": {
      "description": "Filter by `created_at` date using a date operator",
      "name": "BulkEventsRetryGetParametersQuerySchemaCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaErrorCode": {
      "name": "BulkEventsRetryGetParametersQuerySchemaErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaCliId1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaCliId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaCliId": {
      "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
      "name": "BulkEventsRetryGetParametersQuerySchemaCliId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaCliId1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaCliId1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaCliUserId": {
      "name": "BulkEventsRetryGetParametersQuerySchemaCliUserId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt": {
      "description": "Filter by `last_attempt_at` date using a date operator",
      "name": "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaEventDataId": {
      "name": "BulkEventsRetryGetParametersQuerySchemaEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkEventsRetryGetParametersQuerySchemaHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkEventsRetryGetParametersQuerySchemaBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkEventsRetryGetParametersQuerySchemaParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaBulkRetryId": {
      "name": "BulkEventsRetryGetParametersQuerySchemaBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaInclude": {
      "description": "Include the data object in the event model",
      "name": "BulkEventsRetryGetParametersQuerySchemaInclude",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "data"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaOrderBy0": {
      "name": "BulkEventsRetryGetParametersQuerySchemaOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaOrderByOneOf1Items": {
      "name": "BulkEventsRetryGetParametersQuerySchemaOrderByOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaOrderBy1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkEventsRetryGetParametersQuerySchemaOrderByOneOf1Items"
          }
        }
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaOrderBy": {
      "description": "Sort key(s)",
      "name": "BulkEventsRetryGetParametersQuerySchemaOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaOrderBy0",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaOrderBy0"
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaOrderBy1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaOrderBy1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaDir0": {
      "name": "BulkEventsRetryGetParametersQuerySchemaDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaDirOneOf1Items": {
      "name": "BulkEventsRetryGetParametersQuerySchemaDirOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaDir1": {
      "name": "BulkEventsRetryGetParametersQuerySchemaDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkEventsRetryGetParametersQuerySchemaDirOneOf1Items"
          }
        }
      }
    },
    "BulkEventsRetryGetParametersQuerySchemaDir": {
      "description": "Sort direction",
      "name": "BulkEventsRetryGetParametersQuerySchemaDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaDir0",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaDir0"
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersQuerySchemaDir1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersQuerySchemaDir1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersQuery": {
      "description": "Filter for events to be included in the bulk retry, use query parameters of [Event](#events)",
      "name": "BulkEventsRetryGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by event IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaId"
              }
            }
          },
          {
            "description": "Lifecyle status of the event",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaStatus"
              }
            }
          },
          {
            "key": "issue_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaIssueId"
              }
            }
          },
          {
            "description": "Filter by webhook connection IDs",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaWebhookId"
              }
            }
          },
          {
            "description": "Filter by destination IDs",
            "key": "destination_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaDestinationId"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaSourceId"
              }
            }
          },
          {
            "description": "Filter by number of attempts",
            "key": "attempts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaAttempts"
              }
            }
          },
          {
            "description": "Filter by HTTP response status code",
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuerySchemaResponseStatus"
                }
              }
            }
          },
          {
            "description": "Filter by `successful_at` date using a date operator",
            "key": "successful_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuerySchemaSuccessfulAt"
                }
              }
            }
          },
          {
            "description": "Filter by `created_at` date using a date operator",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaCreatedAt"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaErrorCode"
              }
            }
          },
          {
            "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
            "key": "cli_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuerySchemaCliId"
                }
              }
            }
          },
          {
            "key": "cli_user_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuerySchemaCliUserId"
                }
              }
            }
          },
          {
            "description": "Filter by `last_attempt_at` date using a date operator",
            "key": "last_attempt_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuerySchemaLastAttemptAt"
                }
              }
            }
          },
          {
            "key": "event_data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaEventDataId"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaParsedQuery"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaBulkRetryId"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Include the data object in the event model",
            "key": "include",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaInclude"
              }
            }
          },
          {
            "description": "Sort key(s)",
            "key": "order_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaOrderBy"
              }
            }
          },
          {
            "description": "Sort direction",
            "key": "dir",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryGetParametersQuerySchemaDir"
              }
            }
          },
          {
            "description": "Result set size",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            }
          },
          {
            "description": "The ID to provide in the query to get the next set of results",
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          },
          {
            "description": "The ID to provide in the query to get the previous set of results",
            "key": "prev",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersOrderBy0": {
      "name": "BulkEventsRetryGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersOrderBySchemaOneOf1Items": {
      "name": "BulkEventsRetryGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersOrderBy1": {
      "name": "BulkEventsRetryGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkEventsRetryGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "BulkEventsRetryGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "BulkEventsRetryGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkEventsRetryGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersOrderBy0"
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersDir0": {
      "name": "BulkEventsRetryGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersDirSchemaOneOf1Items": {
      "name": "BulkEventsRetryGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkEventsRetryGetParametersDir1": {
      "name": "BulkEventsRetryGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkEventsRetryGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "BulkEventsRetryGetParametersDir": {
      "description": "Sort direction",
      "name": "BulkEventsRetryGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkEventsRetryGetParametersDir0",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersDir0"
            }
          },
          {
            "typeName": "BulkEventsRetryGetParametersDir1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryGetParametersDir1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryId": {
      "description": "Filter by event IDs",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventStatus"
          }
        }
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus": {
      "description": "Lifecyle status of the event",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventStatus",
            "type": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryIssueId": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId": {
      "description": "Filter by webhook connection IDs",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Webhook ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryDestinationId": {
      "description": "Filter by destination IDs",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Destination ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId": {
      "description": "Filter by source IDs",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts": {
      "description": "Filter by number of attempts",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus": {
      "description": "Filter by HTTP response status code",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 200,
                "maximum": 600
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt": {
      "description": "Filter by `successful_at` date using a date operator",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt": {
      "description": "Filter by `created_at` date using a date operator",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryErrorCode": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId": {
      "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliUserId": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliUserId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt1": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt": {
      "description": "Filter by `last_attempt_at` date using a date operator",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventDataId": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId": {
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery": {
      "description": "Filter properties for the events to be included in the bulk retry",
      "name": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by event IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryId"
              }
            }
          },
          {
            "description": "Lifecyle status of the event",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus"
              }
            }
          },
          {
            "key": "issue_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryIssueId"
              }
            }
          },
          {
            "description": "Filter by webhook connection IDs",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId"
              }
            }
          },
          {
            "description": "Filter by destination IDs",
            "key": "destination_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryDestinationId"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId"
              }
            }
          },
          {
            "description": "Filter by number of attempts",
            "key": "attempts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryAttempts"
              }
            }
          },
          {
            "description": "Filter by HTTP response status code",
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryResponseStatus"
                }
              }
            }
          },
          {
            "description": "Filter by `successful_at` date using a date operator",
            "key": "successful_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuerySuccessfulAt"
                }
              }
            }
          },
          {
            "description": "Filter by `created_at` date using a date operator",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryErrorCode"
              }
            }
          },
          {
            "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
            "key": "cli_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliId"
                }
              }
            }
          },
          {
            "key": "cli_user_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCliUserId"
                }
              }
            }
          },
          {
            "description": "Filter by `last_attempt_at` date using a date operator",
            "key": "last_attempt_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryLastAttemptAt"
                }
              }
            }
          },
          {
            "key": "event_data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventDataId"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaId": {
      "description": "Filter by event IDs",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaStatus1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventStatus"
          }
        }
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaStatus": {
      "description": "Lifecyle status of the event",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventStatus",
            "type": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaStatus1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaIssueId": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaWebhookId": {
      "description": "Filter by webhook connection IDs",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Webhook ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaDestinationId": {
      "description": "Filter by destination IDs",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Destination ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaSourceId": {
      "description": "Filter by source IDs",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaAttempts1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaAttempts1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaAttempts": {
      "description": "Filter by number of attempts",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaAttempts",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaAttempts1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaAttempts1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus": {
      "description": "Filter by HTTP response status code",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 200,
                "maximum": 600
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt": {
      "description": "Filter by `successful_at` date using a date operator",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt": {
      "description": "Filter by `created_at` date using a date operator",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaErrorCode": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaCliId1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaCliId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaCliId": {
      "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaCliId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaCliId1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaCliId1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaCliUserId": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaCliUserId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt1": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt": {
      "description": "Filter by `last_attempt_at` date using a date operator",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt1",
            "type": {
              "type": "id",
              "value": "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt1"
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaEventDataId": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuerySchemaBulkRetryId": {
      "name": "BulkEventsRetryPlanGetParametersQuerySchemaBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkEventsRetryPlanGetParametersQuery": {
      "description": "Filter properties for the events to be included in the bulk retry",
      "name": "BulkEventsRetryPlanGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by event IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaId"
              }
            }
          },
          {
            "description": "Lifecyle status of the event",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaStatus"
              }
            }
          },
          {
            "key": "issue_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaIssueId"
              }
            }
          },
          {
            "description": "Filter by webhook connection IDs",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaWebhookId"
              }
            }
          },
          {
            "description": "Filter by destination IDs",
            "key": "destination_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaDestinationId"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaSourceId"
              }
            }
          },
          {
            "description": "Filter by number of attempts",
            "key": "attempts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaAttempts"
              }
            }
          },
          {
            "description": "Filter by HTTP response status code",
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuerySchemaResponseStatus"
                }
              }
            }
          },
          {
            "description": "Filter by `successful_at` date using a date operator",
            "key": "successful_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuerySchemaSuccessfulAt"
                }
              }
            }
          },
          {
            "description": "Filter by `created_at` date using a date operator",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaCreatedAt"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaErrorCode"
              }
            }
          },
          {
            "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
            "key": "cli_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuerySchemaCliId"
                }
              }
            }
          },
          {
            "key": "cli_user_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuerySchemaCliUserId"
                }
              }
            }
          },
          {
            "description": "Filter by `last_attempt_at` date using a date operator",
            "key": "last_attempt_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuerySchemaLastAttemptAt"
                }
              }
            }
          },
          {
            "key": "event_data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaEventDataId"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaParsedQuery"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkEventsRetryPlanGetParametersQuerySchemaBulkRetryId"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCancelledAt1": {
      "name": "BulkIgnoredEventsRetryGetParametersCancelledAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCancelledAt": {
      "description": "Filter by date the bulk retry was cancelled",
      "name": "BulkIgnoredEventsRetryGetParametersCancelledAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersCancelledAt1",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersCancelledAt1"
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCompletedAt1": {
      "name": "BulkIgnoredEventsRetryGetParametersCompletedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCompletedAt": {
      "description": "Filter by date the bulk retry completed",
      "name": "BulkIgnoredEventsRetryGetParametersCompletedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersCompletedAt1",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersCompletedAt1"
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCreatedAt1": {
      "name": "BulkIgnoredEventsRetryGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersCreatedAt": {
      "description": "Filter by date the bulk retry was created",
      "name": "BulkIgnoredEventsRetryGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersId": {
      "description": "Filter by bulk retry IDs",
      "name": "BulkIgnoredEventsRetryGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bulk retry ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersQuerySchemaCause": {
      "description": "The cause of the ignored event",
      "name": "BulkIgnoredEventsRetryGetParametersQuerySchemaCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersQuerySchemaWebhookId": {
      "description": "Connection ID of the ignored event",
      "name": "BulkIgnoredEventsRetryGetParametersQuerySchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersQuery": {
      "description": "Filter by the bulk retry ignored event query object",
      "name": "BulkIgnoredEventsRetryGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cause of the ignored event",
            "key": "cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryGetParametersQuerySchemaCause"
              }
            }
          },
          {
            "description": "Connection ID of the ignored event",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryGetParametersQuerySchemaWebhookId"
              }
            }
          },
          {
            "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)",
            "key": "transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersOrderBy0": {
      "name": "BulkIgnoredEventsRetryGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersOrderBySchemaOneOf1Items": {
      "name": "BulkIgnoredEventsRetryGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersOrderBy1": {
      "name": "BulkIgnoredEventsRetryGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkIgnoredEventsRetryGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "BulkIgnoredEventsRetryGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "BulkIgnoredEventsRetryGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersOrderBy0"
            }
          },
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersDir0": {
      "name": "BulkIgnoredEventsRetryGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersDirSchemaOneOf1Items": {
      "name": "BulkIgnoredEventsRetryGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryGetParametersDir1": {
      "name": "BulkIgnoredEventsRetryGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkIgnoredEventsRetryGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "BulkIgnoredEventsRetryGetParametersDir": {
      "description": "Sort direction",
      "name": "BulkIgnoredEventsRetryGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersDir0",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersDir0"
            }
          },
          {
            "typeName": "BulkIgnoredEventsRetryGetParametersDir1",
            "type": {
              "type": "id",
              "value": "BulkIgnoredEventsRetryGetParametersDir1"
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCause": {
      "description": "The cause of the ignored event",
      "name": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId": {
      "description": "Connection ID of the ignored event",
      "name": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery": {
      "description": "Filter by the bulk retry ignored event query object",
      "name": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cause of the ignored event",
            "key": "cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryCause"
              }
            }
          },
          {
            "description": "Connection ID of the ignored event",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQueryWebhookId"
              }
            }
          },
          {
            "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)",
            "key": "transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaCause": {
      "description": "The cause of the ignored event",
      "name": "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaWebhookId": {
      "description": "Connection ID of the ignored event",
      "name": "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkIgnoredEventsRetryPlanGetParametersQuery": {
      "description": "Filter by the bulk retry ignored event query object",
      "name": "BulkIgnoredEventsRetryPlanGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cause of the ignored event",
            "key": "cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaCause"
              }
            }
          },
          {
            "description": "Connection ID of the ignored event",
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkIgnoredEventsRetryPlanGetParametersQuerySchemaWebhookId"
              }
            }
          },
          {
            "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)",
            "key": "transformation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "IntegrationsPostRequestBodyContentApplicationJsonSchemaConfigs": {
      "description": "Decrypted Key/Value object of the associated configuration for that provider",
      "name": "IntegrationsPostRequestBodyContentApplicationJsonSchemaConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "HMACIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "HMACIntegrationConfigs"
            }
          },
          {
            "typeName": "APIKeyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "APIKeyIntegrationConfigs"
            }
          },
          {
            "typeName": "HandledHMACConfigs",
            "type": {
              "type": "id",
              "value": "HandledHMACConfigs"
            }
          },
          {
            "typeName": "BasicAuthIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "BasicAuthIntegrationConfigs"
            }
          },
          {
            "typeName": "ShopifyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "ShopifyIntegrationConfigs"
            }
          }
        ]
      }
    },
    "IntegrationsIdPutRequestBodyContentApplicationJsonSchemaConfigs": {
      "description": "Decrypted Key/Value object of the associated configuration for that provider",
      "name": "IntegrationsIdPutRequestBodyContentApplicationJsonSchemaConfigs",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "HMACIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "HMACIntegrationConfigs"
            }
          },
          {
            "typeName": "APIKeyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "APIKeyIntegrationConfigs"
            }
          },
          {
            "typeName": "HandledHMACConfigs",
            "type": {
              "type": "id",
              "value": "HandledHMACConfigs"
            }
          },
          {
            "typeName": "BasicAuthIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "BasicAuthIntegrationConfigs"
            }
          },
          {
            "typeName": "ShopifyIntegrationConfigs",
            "type": {
              "type": "id",
              "value": "ShopifyIntegrationConfigs"
            }
          }
        ]
      }
    },
    "IssuesGetParametersId": {
      "description": "Filter by Issue IDs",
      "name": "IssuesGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersIssueTriggerId": {
      "description": "Filter by Issue trigger IDs",
      "name": "IssuesGetParametersIssueTriggerId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Issue trigger ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersType0": {
      "description": "Issue type",
      "name": "IssuesGetParametersType0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          },
          {
            "value": "transformation"
          },
          {
            "value": "backpressure"
          }
        ]
      }
    },
    "IssuesGetParametersTypeSchemaOneOf1Items": {
      "description": "Issue type",
      "name": "IssuesGetParametersTypeSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          },
          {
            "value": "transformation"
          },
          {
            "value": "backpressure"
          }
        ]
      }
    },
    "IssuesGetParametersType1": {
      "name": "IssuesGetParametersType1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesGetParametersTypeSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesGetParametersType": {
      "description": "Filter by Issue types",
      "name": "IssuesGetParametersType",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesGetParametersType0",
            "description": "Issue type",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersType0"
            }
          },
          {
            "typeName": "IssuesGetParametersType1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersType1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersStatus0": {
      "description": "Issue status",
      "name": "IssuesGetParametersStatus0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "IssuesGetParametersStatusSchemaOneOf1Items": {
      "description": "Issue status",
      "name": "IssuesGetParametersStatusSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "IssuesGetParametersStatus1": {
      "name": "IssuesGetParametersStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesGetParametersStatusSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesGetParametersStatus": {
      "description": "Filter by Issue statuses",
      "name": "IssuesGetParametersStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesGetParametersStatus0",
            "description": "Issue status",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersStatus0"
            }
          },
          {
            "typeName": "IssuesGetParametersStatus1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersStatus1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersMergedWith": {
      "description": "Filter by Merged Issue IDs",
      "name": "IssuesGetParametersMergedWith",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Issue ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersAggregationKeysSchemaWebhookId": {
      "name": "IssuesGetParametersAggregationKeysSchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersAggregationKeysSchemaResponseStatus": {
      "name": "IssuesGetParametersAggregationKeysSchemaResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersAggregationKeysSchemaErrorCode1": {
      "name": "IssuesGetParametersAggregationKeysSchemaErrorCode1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "AttemptErrorCodes"
          }
        }
      }
    },
    "IssuesGetParametersAggregationKeysSchemaErrorCode": {
      "name": "IssuesGetParametersAggregationKeysSchemaErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "AttemptErrorCodes",
            "type": {
              "type": "id",
              "value": "AttemptErrorCodes"
            }
          },
          {
            "typeName": "IssuesGetParametersAggregationKeysSchemaErrorCode1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersAggregationKeysSchemaErrorCode1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersAggregationKeys": {
      "description": "Filter by aggregation keys",
      "name": "IssuesGetParametersAggregationKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesGetParametersAggregationKeysSchemaWebhookId"
              }
            }
          },
          {
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesGetParametersAggregationKeysSchemaResponseStatus"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesGetParametersAggregationKeysSchemaErrorCode"
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersCreatedAt1": {
      "name": "IssuesGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersCreatedAt": {
      "description": "Filter by created dates",
      "name": "IssuesGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersFirstSeenAt1": {
      "name": "IssuesGetParametersFirstSeenAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersFirstSeenAt": {
      "description": "Filter by first seen dates",
      "name": "IssuesGetParametersFirstSeenAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesGetParametersFirstSeenAt1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersFirstSeenAt1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersLastSeenAt1": {
      "name": "IssuesGetParametersLastSeenAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersLastSeenAt": {
      "description": "Filter by last seen dates",
      "name": "IssuesGetParametersLastSeenAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesGetParametersLastSeenAt1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersLastSeenAt1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersDismissedAt1": {
      "name": "IssuesGetParametersDismissedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesGetParametersDismissedAt": {
      "description": "Filter by dismissed dates",
      "name": "IssuesGetParametersDismissedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesGetParametersDismissedAt1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersDismissedAt1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersOrderBy0": {
      "name": "IssuesGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "first_seen_at"
          },
          {
            "value": "last_seen_at"
          },
          {
            "value": "opened_at"
          },
          {
            "value": "status"
          }
        ]
      }
    },
    "IssuesGetParametersOrderBySchemaOneOf1Items": {
      "name": "IssuesGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "first_seen_at"
          },
          {
            "value": "last_seen_at"
          },
          {
            "value": "opened_at"
          },
          {
            "value": "status"
          }
        ]
      }
    },
    "IssuesGetParametersOrderBy1": {
      "name": "IssuesGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "IssuesGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersOrderBy0"
            }
          },
          {
            "typeName": "IssuesGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "IssuesGetParametersDir0": {
      "name": "IssuesGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssuesGetParametersDirSchemaOneOf1Items": {
      "name": "IssuesGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssuesGetParametersDir1": {
      "name": "IssuesGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesGetParametersDir": {
      "description": "Sort direction",
      "name": "IssuesGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesGetParametersDir0",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersDir0"
            }
          },
          {
            "typeName": "IssuesGetParametersDir1",
            "type": {
              "type": "id",
              "value": "IssuesGetParametersDir1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersId": {
      "description": "Filter by Issue IDs",
      "name": "IssuesCountGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersIssueTriggerId": {
      "description": "Filter by Issue trigger IDs",
      "name": "IssuesCountGetParametersIssueTriggerId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Issue trigger ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersType0": {
      "description": "Issue type",
      "name": "IssuesCountGetParametersType0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          },
          {
            "value": "transformation"
          },
          {
            "value": "backpressure"
          }
        ]
      }
    },
    "IssuesCountGetParametersTypeSchemaOneOf1Items": {
      "description": "Issue type",
      "name": "IssuesCountGetParametersTypeSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery"
          },
          {
            "value": "transformation"
          },
          {
            "value": "backpressure"
          }
        ]
      }
    },
    "IssuesCountGetParametersType1": {
      "name": "IssuesCountGetParametersType1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesCountGetParametersTypeSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesCountGetParametersType": {
      "description": "Filter by Issue types",
      "name": "IssuesCountGetParametersType",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesCountGetParametersType0",
            "description": "Issue type",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersType0"
            }
          },
          {
            "typeName": "IssuesCountGetParametersType1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersType1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersStatus0": {
      "description": "Issue status",
      "name": "IssuesCountGetParametersStatus0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "IssuesCountGetParametersStatusSchemaOneOf1Items": {
      "description": "Issue status",
      "name": "IssuesCountGetParametersStatusSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "IssuesCountGetParametersStatus1": {
      "name": "IssuesCountGetParametersStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesCountGetParametersStatusSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesCountGetParametersStatus": {
      "description": "Filter by Issue statuses",
      "name": "IssuesCountGetParametersStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesCountGetParametersStatus0",
            "description": "Issue status",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersStatus0"
            }
          },
          {
            "typeName": "IssuesCountGetParametersStatus1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersStatus1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersMergedWith": {
      "description": "Filter by Merged Issue IDs",
      "name": "IssuesCountGetParametersMergedWith",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Issue ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersAggregationKeysSchemaWebhookId": {
      "name": "IssuesCountGetParametersAggregationKeysSchemaWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersAggregationKeysSchemaResponseStatus": {
      "name": "IssuesCountGetParametersAggregationKeysSchemaResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersAggregationKeysSchemaErrorCode1": {
      "name": "IssuesCountGetParametersAggregationKeysSchemaErrorCode1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "AttemptErrorCodes"
          }
        }
      }
    },
    "IssuesCountGetParametersAggregationKeysSchemaErrorCode": {
      "name": "IssuesCountGetParametersAggregationKeysSchemaErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "AttemptErrorCodes",
            "type": {
              "type": "id",
              "value": "AttemptErrorCodes"
            }
          },
          {
            "typeName": "IssuesCountGetParametersAggregationKeysSchemaErrorCode1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersAggregationKeysSchemaErrorCode1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersAggregationKeys": {
      "description": "Filter by aggregation keys",
      "name": "IssuesCountGetParametersAggregationKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesCountGetParametersAggregationKeysSchemaWebhookId"
              }
            }
          },
          {
            "key": "response_status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesCountGetParametersAggregationKeysSchemaResponseStatus"
              }
            }
          },
          {
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuesCountGetParametersAggregationKeysSchemaErrorCode"
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersCreatedAt1": {
      "name": "IssuesCountGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersCreatedAt": {
      "description": "Filter by created dates",
      "name": "IssuesCountGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesCountGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersFirstSeenAt1": {
      "name": "IssuesCountGetParametersFirstSeenAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersFirstSeenAt": {
      "description": "Filter by first seen dates",
      "name": "IssuesCountGetParametersFirstSeenAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesCountGetParametersFirstSeenAt1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersFirstSeenAt1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersLastSeenAt1": {
      "name": "IssuesCountGetParametersLastSeenAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersLastSeenAt": {
      "description": "Filter by last seen dates",
      "name": "IssuesCountGetParametersLastSeenAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesCountGetParametersLastSeenAt1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersLastSeenAt1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersDismissedAt1": {
      "name": "IssuesCountGetParametersDismissedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersDismissedAt": {
      "description": "Filter by dismissed dates",
      "name": "IssuesCountGetParametersDismissedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "IssuesCountGetParametersDismissedAt1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersDismissedAt1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersOrderBy0": {
      "name": "IssuesCountGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "first_seen_at"
          },
          {
            "value": "last_seen_at"
          },
          {
            "value": "opened_at"
          },
          {
            "value": "status"
          }
        ]
      }
    },
    "IssuesCountGetParametersOrderBySchemaOneOf1Items": {
      "name": "IssuesCountGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "first_seen_at"
          },
          {
            "value": "last_seen_at"
          },
          {
            "value": "opened_at"
          },
          {
            "value": "status"
          }
        ]
      }
    },
    "IssuesCountGetParametersOrderBy1": {
      "name": "IssuesCountGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesCountGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesCountGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "IssuesCountGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesCountGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersOrderBy0"
            }
          },
          {
            "typeName": "IssuesCountGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "IssuesCountGetParametersDir0": {
      "name": "IssuesCountGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssuesCountGetParametersDirSchemaOneOf1Items": {
      "name": "IssuesCountGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "IssuesCountGetParametersDir1": {
      "name": "IssuesCountGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "IssuesCountGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "IssuesCountGetParametersDir": {
      "description": "Sort direction",
      "name": "IssuesCountGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "IssuesCountGetParametersDir0",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersDir0"
            }
          },
          {
            "typeName": "IssuesCountGetParametersDir1",
            "type": {
              "type": "id",
              "value": "IssuesCountGetParametersDir1"
            }
          }
        ]
      }
    },
    "IssuesIdPutRequestBodyContentApplicationJsonSchemaStatus": {
      "description": "New status",
      "name": "IssuesIdPutRequestBodyContentApplicationJsonSchemaStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPENED"
          },
          {
            "value": "IGNORED"
          },
          {
            "value": "ACKNOWLEDGED"
          },
          {
            "value": "RESOLVED"
          }
        ]
      }
    },
    "RequestsGetParametersId": {
      "description": "Filter by requests IDs",
      "name": "RequestsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Request ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersStatus": {
      "name": "RequestsGetParametersStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "accepted"
          },
          {
            "value": "rejected"
          }
        ]
      }
    },
    "RequestsGetParametersRejectionCause1": {
      "name": "RequestsGetParametersRejectionCause1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersRejectionCause2": {
      "name": "RequestsGetParametersRejectionCause2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestRejectionCause"
          }
        }
      }
    },
    "RequestsGetParametersRejectionCause": {
      "description": "Filter by rejection cause",
      "name": "RequestsGetParametersRejectionCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestRejectionCause",
            "type": {
              "type": "id",
              "value": "RequestRejectionCause"
            }
          },
          {
            "typeName": "RequestsGetParametersRejectionCause1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersRejectionCause1"
            }
          },
          {
            "typeName": "RequestsGetParametersRejectionCause2",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersRejectionCause2"
            }
          }
        ]
      }
    },
    "RequestsGetParametersIgnoredCount1": {
      "name": "RequestsGetParametersIgnoredCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersIgnoredCount": {
      "name": "RequestsGetParametersIgnoredCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "RequestsGetParametersIgnoredCount1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersIgnoredCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersEventsCount1": {
      "name": "RequestsGetParametersEventsCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersEventsCount": {
      "name": "RequestsGetParametersEventsCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "RequestsGetParametersEventsCount1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersEventsCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersSourceId": {
      "description": "Filter by source IDs",
      "name": "RequestsGetParametersSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "RequestsGetParametersHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "RequestsGetParametersBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "RequestsGetParametersParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersCreatedAt1": {
      "name": "RequestsGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersCreatedAt": {
      "name": "RequestsGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RequestsGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "RequestsGetParametersIngestedAt1": {
      "name": "RequestsGetParametersIngestedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersIngestedAt": {
      "name": "RequestsGetParametersIngestedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RequestsGetParametersIngestedAt1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersIngestedAt1"
            }
          }
        ]
      }
    },
    "RequestsGetParametersBulkRetryId": {
      "name": "RequestsGetParametersBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsGetParametersInclude": {
      "name": "RequestsGetParametersInclude",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "data"
          }
        ]
      }
    },
    "RequestsGetParametersOrderBy0": {
      "name": "RequestsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ingested_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsGetParametersOrderBySchemaOneOf1Items": {
      "name": "RequestsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ingested_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsGetParametersOrderBy1": {
      "name": "RequestsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "RequestsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "RequestsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "RequestsGetParametersDir0": {
      "name": "RequestsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsGetParametersDirSchemaOneOf1Items": {
      "name": "RequestsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsGetParametersDir1": {
      "name": "RequestsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsGetParametersDir": {
      "description": "Sort direction",
      "name": "RequestsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersDir0"
            }
          },
          {
            "typeName": "RequestsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "RequestsGetParametersDir1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersId": {
      "description": "Filter by event IDs",
      "name": "RequestsIdEventsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersStatus1": {
      "name": "RequestsIdEventsGetParametersStatus1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "EventStatus"
          }
        }
      }
    },
    "RequestsIdEventsGetParametersStatus": {
      "description": "Lifecyle status of the event",
      "name": "RequestsIdEventsGetParametersStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "EventStatus",
            "type": {
              "type": "id",
              "value": "EventStatus"
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersStatus1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersStatus1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersIssueId": {
      "name": "RequestsIdEventsGetParametersIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersWebhookId": {
      "description": "Filter by webhook connection IDs",
      "name": "RequestsIdEventsGetParametersWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Webhook ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersDestinationId": {
      "description": "Filter by destination IDs",
      "name": "RequestsIdEventsGetParametersDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Destination ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersSourceId": {
      "description": "Filter by source IDs",
      "name": "RequestsIdEventsGetParametersSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersAttempts1": {
      "name": "RequestsIdEventsGetParametersAttempts1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersAttempts": {
      "description": "Filter by number of attempts",
      "name": "RequestsIdEventsGetParametersAttempts",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersAttempts1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersAttempts1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersResponseStatus1": {
      "name": "RequestsIdEventsGetParametersResponseStatus1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersResponseStatus": {
      "description": "Filter by HTTP response status code",
      "name": "RequestsIdEventsGetParametersResponseStatus",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 200,
                "maximum": 600
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersResponseStatus1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersResponseStatus1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 200,
                  "maximum": 600
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersSuccessfulAt1": {
      "name": "RequestsIdEventsGetParametersSuccessfulAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersSuccessfulAt": {
      "description": "Filter by `successful_at` date using a date operator",
      "name": "RequestsIdEventsGetParametersSuccessfulAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersSuccessfulAt1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersSuccessfulAt1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersCreatedAt1": {
      "name": "RequestsIdEventsGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersCreatedAt": {
      "description": "Filter by `created_at` date using a date operator",
      "name": "RequestsIdEventsGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersErrorCode": {
      "name": "RequestsIdEventsGetParametersErrorCode",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersCliId1": {
      "name": "RequestsIdEventsGetParametersCliId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersCliId": {
      "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI.",
      "name": "RequestsIdEventsGetParametersCliId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersCliId1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersCliId1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersCliUserId": {
      "name": "RequestsIdEventsGetParametersCliUserId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersLastAttemptAt1": {
      "name": "RequestsIdEventsGetParametersLastAttemptAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersLastAttemptAt": {
      "description": "Filter by `last_attempt_at` date using a date operator",
      "name": "RequestsIdEventsGetParametersLastAttemptAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersLastAttemptAt1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersLastAttemptAt1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersEventDataId": {
      "name": "RequestsIdEventsGetParametersEventDataId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "RequestsIdEventsGetParametersHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "RequestsIdEventsGetParametersBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "RequestsIdEventsGetParametersParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersBulkRetryId": {
      "name": "RequestsIdEventsGetParametersBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersInclude": {
      "description": "Include the data object in the event model",
      "name": "RequestsIdEventsGetParametersInclude",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "data"
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersOrderBy0": {
      "name": "RequestsIdEventsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersOrderBySchemaOneOf1Items": {
      "name": "RequestsIdEventsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last_attempt_at"
          },
          {
            "value": "next_attempt_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersOrderBy1": {
      "name": "RequestsIdEventsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsIdEventsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsIdEventsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "RequestsIdEventsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsIdEventsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersDir0": {
      "name": "RequestsIdEventsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersDirSchemaOneOf1Items": {
      "name": "RequestsIdEventsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsIdEventsGetParametersDir1": {
      "name": "RequestsIdEventsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsIdEventsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsIdEventsGetParametersDir": {
      "description": "Sort direction",
      "name": "RequestsIdEventsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsIdEventsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersDir0"
            }
          },
          {
            "typeName": "RequestsIdEventsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "RequestsIdEventsGetParametersDir1"
            }
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersId": {
      "description": "Filter by ignored events IDs",
      "name": "RequestsIdIgnoredEventsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Event ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersOrderBy0": {
      "name": "RequestsIdIgnoredEventsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersOrderBySchemaOneOf1Items": {
      "name": "RequestsIdIgnoredEventsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersOrderBy1": {
      "name": "RequestsIdIgnoredEventsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsIdIgnoredEventsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsIdIgnoredEventsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "RequestsIdIgnoredEventsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsIdIgnoredEventsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "RequestsIdIgnoredEventsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "RequestsIdIgnoredEventsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "RequestsIdIgnoredEventsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersDir0": {
      "name": "RequestsIdIgnoredEventsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersDirSchemaOneOf1Items": {
      "name": "RequestsIdIgnoredEventsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RequestsIdIgnoredEventsGetParametersDir1": {
      "name": "RequestsIdIgnoredEventsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestsIdIgnoredEventsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "RequestsIdIgnoredEventsGetParametersDir": {
      "description": "Sort direction",
      "name": "RequestsIdIgnoredEventsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestsIdIgnoredEventsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "RequestsIdIgnoredEventsGetParametersDir0"
            }
          },
          {
            "typeName": "RequestsIdIgnoredEventsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "RequestsIdIgnoredEventsGetParametersDir1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCancelledAt1": {
      "name": "BulkRequestsRetryGetParametersCancelledAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCancelledAt": {
      "description": "Filter by date the bulk retry was cancelled",
      "name": "BulkRequestsRetryGetParametersCancelledAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersCancelledAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersCancelledAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCompletedAt1": {
      "name": "BulkRequestsRetryGetParametersCompletedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCompletedAt": {
      "description": "Filter by date the bulk retry completed",
      "name": "BulkRequestsRetryGetParametersCompletedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersCompletedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersCompletedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCreatedAt1": {
      "name": "BulkRequestsRetryGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersCreatedAt": {
      "description": "Filter by date the bulk retry was created",
      "name": "BulkRequestsRetryGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersId": {
      "description": "Filter by bulk retry IDs",
      "name": "BulkRequestsRetryGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Bulk retry ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaId": {
      "description": "Filter by requests IDs",
      "name": "BulkRequestsRetryGetParametersQuerySchemaId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Request ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaStatus": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "accepted"
          },
          {
            "value": "rejected"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaRejectionCause1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaRejectionCause2": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestRejectionCause"
          }
        }
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaRejectionCause": {
      "description": "Filter by rejection cause",
      "name": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestRejectionCause",
            "type": {
              "type": "id",
              "value": "RequestRejectionCause"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause1"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause2",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause2"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaEventsCount1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaEventsCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaEventsCount": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaEventsCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaEventsCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaEventsCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaSourceId": {
      "description": "Filter by source IDs",
      "name": "BulkRequestsRetryGetParametersQuerySchemaSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkRequestsRetryGetParametersQuerySchemaHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkRequestsRetryGetParametersQuerySchemaBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkRequestsRetryGetParametersQuerySchemaParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaCreatedAt1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaCreatedAt": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaIngestedAt1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaIngestedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaIngestedAt": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaIngestedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaIngestedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaIngestedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaBulkRetryId": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaInclude": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaInclude",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "data"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaOrderBy0": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ingested_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaOrderByOneOf1Items": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaOrderByOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ingested_at"
          },
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaOrderBy1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkRequestsRetryGetParametersQuerySchemaOrderByOneOf1Items"
          }
        }
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaOrderBy": {
      "description": "Sort key(s)",
      "name": "BulkRequestsRetryGetParametersQuerySchemaOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaOrderBy0",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaOrderBy0"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaOrderBy1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaOrderBy1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaDir0": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaDirOneOf1Items": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaDirOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaDir1": {
      "name": "BulkRequestsRetryGetParametersQuerySchemaDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkRequestsRetryGetParametersQuerySchemaDirOneOf1Items"
          }
        }
      }
    },
    "BulkRequestsRetryGetParametersQuerySchemaDir": {
      "description": "Sort direction",
      "name": "BulkRequestsRetryGetParametersQuerySchemaDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaDir0",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaDir0"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersQuerySchemaDir1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersQuerySchemaDir1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersQuery": {
      "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
      "name": "BulkRequestsRetryGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by requests IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaId"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaStatus"
              }
            }
          },
          {
            "description": "Filter by rejection cause",
            "key": "rejection_cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersQuerySchemaRejectionCause"
                }
              }
            }
          },
          {
            "key": "ignored_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaIgnoredCount"
              }
            }
          },
          {
            "key": "events_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaEventsCount"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaSourceId"
              }
            }
          },
          {
            "description": "Filter by verification status",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaParsedQuery"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaCreatedAt"
              }
            }
          },
          {
            "key": "ingested_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaIngestedAt"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaBulkRetryId"
              }
            }
          },
          {
            "key": "include",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaInclude"
              }
            }
          },
          {
            "description": "Sort key(s)",
            "key": "order_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaOrderBy"
              }
            }
          },
          {
            "description": "Sort direction",
            "key": "dir",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryGetParametersQuerySchemaDir"
              }
            }
          },
          {
            "description": "Result set size",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            }
          },
          {
            "description": "The ID to provide in the query to get the next set of results",
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          },
          {
            "description": "The ID to provide in the query to get the previous set of results",
            "key": "prev",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersOrderBy0": {
      "name": "BulkRequestsRetryGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersOrderBySchemaOneOf1Items": {
      "name": "BulkRequestsRetryGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersOrderBy1": {
      "name": "BulkRequestsRetryGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkRequestsRetryGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "BulkRequestsRetryGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "BulkRequestsRetryGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkRequestsRetryGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersOrderBy0"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersDir0": {
      "name": "BulkRequestsRetryGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersDirSchemaOneOf1Items": {
      "name": "BulkRequestsRetryGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "BulkRequestsRetryGetParametersDir1": {
      "name": "BulkRequestsRetryGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "BulkRequestsRetryGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "BulkRequestsRetryGetParametersDir": {
      "description": "Sort direction",
      "name": "BulkRequestsRetryGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "BulkRequestsRetryGetParametersDir0",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersDir0"
            }
          },
          {
            "typeName": "BulkRequestsRetryGetParametersDir1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryGetParametersDir1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryId": {
      "description": "Filter by requests IDs",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Request ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "accepted"
          },
          {
            "value": "rejected"
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause1": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause2": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestRejectionCause"
          }
        }
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause": {
      "description": "Filter by rejection cause",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestRejectionCause",
            "type": {
              "type": "id",
              "value": "RequestRejectionCause"
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause1"
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause2",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause2"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount1": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount1": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId": {
      "description": "Filter by source IDs",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt1": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId": {
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuery": {
      "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
      "name": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by requests IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryId"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryStatus"
              }
            }
          },
          {
            "description": "Filter by rejection cause",
            "key": "rejection_cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryRejectionCause"
                }
              }
            }
          },
          {
            "key": "ignored_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIgnoredCount"
              }
            }
          },
          {
            "key": "events_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryEventsCount"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuerySourceId"
              }
            }
          },
          {
            "description": "Filter by verification status",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryParsedQuery"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryCreatedAt"
              }
            }
          },
          {
            "key": "ingested_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryIngestedAt"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQueryBulkRetryId"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaId": {
      "description": "Filter by requests IDs",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Request ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaStatus": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "accepted"
          },
          {
            "value": "rejected"
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause1": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestRejectionCause"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause2": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause2",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RequestRejectionCause"
          }
        }
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause": {
      "description": "Filter by rejection cause",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RequestRejectionCause",
            "type": {
              "type": "id",
              "value": "RequestRejectionCause"
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause1"
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause2",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause2"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount1": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount1": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount1"
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaSourceId": {
      "description": "Filter by source IDs",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Source ID",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaHeaders": {
      "description": "URL Encoded string of the JSON to match to the data headers",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaHeaders",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaBody": {
      "description": "URL Encoded string of the JSON to match to the data body",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaParsedQuery": {
      "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaParsedQuery",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt1": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt1": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt1",
            "type": {
              "type": "id",
              "value": "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt1"
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuerySchemaBulkRetryId": {
      "name": "BulkRequestsRetryPlanGetParametersQuerySchemaBulkRetryId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "BulkRequestsRetryPlanGetParametersQuery": {
      "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
      "name": "BulkRequestsRetryPlanGetParametersQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter by requests IDs",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaId"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaStatus"
              }
            }
          },
          {
            "description": "Filter by rejection cause",
            "key": "rejection_cause",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryPlanGetParametersQuerySchemaRejectionCause"
                }
              }
            }
          },
          {
            "key": "ignored_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaIgnoredCount"
              }
            }
          },
          {
            "key": "events_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaEventsCount"
              }
            }
          },
          {
            "description": "Filter by source IDs",
            "key": "source_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaSourceId"
              }
            }
          },
          {
            "description": "Filter by verification status",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data headers",
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaHeaders"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the data body",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaBody"
              }
            }
          },
          {
            "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaParsedQuery"
              }
            }
          },
          {
            "description": "URL Encoded string of the string to match partially to the path",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaCreatedAt"
              }
            }
          },
          {
            "key": "ingested_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaIngestedAt"
              }
            }
          },
          {
            "key": "bulk_retry_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BulkRequestsRetryPlanGetParametersQuerySchemaBulkRetryId"
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersId": {
      "description": "Filter by ruleset IDs",
      "name": "RulesetsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersName0": {
      "name": "RulesetsGetParametersName0",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersNameSchemaOneOf1Gt": {
      "name": "RulesetsGetParametersNameSchemaOneOf1Gt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersNameSchemaOneOf1Gte": {
      "name": "RulesetsGetParametersNameSchemaOneOf1Gte",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersNameSchemaOneOf1Le": {
      "name": "RulesetsGetParametersNameSchemaOneOf1Le",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersNameSchemaOneOf1Lte": {
      "name": "RulesetsGetParametersNameSchemaOneOf1Lte",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersNameSchemaOneOf1Contains": {
      "name": "RulesetsGetParametersNameSchemaOneOf1Contains",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersName1": {
      "name": "RulesetsGetParametersName1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RulesetsGetParametersNameSchemaOneOf1Gt"
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RulesetsGetParametersNameSchemaOneOf1Gte"
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RulesetsGetParametersNameSchemaOneOf1Le"
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RulesetsGetParametersNameSchemaOneOf1Lte"
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RulesetsGetParametersNameSchemaOneOf1Contains"
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersName": {
      "description": "The ruleset name",
      "name": "RulesetsGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RulesetsGetParametersName0",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersName0"
            }
          },
          {
            "typeName": "RulesetsGetParametersName1",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersName1"
            }
          }
        ]
      }
    },
    "RulesetsGetParametersArchivedAt1": {
      "name": "RulesetsGetParametersArchivedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "RulesetsGetParametersArchivedAt": {
      "description": "Date the ruleset was archived",
      "name": "RulesetsGetParametersArchivedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "RulesetsGetParametersArchivedAt1",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersArchivedAt1"
            }
          }
        ]
      }
    },
    "RulesetsGetParametersOrderBy0": {
      "name": "RulesetsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RulesetsGetParametersOrderBySchemaOneOf1Items": {
      "name": "RulesetsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "RulesetsGetParametersOrderBy1": {
      "name": "RulesetsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RulesetsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "RulesetsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "RulesetsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RulesetsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "RulesetsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "RulesetsGetParametersDir0": {
      "name": "RulesetsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RulesetsGetParametersDirSchemaOneOf1Items": {
      "name": "RulesetsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "RulesetsGetParametersDir1": {
      "name": "RulesetsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RulesetsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "RulesetsGetParametersDir": {
      "description": "Sort direction",
      "name": "RulesetsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RulesetsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersDir0"
            }
          },
          {
            "typeName": "RulesetsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "RulesetsGetParametersDir1"
            }
          }
        ]
      }
    },
    "SourcesGetParametersId": {
      "description": "Filter by source IDs",
      "name": "SourcesGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "SourcesGetParametersName1": {
      "name": "SourcesGetParametersName1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "SourcesGetParametersName": {
      "description": "The source name",
      "name": "SourcesGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "typeName": "SourcesGetParametersName1",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersName1"
            }
          }
        ]
      }
    },
    "SourcesGetParametersArchivedAt1": {
      "name": "SourcesGetParametersArchivedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "SourcesGetParametersArchivedAt": {
      "description": "Date the source was archived",
      "name": "SourcesGetParametersArchivedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "SourcesGetParametersArchivedAt1",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersArchivedAt1"
            }
          }
        ]
      }
    },
    "SourcesGetParametersIntegrationId1": {
      "name": "SourcesGetParametersIntegrationId1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "SourcesGetParametersIntegrationId": {
      "description": "Filter by integration IDs",
      "name": "SourcesGetParametersIntegrationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "SourcesGetParametersIntegrationId1",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersIntegrationId1"
            }
          }
        ]
      }
    },
    "SourcesGetParametersOrderBy0": {
      "name": "SourcesGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "SourcesGetParametersOrderBySchemaOneOf1Items": {
      "name": "SourcesGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "SourcesGetParametersOrderBy1": {
      "name": "SourcesGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "SourcesGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "SourcesGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "SourcesGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "SourcesGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersOrderBy0"
            }
          },
          {
            "typeName": "SourcesGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "SourcesGetParametersDir0": {
      "name": "SourcesGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "SourcesGetParametersDirSchemaOneOf1Items": {
      "name": "SourcesGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "SourcesGetParametersDir1": {
      "name": "SourcesGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "SourcesGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "SourcesGetParametersDir": {
      "description": "Sort direction",
      "name": "SourcesGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "SourcesGetParametersDir0",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersDir0"
            }
          },
          {
            "typeName": "SourcesGetParametersDir1",
            "type": {
              "type": "id",
              "value": "SourcesGetParametersDir1"
            }
          }
        ]
      }
    },
    "TransformationsGetParametersId": {
      "description": "Filter by transformation IDs",
      "name": "TransformationsGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "TransformationsGetParametersName": {
      "description": "Filter by transformation name",
      "name": "TransformationsGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "TransformationsGetParametersOrderBy0": {
      "name": "TransformationsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "TransformationsGetParametersOrderBySchemaOneOf1Items": {
      "name": "TransformationsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "TransformationsGetParametersOrderBy1": {
      "name": "TransformationsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TransformationsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "TransformationsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "TransformationsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformationsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "TransformationsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "TransformationsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "TransformationsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "TransformationsGetParametersDir0": {
      "name": "TransformationsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "TransformationsGetParametersDirSchemaOneOf1Items": {
      "name": "TransformationsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "TransformationsGetParametersDir1": {
      "name": "TransformationsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TransformationsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "TransformationsGetParametersDir": {
      "description": "Sort direction",
      "name": "TransformationsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformationsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "TransformationsGetParametersDir0"
            }
          },
          {
            "typeName": "TransformationsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "TransformationsGetParametersDir1"
            }
          }
        ]
      }
    },
    "TransformationsPostRequestBodyContentApplicationJsonSchemaEnv": {
      "description": "Key-value environment variables to be passed to the transformation",
      "name": "TransformationsPostRequestBodyContentApplicationJsonSchemaEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsPutRequestBodyContentApplicationJsonSchemaEnv": {
      "description": "Key-value environment variables to be passed to the transformation",
      "name": "TransformationsPutRequestBodyContentApplicationJsonSchemaEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsIdPutRequestBodyContentApplicationJsonSchemaEnv": {
      "description": "Key-value environment variables to be passed to the transformation",
      "name": "TransformationsIdPutRequestBodyContentApplicationJsonSchemaEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsRunPutRequestBodyContentApplicationJsonSchemaEnv": {
      "description": "Key-value environment variables to be passed to the transformation",
      "name": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaEnv",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestHeaders": {
      "description": "Headers of the request",
      "name": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestHeaders",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestBody": {
      "description": "Body of the request",
      "name": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestBody",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestParsedQuery": {
      "description": "JSON representation of the query params",
      "name": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestParsedQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequest": {
      "description": "Request input to use for the transformation execution",
      "name": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Headers of the request",
            "key": "headers",
            "valueType": {
              "type": "id",
              "value": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestHeaders"
            }
          },
          {
            "description": "Body of the request",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestBody"
              }
            }
          },
          {
            "description": "Path of the request",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "String representation of the query params of the request",
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "JSON representation of the query params",
            "key": "parsed_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequestParsedQuery"
              }
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersLogLevel0": {
      "name": "TransformationsIdExecutionsGetParametersLogLevel0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "debug"
          },
          {
            "value": "info"
          },
          {
            "value": "warn"
          },
          {
            "value": "error"
          },
          {
            "value": "fatal"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersLogLevelSchemaOneOf1Items": {
      "name": "TransformationsIdExecutionsGetParametersLogLevelSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "debug"
          },
          {
            "value": "info"
          },
          {
            "value": "warn"
          },
          {
            "value": "error"
          },
          {
            "value": "fatal"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersLogLevel1": {
      "name": "TransformationsIdExecutionsGetParametersLogLevel1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TransformationsIdExecutionsGetParametersLogLevelSchemaOneOf1Items"
          }
        }
      }
    },
    "TransformationsIdExecutionsGetParametersLogLevel": {
      "description": "Log level of the execution",
      "name": "TransformationsIdExecutionsGetParametersLogLevel",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformationsIdExecutionsGetParametersLogLevel0",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersLogLevel0"
            }
          },
          {
            "typeName": "TransformationsIdExecutionsGetParametersLogLevel1",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersLogLevel1"
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersWebhookId": {
      "description": "ID of the connection the execution was run for",
      "name": "TransformationsIdExecutionsGetParametersWebhookId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersIssueId": {
      "description": "ID of the associated issue",
      "name": "TransformationsIdExecutionsGetParametersIssueId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersCreatedAt1": {
      "name": "TransformationsIdExecutionsGetParametersCreatedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersCreatedAt": {
      "description": "ISO date of the transformation's execution",
      "name": "TransformationsIdExecutionsGetParametersCreatedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "TransformationsIdExecutionsGetParametersCreatedAt1",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersCreatedAt1"
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersOrderBy0": {
      "name": "TransformationsIdExecutionsGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersOrderBySchemaOneOf1Items": {
      "name": "TransformationsIdExecutionsGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersOrderBy1": {
      "name": "TransformationsIdExecutionsGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TransformationsIdExecutionsGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "TransformationsIdExecutionsGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "TransformationsIdExecutionsGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformationsIdExecutionsGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersOrderBy0"
            }
          },
          {
            "typeName": "TransformationsIdExecutionsGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersDir0": {
      "name": "TransformationsIdExecutionsGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersDirSchemaOneOf1Items": {
      "name": "TransformationsIdExecutionsGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "TransformationsIdExecutionsGetParametersDir1": {
      "name": "TransformationsIdExecutionsGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TransformationsIdExecutionsGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "TransformationsIdExecutionsGetParametersDir": {
      "description": "Sort direction",
      "name": "TransformationsIdExecutionsGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TransformationsIdExecutionsGetParametersDir0",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersDir0"
            }
          },
          {
            "typeName": "TransformationsIdExecutionsGetParametersDir1",
            "type": {
              "type": "id",
              "value": "TransformationsIdExecutionsGetParametersDir1"
            }
          }
        ]
      }
    },
    "WebhooksGetParametersId": {
      "description": "Filter by connection IDs",
      "name": "WebhooksGetParametersId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersName1": {
      "name": "WebhooksGetParametersName1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "contains",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-z0-9-_]+$",
                  "maxLength": 155
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersName": {
      "description": "Filter by connection name",
      "name": "WebhooksGetParametersName",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "typeName": "WebhooksGetParametersName1",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersName1"
            }
          }
        ]
      }
    },
    "WebhooksGetParametersDestinationId": {
      "description": "Filter by associated destination IDs",
      "name": "WebhooksGetParametersDestinationId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersSourceId": {
      "description": "Filter by associated source IDs",
      "name": "WebhooksGetParametersSourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 255
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersArchivedAt1": {
      "name": "WebhooksGetParametersArchivedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersArchivedAt": {
      "description": "Date the connection was archived",
      "name": "WebhooksGetParametersArchivedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "WebhooksGetParametersArchivedAt1",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersArchivedAt1"
            }
          }
        ]
      }
    },
    "WebhooksGetParametersPausedAt1": {
      "name": "WebhooksGetParametersPausedAt1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "gt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "gte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "le",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "lte",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "any",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksGetParametersPausedAt": {
      "description": "Date the connection was paused",
      "name": "WebhooksGetParametersPausedAt",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "typeName": "WebhooksGetParametersPausedAt1",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersPausedAt1"
            }
          }
        ]
      }
    },
    "WebhooksGetParametersOrderBy0": {
      "name": "WebhooksGetParametersOrderBy0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "WebhooksGetParametersOrderBySchemaOneOf1Items": {
      "name": "WebhooksGetParametersOrderBySchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          }
        ]
      }
    },
    "WebhooksGetParametersOrderBy1": {
      "name": "WebhooksGetParametersOrderBy1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "WebhooksGetParametersOrderBySchemaOneOf1Items"
          }
        }
      }
    },
    "WebhooksGetParametersOrderBy": {
      "description": "Sort key(s)",
      "name": "WebhooksGetParametersOrderBy",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "WebhooksGetParametersOrderBy0",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersOrderBy0"
            }
          },
          {
            "typeName": "WebhooksGetParametersOrderBy1",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersOrderBy1"
            }
          }
        ]
      }
    },
    "WebhooksGetParametersDir0": {
      "name": "WebhooksGetParametersDir0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "WebhooksGetParametersDirSchemaOneOf1Items": {
      "name": "WebhooksGetParametersDirSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "WebhooksGetParametersDir1": {
      "name": "WebhooksGetParametersDir1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "WebhooksGetParametersDirSchemaOneOf1Items"
          }
        }
      }
    },
    "WebhooksGetParametersDir": {
      "description": "Sort direction",
      "name": "WebhooksGetParametersDir",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "WebhooksGetParametersDir0",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersDir0"
            }
          },
          {
            "typeName": "WebhooksGetParametersDir1",
            "type": {
              "type": "id",
              "value": "WebhooksGetParametersDir1"
            }
          }
        ]
      }
    },
    "WebhooksPostRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "WebhooksPostRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "WebhooksPostRequestBodyContentApplicationJsonSchemaDestination": {
      "description": "Destination input object",
      "name": "WebhooksPostRequestBodyContentApplicationJsonSchemaDestination",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name for the destination",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "description": "Endpoint of the destination",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "URL"
                  }
                }
              }
            }
          },
          {
            "description": "Path for the CLI destination",
            "key": "cli_path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Period to rate limit attempts",
            "key": "rate_limit_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "WebhooksPostRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod"
              }
            }
          },
          {
            "description": "Limit event attempts to receive per period",
            "key": "rate_limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "path_forwarding_disabled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksPostRequestBodyContentApplicationJsonSchemaSource": {
      "description": "Source input object",
      "name": "WebhooksPostRequestBodyContentApplicationJsonSchemaSource",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique name for the source",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          }
        ]
      }
    },
    "WebhooksPostRequestBodyContentApplicationJsonSchemaRuleset": {
      "description": "Ruleset input object",
      "name": "WebhooksPostRequestBodyContentApplicationJsonSchemaRuleset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name for the ruleset",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "description": "Array of rules to apply",
            "key": "rules",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Rule"
                }
              }
            }
          },
          {
            "key": "is_team_default",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksPutRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod": {
      "description": "Period to rate limit attempts",
      "name": "WebhooksPutRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "second"
          },
          {
            "value": "minute"
          },
          {
            "value": "hour"
          }
        ]
      }
    },
    "WebhooksPutRequestBodyContentApplicationJsonSchemaDestination": {
      "description": "Destination input object",
      "name": "WebhooksPutRequestBodyContentApplicationJsonSchemaDestination",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name for the destination",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "description": "Endpoint of the destination",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "URL"
                  }
                }
              }
            }
          },
          {
            "description": "Path for the CLI destination",
            "key": "cli_path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Period to rate limit attempts",
            "key": "rate_limit_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "WebhooksPutRequestBodyContentApplicationJsonSchemaDestinationRateLimitPeriod"
              }
            }
          },
          {
            "description": "Limit event attempts to receive per period",
            "key": "rate_limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "nullable",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "path_forwarding_disabled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksPutRequestBodyContentApplicationJsonSchemaSource": {
      "description": "Source input object",
      "name": "WebhooksPutRequestBodyContentApplicationJsonSchemaSource",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique name for the source",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          }
        ]
      }
    },
    "WebhooksPutRequestBodyContentApplicationJsonSchemaRuleset": {
      "description": "Ruleset input object",
      "name": "WebhooksPutRequestBodyContentApplicationJsonSchemaRuleset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name for the ruleset",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "description": "Array of rules to apply",
            "key": "rules",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Rule"
                }
              }
            }
          },
          {
            "key": "is_team_default",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "WebhooksIdPutRequestBodyContentApplicationJsonSchemaRuleset": {
      "description": "Ruleset input object",
      "name": "WebhooksIdPutRequestBodyContentApplicationJsonSchemaRuleset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name for the ruleset",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-z0-9-_]+$",
                "maxLength": 155
              }
            }
          },
          {
            "description": "Array of rules to apply",
            "key": "rules",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Rule"
                }
              }
            }
          },
          {
            "key": "is_team_default",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_issueTriggers": {
      "subpackageId": "subpackage_issueTriggers",
      "name": "issueTriggers",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIssueTriggers",
          "originalEndpointId": "endpoint_issueTriggers.getIssueTriggers",
          "name": "Get issue triggers",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueType"
                }
              }
            },
            {
              "key": "disabled_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueTriggersGetParametersDisabledAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueTriggersGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueTriggersGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTriggerPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of issue triggers"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "name": "foo",
                    "type": "delivery",
                    "configs": {
                      "strategy": "first_attempt",
                      "connections": "foo"
                    },
                    "channels": {
                      "slack": {
                        "channel_name": "foo"
                      },
                      "opsgenie": {},
                      "email": {}
                    },
                    "disabled_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "deleted_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "name": "foo",
                      "type": "delivery",
                      "configs": {
                        "strategy": "first_attempt",
                        "connections": "foo"
                      },
                      "channels": {
                        "slack": {
                          "channel_name": "foo"
                        },
                        "opsgenie": {},
                        "email": {}
                      },
                      "disabled_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "deleted_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.createIssueTrigger",
          "name": "Create an issue trigger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "type",
                    "valueType": {
                      "type": "id",
                      "value": "IssueType"
                    }
                  },
                  {
                    "description": "Configuration object for the specific issue type selected",
                    "key": "configs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IssueTriggersPostRequestBodyContentApplicationJsonSchemaConfigs"
                      }
                    }
                  },
                  {
                    "key": "channels",
                    "valueType": {
                      "type": "id",
                      "value": "IssueTriggerChannels"
                    }
                  },
                  {
                    "description": "Optional unique name to use as reference when using the API",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "type": "delivery",
                "channels": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "type": "delivery",
                  "channels": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.upsertIssueTrigger",
          "name": "Create or update an issue trigger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "type",
                    "valueType": {
                      "type": "id",
                      "value": "IssueType"
                    }
                  },
                  {
                    "description": "Configuration object for the specific issue type selected",
                    "key": "configs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IssueTriggersPutRequestBodyContentApplicationJsonSchemaConfigs"
                      }
                    }
                  },
                  {
                    "key": "channels",
                    "valueType": {
                      "type": "id",
                      "value": "IssueTriggerChannels"
                    }
                  },
                  {
                    "description": "Required unique name to use as reference when using the API",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "maxLength": 255
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "type": "delivery",
                "channels": {},
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "type": "delivery",
                  "channels": {},
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.getIssueTrigger",
          "name": "Get a single issue trigger",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.updateIssueTrigger",
          "name": "Update an issue trigger",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Configuration object for the specific issue type selected",
                    "key": "configs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IssueTriggersIdPutRequestBodyContentApplicationJsonSchemaConfigs"
                      }
                    }
                  },
                  {
                    "key": "channels",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IssueTriggerChannels"
                      }
                    }
                  },
                  {
                    "description": "Date when the issue trigger was disabled",
                    "key": "disabled_at",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Optional unique name to use as reference when using the API",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "DELETE",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "deleteIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.deleteIssueTrigger",
          "name": "Delete an issue trigger",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DeletedIssueTriggerResponse"
              }
            },
            "statusCode": 200,
            "description": "An object with deleted issue trigger's id"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "disableIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.disableIssueTrigger",
          "name": "Disable an issue trigger",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/disable"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers/id/disable",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "enableIssueTrigger",
          "originalEndpointId": "endpoint_issueTriggers.enableIssueTrigger",
          "name": "Enable an issue trigger",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-triggers/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/enable"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueTrigger"
              }
            },
            "statusCode": 200,
            "description": "A single issue trigger"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issue-triggers/id/enable",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "type": "delivery",
                "configs": {
                  "strategy": "first_attempt",
                  "connections": "foo"
                },
                "channels": {
                  "slack": {
                    "channel_name": "foo"
                  },
                  "opsgenie": {},
                  "email": {}
                },
                "disabled_at": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "deleted_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "type": "delivery",
                  "configs": {
                    "strategy": "first_attempt",
                    "connections": "foo"
                  },
                  "channels": {
                    "slack": {
                      "channel_name": "foo"
                    },
                    "opsgenie": {},
                    "email": {}
                  },
                  "disabled_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "deleted_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_attempts": {
      "subpackageId": "subpackage_attempts",
      "name": "attempts",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getAttempts",
          "originalEndpointId": "endpoint_attempts.getAttempts",
          "name": "Get attempts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/attempts"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "event_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AttemptsGetParametersEventId"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AttemptsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AttemptsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EventAttemptPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of attempts"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/attempts",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "event_id": "foo",
                    "response_status": 42,
                    "attempt_number": 42,
                    "trigger": "INITIAL",
                    "error_code": "TIMEOUT",
                    "body": {},
                    "requested_url": "foo",
                    "bulk_retry_id": "foo",
                    "status": "QUEUED",
                    "successful_at": "foo",
                    "delivered_at": "foo",
                    "responded_at": "foo",
                    "delivery_latency": 42,
                    "response_latency": 42,
                    "updated_at": "foo",
                    "created_at": "foo",
                    "state": "DELIVERING",
                    "archived_at": "foo",
                    "destination_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "event_id": "foo",
                      "response_status": 42,
                      "attempt_number": 42,
                      "trigger": "INITIAL",
                      "error_code": "TIMEOUT",
                      "body": {},
                      "requested_url": "foo",
                      "bulk_retry_id": "foo",
                      "status": "QUEUED",
                      "successful_at": "foo",
                      "delivered_at": "foo",
                      "responded_at": "foo",
                      "delivery_latency": 42,
                      "response_latency": 42,
                      "updated_at": "foo",
                      "created_at": "foo",
                      "state": "DELIVERING",
                      "archived_at": "foo",
                      "destination_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getAttempt",
          "originalEndpointId": "endpoint_attempts.getAttempt",
          "name": "Get a single attempt",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/attempts/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EventAttempt"
              }
            },
            "statusCode": 200,
            "description": "A single attempt"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/attempts/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "event_id": "foo",
                "response_status": 42,
                "attempt_number": 42,
                "trigger": "INITIAL",
                "error_code": "TIMEOUT",
                "body": {},
                "requested_url": "foo",
                "bulk_retry_id": "foo",
                "status": "QUEUED",
                "successful_at": "foo",
                "delivered_at": "foo",
                "responded_at": "foo",
                "delivery_latency": 42,
                "response_latency": 42,
                "updated_at": "foo",
                "created_at": "foo",
                "state": "DELIVERING",
                "archived_at": "foo",
                "destination_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "event_id": "foo",
                  "response_status": 42,
                  "attempt_number": 42,
                  "trigger": "INITIAL",
                  "error_code": "TIMEOUT",
                  "body": {},
                  "requested_url": "foo",
                  "bulk_retry_id": "foo",
                  "status": "QUEUED",
                  "successful_at": "foo",
                  "delivered_at": "foo",
                  "responded_at": "foo",
                  "delivery_latency": 42,
                  "response_latency": 42,
                  "updated_at": "foo",
                  "created_at": "foo",
                  "state": "DELIVERING",
                  "archived_at": "foo",
                  "destination_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_bookmarks": {
      "subpackageId": "subpackage_bookmarks",
      "name": "bookmarks",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getBookmarks",
          "originalEndpointId": "endpoint_bookmarks.getBookmarks",
          "name": "Get bookmarks",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersName"
                }
              }
            },
            {
              "key": "webhook_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersWebhookId"
                }
              }
            },
            {
              "key": "event_data_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersEventDataId"
                }
              }
            },
            {
              "key": "label",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersLabel"
                }
              }
            },
            {
              "key": "last_used_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersLastUsedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BookmarksGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BookmarkPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of bookmarks"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "event_data_id": "foo",
                    "label": "foo",
                    "alias": "foo",
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_used_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "event_data_id": "foo",
                      "label": "foo",
                      "alias": "foo",
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "last_used_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createBookmark",
          "originalEndpointId": "endpoint_bookmarks.createBookmark",
          "name": "Create a bookmark",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "ID of the event data to bookmark",
                    "key": "event_data_id",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "maxLength": 255
                      }
                    }
                  },
                  {
                    "description": "ID of the associated connection",
                    "key": "webhook_id",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "maxLength": 255
                      }
                    }
                  },
                  {
                    "description": "Descriptive name of the bookmark",
                    "key": "label",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "maxLength": 255
                      }
                    }
                  },
                  {
                    "description": "A unique, human-friendly name for the bookmark",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Bookmark"
              }
            },
            "statusCode": 200,
            "description": "A single bookmark"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "event_data_id": "foo",
                "webhook_id": "foo",
                "label": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "event_data_id": "foo",
                  "webhook_id": "foo",
                  "label": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "event_data_id": "foo",
                "label": "foo",
                "alias": "foo",
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "last_used_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "event_data_id": "foo",
                  "label": "foo",
                  "alias": "foo",
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_used_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getBookmark",
          "originalEndpointId": "endpoint_bookmarks.getBookmark",
          "name": "Get a single bookmark",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Bookmark"
              }
            },
            "statusCode": 200,
            "description": "A single bookmark"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "event_data_id": "foo",
                "label": "foo",
                "alias": "foo",
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "last_used_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "event_data_id": "foo",
                  "label": "foo",
                  "alias": "foo",
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_used_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateBookmark",
          "originalEndpointId": "endpoint_bookmarks.updateBookmark",
          "name": "Update a bookmark",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "ID of the event data to bookmark",
                    "key": "event_data_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  },
                  {
                    "description": "ID of the associated connection",
                    "key": "webhook_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  },
                  {
                    "description": "Descriptive name of the bookmark",
                    "key": "label",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  },
                  {
                    "description": "A unique, human-friendly name for the bookmark",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Bookmark"
              }
            },
            "statusCode": 200,
            "description": "A single bookmark"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "event_data_id": "foo",
                "label": "foo",
                "alias": "foo",
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "last_used_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "event_data_id": "foo",
                  "label": "foo",
                  "alias": "foo",
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_used_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "DELETE",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "deleteBookmark",
          "originalEndpointId": "endpoint_bookmarks.deleteBookmark",
          "name": "Delete a bookmark",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DeletedBookmarkResponse"
              }
            },
            "statusCode": 200,
            "description": "An object with deleted bookmark's id"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "triggerBookmark",
          "originalEndpointId": "endpoint_bookmarks.triggerBookmark",
          "name": "Trigger a bookmark",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bookmarks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/trigger"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Bookmark target",
                    "key": "target",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "BookmarksIdTriggerPostRequestBodyContentApplicationJsonSchemaTarget"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EventArray"
              }
            },
            "statusCode": 200,
            "description": "Array of created events"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bookmarks/id/trigger",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "source_id": "foo",
                  "destination_id": "foo",
                  "event_data_id": "foo",
                  "request_id": "foo",
                  "attempts": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_attempt_at": "foo",
                  "next_attempt_at": "foo",
                  "response_status": 42,
                  "status": "SCHEDULED",
                  "successful_at": "foo",
                  "cli_id": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "created_at_id": "foo",
                  "last_attempt_at_id": "foo"
                }
              ],
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_destinations": {
      "subpackageId": "subpackage_destinations",
      "name": "destinations",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getDestinations",
          "originalEndpointId": "endpoint_destinations.getDestinations",
          "name": "Get destinations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersName"
                }
              }
            },
            {
              "key": "archived",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "archived_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersArchivedAt"
                }
              }
            },
            {
              "key": "url",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersUrl"
                }
              }
            },
            {
              "key": "cli_path",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersCliPath"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "DestinationsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DestinationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of destinations"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "path_forwarding_disabled": true,
                      "url": "foo",
                      "cli_path": "foo",
                      "rate_limit": 42,
                      "rate_limit_period": "second",
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createDestination",
          "originalEndpointId": "endpoint_destinations.createDestination",
          "name": "Create a destination",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the destination",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "Endpoint of the destination",
                    "key": "url",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "URL"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Path for the CLI destination",
                    "key": "cli_path",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Period to rate limit attempts",
                    "key": "rate_limit_period",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "DestinationsPostRequestBodyContentApplicationJsonSchemaRateLimitPeriod"
                      }
                    }
                  },
                  {
                    "description": "Limit event attempts to receive per period",
                    "key": "rate_limit",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  {
                    "key": "path_forwarding_disabled",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertDestination",
          "originalEndpointId": "endpoint_destinations.upsertDestination",
          "name": "Update or create a destination",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the destination",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "Endpoint of the destination",
                    "key": "url",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "URL"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Path for the CLI destination",
                    "key": "cli_path",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Period to rate limit attempts",
                    "key": "rate_limit_period",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "DestinationsPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod"
                      }
                    }
                  },
                  {
                    "description": "Limit event attempts to receive per period",
                    "key": "rate_limit",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  {
                    "key": "path_forwarding_disabled",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getDestination",
          "originalEndpointId": "endpoint_destinations.getDestination",
          "name": "Get a destination",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateDestination",
          "originalEndpointId": "endpoint_destinations.updateDestination",
          "name": "Update a destination",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the destination",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "Endpoint of the destination",
                    "key": "url",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "URL"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Path for the CLI destination",
                    "key": "cli_path",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Period to rate limit attempts",
                    "key": "rate_limit_period",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "DestinationsIdPutRequestBodyContentApplicationJsonSchemaRateLimitPeriod"
                      }
                    }
                  },
                  {
                    "description": "Limit event attempts to receive per period",
                    "key": "rate_limit",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Date the destination was archived",
                    "key": "archived_at",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  },
                  {
                    "key": "path_forwarding_disabled",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "archiveDestination",
          "originalEndpointId": "endpoint_destinations.archiveDestination",
          "name": "Archive a destination",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/archive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations/id/archive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "unarchiveDestination",
          "originalEndpointId": "endpoint_destinations.unarchiveDestination",
          "name": "Unarchive a destination",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/destinations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/unarchive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Destination"
              }
            },
            "statusCode": 200,
            "description": "A single destination"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/destinations/id/unarchive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "path_forwarding_disabled": true,
                "url": "foo",
                "cli_path": "foo",
                "rate_limit": 42,
                "rate_limit_period": "second",
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_events": {
      "subpackageId": "subpackage_events",
      "name": "events",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getEvents",
          "originalEndpointId": "endpoint_events.getEvents",
          "name": "Get events",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/events"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersId"
                }
              }
            },
            {
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersStatus"
                }
              }
            },
            {
              "key": "issue_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersIssueId"
                }
              }
            },
            {
              "key": "webhook_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersWebhookId"
                }
              }
            },
            {
              "key": "destination_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersDestinationId"
                }
              }
            },
            {
              "key": "source_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersSourceId"
                }
              }
            },
            {
              "key": "attempts",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersAttempts"
                }
              }
            },
            {
              "key": "response_status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersResponseStatus"
                }
              }
            },
            {
              "key": "successful_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersSuccessfulAt"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "error_code",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersErrorCode"
                }
              }
            },
            {
              "key": "cli_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersCliId"
                }
              }
            },
            {
              "key": "cli_user_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersCliUserId"
                }
              }
            },
            {
              "key": "last_attempt_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersLastAttemptAt"
                }
              }
            },
            {
              "key": "event_data_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersEventDataId"
                }
              }
            },
            {
              "key": "headers",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersHeaders"
                }
              }
            },
            {
              "key": "body",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersBody"
                }
              }
            },
            {
              "key": "parsed_query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersParsedQuery"
                }
              }
            },
            {
              "key": "bulk_retry_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersBulkRetryId"
                }
              }
            },
            {
              "key": "path",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "include",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersInclude"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EventsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EventPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of events"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/events",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "source_id": "foo",
                      "destination_id": "foo",
                      "event_data_id": "foo",
                      "request_id": "foo",
                      "attempts": 42,
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "last_attempt_at": "foo",
                      "next_attempt_at": "foo",
                      "response_status": 42,
                      "status": "SCHEDULED",
                      "successful_at": "foo",
                      "cli_id": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "created_at_id": "foo",
                      "last_attempt_at_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getEvent",
          "originalEndpointId": "endpoint_events.getEvent",
          "name": "Get an event",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/events/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Event"
              }
            },
            "statusCode": 200,
            "description": "A single event"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/events/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "source_id": "foo",
                "destination_id": "foo",
                "event_data_id": "foo",
                "request_id": "foo",
                "attempts": 42,
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "last_attempt_at": "foo",
                "next_attempt_at": "foo",
                "response_status": 42,
                "status": "SCHEDULED",
                "successful_at": "foo",
                "cli_id": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "created_at_id": "foo",
                "last_attempt_at_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "source_id": "foo",
                  "destination_id": "foo",
                  "event_data_id": "foo",
                  "request_id": "foo",
                  "attempts": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_attempt_at": "foo",
                  "next_attempt_at": "foo",
                  "response_status": 42,
                  "status": "SCHEDULED",
                  "successful_at": "foo",
                  "cli_id": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "created_at_id": "foo",
                  "last_attempt_at_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestRawBody",
          "originalEndpointId": "endpoint_events.getRequestRawBody",
          "name": "Get a event raw body data",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/events/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/raw_body"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RawBody"
              }
            },
            "statusCode": 200,
            "description": "A request raw body data"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/events/id/raw_body",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "body": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "body": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "retryEvent",
          "originalEndpointId": "endpoint_events.retryEvent",
          "name": "Retry an event",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/events/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/retry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RetriedEvent"
              }
            },
            "statusCode": 200,
            "description": "Retried event with event attempt"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/events/id/retry",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "event": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "source_id": "foo",
                  "destination_id": "foo",
                  "event_data_id": "foo",
                  "request_id": "foo",
                  "attempts": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_attempt_at": "foo",
                  "next_attempt_at": "foo",
                  "response_status": 42,
                  "status": "SCHEDULED",
                  "successful_at": "foo",
                  "cli_id": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "created_at_id": "foo",
                  "last_attempt_at_id": "foo"
                },
                "attempt": {
                  "id": "foo",
                  "team_id": "foo",
                  "event_id": "foo",
                  "response_status": 42,
                  "attempt_number": 42,
                  "trigger": "INITIAL",
                  "error_code": "TIMEOUT",
                  "body": {},
                  "requested_url": "foo",
                  "bulk_retry_id": "foo",
                  "status": "QUEUED",
                  "successful_at": "foo",
                  "delivered_at": "foo",
                  "responded_at": "foo",
                  "delivery_latency": 42,
                  "response_latency": 42,
                  "updated_at": "foo",
                  "created_at": "foo",
                  "state": "DELIVERING",
                  "archived_at": "foo",
                  "destination_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "event": {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  },
                  "attempt": {
                    "id": "foo",
                    "team_id": "foo",
                    "event_id": "foo",
                    "response_status": 42,
                    "attempt_number": 42,
                    "trigger": "INITIAL",
                    "error_code": "TIMEOUT",
                    "body": {},
                    "requested_url": "foo",
                    "bulk_retry_id": "foo",
                    "status": "QUEUED",
                    "successful_at": "foo",
                    "delivered_at": "foo",
                    "responded_at": "foo",
                    "delivery_latency": 42,
                    "response_latency": 42,
                    "updated_at": "foo",
                    "created_at": "foo",
                    "state": "DELIVERING",
                    "archived_at": "foo",
                    "destination_id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "muteEvent",
          "originalEndpointId": "endpoint_events.muteEvent",
          "name": "Mute an event",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/events/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/mute"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Event"
              }
            },
            "statusCode": 200,
            "description": "A single event"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/events/id/mute",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "source_id": "foo",
                "destination_id": "foo",
                "event_data_id": "foo",
                "request_id": "foo",
                "attempts": 42,
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "last_attempt_at": "foo",
                "next_attempt_at": "foo",
                "response_status": 42,
                "status": "SCHEDULED",
                "successful_at": "foo",
                "cli_id": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "created_at_id": "foo",
                "last_attempt_at_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "source_id": "foo",
                  "destination_id": "foo",
                  "event_data_id": "foo",
                  "request_id": "foo",
                  "attempts": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "last_attempt_at": "foo",
                  "next_attempt_at": "foo",
                  "response_status": 42,
                  "status": "SCHEDULED",
                  "successful_at": "foo",
                  "cli_id": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "created_at_id": "foo",
                  "last_attempt_at_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_bulkRetryEvents": {
      "subpackageId": "subpackage_bulkRetryEvents",
      "name": "bulkRetryEvents",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getEventBulkRetries",
          "originalEndpointId": "endpoint_bulkRetryEvents.getEventBulkRetries",
          "name": "Get events bulk retries",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/events/retry"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "cancelled_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersCancelledAt"
                }
              }
            },
            {
              "key": "completed_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersCompletedAt"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersId"
                }
              }
            },
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersQuery"
                }
              }
            },
            {
              "key": "query_partial_match",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "in_progress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of events bulk retries"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/events/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "query": {},
                    "created_at": "foo",
                    "updated_at": "foo",
                    "cancelled_at": "foo",
                    "completed_at": "foo",
                    "estimated_batch": 42,
                    "estimated_count": 42,
                    "processed_batch": 42,
                    "completed_count": 42,
                    "in_progress": true,
                    "progress": 42,
                    "failed_count": 42,
                    "number": 42
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "query": {},
                      "created_at": "foo",
                      "updated_at": "foo",
                      "cancelled_at": "foo",
                      "completed_at": "foo",
                      "estimated_batch": 42,
                      "estimated_count": 42,
                      "processed_batch": 42,
                      "completed_count": 42,
                      "in_progress": true,
                      "progress": 42,
                      "failed_count": 42,
                      "number": 42
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryEvents.createEventBulkRetry",
          "name": "Create an events bulk retry",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/events/retry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Filter properties for the events to be included in the bulk retry",
                    "key": "query",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "BulkEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/events/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "generateEventBulkRetryPlan",
          "originalEndpointId": "endpoint_bulkRetryEvents.generateEventBulkRetryPlan",
          "name": "Generate an events bulk retry plan",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/events/retry/plan"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkEventsRetryPlanGetParametersQuery"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPlan"
              }
            },
            "statusCode": 200,
            "description": "Events bulk retry plan"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/events/retry/plan",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "estimated_batch": 42,
                "estimated_count": 42,
                "progress": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "progress": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryEvents.getEventBulkRetry",
          "name": "Get an events bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/events/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/events/retry/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "cancelEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryEvents.cancelEventBulkRetry",
          "name": "Cancel an events bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/events/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/cancel"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/events/retry/id/cancel",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_bulkRetryIgnoredEvents": {
      "subpackageId": "subpackage_bulkRetryIgnoredEvents",
      "name": "bulkRetryIgnoredEvents",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIgnoredEventBulkRetries",
          "originalEndpointId": "endpoint_bulkRetryIgnoredEvents.getIgnoredEventBulkRetries",
          "name": "Get ignored events bulk retries",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/ignored-events/retry"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "cancelled_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersCancelledAt"
                }
              }
            },
            {
              "key": "completed_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersCompletedAt"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersId"
                }
              }
            },
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersQuery"
                }
              }
            },
            {
              "key": "query_partial_match",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "in_progress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of ignored events bulk retries"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/ignored-events/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "query": {},
                    "created_at": "foo",
                    "updated_at": "foo",
                    "cancelled_at": "foo",
                    "completed_at": "foo",
                    "estimated_batch": 42,
                    "estimated_count": 42,
                    "processed_batch": 42,
                    "completed_count": 42,
                    "in_progress": true,
                    "progress": 42,
                    "failed_count": 42,
                    "number": 42
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "query": {},
                      "created_at": "foo",
                      "updated_at": "foo",
                      "cancelled_at": "foo",
                      "completed_at": "foo",
                      "estimated_batch": 42,
                      "estimated_count": 42,
                      "processed_batch": 42,
                      "completed_count": 42,
                      "in_progress": true,
                      "progress": 42,
                      "failed_count": 42,
                      "number": 42
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createIgnoredEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryIgnoredEvents.createIgnoredEventBulkRetry",
          "name": "Create an ignored events bulk retry",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/ignored-events/retry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Filter by the bulk retry ignored event query object",
                    "key": "query",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "BulkIgnoredEventsRetryPostRequestBodyContentApplicationJsonSchemaQuery"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single ignored events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/ignored-events/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "generateIgnoredEventBulkRetryPlan",
          "originalEndpointId": "endpoint_bulkRetryIgnoredEvents.generateIgnoredEventBulkRetryPlan",
          "name": "Generate an ignored events bulk retry plan",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/ignored-events/retry/plan"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkIgnoredEventsRetryPlanGetParametersQuery"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPlan"
              }
            },
            "statusCode": 200,
            "description": "Ignored events bulk retry plan"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/ignored-events/retry/plan",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "estimated_batch": 42,
                "estimated_count": 42,
                "progress": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "progress": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIgnoredEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryIgnoredEvents.getIgnoredEventBulkRetry",
          "name": "Get an ignored events bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/ignored-events/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single ignored events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/ignored-events/retry/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "cancelIgnoredEventBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryIgnoredEvents.cancelIgnoredEventBulkRetry",
          "name": "Cancel an ignored events bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/ignored-events/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/cancel"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single ignored events bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/ignored-events/retry/id/cancel",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_integrations": {
      "subpackageId": "subpackage_integrations",
      "name": "integrations",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIntegrations",
          "originalEndpointId": "endpoint_integrations.getIntegrations",
          "name": "Get integrations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "label",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "provider",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IntegrationProvider"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IntegrationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of integrations"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ],
                    "configs": {
                      "webhook_secret_key": "foo",
                      "algorithm": "md5",
                      "header_key": "foo",
                      "encoding": "base64"
                    },
                    "sources": [
                      "foo"
                    ],
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ],
                      "configs": {
                        "webhook_secret_key": "foo",
                        "algorithm": "md5",
                        "header_key": "foo",
                        "encoding": "base64"
                      },
                      "sources": [
                        "foo"
                      ],
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createIntegration",
          "originalEndpointId": "endpoint_integrations.createIntegration",
          "name": "Create an integration",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Label of the integration",
                    "key": "label",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Decrypted Key/Value object of the associated configuration for that provider",
                    "key": "configs",
                    "valueType": {
                      "type": "id",
                      "value": "IntegrationsPostRequestBodyContentApplicationJsonSchemaConfigs"
                    }
                  },
                  {
                    "key": "provider",
                    "valueType": {
                      "type": "id",
                      "value": "IntegrationProvider"
                    }
                  },
                  {
                    "description": "List of features to enable (see features list above)",
                    "key": "features",
                    "valueType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "IntegrationFeature"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Integration"
              }
            },
            "statusCode": 200,
            "description": "A single integration"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "foo",
                "configs": {
                  "webhook_secret_key": "foo",
                  "algorithm": "md5",
                  "header_key": "foo",
                  "encoding": "base64"
                },
                "provider": "twitter",
                "features": [
                  "VERIFICATION"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "foo",
                  "configs": {
                    "webhook_secret_key": "foo",
                    "algorithm": "md5",
                    "header_key": "foo",
                    "encoding": "base64"
                  },
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "label": "foo",
                "provider": "twitter",
                "features": [
                  "VERIFICATION"
                ],
                "configs": {
                  "webhook_secret_key": "foo",
                  "algorithm": "md5",
                  "header_key": "foo",
                  "encoding": "base64"
                },
                "sources": [
                  "foo"
                ],
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ],
                  "configs": {
                    "webhook_secret_key": "foo",
                    "algorithm": "md5",
                    "header_key": "foo",
                    "encoding": "base64"
                  },
                  "sources": [
                    "foo"
                  ],
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIntegration",
          "originalEndpointId": "endpoint_integrations.getIntegration",
          "name": "Get an integration",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Integration"
              }
            },
            "statusCode": 200,
            "description": "A single integration"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "label": "foo",
                "provider": "twitter",
                "features": [
                  "VERIFICATION"
                ],
                "configs": {
                  "webhook_secret_key": "foo",
                  "algorithm": "md5",
                  "header_key": "foo",
                  "encoding": "base64"
                },
                "sources": [
                  "foo"
                ],
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ],
                  "configs": {
                    "webhook_secret_key": "foo",
                    "algorithm": "md5",
                    "header_key": "foo",
                    "encoding": "base64"
                  },
                  "sources": [
                    "foo"
                  ],
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateIntegration",
          "originalEndpointId": "endpoint_integrations.updateIntegration",
          "name": "Update an integration",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Label of the integration",
                    "key": "label",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Decrypted Key/Value object of the associated configuration for that provider",
                    "key": "configs",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IntegrationsIdPutRequestBodyContentApplicationJsonSchemaConfigs"
                      }
                    }
                  },
                  {
                    "key": "provider",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "IntegrationProvider"
                      }
                    }
                  },
                  {
                    "description": "List of features to enable (see features list above)",
                    "key": "features",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "IntegrationFeature"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Integration"
              }
            },
            "statusCode": 200,
            "description": "A single integration"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "label": "foo",
                "provider": "twitter",
                "features": [
                  "VERIFICATION"
                ],
                "configs": {
                  "webhook_secret_key": "foo",
                  "algorithm": "md5",
                  "header_key": "foo",
                  "encoding": "base64"
                },
                "sources": [
                  "foo"
                ],
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ],
                  "configs": {
                    "webhook_secret_key": "foo",
                    "algorithm": "md5",
                    "header_key": "foo",
                    "encoding": "base64"
                  },
                  "sources": [
                    "foo"
                  ],
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "DELETE",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "deleteIntegration",
          "originalEndpointId": "endpoint_integrations.deleteIntegration",
          "name": "Delete an integration",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DeletedIntegration"
              }
            },
            "statusCode": 200,
            "description": "An object with deleted integration id"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "attachIntegrationToSource",
          "originalEndpointId": "endpoint_integrations.attachIntegrationToSource",
          "name": "Attach an integration to a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "key": "source_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/attach/"
              },
              {
                "type": "pathParameter",
                "value": "source_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AttachedIntegrationToSource"
              }
            },
            "statusCode": 200,
            "description": "Attach operation success status"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations/id/attach/source_id",
              "pathParameters": {
                "id": "id",
                "source_id": "source_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "success": true
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "success": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "detachIntegrationToSource",
          "originalEndpointId": "endpoint_integrations.detachIntegrationToSource",
          "name": "Detach an integration from a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "key": "source_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/integrations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/detach/"
              },
              {
                "type": "pathParameter",
                "value": "source_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DetachedIntegrationFromSource"
              }
            },
            "statusCode": 200,
            "description": "Detach operation success status"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/integrations/id/detach/source_id",
              "pathParameters": {
                "id": "id",
                "source_id": "source_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {},
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_issues": {
      "subpackageId": "subpackage_issues",
      "name": "issues",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIssues",
          "originalEndpointId": "endpoint_issues.getIssues",
          "name": "Get issues",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issues"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersId"
                }
              }
            },
            {
              "key": "issue_trigger_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersIssueTriggerId"
                }
              }
            },
            {
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersType"
                }
              }
            },
            {
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersStatus"
                }
              }
            },
            {
              "key": "merged_with",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersMergedWith"
                }
              }
            },
            {
              "key": "aggregation_keys",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersAggregationKeys"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "first_seen_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersFirstSeenAt"
                }
              }
            },
            {
              "key": "last_seen_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersLastSeenAt"
                }
              }
            },
            {
              "key": "dismissed_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersDismissedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueWithDataPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of issues"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issues",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "iss_YXKv5OdJXCiVwkPhGy",
                    "team_id": "foo",
                    "status": "OPENED",
                    "opened_at": "foo",
                    "first_seen_at": "foo",
                    "last_seen_at": "foo",
                    "last_updated_by": "foo",
                    "dismissed_at": "foo",
                    "auto_resolved_at": "foo",
                    "merged_with": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "type": "delivery",
                    "aggregation_keys": {
                      "webhook_id": [
                        "foo"
                      ],
                      "response_status": [
                        42
                      ],
                      "error_code": [
                        "TIMEOUT"
                      ]
                    },
                    "reference": {
                      "event_id": "foo",
                      "attempt_id": "foo"
                    },
                    "data": {
                      "trigger_event": {
                        "id": "foo",
                        "team_id": "foo",
                        "webhook_id": "foo",
                        "source_id": "foo",
                        "destination_id": "foo",
                        "event_data_id": "foo",
                        "request_id": "foo",
                        "attempts": 42,
                        "data": {
                          "path": "foo",
                          "query": "foo",
                          "parsed_query": {},
                          "headers": {},
                          "body": {},
                          "is_large_payload": true
                        },
                        "last_attempt_at": "foo",
                        "next_attempt_at": "foo",
                        "response_status": 42,
                        "status": "SCHEDULED",
                        "successful_at": "foo",
                        "cli_id": "foo",
                        "updated_at": "foo",
                        "created_at": "foo",
                        "created_at_id": "foo",
                        "last_attempt_at_id": "foo"
                      },
                      "trigger_attempt": {
                        "id": "foo",
                        "team_id": "foo",
                        "event_id": "foo",
                        "response_status": 42,
                        "attempt_number": 42,
                        "trigger": "INITIAL",
                        "error_code": "TIMEOUT",
                        "body": {},
                        "requested_url": "foo",
                        "bulk_retry_id": "foo",
                        "status": "QUEUED",
                        "successful_at": "foo",
                        "delivered_at": "foo",
                        "responded_at": "foo",
                        "delivery_latency": 42,
                        "response_latency": 42,
                        "updated_at": "foo",
                        "created_at": "foo",
                        "state": "DELIVERING",
                        "archived_at": "foo",
                        "destination_id": "foo"
                      }
                    }
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "iss_YXKv5OdJXCiVwkPhGy",
                      "team_id": "foo",
                      "status": "OPENED",
                      "opened_at": "foo",
                      "first_seen_at": "foo",
                      "last_seen_at": "foo",
                      "last_updated_by": "foo",
                      "dismissed_at": "foo",
                      "auto_resolved_at": "foo",
                      "merged_with": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "type": "delivery",
                      "aggregation_keys": {
                        "webhook_id": [
                          "foo"
                        ],
                        "response_status": [
                          42
                        ],
                        "error_code": [
                          "TIMEOUT"
                        ]
                      },
                      "reference": {
                        "event_id": "foo",
                        "attempt_id": "foo"
                      },
                      "data": {
                        "trigger_event": {
                          "id": "foo",
                          "team_id": "foo",
                          "webhook_id": "foo",
                          "source_id": "foo",
                          "destination_id": "foo",
                          "event_data_id": "foo",
                          "request_id": "foo",
                          "attempts": 42,
                          "data": {
                            "path": "foo",
                            "query": "foo",
                            "parsed_query": {},
                            "headers": {},
                            "body": {},
                            "is_large_payload": true
                          },
                          "last_attempt_at": "foo",
                          "next_attempt_at": "foo",
                          "response_status": 42,
                          "status": "SCHEDULED",
                          "successful_at": "foo",
                          "cli_id": "foo",
                          "updated_at": "foo",
                          "created_at": "foo",
                          "created_at_id": "foo",
                          "last_attempt_at_id": "foo"
                        },
                        "trigger_attempt": {
                          "id": "foo",
                          "team_id": "foo",
                          "event_id": "foo",
                          "response_status": 42,
                          "attempt_number": 42,
                          "trigger": "INITIAL",
                          "error_code": "TIMEOUT",
                          "body": {},
                          "requested_url": "foo",
                          "bulk_retry_id": "foo",
                          "status": "QUEUED",
                          "successful_at": "foo",
                          "delivered_at": "foo",
                          "responded_at": "foo",
                          "delivery_latency": 42,
                          "response_latency": 42,
                          "updated_at": "foo",
                          "created_at": "foo",
                          "state": "DELIVERING",
                          "archived_at": "foo",
                          "destination_id": "foo"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIssueCount",
          "originalEndpointId": "endpoint_issues.getIssueCount",
          "name": "Get the number of issues",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issues/count"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersId"
                }
              }
            },
            {
              "key": "issue_trigger_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersIssueTriggerId"
                }
              }
            },
            {
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersType"
                }
              }
            },
            {
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersStatus"
                }
              }
            },
            {
              "key": "merged_with",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersMergedWith"
                }
              }
            },
            {
              "key": "aggregation_keys",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersAggregationKeys"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "first_seen_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersFirstSeenAt"
                }
              }
            },
            {
              "key": "last_seen_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersLastSeenAt"
                }
              }
            },
            {
              "key": "dismissed_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersDismissedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssuesCountGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueCount"
              }
            },
            "statusCode": 200,
            "description": "Issue count"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issues/count",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "count": 5
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "count": 5
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getIssue",
          "originalEndpointId": "endpoint_issues.getIssue",
          "name": "Get a single issue",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issues/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueWithData"
              }
            },
            "statusCode": 200,
            "description": "A single issue"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issues/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "iss_YXKv5OdJXCiVwkPhGy",
                "team_id": "foo",
                "status": "OPENED",
                "opened_at": "foo",
                "first_seen_at": "foo",
                "last_seen_at": "foo",
                "last_updated_by": "foo",
                "dismissed_at": "foo",
                "auto_resolved_at": "foo",
                "merged_with": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "type": "delivery",
                "aggregation_keys": {
                  "webhook_id": [
                    "foo"
                  ],
                  "response_status": [
                    42
                  ],
                  "error_code": [
                    "TIMEOUT"
                  ]
                },
                "reference": {
                  "event_id": "foo",
                  "attempt_id": "foo"
                },
                "data": {
                  "trigger_event": {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  },
                  "trigger_attempt": {
                    "id": "foo",
                    "team_id": "foo",
                    "event_id": "foo",
                    "response_status": 42,
                    "attempt_number": 42,
                    "trigger": "INITIAL",
                    "error_code": "TIMEOUT",
                    "body": {},
                    "requested_url": "foo",
                    "bulk_retry_id": "foo",
                    "status": "QUEUED",
                    "successful_at": "foo",
                    "delivered_at": "foo",
                    "responded_at": "foo",
                    "delivery_latency": 42,
                    "response_latency": 42,
                    "updated_at": "foo",
                    "created_at": "foo",
                    "state": "DELIVERING",
                    "archived_at": "foo",
                    "destination_id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "iss_YXKv5OdJXCiVwkPhGy",
                  "team_id": "foo",
                  "status": "OPENED",
                  "opened_at": "foo",
                  "first_seen_at": "foo",
                  "last_seen_at": "foo",
                  "last_updated_by": "foo",
                  "dismissed_at": "foo",
                  "auto_resolved_at": "foo",
                  "merged_with": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "type": "delivery",
                  "aggregation_keys": {
                    "webhook_id": [
                      "foo"
                    ],
                    "response_status": [
                      42
                    ],
                    "error_code": [
                      "TIMEOUT"
                    ]
                  },
                  "reference": {
                    "event_id": "foo",
                    "attempt_id": "foo"
                  },
                  "data": {
                    "trigger_event": {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "source_id": "foo",
                      "destination_id": "foo",
                      "event_data_id": "foo",
                      "request_id": "foo",
                      "attempts": 42,
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "last_attempt_at": "foo",
                      "next_attempt_at": "foo",
                      "response_status": 42,
                      "status": "SCHEDULED",
                      "successful_at": "foo",
                      "cli_id": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "created_at_id": "foo",
                      "last_attempt_at_id": "foo"
                    },
                    "trigger_attempt": {
                      "id": "foo",
                      "team_id": "foo",
                      "event_id": "foo",
                      "response_status": 42,
                      "attempt_number": 42,
                      "trigger": "INITIAL",
                      "error_code": "TIMEOUT",
                      "body": {},
                      "requested_url": "foo",
                      "bulk_retry_id": "foo",
                      "status": "QUEUED",
                      "successful_at": "foo",
                      "delivered_at": "foo",
                      "responded_at": "foo",
                      "delivery_latency": 42,
                      "response_latency": 42,
                      "updated_at": "foo",
                      "created_at": "foo",
                      "state": "DELIVERING",
                      "archived_at": "foo",
                      "destination_id": "foo"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateIssue",
          "originalEndpointId": "endpoint_issues.updateIssue",
          "name": "Update issue",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issues/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "New status",
                    "key": "status",
                    "valueType": {
                      "type": "id",
                      "value": "IssuesIdPutRequestBodyContentApplicationJsonSchemaStatus"
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Issue"
              }
            },
            "statusCode": 200,
            "description": "Updated issue"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issues/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "status": "OPENED"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "status": "OPENED"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "iss_YXKv5OdJXCiVwkPhGy",
                "team_id": "foo",
                "status": "OPENED",
                "opened_at": "foo",
                "first_seen_at": "foo",
                "last_seen_at": "foo",
                "last_updated_by": "foo",
                "dismissed_at": "foo",
                "auto_resolved_at": "foo",
                "merged_with": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "type": "delivery",
                "aggregation_keys": {
                  "webhook_id": [
                    "foo"
                  ],
                  "response_status": [
                    42
                  ],
                  "error_code": [
                    "TIMEOUT"
                  ]
                },
                "reference": {
                  "event_id": "foo",
                  "attempt_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "iss_YXKv5OdJXCiVwkPhGy",
                  "team_id": "foo",
                  "status": "OPENED",
                  "opened_at": "foo",
                  "first_seen_at": "foo",
                  "last_seen_at": "foo",
                  "last_updated_by": "foo",
                  "dismissed_at": "foo",
                  "auto_resolved_at": "foo",
                  "merged_with": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "type": "delivery",
                  "aggregation_keys": {
                    "webhook_id": [
                      "foo"
                    ],
                    "response_status": [
                      42
                    ],
                    "error_code": [
                      "TIMEOUT"
                    ]
                  },
                  "reference": {
                    "event_id": "foo",
                    "attempt_id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "DELETE",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "dismissIssue",
          "originalEndpointId": "endpoint_issues.dismissIssue",
          "name": "Dismiss an issue",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issues/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Issue"
              }
            },
            "statusCode": 200,
            "description": "Dismissed issue"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/issues/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "iss_YXKv5OdJXCiVwkPhGy",
                "team_id": "foo",
                "status": "OPENED",
                "opened_at": "foo",
                "first_seen_at": "foo",
                "last_seen_at": "foo",
                "last_updated_by": "foo",
                "dismissed_at": "foo",
                "auto_resolved_at": "foo",
                "merged_with": "foo",
                "updated_at": "foo",
                "created_at": "foo",
                "type": "delivery",
                "aggregation_keys": {
                  "webhook_id": [
                    "foo"
                  ],
                  "response_status": [
                    42
                  ],
                  "error_code": [
                    "TIMEOUT"
                  ]
                },
                "reference": {
                  "event_id": "foo",
                  "attempt_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "iss_YXKv5OdJXCiVwkPhGy",
                  "team_id": "foo",
                  "status": "OPENED",
                  "opened_at": "foo",
                  "first_seen_at": "foo",
                  "last_seen_at": "foo",
                  "last_updated_by": "foo",
                  "dismissed_at": "foo",
                  "auto_resolved_at": "foo",
                  "merged_with": "foo",
                  "updated_at": "foo",
                  "created_at": "foo",
                  "type": "delivery",
                  "aggregation_keys": {
                    "webhook_id": [
                      "foo"
                    ],
                    "response_status": [
                      42
                    ],
                    "error_code": [
                      "TIMEOUT"
                    ]
                  },
                  "reference": {
                    "event_id": "foo",
                    "attempt_id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_requests": {
      "subpackageId": "subpackage_requests",
      "name": "requests",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequests",
          "originalEndpointId": "endpoint_requests.getRequests",
          "name": "Get requests",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersId"
                }
              }
            },
            {
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersStatus"
                }
              }
            },
            {
              "key": "rejection_cause",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersRejectionCause"
                }
              }
            },
            {
              "key": "ignored_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersIgnoredCount"
                }
              }
            },
            {
              "key": "events_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersEventsCount"
                }
              }
            },
            {
              "key": "source_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersSourceId"
                }
              }
            },
            {
              "key": "verified",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "headers",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersHeaders"
                }
              }
            },
            {
              "key": "body",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersBody"
                }
              }
            },
            {
              "key": "parsed_query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersParsedQuery"
                }
              }
            },
            {
              "key": "path",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "ingested_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersIngestedAt"
                }
              }
            },
            {
              "key": "bulk_retry_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersBulkRetryId"
                }
              }
            },
            {
              "key": "include",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersInclude"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RequestPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of requests"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "verified": true,
                    "original_event_data_id": "foo",
                    "duplicate_hash": "foo",
                    "duplicate_hits": 42,
                    "rejection_cause": "SOURCE_ARCHIVED",
                    "ingest_priority": "NORMAL",
                    "ingested_at": "foo",
                    "ingested_at_id": "foo",
                    "source_id": "foo",
                    "events_count": 42,
                    "cli_events_count": 42,
                    "ignored_count": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "verified": true,
                      "original_event_data_id": "foo",
                      "duplicate_hash": "foo",
                      "duplicate_hits": 42,
                      "rejection_cause": "SOURCE_ARCHIVED",
                      "ingest_priority": "NORMAL",
                      "ingested_at": "foo",
                      "ingested_at_id": "foo",
                      "source_id": "foo",
                      "events_count": 42,
                      "cli_events_count": 42,
                      "ignored_count": 42,
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequest",
          "originalEndpointId": "endpoint_requests.getRequest",
          "name": "Get a request",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Request"
              }
            },
            "statusCode": 200,
            "description": "A single request"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "verified": true,
                "original_event_data_id": "foo",
                "duplicate_hash": "foo",
                "duplicate_hits": 42,
                "rejection_cause": "SOURCE_ARCHIVED",
                "ingest_priority": "NORMAL",
                "ingested_at": "foo",
                "ingested_at_id": "foo",
                "source_id": "foo",
                "events_count": 42,
                "cli_events_count": 42,
                "ignored_count": 42,
                "data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "verified": true,
                  "original_event_data_id": "foo",
                  "duplicate_hash": "foo",
                  "duplicate_hits": 42,
                  "rejection_cause": "SOURCE_ARCHIVED",
                  "ingest_priority": "NORMAL",
                  "ingested_at": "foo",
                  "ingested_at_id": "foo",
                  "source_id": "foo",
                  "events_count": 42,
                  "cli_events_count": 42,
                  "ignored_count": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestRawBody",
          "originalEndpointId": "endpoint_requests.getRequestRawBody",
          "name": "Get a request raw body data",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/raw_body"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RawBody"
              }
            },
            "statusCode": 200,
            "description": "A request raw body data"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests/id/raw_body",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "body": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "body": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "retryRequest",
          "originalEndpointId": "endpoint_requests.retryRequest",
          "name": "Retry a request",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/retry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Subset of webhook_ids to re-run the event logic on. Useful to retry only specific ignored_events",
                    "key": "webhook_ids",
                    "valueType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RetryRequest"
              }
            },
            "statusCode": 200,
            "description": "Retry request operation result"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests/id/retry",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "webhook_ids": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "webhook_ids": [
                    "foo"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "request": {
                  "id": "foo",
                  "team_id": "foo",
                  "verified": true,
                  "original_event_data_id": "foo",
                  "duplicate_hash": "foo",
                  "duplicate_hits": 42,
                  "rejection_cause": "SOURCE_ARCHIVED",
                  "ingest_priority": "NORMAL",
                  "ingested_at": "foo",
                  "ingested_at_id": "foo",
                  "source_id": "foo",
                  "events_count": 42,
                  "cli_events_count": 42,
                  "ignored_count": 42,
                  "data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "events": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request": {
                    "id": "foo",
                    "team_id": "foo",
                    "verified": true,
                    "original_event_data_id": "foo",
                    "duplicate_hash": "foo",
                    "duplicate_hits": 42,
                    "rejection_cause": "SOURCE_ARCHIVED",
                    "ingest_priority": "NORMAL",
                    "ingested_at": "foo",
                    "ingested_at_id": "foo",
                    "source_id": "foo",
                    "events_count": 42,
                    "cli_events_count": 42,
                    "ignored_count": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "events": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "source_id": "foo",
                      "destination_id": "foo",
                      "event_data_id": "foo",
                      "request_id": "foo",
                      "attempts": 42,
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "last_attempt_at": "foo",
                      "next_attempt_at": "foo",
                      "response_status": 42,
                      "status": "SCHEDULED",
                      "successful_at": "foo",
                      "cli_id": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "created_at_id": "foo",
                      "last_attempt_at_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestEvents",
          "originalEndpointId": "endpoint_requests.getRequestEvents",
          "name": "Get request events",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/events"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersId"
                }
              }
            },
            {
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersStatus"
                }
              }
            },
            {
              "key": "issue_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersIssueId"
                }
              }
            },
            {
              "key": "webhook_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersWebhookId"
                }
              }
            },
            {
              "key": "destination_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersDestinationId"
                }
              }
            },
            {
              "key": "source_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersSourceId"
                }
              }
            },
            {
              "key": "attempts",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersAttempts"
                }
              }
            },
            {
              "key": "response_status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersResponseStatus"
                }
              }
            },
            {
              "key": "successful_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersSuccessfulAt"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "error_code",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersErrorCode"
                }
              }
            },
            {
              "key": "cli_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersCliId"
                }
              }
            },
            {
              "key": "cli_user_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersCliUserId"
                }
              }
            },
            {
              "key": "last_attempt_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersLastAttemptAt"
                }
              }
            },
            {
              "key": "event_data_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersEventDataId"
                }
              }
            },
            {
              "key": "headers",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersHeaders"
                }
              }
            },
            {
              "key": "body",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersBody"
                }
              }
            },
            {
              "key": "parsed_query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersParsedQuery"
                }
              }
            },
            {
              "key": "bulk_retry_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersBulkRetryId"
                }
              }
            },
            {
              "key": "path",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "include",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersInclude"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdEventsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EventPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of events"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests/id/events",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "source_id": "foo",
                    "destination_id": "foo",
                    "event_data_id": "foo",
                    "request_id": "foo",
                    "attempts": 42,
                    "data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "last_attempt_at": "foo",
                    "next_attempt_at": "foo",
                    "response_status": 42,
                    "status": "SCHEDULED",
                    "successful_at": "foo",
                    "cli_id": "foo",
                    "updated_at": "foo",
                    "created_at": "foo",
                    "created_at_id": "foo",
                    "last_attempt_at_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "source_id": "foo",
                      "destination_id": "foo",
                      "event_data_id": "foo",
                      "request_id": "foo",
                      "attempts": 42,
                      "data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "last_attempt_at": "foo",
                      "next_attempt_at": "foo",
                      "response_status": 42,
                      "status": "SCHEDULED",
                      "successful_at": "foo",
                      "cli_id": "foo",
                      "updated_at": "foo",
                      "created_at": "foo",
                      "created_at_id": "foo",
                      "last_attempt_at_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestIgnoredEvents",
          "originalEndpointId": "endpoint_requests.getRequestIgnoredEvents",
          "name": "Get request ignored events",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/ignored_events"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdIgnoredEventsGetParametersId"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdIgnoredEventsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RequestsIdIgnoredEventsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IgnoredEventPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of ignored events"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/requests/id/ignored_events",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "cause": "ARCHIVED",
                    "request_id": "foo",
                    "meta": "body",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "cause": "ARCHIVED",
                      "request_id": "foo",
                      "meta": "body",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_bulkRetryRequests": {
      "subpackageId": "subpackage_bulkRetryRequests",
      "name": "bulkRetryRequests",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestBulkRetries",
          "originalEndpointId": "endpoint_bulkRetryRequests.getRequestBulkRetries",
          "name": "Get request bulk retries",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/requests/retry"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "cancelled_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersCancelledAt"
                }
              }
            },
            {
              "key": "completed_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersCompletedAt"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersId"
                }
              }
            },
            {
              "key": "in_progress",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersQuery"
                }
              }
            },
            {
              "key": "query_partial_match",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of request bulk retries"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/requests/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "query": {},
                    "created_at": "foo",
                    "updated_at": "foo",
                    "cancelled_at": "foo",
                    "completed_at": "foo",
                    "estimated_batch": 42,
                    "estimated_count": 42,
                    "processed_batch": 42,
                    "completed_count": 42,
                    "in_progress": true,
                    "progress": 42,
                    "failed_count": 42,
                    "number": 42
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "query": {},
                      "created_at": "foo",
                      "updated_at": "foo",
                      "cancelled_at": "foo",
                      "completed_at": "foo",
                      "estimated_batch": 42,
                      "estimated_count": 42,
                      "processed_batch": 42,
                      "completed_count": 42,
                      "in_progress": true,
                      "progress": 42,
                      "failed_count": 42,
                      "number": 42
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createRequestBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryRequests.createRequestBulkRetry",
          "name": "Create a requests bulk retry",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/requests/retry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
                    "key": "query",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "BulkRequestsRetryPostRequestBodyContentApplicationJsonSchemaQuery"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single requests bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/requests/retry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "generateRequestBulkRetryPlan",
          "originalEndpointId": "endpoint_bulkRetryRequests.generateRequestBulkRetryPlan",
          "name": "Generate a requests bulk retry plan",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/requests/retry/plan"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "BulkRequestsRetryPlanGetParametersQuery"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperationPlan"
              }
            },
            "statusCode": 200,
            "description": "Requests bulk retry plan"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/requests/retry/plan",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "estimated_batch": 42,
                "estimated_count": 42,
                "progress": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "progress": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRequestBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryRequests.getRequestBulkRetry",
          "name": "Get a requests bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/requests/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single requests bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/requests/retry/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "cancelRequestBulkRetry",
          "originalEndpointId": "endpoint_bulkRetryRequests.cancelRequestBulkRetry",
          "name": "Cancel a requests bulk retry",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bulk/requests/retry/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/cancel"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchOperation"
              }
            },
            "statusCode": 200,
            "description": "A single requests bulk retry"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/bulk/requests/retry/id/cancel",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "query": {},
                "created_at": "foo",
                "updated_at": "foo",
                "cancelled_at": "foo",
                "completed_at": "foo",
                "estimated_batch": 42,
                "estimated_count": 42,
                "processed_batch": 42,
                "completed_count": 42,
                "in_progress": true,
                "progress": 42,
                "failed_count": 42,
                "number": 42
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "query": {},
                  "created_at": "foo",
                  "updated_at": "foo",
                  "cancelled_at": "foo",
                  "completed_at": "foo",
                  "estimated_batch": 42,
                  "estimated_count": 42,
                  "processed_batch": 42,
                  "completed_count": 42,
                  "in_progress": true,
                  "progress": 42,
                  "failed_count": 42,
                  "number": 42
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_rulesets": {
      "subpackageId": "subpackage_rulesets",
      "name": "rulesets",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRulesets",
          "originalEndpointId": "endpoint_rulesets.getRulesets",
          "name": "Get rulesets",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RulesetsGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RulesetsGetParametersName"
                }
              }
            },
            {
              "key": "archived",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "archived_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RulesetsGetParametersArchivedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RulesetsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RulesetsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RulesetPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of rulesets"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "rules": [
                        {
                          "type": "retry",
                          "strategy": "linear",
                          "interval": 42,
                          "count": 42
                        }
                      ],
                      "is_team_default": true,
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createRuleset",
          "originalEndpointId": "endpoint_rulesets.createRuleset",
          "name": "Create a ruleset",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the ruleset",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  },
                  {
                    "key": "is_team_default",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertRuleset",
          "originalEndpointId": "endpoint_rulesets.upsertRuleset",
          "name": "Update or create a ruleset",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the ruleset",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  },
                  {
                    "key": "is_team_default",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getRuleset",
          "originalEndpointId": "endpoint_rulesets.getRuleset",
          "name": "Get a ruleset",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateRuleset",
          "originalEndpointId": "endpoint_rulesets.updateRuleset",
          "name": "Update a ruleset",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Name for the ruleset",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  },
                  {
                    "description": "Date the ruleset was archived",
                    "key": "archived_at",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  },
                  {
                    "key": "is_team_default",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "archiveRuleset",
          "originalEndpointId": "endpoint_rulesets.archiveRuleset",
          "name": "Archive a ruleset",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/archive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets/id/archive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "unarchiveRuleset",
          "originalEndpointId": "endpoint_rulesets.unarchiveRuleset",
          "name": "Unarchive a ruleset",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rulesets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/unarchive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Ruleset"
              }
            },
            "statusCode": 200,
            "description": "A single ruleset"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/rulesets/id/unarchive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "is_team_default": true,
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_sources": {
      "subpackageId": "subpackage_sources",
      "name": "sources",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getSources",
          "originalEndpointId": "endpoint_sources.getSources",
          "name": "Get sources",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersName"
                }
              }
            },
            {
              "key": "archived",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "archived_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersArchivedAt"
                }
              }
            },
            {
              "key": "integration_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersIntegrationId"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SourcesGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SourcePaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of sources"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "url": "foo",
                      "integration_id": "foo",
                      "integration": {
                        "id": "foo",
                        "label": "foo",
                        "provider": "twitter",
                        "features": [
                          "VERIFICATION"
                        ]
                      },
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createSource",
          "originalEndpointId": "endpoint_sources.createSource",
          "name": "Create a source",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique name for the source",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertSource",
          "originalEndpointId": "endpoint_sources.upsertSource",
          "name": "Update or create a source",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique name for the source",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getSource",
          "originalEndpointId": "endpoint_sources.getSource",
          "name": "Get a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateSource",
          "originalEndpointId": "endpoint_sources.updateSource",
          "name": "Update a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique name for the source",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  },
                  {
                    "description": "Date the source was archived",
                    "key": "archived_at",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "archiveSource",
          "originalEndpointId": "endpoint_sources.archiveSource",
          "name": "Archive a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/archive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources/id/archive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "unarchiveSource",
          "originalEndpointId": "endpoint_sources.unarchiveSource",
          "name": "Unarchive a source",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sources/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/unarchive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Source"
              }
            },
            "statusCode": 200,
            "description": "A single source"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/sources/id/unarchive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "url": "foo",
                "integration_id": "foo",
                "integration": {
                  "id": "foo",
                  "label": "foo",
                  "provider": "twitter",
                  "features": [
                    "VERIFICATION"
                  ]
                },
                "archived_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_notifications": {
      "subpackageId": "subpackage_notifications",
      "name": "notifications",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "toggleWebhookNotifications",
          "originalEndpointId": "endpoint_notifications.toggleWebhookNotifications",
          "name": "Toggle webhook notifications for the workspace",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/notifications/webhooks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Enable or disable webhook notifications on the workspace",
                    "key": "enabled",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "List of topics to send notifications for",
                    "key": "topics",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "TopicsValue"
                        }
                      }
                    }
                  },
                  {
                    "description": "The Hookdeck Source to send the webhook to",
                    "key": "source_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ToggleWebhookNotifications"
              }
            },
            "statusCode": 200,
            "description": "Toggle operation status response"
          },
          "errorsV2": [],
          "examples": [
            {
              "description": "",
              "path": "/notifications/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "enabled": true,
                "topics": [
                  "issue.opened"
                ],
                "source_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "enabled": true,
                  "topics": [
                    "issue.opened"
                  ],
                  "source_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transformations": {
      "subpackageId": "subpackage_transformations",
      "name": "transformations",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getTransformations",
          "originalEndpointId": "endpoint_transformations.getTransformations",
          "name": "Get transformations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsGetParametersName"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransformationPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of transformations"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "team_id": "foo",
                    "name": "foo",
                    "code": "foo",
                    "encrypted_env": "foo",
                    "iv": "foo",
                    "env": {},
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "team_id": "foo",
                      "name": "foo",
                      "code": "foo",
                      "encrypted_env": "foo",
                      "iv": "foo",
                      "env": {},
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createTransformation",
          "originalEndpointId": "endpoint_transformations.createTransformation",
          "name": "Create a transformation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique, human-friendly name for the transformation",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "JavaScript code to be executed",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Key-value environment variables to be passed to the transformation",
                    "key": "env",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "TransformationsPostRequestBodyContentApplicationJsonSchemaEnv"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transformation"
              }
            },
            "statusCode": 200,
            "description": "A single transformation"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo",
                "code": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "code": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "code": "foo",
                "encrypted_env": "foo",
                "iv": "foo",
                "env": {},
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "code": "foo",
                  "encrypted_env": "foo",
                  "iv": "foo",
                  "env": {},
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertTransformation",
          "originalEndpointId": "endpoint_transformations.upsertTransformation",
          "name": "Update or create a transformation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique, human-friendly name for the transformation",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "JavaScript code to be executed",
                    "key": "code",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Key-value environment variables to be passed to the transformation",
                    "key": "env",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "TransformationsPutRequestBodyContentApplicationJsonSchemaEnv"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transformation"
              }
            },
            "statusCode": 200,
            "description": "A single transformation"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo",
                "code": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "code": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "code": "foo",
                "encrypted_env": "foo",
                "iv": "foo",
                "env": {},
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "code": "foo",
                  "encrypted_env": "foo",
                  "iv": "foo",
                  "env": {},
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getTransformation",
          "originalEndpointId": "endpoint_transformations.getTransformation",
          "name": "Get a transformation",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transformation"
              }
            },
            "statusCode": 200,
            "description": "A single transformation"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "code": "foo",
                "encrypted_env": "foo",
                "iv": "foo",
                "env": {},
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "code": "foo",
                  "encrypted_env": "foo",
                  "iv": "foo",
                  "env": {},
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateTransformation",
          "originalEndpointId": "endpoint_transformations.updateTransformation",
          "name": "Update a transformation",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique, human-friendly name for the transformation",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  },
                  {
                    "description": "JavaScript code to be executed",
                    "key": "code",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Key-value environment variables to be passed to the transformation",
                    "key": "env",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "TransformationsIdPutRequestBodyContentApplicationJsonSchemaEnv"
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transformation"
              }
            },
            "statusCode": 200,
            "description": "A single transformation"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "team_id": "foo",
                "name": "foo",
                "code": "foo",
                "encrypted_env": "foo",
                "iv": "foo",
                "env": {},
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "team_id": "foo",
                  "name": "foo",
                  "code": "foo",
                  "encrypted_env": "foo",
                  "iv": "foo",
                  "env": {},
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "testTransformation",
          "originalEndpointId": "endpoint_transformations.testTransformation",
          "name": "Test a transformation code",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations/run"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Key-value environment variables to be passed to the transformation",
                    "key": "env",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaEnv"
                      }
                    }
                  },
                  {
                    "description": "ID of the connection to use for the execution `context`",
                    "key": "webhook_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "JavaScript code to be executed",
                    "key": "code",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Transformation ID",
                    "key": "transformation_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Request input to use for the transformation execution",
                    "key": "request",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "TransformationsRunPutRequestBodyContentApplicationJsonSchemaRequest"
                      }
                    }
                  },
                  {
                    "key": "event_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransformationExecutorOutput"
              }
            },
            "statusCode": 200,
            "description": "Transformation run output"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations/run",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "request_id": "foo",
                "transformation_id": "foo",
                "execution_id": "foo",
                "log_level": "debug",
                "request": {
                  "headers": {},
                  "path": "foo",
                  "query": {},
                  "parsed_query": {},
                  "body": {}
                },
                "console": [
                  {
                    "type": "error",
                    "message": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "transformation_id": "foo",
                  "execution_id": "foo",
                  "log_level": "debug",
                  "request": {
                    "headers": {},
                    "path": "foo",
                    "query": {},
                    "parsed_query": {},
                    "body": {}
                  },
                  "console": [
                    {
                      "type": "error",
                      "message": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getTransformationExecutions",
          "originalEndpointId": "endpoint_transformations.getTransformationExecutions",
          "name": "Get transformation executions",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/executions"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "log_level",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersLogLevel"
                }
              }
            },
            {
              "key": "webhook_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersWebhookId"
                }
              }
            },
            {
              "key": "issue_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersIssueId"
                }
              }
            },
            {
              "key": "created_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersCreatedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransformationsIdExecutionsGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransformationExecutionPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of transformation executions"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations/id/executions",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "transformed_event_data_id": "foo",
                    "original_event_data_id": "foo",
                    "transformation_id": "foo",
                    "team_id": "foo",
                    "webhook_id": "foo",
                    "log_level": "debug",
                    "logs": [
                      {
                        "type": "error",
                        "message": "foo"
                      }
                    ],
                    "updated_at": "foo",
                    "created_at": "foo",
                    "original_event_data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "transformed_event_data": {
                      "path": "foo",
                      "query": "foo",
                      "parsed_query": {},
                      "headers": {},
                      "body": {},
                      "is_large_payload": true
                    },
                    "issue_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "transformed_event_data_id": "foo",
                      "original_event_data_id": "foo",
                      "transformation_id": "foo",
                      "team_id": "foo",
                      "webhook_id": "foo",
                      "log_level": "debug",
                      "logs": [
                        {
                          "type": "error",
                          "message": "foo"
                        }
                      ],
                      "updated_at": "foo",
                      "created_at": "foo",
                      "original_event_data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "transformed_event_data": {
                        "path": "foo",
                        "query": "foo",
                        "parsed_query": {},
                        "headers": {},
                        "body": {},
                        "is_large_payload": true
                      },
                      "issue_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getTransformationExecution",
          "originalEndpointId": "endpoint_transformations.getTransformationExecution",
          "name": "Get a transformation execution",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "key": "execution_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transformations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/executions/"
              },
              {
                "type": "pathParameter",
                "value": "execution_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransformationExecution"
              }
            },
            "statusCode": 200,
            "description": "A single transformation execution"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/transformations/id/executions/execution_id",
              "pathParameters": {
                "id": "id",
                "execution_id": "execution_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "transformed_event_data_id": "foo",
                "original_event_data_id": "foo",
                "transformation_id": "foo",
                "team_id": "foo",
                "webhook_id": "foo",
                "log_level": "debug",
                "logs": [
                  {
                    "type": "error",
                    "message": "foo"
                  }
                ],
                "updated_at": "foo",
                "created_at": "foo",
                "original_event_data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "transformed_event_data": {
                  "path": "foo",
                  "query": "foo",
                  "parsed_query": {},
                  "headers": {},
                  "body": {},
                  "is_large_payload": true
                },
                "issue_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "transformed_event_data_id": "foo",
                  "original_event_data_id": "foo",
                  "transformation_id": "foo",
                  "team_id": "foo",
                  "webhook_id": "foo",
                  "log_level": "debug",
                  "logs": [
                    {
                      "type": "error",
                      "message": "foo"
                    }
                  ],
                  "updated_at": "foo",
                  "created_at": "foo",
                  "original_event_data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "transformed_event_data": {
                    "path": "foo",
                    "query": "foo",
                    "parsed_query": {},
                    "headers": {},
                    "body": {},
                    "is_large_payload": true
                  },
                  "issue_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_connections": {
      "subpackageId": "subpackage_connections",
      "name": "connections",
      "endpoints": [
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getConnections",
          "originalEndpointId": "endpoint_connections.getConnections",
          "name": "Get connections",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersId"
                }
              }
            },
            {
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersName"
                }
              }
            },
            {
              "key": "destination_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersDestinationId"
                }
              }
            },
            {
              "key": "source_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersSourceId"
                }
              }
            },
            {
              "key": "archived",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "archived_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersArchivedAt"
                }
              }
            },
            {
              "key": "full_name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[a-z0-9-_>\\s]+$",
                    "maxLength": 155
                  }
                }
              }
            },
            {
              "key": "paused_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersPausedAt"
                }
              }
            },
            {
              "key": "order_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersOrderBy"
                }
              }
            },
            {
              "key": "dir",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WebhooksGetParametersDir"
                }
              }
            },
            {
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }
            },
            {
              "key": "next",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            },
            {
              "key": "prev",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionPaginatedResult"
              }
            },
            "statusCode": 200,
            "description": "List of connections"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "pagination": {
                  "order_by": "foo",
                  "dir": "asc",
                  "limit": 42,
                  "prev": "foo",
                  "next": "foo"
                },
                "count": 42,
                "models": [
                  {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "destination": {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "path_forwarding_disabled": true,
                      "url": "foo",
                      "cli_path": "foo",
                      "rate_limit": 42,
                      "rate_limit_period": "second",
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    },
                    "source": {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "url": "foo",
                      "integration_id": "foo",
                      "integration": {
                        "id": "foo",
                        "label": "foo",
                        "provider": "twitter",
                        "features": [
                          "VERIFICATION"
                        ]
                      },
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    },
                    "ruleset": {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "rules": [
                        {
                          "type": "retry",
                          "strategy": "linear",
                          "interval": 42,
                          "count": 42
                        }
                      ],
                      "is_team_default": true,
                      "archived_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    },
                    "resolved_rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "archived_at": "foo",
                    "paused_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "pagination": {
                    "order_by": "foo",
                    "dir": "asc",
                    "limit": 42,
                    "prev": "foo",
                    "next": "foo"
                  },
                  "count": 42,
                  "models": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "team_id": "foo",
                      "destination": {
                        "id": "foo",
                        "name": "foo",
                        "team_id": "foo",
                        "path_forwarding_disabled": true,
                        "url": "foo",
                        "cli_path": "foo",
                        "rate_limit": 42,
                        "rate_limit_period": "second",
                        "archived_at": "foo",
                        "updated_at": "foo",
                        "created_at": "foo"
                      },
                      "source": {
                        "id": "foo",
                        "name": "foo",
                        "team_id": "foo",
                        "url": "foo",
                        "integration_id": "foo",
                        "integration": {
                          "id": "foo",
                          "label": "foo",
                          "provider": "twitter",
                          "features": [
                            "VERIFICATION"
                          ]
                        },
                        "archived_at": "foo",
                        "updated_at": "foo",
                        "created_at": "foo"
                      },
                      "ruleset": {
                        "id": "foo",
                        "name": "foo",
                        "team_id": "foo",
                        "rules": [
                          {
                            "type": "retry",
                            "strategy": "linear",
                            "interval": 42,
                            "count": 42
                          }
                        ],
                        "is_team_default": true,
                        "archived_at": "foo",
                        "updated_at": "foo",
                        "created_at": "foo"
                      },
                      "resolved_rules": [
                        {
                          "type": "retry",
                          "strategy": "linear",
                          "interval": 42,
                          "count": 42
                        }
                      ],
                      "rules": [
                        {
                          "type": "retry",
                          "strategy": "linear",
                          "interval": 42,
                          "count": 42
                        }
                      ],
                      "archived_at": "foo",
                      "paused_at": "foo",
                      "updated_at": "foo",
                      "created_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "POST",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "createConnection",
          "originalEndpointId": "endpoint_connections.createConnection",
          "name": "Create a connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique name of the connection for the source",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "ID of a destination to bind to the connection",
                    "key": "destination_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "ID of a source to bind to the connection",
                    "key": "source_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Destination input object",
                    "key": "destination",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPostRequestBodyContentApplicationJsonSchemaDestination"
                      }
                    }
                  },
                  {
                    "description": "Source input object",
                    "key": "source",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPostRequestBodyContentApplicationJsonSchemaSource"
                      }
                    }
                  },
                  {
                    "description": "Ruleset input object",
                    "key": "ruleset",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPostRequestBodyContentApplicationJsonSchemaRuleset"
                      }
                    }
                  },
                  {
                    "description": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "key": "ruleset_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "upsertConnection",
          "originalEndpointId": "endpoint_connections.upsertConnection",
          "name": "Update or create a connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "A unique name of the connection for the source",
                    "key": "name",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "regex": "^[A-z0-9-_]+$",
                        "maxLength": 155
                      }
                    }
                  },
                  {
                    "description": "ID of a destination to bind to the connection",
                    "key": "destination_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "ID of a source to bind to the connection",
                    "key": "source_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Destination input object",
                    "key": "destination",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPutRequestBodyContentApplicationJsonSchemaDestination"
                      }
                    }
                  },
                  {
                    "description": "Source input object",
                    "key": "source",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPutRequestBodyContentApplicationJsonSchemaSource"
                      }
                    }
                  },
                  {
                    "description": "Ruleset input object",
                    "key": "ruleset",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksPutRequestBodyContentApplicationJsonSchemaRuleset"
                      }
                    }
                  },
                  {
                    "description": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "key": "ruleset_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "GET",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "getConnection",
          "originalEndpointId": "endpoint_connections.getConnection",
          "name": "Get a single connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "updateConnection",
          "originalEndpointId": "endpoint_connections.updateConnection",
          "name": "Update a connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "description": "Unique name of the connection for the source",
                    "key": "name",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "regex": "^[A-z0-9-_]+$",
                          "maxLength": 155
                        }
                      }
                    }
                  },
                  {
                    "description": "Ruleset input object",
                    "key": "ruleset",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "WebhooksIdPutRequestBodyContentApplicationJsonSchemaRuleset"
                      }
                    }
                  },
                  {
                    "description": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "key": "ruleset_id",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "nullable",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  },
                  {
                    "description": "Array of rules to apply",
                    "key": "rules",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "Rule"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "archiveConnection",
          "originalEndpointId": "endpoint_connections.archiveConnection",
          "name": "Archive a connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/archive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id/archive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "unarchiveConnection",
          "originalEndpointId": "endpoint_connections.unarchiveConnection",
          "name": "Unarchive a connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/unarchive"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id/unarchive",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "pauseConnection",
          "originalEndpointId": "endpoint_connections.pauseConnection",
          "name": "Pause a connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/pause"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id/pause",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "",
          "method": "PUT",
          "defaultEnvironment": "Production API_2023-01-01",
          "environments": [
            {
              "id": "Production API_2023-01-01",
              "baseUrl": "https://api.hookdeck.com/2023-01-01"
            },
            {
              "id": "Production API_2022-11-01",
              "baseUrl": "https://api.hookdeck.com/2022-11-01"
            },
            {
              "id": "Production API_2022-10-01",
              "baseUrl": "https://api.hookdeck.com/2022-10-01"
            },
            {
              "id": "Production API_2022-07-01",
              "baseUrl": "https://api.hookdeck.com/2022-07-01"
            },
            {
              "id": "Production API_2022-03-01",
              "baseUrl": "https://api.hookdeck.com/2022-03-01"
            },
            {
              "id": "Production API_2021-08-01",
              "baseUrl": "https://api.hookdeck.com/2021-08-01"
            },
            {
              "id": "Production API_2020-01-01",
              "baseUrl": "https://api.hookdeck.com/2020-01-01"
            }
          ],
          "id": "unpauseConnection",
          "originalEndpointId": "endpoint_connections.unpauseConnection",
          "name": "Unpause a connection",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/unpause"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Connection"
              }
            },
            "statusCode": 200,
            "description": "A single connection"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "APIErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "description": "",
              "path": "/webhooks/id/unpause",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "name": "foo",
                "team_id": "foo",
                "destination": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "path_forwarding_disabled": true,
                  "url": "foo",
                  "cli_path": "foo",
                  "rate_limit": 42,
                  "rate_limit_period": "second",
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "source": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "url": "foo",
                  "integration_id": "foo",
                  "integration": {
                    "id": "foo",
                    "label": "foo",
                    "provider": "twitter",
                    "features": [
                      "VERIFICATION"
                    ]
                  },
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "ruleset": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "is_team_default": true,
                  "archived_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                },
                "resolved_rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "rules": [
                  {
                    "type": "retry",
                    "strategy": "linear",
                    "interval": 42,
                    "count": 42
                  }
                ],
                "archived_at": "foo",
                "paused_at": "foo",
                "updated_at": "foo",
                "created_at": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "name": "foo",
                  "team_id": "foo",
                  "destination": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "path_forwarding_disabled": true,
                    "url": "foo",
                    "cli_path": "foo",
                    "rate_limit": 42,
                    "rate_limit_period": "second",
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "source": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "url": "foo",
                    "integration_id": "foo",
                    "integration": {
                      "id": "foo",
                      "label": "foo",
                      "provider": "twitter",
                      "features": [
                        "VERIFICATION"
                      ]
                    },
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "ruleset": {
                    "id": "foo",
                    "name": "foo",
                    "team_id": "foo",
                    "rules": [
                      {
                        "type": "retry",
                        "strategy": "linear",
                        "interval": 42,
                        "count": 42
                      }
                    ],
                    "is_team_default": true,
                    "archived_at": "foo",
                    "updated_at": "foo",
                    "created_at": "foo"
                  },
                  "resolved_rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "rules": [
                    {
                      "type": "retry",
                      "strategy": "linear",
                      "interval": 42,
                      "count": 42
                    }
                  ],
                  "archived_at": "foo",
                  "paused_at": "foo",
                  "updated_at": "foo",
                  "created_at": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "OrderByDirection",
      "SeekPagination",
      "IssueType",
      "IssueTriggerStrategy",
      "IssueTriggerDeliveryConfigs",
      "TransformationExecutionLogLevel",
      "IssueTriggerTransformationConfigs",
      "IssueTriggerBackpressureDelay",
      "IssueTriggerBackpressureConfigs",
      "IssueTriggerReference",
      "IssueTriggerSlackChannel",
      "IssueTriggerIntegrationChannel",
      "IssueTriggerEmailChannel",
      "IssueTriggerChannels",
      "IssueTrigger",
      "IssueTriggerPaginatedResult",
      "APIErrorResponse",
      "DeletedIssueTriggerResponse",
      "AttemptTrigger",
      "AttemptErrorCodes",
      "AttemptStatus",
      "AttemptState",
      "EventAttempt",
      "EventAttemptPaginatedResult",
      "ShortEventData",
      "Bookmark",
      "BookmarkPaginatedResult",
      "EventStatus",
      "Event",
      "EventArray",
      "DeletedBookmarkResponse",
      "DestinationRateLimitPeriod",
      "Destination",
      "DestinationPaginatedResult",
      "EventPaginatedResult",
      "RawBody",
      "RetriedEvent",
      "BatchOperation",
      "BatchOperationPaginatedResult",
      "BatchOperationPlan",
      "IntegrationProvider",
      "IntegrationFeature",
      "HMACAlgorithms",
      "HMACIntegrationConfigs",
      "APIKeyIntegrationConfigs",
      "HandledHMACConfigs",
      "BasicAuthIntegrationConfigs",
      "ShopifyIntegrationConfigs",
      "Integration",
      "IntegrationPaginatedResult",
      "AttachedIntegrationToSource",
      "DetachedIntegrationFromSource",
      "DeletedIntegration",
      "IssueStatus",
      "DeliveryIssueAggregationKeys",
      "DeliveryIssueReference",
      "DeliveryIssueData",
      "DeliveryIssueWithData",
      "TransformationIssueAggregationKeys",
      "TransformationIssueReference",
      "ConsoleLine",
      "TransformationExecution",
      "TransformationIssueData",
      "TransformationIssueWithData",
      "IssueWithData",
      "IssueWithDataPaginatedResult",
      "IssueCount",
      "DeliveryIssue",
      "TransformationIssue",
      "Issue",
      "RequestRejectionCause",
      "Request",
      "RequestPaginatedResult",
      "RetryRequest",
      "IgnoredEventCause",
      "FilteredMeta",
      "TransformationFailedMeta",
      "IgnoredEvent",
      "IgnoredEventPaginatedResult",
      "RetryStrategy",
      "RetryRule",
      "AlertStrategy",
      "AlertRule",
      "ConnectionFilterProperty",
      "FilterRule",
      "TransformReference",
      "TransformFull",
      "TransformRule",
      "DelayRule",
      "Rule",
      "Ruleset",
      "RulesetPaginatedResult",
      "Source",
      "SourcePaginatedResult",
      "TopicsValue",
      "ToggleWebhookNotifications",
      "Transformation",
      "TransformationPaginatedResult",
      "TransformationExecutorOutput",
      "TransformationExecutionPaginatedResult",
      "Connection",
      "ConnectionPaginatedResult"
    ],
    "subpackages": [
      "subpackage_issueTriggers",
      "subpackage_attempts",
      "subpackage_bookmarks",
      "subpackage_destinations",
      "subpackage_events",
      "subpackage_bulkRetryEvents",
      "subpackage_bulkRetryIgnoredEvents",
      "subpackage_integrations",
      "subpackage_issues",
      "subpackage_requests",
      "subpackage_bulkRetryRequests",
      "subpackage_rulesets",
      "subpackage_sources",
      "subpackage_notifications",
      "subpackage_transformations",
      "subpackage_connections"
    ]
  },
  "auth": {
    "type": "bearerAuth",
    "tokenName": "token"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}