{
  "types": {
    "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV06Response": {
      "name": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV06Response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The 0xâ€‘prefixed hex string for the user to put into the UO's paymasterAndData field. Contains gas manager address, sigTimeRange, and secp256k1 signature.",
            "key": "paymasterAndData",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to allocate for the main execution call.",
            "key": "callGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to allocate for the verification step.",
            "key": "verificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to compensate the bundler for pre-verification execution and calldata.",
            "key": "preVerificationGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The maximum fee per gas to pay for the execution of this operation (similar to EIP-1559 max_fee_per_gas).",
            "key": "maxFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas).",
            "key": "maxPriorityFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV07Response": {
      "name": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV07Response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The paymaster address used in the operation.",
            "key": "paymaster",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The data for the paymaster in the operation.",
            "key": "paymasterData",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to allocate for the main execution call.",
            "key": "callGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to allocate for the verification step.",
            "key": "verificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to compensate the bundler for pre-verification execution and calldata.",
            "key": "preVerificationGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The maximum fee per gas to pay for the execution of this operation (similar to EIP-1559 max_fee_per_gas).",
            "key": "maxFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas).",
            "key": "maxPriorityFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The gas limit for paymaster verification.",
            "key": "paymasterVerificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The gas limit for paymaster post-operation.",
            "key": "paymasterPostOpGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataResult": {
      "name": "AlchemyRequestGasAndPaymasterAndDataResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "entrypointV06Response",
            "valueType": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV06Response"
            }
          },
          {
            "key": "entrypointV07Response",
            "valueType": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV07Response"
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetState": {
      "description": "Fake key-value mapping to override all slots in the account storage before executing the call.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetState",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetStateDiff": {
      "description": "Fake key-value mapping to override individual slots in the account storage before executing the call.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetStateDiff",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_stateOverrideSet": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_stateOverrideSet",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Fake balance to set for the account before executing the call (<= 32 bytes)",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fake nonce to set for the account before executing the call (<= 8 bytes).",
            "key": "nonce",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fake EVM bytecode to inject into the account before executing the call.",
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fake key-value mapping to override all slots in the account storage before executing the call.",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetState"
              }
            }
          },
          {
            "description": "Fake key-value mapping to override individual slots in the account storage before executing the call.",
            "key": "stateDiff",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamStateOverrideSetStateDiff"
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas1": {
      "description": "Multiplier value.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Hex string.",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas1",
            "description": "Multiplier value.",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas1"
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas1": {
      "description": "Multiplier value.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Hex string.",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas1",
            "description": "Multiplier value.",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas1"
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit1": {
      "description": "Multiplier value.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Hex string.",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit1",
            "description": "Multiplier value.",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit1"
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit1": {
      "description": "Multiplier value.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Hex string.",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit1",
            "description": "Multiplier value.",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit1"
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas1": {
      "description": "Multiplier value.",
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "description": "Hex string.",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas1",
            "description": "Multiplier value.",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas1"
            }
          }
        ]
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_overrides": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_overrides",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "maxFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxFeePerGas"
              }
            }
          },
          {
            "key": "maxPriorityFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesMaxPriorityFeePerGas"
              }
            }
          },
          {
            "key": "callGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesCallGasLimit"
              }
            }
          },
          {
            "key": "verificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesVerificationGasLimit"
              }
            }
          },
          {
            "key": "preVerificationGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AlchemyRequestGasAndPaymasterAndDataParamOverridesPreVerificationGas"
              }
            }
          }
        ]
      }
    },
    "AlchemyRequestGasAndPaymasterAndDataParamUserOperation0": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation0",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The account making the operation",
            "key": "sender",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-fA-F]{40}$"
                }
              }
            }
          },
          {
            "description": "Anti-replay parameter; used as salt for first-time account creation",
            "key": "nonce",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x([1-9a-f]+[0-9a-f]*|0)$"
                }
              }
            }
          },
          {
            "description": "The initCode of the account (needed if the account is not yet on-chain and needs creation)",
            "key": "initCode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-f]*$"
                }
              }
            }
          },
          {
            "description": "Encoded data for the primary function call or operation",
            "key": "callData",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-f]*$"
                }
              }
            }
          },
          {
            "description": "Gas allocated for the main execution call",
            "key": "callGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Gas allocated for verification",
            "key": "verificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Gas for pre-verification execution and calldata",
            "key": "preVerificationGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maximum fee per gas (EIP-1559)",
            "key": "maxFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max priority fee per gas (EIP-1559)",
            "key": "maxPriorityFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "displayName": "User Operation v0.6"
    },
    "AlchemyRequestGasAndPaymasterAndDataParamUserOperation1": {
      "name": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account initiating operation",
            "key": "sender",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-fA-F]{40}$"
                }
              }
            }
          },
          {
            "description": "Account nonce or creation salt",
            "key": "nonce",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x([1-9a-f]+[0-9a-f]*|0)$"
                }
              }
            }
          },
          {
            "description": "Data for operation call",
            "key": "callData",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-f]*$"
                }
              }
            }
          },
          {
            "description": "Gas allocated for call",
            "key": "callGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Gas allocated for verification",
            "key": "verificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max fee per gas (EIP-1559)",
            "key": "maxFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Priority fee per gas (EIP-1559)",
            "key": "maxPriorityFeePerGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Paymaster verification gas limit",
            "key": "paymasterVerificationGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The account factory address (needed if and only if the account is not yet on-chain and needs to be created)",
            "key": "factory",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-fA-F]{40}$"
                }
              }
            }
          },
          {
            "description": "Data for the account factory (only if the account factory exists)",
            "key": "factoryData",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^0x[0-9a-f]*$"
                }
              }
            }
          },
          {
            "description": "The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata",
            "key": "preVerificationGas",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of gas to allocate for the paymaster post-op code (only if a paymaster exists)",
            "key": "paymasterPostOpGasLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "displayName": "User Operation v0.7"
    },
    "alchemy_requestGasAndPaymasterAndData_Param_userOperation": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_userOperation",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation0",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation0"
            },
            "displayName": "User Operation v0.6"
          },
          {
            "typeName": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation1",
            "type": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataParamUserOperation1"
            },
            "displayName": "User Operation v0.7"
          }
        ]
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_policyId": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_policyId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_entryPoint": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_entryPoint",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^0[xX][0-9a-fA-F]*$"
          }
        }
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_dummySignature": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_dummySignature",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Param_webhookData": {
      "name": "alchemy_requestGasAndPaymasterAndData_Param_webhookData",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "alchemy_requestGasAndPaymasterAndData_Result": {
      "name": "AlchemyRequestGasAndPaymasterAndDataResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "entrypointV06Response",
            "valueType": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV06Response"
            }
          },
          {
            "key": "entrypointV07Response",
            "valueType": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataResultEntrypointV07Response"
            }
          }
        ]
      }
    },
    "AlchemyRequestFeePayerResult": {
      "name": "AlchemyRequestFeePayerResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The transaction after the service sets the `feePayer` field and adds the fee-payer signature.\n",
            "key": "serializedTransaction",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "alchemy_requestFeePayer_Param_policyId": {
      "name": "alchemy_requestFeePayer_Param_policyId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "alchemy_requestFeePayer_Param_serializedTransaction": {
      "name": "alchemy_requestFeePayer_Param_serializedTransaction",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[A-Za-z0-9+/]+={0,2}$"
          }
        }
      }
    },
    "alchemy_requestFeePayer_Param_webhookData": {
      "name": "alchemy_requestFeePayer_Param_webhookData",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "alchemy_requestFeePayer_Result": {
      "name": "AlchemyRequestFeePayerResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The transaction after the service sets the `feePayer` field and adds the fee-payer signature.\n",
            "key": "serializedTransaction",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    }
  },
  "subpackages": {},
  "rootPackage": {
    "endpoints": [
      {
        "auth": false,
        "description": "Requests gas and coverage for a `UserOperation`. Returns `paymasterAndData` and gas parameters if approved, errors if not. Optionally accepts fee parameter overrides to be used in the `UserOperation`.\n",
        "method": "POST",
        "defaultEnvironment": "Mainnet",
        "environments": [
          {
            "id": "Mainnet",
            "baseUrl": "https://eth-mainnet.g.alchemy.com/v2"
          },
          {
            "id": "Sepolia",
            "baseUrl": "https://eth-sepolia.g.alchemy.com/v2"
          }
        ],
        "id": "alchemy_requestGasAndPaymasterAndData",
        "originalEndpointId": "alchemy_requestGasAndPaymasterAndData",
        "name": "alchemy_requestGasAndPaymasterAndData",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": ""
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Gas Policy ID or list of Gas Policy IDs.",
                  "key": "policyId",
                  "valueType": {
                    "type": "id",
                    "value": "alchemy_requestGasAndPaymasterAndData_Param_policyId"
                  }
                },
                {
                  "description": "The entrypoint address the request should be sent through. This MUST be one of the entry points returned by the `supportedEntryPoints` RPC call and match the version of the user operation in the `userOperation` field.",
                  "key": "entryPoint",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "regex": "^0[xX][0-9a-fA-F]*$"
                    }
                  }
                },
                {
                  "description": "Dummy signature for the operation. This is useful for estimating gas costs.\n  <Warning>\n    This endpoint requires a dummy signature in the `userOp`. Check our [FAQs](/docs/reference/account-abstraction-faq#signatures) to learn what a dummy signature is and which dummy signature you should use.\n  </Warning>\n",
                  "key": "dummySignature",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "An object containing optional gas parameters, `paymasterAndData`, and signature fields. It can be either a v0.6 or v0.7 user operation but must match the version of the entry point at the specified `entryPoint`.",
                  "key": "userOperation",
                  "valueType": {
                    "type": "id",
                    "value": "alchemy_requestGasAndPaymasterAndData_Param_userOperation"
                  }
                },
                {
                  "description": "Optional fields that override our gas and fee estimates. Use this parameter to optionally override available fields: `maxFeePerGas`, `maxPriorityFeePerGas`, `callGasLimit`, `verificationGasLimit`, or `preVerificationGas`. \n\nThis will apply either:\n- absolutes overrides (using a hex string) simply overriding estimated values entirely OR\n- multiplier overrides relative to our estimates (in the format of { \"multiplier\": number } with max precision of 4 decimal places). For example, if the override value is { multiplier: 1.1 } for the `maxPriorityFeePerGas` field, then a 1.1 multiplier, or a 10% increase, is applied to the estimated `maxPriorityFeePerGas` of the userOp.\n\nThese overrides will be applied for every userOp sent with this provider. A higher buffer may give userOps a better chance to mine if the L1/L2 gas and fees change.\n\n```json\n\"overrides\": {\n  \"maxFeePerGas\": \"hex string\" | { \"multiplier\": number },\n  \"maxPriorityFeePerGas\": \"hex string\" | { \"multiplier\": number },\n  \"callGasLimit\": \"hex string\" | { \"multiplier\": number },\n  \"verificationGasLimit\": \"hex string\" | { \"multiplier\": number },\n  \"preVerificationGas\": \"hex string\" | { \"multiplier\": number },\n}\n```\n\n<Warning>\n  Previous override using \"percentage\" has been deprecated in favor of \"multiplier\" values\n</Warning>\n",
                  "key": "overrides",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "alchemy_requestGasAndPaymasterAndData_Param_overrides"
                    }
                  }
                },
                {
                  "description": "Optional.Allows changes to the state of a contract before executing the call. For example, you can modify variable values (like balances or approvals) for that call without changing the contract itself on the blockchain. \n\nIn more technical terms, the state override set is an optional parameter that allows executing the call against a modified chain state. It is an address-to-state mapping, where each entry specifies some state to be overridden prior to executing the call.\n",
                  "key": "stateOverrideSet",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "alchemy_requestGasAndPaymasterAndData_Param_stateOverrideSet"
                    }
                  }
                },
                {
                  "description": "Additional data you wish to include in the request, such as proof of humanity.",
                  "key": "webhookData",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "AlchemyRequestGasAndPaymasterAndDataResult"
            }
          },
          "description": "The transformed response object that wraps the original gas and paymaster response. It includes an array of asset change objects, a gasUsed field, and an error field."
        },
        "errorsV2": [],
        "examples": [
          {
            "description": "",
            "path": "/{apiKey}",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": [
              {
                "webhookData": "example webhook data",
                "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                "entryPoint": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
                "dummySignature": "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c",
                "userOperation": {
                  "sender": "0x1234567890123456789012345678901234567890",
                  "nonce": "0x1",
                  "callData": "0xabcdef",
                  "callGasLimit": "0x5208",
                  "verificationGasLimit": "0x5208",
                  "preVerificationGas": "0x5208",
                  "maxFeePerGas": "0x1",
                  "maxPriorityFeePerGas": "0x1"
                }
              }
            ],
            "requestBodyV3": {
              "type": "json",
              "value": [
                {
                  "webhookData": "example webhook data",
                  "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                  "entryPoint": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
                  "dummySignature": "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c",
                  "userOperation": {
                    "sender": "0x1234567890123456789012345678901234567890",
                    "nonce": "0x1",
                    "callData": "0xabcdef",
                    "callGasLimit": "0x5208",
                    "verificationGasLimit": "0x5208",
                    "preVerificationGas": "0x5208",
                    "maxFeePerGas": "0x1",
                    "maxPriorityFeePerGas": "0x1"
                  }
                }
              ]
            },
            "responseStatusCode": 200,
            "responseBody": {
              "jsonrpc": "2.0",
              "id": "1",
              "result": {
                "entrypointV06Response": {
                  "paymasterAndData": "0xabcde"
                },
                "entrypointV07Response": {
                  "paymasterData": "0x67890",
                  "paymasterVerificationGasLimit": "0x5208",
                  "paymasterPostOpGasLimit": "0x5208"
                }
              }
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "jsonrpc": "2.0",
                "id": "1",
                "result": {
                  "entrypointV06Response": {
                    "paymasterAndData": "0xabcde"
                  },
                  "entrypointV07Response": {
                    "paymasterData": "0x67890",
                    "paymasterVerificationGasLimit": "0x5208",
                    "paymasterPostOpGasLimit": "0x5208"
                  }
                }
              }
            },
            "codeSamples": []
          }
        ],
        "protocol": {
          "type": "openrpc",
          "methodName": "alchemy_requestGasAndPaymasterAndData"
        }
      },
      {
        "auth": false,
        "description": "Requests gas sponsorship for a Solana transaction and returns the **fully-signed** `serializedTransaction` (now containing the fee-payer signature).\n\n<Note>\n  Request access by reaching out to account-abstraction@alchemy.com\n</Note>\n",
        "method": "POST",
        "defaultEnvironment": "Mainnet",
        "environments": [
          {
            "id": "https://solana-mainnet.g.alchemy.com/v2",
            "baseUrl": "https://solana-mainnet.g.alchemy.com/v2"
          },
          {
            "id": "Solana Devnet",
            "baseUrl": "https://solana-devnet.g.alchemy.com/v2"
          }
        ],
        "id": "alchemy_requestFeePayer",
        "originalEndpointId": "alchemy_requestFeePayer",
        "name": "alchemy_requestFeePayer",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": ""
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The policy ID (_or list of IDs_) that governs sponsorship.",
                  "key": "policyId",
                  "valueType": {
                    "type": "id",
                    "value": "alchemy_requestFeePayer_Param_policyId"
                  }
                },
                {
                  "description": "The unsigned transaction produced by `tx.serialize()`.\nIt may already contain a `feePayer`; the service will overwrite it\nwith the sponsoring account and add the fee-payer signature.\n",
                  "key": "serializedTransaction",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "regex": "^[A-Za-z0-9+/]+={0,2}$"
                    }
                  }
                },
                {
                  "description": "Optional metadata (e.g. proof-of-humanity) that is forwarded to any policy-level webhooks.\n",
                  "key": "webhookData",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "AlchemyRequestFeePayerResult"
            }
          },
          "description": "Object containing the **fully-signed** transaction ready for `sendRawTransaction`.\n"
        },
        "errorsV2": [],
        "examples": [
          {
            "description": "",
            "path": "/{apiKey}",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": [
              {
                "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                "serializedTransaction": "AgICAQMEBQYHCAkKCwwNDg8BCg==",
                "webhookData": "user-liveness-proof"
              }
            ],
            "requestBodyV3": {
              "type": "json",
              "value": [
                {
                  "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                  "serializedTransaction": "AgICAQMEBQYHCAkKCwwNDg8BCg==",
                  "webhookData": "user-liveness-proof"
                }
              ]
            },
            "responseStatusCode": 200,
            "responseBody": {
              "jsonrpc": "2.0",
              "id": "1",
              "result": {
                "serializedTransaction": "AQIDBAUGBwgJCgsMDQ4PEA=="
              }
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "jsonrpc": "2.0",
                "id": "1",
                "result": {
                  "serializedTransaction": "AQIDBAUGBwgJCgsMDQ4PEA=="
                }
              }
            },
            "codeSamples": []
          }
        ],
        "protocol": {
          "type": "openrpc",
          "methodName": "alchemy_requestFeePayer"
        }
      }
    ],
    "webhooks": [],
    "websockets": [],
    "types": [],
    "subpackages": []
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}