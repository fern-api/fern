{
  "types": {
    "ListenRequest": {
      "description": "Audio file to transcribe",
      "name": "ListenRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      }
    },
    "ListenRequestFile": {
      "description": "Binary audio file to transcribe",
      "name": "ListenRequestFile",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "binary"
          }
        }
      }
    },
    "MetadataModelInfo": {
      "name": "MetadataModelInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "MetadataSummaryInfo": {
      "name": "MetadataSummaryInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "MetadataSentimentInfo": {
      "name": "MetadataSentimentInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "MetadataTopicsInfo": {
      "name": "MetadataTopicsInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "MetadataIntentsInfo": {
      "name": "MetadataIntentsInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "metadata": {
      "name": "metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transaction_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "deprecated"
                }
              }
            },
            "availability": "Deprecated"
          },
          {
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "sha256",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "duration",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "channels",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "models",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "model_info",
            "valueType": {
              "type": "id",
              "value": "MetadataModelInfo"
            }
          },
          {
            "key": "summary_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "MetadataSummaryInfo"
              }
            }
          },
          {
            "key": "sentiment_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "MetadataSentimentInfo"
              }
            }
          },
          {
            "key": "topics_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "MetadataTopicsInfo"
              }
            }
          },
          {
            "key": "intents_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "MetadataIntentsInfo"
              }
            }
          },
          {
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsSearchItemsHitsItems": {
      "name": "ChannelsItemsSearchItemsHitsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "snippet",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsSearchItems": {
      "name": "ChannelsItemsSearchItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "hits",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsSearchItemsHitsItems"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsWordsItems": {
      "name": "ChannelsItemsAlternativesItemsWordsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsParagraphsParagraphsItemsSentencesItems": {
      "name": "ChannelsItemsAlternativesItemsParagraphsParagraphsItemsSentencesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsParagraphsParagraphsItems": {
      "name": "ChannelsItemsAlternativesItemsParagraphsParagraphsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sentences",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItemsParagraphsParagraphsItemsSentencesItems"
                }
              }
            }
          },
          {
            "key": "speaker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "num_words",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsParagraphs": {
      "name": "ChannelsItemsAlternativesItemsParagraphs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transcript",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "paragraphs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItemsParagraphsParagraphsItems"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsSummariesItems": {
      "name": "ChannelsItemsAlternativesItemsSummariesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "end_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItemsTopicsItems": {
      "name": "ChannelsItemsAlternativesItemsTopicsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "end_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItemsAlternativesItems": {
      "name": "ChannelsItemsAlternativesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transcript",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItemsWordsItems"
                }
              }
            }
          },
          {
            "key": "paragraphs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsItemsAlternativesItemsParagraphs"
              }
            }
          },
          {
            "key": "summaries",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItemsSummariesItems"
                }
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItemsTopicsItems"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsItems": {
      "name": "ChannelsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "search",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsSearchItems"
                }
              }
            }
          },
          {
            "key": "alternatives",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsItemsAlternativesItems"
                }
              }
            }
          },
          {
            "key": "detected_language",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "channels": {
      "name": "channels",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "ChannelsItems"
          }
        }
      }
    },
    "UtterancesItemsWordsItems": {
      "name": "UtterancesItemsWordsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "speaker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "speaker_confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "punctuated_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "UtterancesItems": {
      "name": "UtterancesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "channel",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "transcript",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "UtterancesItemsWordsItems"
                }
              }
            }
          },
          {
            "key": "speaker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "utterances": {
      "name": "utterances",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "UtterancesItems"
          }
        }
      }
    },
    "summary": {
      "name": "summary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "short",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TopicsResultsTopicsSegmentsItemsTopicsItems": {
      "name": "TopicsResultsTopicsSegmentsItemsTopicsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "topic",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "confidence_score",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "TopicsResultsTopicsSegmentsItems": {
      "name": "TopicsResultsTopicsSegmentsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "end_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TopicsResultsTopicsSegmentsItemsTopicsItems"
                }
              }
            }
          }
        ]
      }
    },
    "TopicsResultsTopics": {
      "name": "TopicsResultsTopics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "segments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TopicsResultsTopicsSegmentsItems"
                }
              }
            }
          }
        ]
      }
    },
    "TopicsResults": {
      "name": "TopicsResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TopicsResultsTopics"
              }
            }
          }
        ]
      }
    },
    "topics": {
      "description": "Output whenever `topics=true` is used",
      "name": "topics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TopicsResults"
              }
            }
          }
        ]
      }
    },
    "IntentsResultsIntentsSegmentsItemsIntentsItems": {
      "name": "IntentsResultsIntentsSegmentsItemsIntentsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "intent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "confidence_score",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "IntentsResultsIntentsSegmentsItems": {
      "name": "IntentsResultsIntentsSegmentsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "end_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "intents",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IntentsResultsIntentsSegmentsItemsIntentsItems"
                }
              }
            }
          }
        ]
      }
    },
    "IntentsResultsIntents": {
      "name": "IntentsResultsIntents",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "segments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IntentsResultsIntentsSegmentsItems"
                }
              }
            }
          }
        ]
      }
    },
    "IntentsResults": {
      "name": "IntentsResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "intents",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IntentsResultsIntents"
              }
            }
          }
        ]
      }
    },
    "intents": {
      "description": "Output whenever `intents=true` is used",
      "name": "intents",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IntentsResults"
              }
            }
          }
        ]
      }
    },
    "SentimentsSegmentsItems": {
      "name": "SentimentsSegmentsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "end_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "sentiment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "sentiment_score",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "SentimentsAverage": {
      "name": "SentimentsAverage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sentiment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "sentiment_score",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "sentiments": {
      "description": "Output whenever `sentiment=true` is used",
      "name": "sentiments",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "segments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "SentimentsSegmentsItems"
                }
              }
            }
          },
          {
            "key": "average",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SentimentsAverage"
              }
            }
          }
        ]
      }
    },
    "results": {
      "name": "results",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channels",
            "valueType": {
              "type": "id",
              "value": "channels"
            }
          },
          {
            "key": "utterances",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "utterances"
              }
            }
          },
          {
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "summary"
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "topics"
              }
            }
          },
          {
            "key": "intents",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "intents"
              }
            }
          },
          {
            "key": "sentiments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "sentiments"
              }
            }
          }
        ]
      }
    },
    "response": {
      "description": "The standard transcription response",
      "name": "response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "metadata",
            "valueType": {
              "type": "id",
              "value": "metadata"
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "id",
              "value": "results"
            }
          }
        ]
      }
    },
    "text_request_url": {
      "name": "text_request_url",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL pointing to the text source",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          {
            "description": "The plain text to analyze",
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "text_request_text": {
      "name": "text_request_text",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL pointing to the text source",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "The plain text to analyze",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "text_request": {
      "name": "text_request",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "text_request_url",
            "type": {
              "type": "id",
              "value": "text_request_url"
            }
          },
          {
            "typeName": "text_request_text",
            "type": {
              "type": "id",
              "value": "text_request_text"
            }
          }
        ]
      }
    },
    "TextMetadataMetadataSummaryInfo": {
      "name": "TextMetadataMetadataSummaryInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "TextMetadataMetadataSentimentInfo": {
      "name": "TextMetadataMetadataSentimentInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "TextMetadataMetadataTopicsInfo": {
      "name": "TextMetadataMetadataTopicsInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "TextMetadataMetadataIntentsInfo": {
      "name": "TextMetadataMetadataIntentsInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "TextMetadataMetadata": {
      "name": "TextMetadataMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "language",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "summary_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextMetadataMetadataSummaryInfo"
              }
            }
          },
          {
            "key": "sentiment_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextMetadataMetadataSentimentInfo"
              }
            }
          },
          {
            "key": "topics_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextMetadataMetadataTopicsInfo"
              }
            }
          },
          {
            "key": "intents_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextMetadataMetadataIntentsInfo"
              }
            }
          }
        ]
      }
    },
    "text_metadata": {
      "name": "text_metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextMetadataMetadata"
              }
            }
          }
        ]
      }
    },
    "TextSummaryResultsSummary": {
      "name": "TextSummaryResultsSummary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TextSummaryResults": {
      "name": "TextSummaryResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextSummaryResultsSummary"
              }
            }
          }
        ]
      }
    },
    "text_summary": {
      "description": "Output whenever `summary=true` is used",
      "name": "text_summary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TextSummaryResults"
              }
            }
          }
        ]
      }
    },
    "text_results": {
      "name": "text_results",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "text_summary"
              }
            }
          },
          {
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "topics"
              }
            }
          },
          {
            "key": "intents",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "intents"
              }
            }
          },
          {
            "key": "sentiments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "sentiments"
              }
            }
          }
        ]
      }
    },
    "text_response": {
      "description": "The standard text response",
      "name": "text_response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "metadata",
            "valueType": {
              "type": "id",
              "value": "text_metadata"
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "id",
              "value": "text_results"
            }
          }
        ]
      }
    },
    "speak_request": {
      "description": "Request body for text-to-speech conversion",
      "name": "speak_request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The text content to be converted to speech",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "speak_response": {
      "description": "The standard text response",
      "name": "speak_response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        ]
      }
    },
    "update_projects": {
      "name": "update_projects",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "SttModelsItems": {
      "name": "SttModelsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "streaming",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "formatted_output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "stt_models": {
      "name": "stt_models",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "SttModelsItems"
          }
        }
      }
    },
    "TtsModelsItemsMetadata": {
      "name": "TtsModelsItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "accent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "sample",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "TtsModelsItems": {
      "name": "TtsModelsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TtsModelsItemsMetadata"
              }
            }
          }
        ]
      }
    },
    "tts_models": {
      "name": "tts_models",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TtsModelsItems"
          }
        }
      }
    },
    "KeysItemsMember": {
      "name": "KeysItemsMember",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "KeysItemsApiKey": {
      "name": "KeysItemsApiKey",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "api_key_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "scopes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "KeysItems": {
      "name": "KeysItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeysItemsMember"
              }
            }
          },
          {
            "key": "api_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeysItemsApiKey"
              }
            }
          }
        ]
      }
    },
    "keys": {
      "name": "keys",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "KeysItems"
          }
        }
      }
    },
    "key_created": {
      "description": "API key created",
      "name": "key_created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the API key",
            "key": "api_key_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The API key",
            "key": "key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A comment for the API key",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the scopes for the API key",
            "key": "scopes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "the tags for the API key",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "KeyMemberApiKey": {
      "name": "KeyMemberApiKey",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "api_key_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "scopes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "KeyMember": {
      "name": "KeyMember",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "first_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "last_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "api_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeyMemberApiKey"
              }
            }
          }
        ]
      }
    },
    "key": {
      "name": "key",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeyMember"
              }
            }
          }
        ]
      }
    },
    "update_member_scope": {
      "name": "update_member_scope",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A scope to update",
            "key": "scope",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "create_project_invite": {
      "description": "Request body for creating a project invite",
      "name": "create_project_invite",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The email address of the invitee",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The scope of the invitee",
            "key": "scope",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RequestResponse": {
      "description": "The response of the request",
      "name": "RequestResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "request": {
      "description": "A single request",
      "name": "request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The unique identifier of the project",
            "key": "project_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The date and time the request was created",
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "The API path of the request",
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The unique identifier of the API key",
            "key": "api_key_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The response of the request",
            "key": "response",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RequestResponse"
              }
            }
          },
          {
            "description": "The response code of the request",
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The deployment type",
            "key": "deployment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The callback URL for the request",
            "key": "callback",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "create_distribution_creds": {
      "description": "Request body for creating distribution credentials",
      "name": "create_distribution_creds",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Optional comment about the credentials",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ListenPostParametersSchema": {
      "name": "V1ListenPostParametersSchema",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1ListenPostParametersSchema0",
            "description": "Use the latest version of a model",
            "type": {
              "type": "id",
              "value": "V1ListenPostParametersSchema0"
            }
          },
          {
            "typeName": "V1ListenPostParametersSchema1",
            "description": "Use a previous version of a model",
            "type": {
              "type": "id",
              "value": "V1ListenPostParametersSchema1"
            }
          }
        ]
      }
    },
    "V1ListenPostParametersSchema0": {
      "description": "Use the latest version of a model",
      "name": "V1ListenPostParametersSchema0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "latest"
          }
        ]
      }
    },
    "V1ListenPostParametersSchema1": {
      "description": "Use a previous version of a model",
      "name": "V1ListenPostParametersSchema1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1ListenPostParametersSchemaOneOf1Items": {
      "name": "V1ListenPostParametersSchemaOneOf1Items",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pci"
          },
          {
            "value": "pii"
          },
          {
            "value": "numbers"
          }
        ]
      }
    },
    "BadRequestError": {
      "name": "BadRequestError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The error category",
            "key": "category",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The error message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Additional details about the error",
            "key": "details",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The request ID",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ReadPostParametersSchema": {
      "name": "V1ReadPostParametersSchema",
      "shape": {
        "type": "enum",
        "default": "en",
        "values": [
          {
            "value": "en"
          }
        ]
      }
    },
    "V1ReadPostParametersSchema0": {
      "name": "V1ReadPostParametersSchema0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "V1ReadPostParametersSchema1": {
      "name": "V1ReadPostParametersSchema1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      }
    },
    "V1SpeakPostParametersSchema0": {
      "description": "Encoding - linear16. Supported sample rates - 8000, 16000, 24000, 32000, 48000 Hz.",
      "name": "V1SpeakPostParametersSchema0",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "8000"
          },
          {
            "value": "16000"
          },
          {
            "value": "24000"
          },
          {
            "value": "32000"
          },
          {
            "value": "48000"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema1": {
      "description": "Encoding - mulaw. Supported sample rates - 8000, 16000 Hz.",
      "name": "V1SpeakPostParametersSchema1",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "8000"
          },
          {
            "value": "16000"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema2": {
      "description": "Encoding - alaw. Supported sample rates - 8000, 16000 Hz.",
      "name": "V1SpeakPostParametersSchema2",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "8000"
          },
          {
            "value": "16000"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema": {
      "name": "V1SpeakPostParametersSchema",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "V1SpeakPostParametersSchema0",
            "description": "Encoding - linear16. Supported sample rates - 8000, 16000, 24000, 32000, 48000 Hz.",
            "type": {
              "type": "id",
              "value": "V1SpeakPostParametersSchema0"
            }
          },
          {
            "typeName": "V1SpeakPostParametersSchema1",
            "description": "Encoding - mulaw. Supported sample rates - 8000, 16000 Hz.",
            "type": {
              "type": "id",
              "value": "V1SpeakPostParametersSchema1"
            }
          },
          {
            "typeName": "V1SpeakPostParametersSchema2",
            "description": "Encoding - alaw. Supported sample rates - 8000, 16000 Hz.",
            "type": {
              "type": "id",
              "value": "V1SpeakPostParametersSchema2"
            }
          },
          {
            "typeName": "V1SpeakPostParametersSchema3",
            "description": "Encoding - mp3. Sample rate is fixed and not configurable (22050 Hz).",
            "type": {
              "type": "id",
              "value": "V1SpeakPostParametersSchema3"
            }
          },
          {
            "typeName": "V1SpeakPostParametersSchema4",
            "description": "Encoding - opus. Sample rate is fixed at 48000 Hz.",
            "type": {
              "type": "id",
              "value": "V1SpeakPostParametersSchema4"
            }
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema3": {
      "description": "Encoding - mp3. Sample rate is fixed and not configurable (22050 Hz).",
      "name": "V1SpeakPostParametersSchema3",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "22050"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema4": {
      "description": "Encoding - opus. Sample rate is fixed at 48000 Hz.",
      "name": "V1SpeakPostParametersSchema4",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "48000"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema5": {
      "description": "Encoding - opus. High-compression audio format optimized for real-time communications.",
      "name": "V1SpeakPostParametersSchema5",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "opus"
          }
        ]
      }
    },
    "V1SpeakPostParametersSchema6": {
      "description": "Encoding - aac. Advanced audio format offering better quality at smaller file sizes than mp3.",
      "name": "V1SpeakPostParametersSchema6",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "aac"
          }
        ]
      }
    },
    "ForbiddenError": {
      "name": "ForbiddenError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The category of the error",
            "key": "category",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A message about the error",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the error",
            "key": "details",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The unique identifier of the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ContentTooLargeError": {
      "name": "ContentTooLargeError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The error code",
            "key": "err_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The error message",
            "key": "err_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The request ID",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "UnsupportedMediaTypeError": {
      "name": "UnsupportedMediaTypeError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The error code",
            "key": "err_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The error message",
            "key": "err_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The request ID",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsGetResponsesSchemaProjectsItems": {
      "name": "V1ProjectsGetResponsesSchemaProjectsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the project",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjects_Response_200": {
      "name": "Management API_listProjects_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "projects",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsGetResponsesSchemaProjectsItems"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProject_Response_200": {
      "name": "Management API_getProject_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the project",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "NotFoundError": {
      "name": "NotFoundError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The category of the error",
            "key": "category",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the error",
            "key": "details",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A message about the error",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The unique identifier of the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_deleteProject_Response_200": {
      "name": "Management API_deleteProject_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_updateProject_Response_200": {
      "name": "Management API_updateProject_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdBalancesGetResponsesSchemaBalancesItems": {
      "name": "V1ProjectsProjectIdBalancesGetResponsesSchemaBalancesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the balance",
            "key": "balance_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of the balance",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "The units of the balance, such as \"USD\"",
            "key": "units",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Description or reference of the purchase",
            "key": "purchase_order_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectBalances_Response_200": {
      "name": "Management API_getProjectBalances_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "balances",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdBalancesGetResponsesSchemaBalancesItems"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectBalance_Response_200": {
      "name": "Management API_getProjectBalance_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the balance",
            "key": "balance_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The amount of the balance",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "The units of the balance, such as \"USD\"",
            "key": "units",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Description or reference of the purchase",
            "key": "purchase_order_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectModels_Response_200": {
      "name": "Management API_listProjectModels_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "stt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "stt_models"
                }
              }
            }
          },
          {
            "key": "tts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "tts_models"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectModel_Response_200": {
      "name": "Management API_getProjectModel_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "stt_models",
            "type": {
              "type": "id",
              "value": "stt_models"
            }
          },
          {
            "typeName": "tts_models",
            "type": {
              "type": "id",
              "value": "tts_models"
            }
          }
        ]
      }
    },
    "Management API_listProjectKeys_Response_200": {
      "name": "Management API_listProjectKeys_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "api_keys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "keys"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectKey_Response_200": {
      "name": "Management API_getProjectKey_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "item",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "key"
              }
            }
          }
        ]
      }
    },
    "Management API_deleteProjectKey_Response_200": {
      "name": "Management API_deleteProjectKey_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A message indicating that the API key was deleted",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdMembersGetResponsesSchemaMembersItems": {
      "name": "V1ProjectsProjectIdMembersGetResponsesSchemaMembersItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the member",
            "key": "member_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectMembers_Response_200": {
      "name": "Management API_listProjectMembers_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "members",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdMembersGetResponsesSchemaMembersItems"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_deleteProjectMember_Response_200": {
      "name": "Management API_deleteProjectMember_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectMemberScopes_Response_200": {
      "name": "Management API_listProjectMemberScopes_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The API scopes of the member",
            "key": "scopes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Management API_updateProjectMemberScopes_Response_200": {
      "name": "Management API_updateProjectMemberScopes_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdInvitesGetResponsesSchemaInvitesItems": {
      "name": "V1ProjectsProjectIdInvitesGetResponsesSchemaInvitesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The email address of the invitee",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The scope of the invitee",
            "key": "scope",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectInvites_Response_200": {
      "name": "Management API_listProjectInvites_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "invites",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdInvitesGetResponsesSchemaInvitesItems"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_createProjectInvite_Response_200": {
      "name": "Management API_createProjectInvite_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_deleteProjectInvite_Response_200": {
      "name": "Management API_deleteProjectInvite_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_deleteProjectLeave_Response_200": {
      "name": "Management API_deleteProjectLeave_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "confirmation message",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectRequests_Response_200": {
      "name": "Management API_listProjectRequests_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The page number of the paginated response",
            "key": "page",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The number of results per page",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "requests",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "request"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectRequest_Response_200": {
      "name": "Management API_getProjectRequest_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "request"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageGetParametersSchema": {
      "name": "V1ProjectsProjectIdUsageGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "alternatives.yml"
          },
          {
            "value": "callback_method.yml"
          },
          {
            "value": "callback.yml"
          },
          {
            "value": "channels.yml"
          },
          {
            "value": "custom_intent_mode.yml"
          },
          {
            "value": "custom_intent.yml"
          },
          {
            "value": "custom_topic_mode.yml"
          },
          {
            "value": "custom_topic.yml"
          },
          {
            "value": "detect_entities.yml"
          },
          {
            "value": "detect_language.yml"
          },
          {
            "value": "diarize.yml"
          },
          {
            "value": "diarize_version.yml"
          },
          {
            "value": "dictation.yml"
          },
          {
            "value": "detect_topics.yml"
          },
          {
            "value": "encoding.yml"
          },
          {
            "value": "extra.yml"
          },
          {
            "value": "filler_words.yml"
          },
          {
            "value": "intents.yml"
          },
          {
            "value": "keywords.yml"
          },
          {
            "value": "language.yml"
          },
          {
            "value": "measurements.yml"
          },
          {
            "value": "model.yml"
          },
          {
            "value": "multichannel.yml"
          },
          {
            "value": "numerals.yml"
          },
          {
            "value": "paragraphs.yml"
          },
          {
            "value": "profanity_filter.yml"
          },
          {
            "value": "punctuate.yml"
          },
          {
            "value": "redact.yml"
          },
          {
            "value": "replace.yml"
          },
          {
            "value": "sample_rate.yml"
          },
          {
            "value": "smart_format.yml"
          },
          {
            "value": "search.yml"
          },
          {
            "value": "sentiment.yml"
          },
          {
            "value": "summarize.yml"
          },
          {
            "value": "tag.yml"
          },
          {
            "value": "topics.yml"
          },
          {
            "value": "utterances.yml"
          },
          {
            "value": "utt_split.yml"
          },
          {
            "value": "version.yml"
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageGetResponsesSchemaResolution": {
      "name": "V1ProjectsProjectIdUsageGetResponsesSchemaResolution",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "units",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_getProjectUsage_Response_200": {
      "name": "Management API_getProjectUsage_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "key": "resolution",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1ProjectsProjectIdUsageGetResponsesSchemaResolution"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageFieldsGetResponsesSchemaModelsItems": {
      "name": "V1ProjectsProjectIdUsageFieldsGetResponsesSchemaModelsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Name of the model.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The language supported by the model (IETF language tag).",
            "key": "language",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Version identifier of the model, typically with a date and a revision number.",
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the model.",
            "key": "model_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectUsageFields_Response_200": {
      "name": "Management API_listProjectUsageFields_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of tags associated with the project",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "List of models available for the project.",
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdUsageFieldsGetResponsesSchemaModelsItems"
                }
              }
            }
          },
          {
            "description": "Processing methods supported by the API",
            "key": "processing_methods",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "API features available to the project",
            "key": "features",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageBreakdownGetParametersSchema": {
      "name": "V1ProjectsProjectIdUsageBreakdownGetParametersSchema",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter results by specific accessor ID",
            "key": "accessor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific deployment type",
            "key": "deployment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific endpoint",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific feature set",
            "key": "feature_set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific model ID",
            "key": "model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific processing method",
            "key": "method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Filter results by specific tags",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResolution": {
      "name": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResolution",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time unit for the resolution",
            "key": "units",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Amount of units",
            "key": "amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItemsGrouping": {
      "name": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItemsGrouping",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Start date for this group",
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "End date for this group",
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "Optional accessor identifier",
            "key": "accessor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional endpoint identifier",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional feature set identifier",
            "key": "feature_set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional models identifier",
            "key": "models",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional method identifier",
            "key": "method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional tags",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional deployment identifier",
            "key": "deployment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItems": {
      "name": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Audio hours processed",
            "key": "hours",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "Total hours including all processing",
            "key": "total_hours",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "Agent hours used",
            "key": "agent_hours",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "Number of input tokens",
            "key": "tokens_in",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Number of output tokens",
            "key": "tokens_out",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Number of text-to-speech characters processed",
            "key": "tts_characters",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Number of requests",
            "key": "requests",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "grouping",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItemsGrouping"
            }
          }
        ]
      }
    },
    "Management API_getProjectUsageBreakdown_Response_200": {
      "name": "Management API_getProjectUsageBreakdown_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Start date of the usage period",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "End date of the usage period",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "key": "resolution",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResolution"
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V1ProjectsProjectIdUsageBreakdownGetResponsesSchemaResultsItems"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdPurchasesGetResponsesSchemaOrdersItems": {
      "name": "V1ProjectsProjectIdPurchasesGetResponsesSchemaOrdersItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "order_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "expiration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "units",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "order_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Management API_listProjectPurchases_Response_200": {
      "name": "Management API_listProjectPurchases_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "orders",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdPurchasesGetResponsesSchemaOrdersItems"
                }
              }
            }
          }
        ]
      }
    },
    "V1ModelsGetResponsesSchemaSttItems": {
      "name": "V1ModelsGetResponsesSchemaSttItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "streaming",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "formatted_output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V1ModelsGetResponsesSchemaTtsItemsMetadata": {
      "name": "V1ModelsGetResponsesSchemaTtsItemsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "accent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "key": "sample",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V1ModelsGetResponsesSchemaTtsItems": {
      "name": "V1ModelsGetResponsesSchemaTtsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1ModelsGetResponsesSchemaTtsItemsMetadata"
              }
            }
          }
        ]
      }
    },
    "Management API_listModels_Response_200": {
      "name": "Management API_listModels_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "stt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ModelsGetResponsesSchemaSttItems"
                }
              }
            }
          },
          {
            "key": "tts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ModelsGetResponsesSchemaTtsItems"
                }
              }
            }
          }
        ]
      }
    },
    "ManagementApiGetModelResponse2000": {
      "name": "ManagementApiGetModelResponse2000",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "batch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "streaming",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "formatted_output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V1ModelsModelIdGetResponsesSchemaOneOf1Metadata": {
      "name": "V1ModelsModelIdGetResponsesSchemaOneOf1Metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "accent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "color",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "key": "sample",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ManagementApiGetModelResponse2001": {
      "name": "ManagementApiGetModelResponse2001",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "canonical_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "architecture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "languages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V1ModelsModelIdGetResponsesSchemaOneOf1Metadata"
              }
            }
          }
        ]
      }
    },
    "Management API_getModel_Response_200": {
      "name": "Management API_getModel_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ManagementApiGetModelResponse2000",
            "type": {
              "type": "id",
              "value": "ManagementApiGetModelResponse2000"
            }
          },
          {
            "typeName": "ManagementApiGetModelResponse2001",
            "type": {
              "type": "id",
              "value": "ManagementApiGetModelResponse2001"
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsMember": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsMember",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the member",
            "key": "member_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Email address of the member",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsDistributionCredentials": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsDistributionCredentials",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the distribution credentials",
            "key": "distribution_credentials_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The provider of the distribution service",
            "key": "provider",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Optional comment about the credentials",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of permission scopes for the credentials",
            "key": "scopes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Timestamp when the credentials were created",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItems": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsMember"
            }
          },
          {
            "key": "distribution_credentials",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItemsDistributionCredentials"
            }
          }
        ]
      }
    },
    "Management API_listSelfHostedDistCreds_Response_200": {
      "name": "Management API_listSelfHostedDistCreds_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Array of distribution credentials with associated member information",
            "key": "distribution_credentials",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsGetResponsesSchemaDistributionCredentialsItems"
                }
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchemaItems": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchemaItems",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "self-hosted:products"
          },
          {
            "value": "self-hosted:product:api"
          },
          {
            "value": "self-hosted:product:engine"
          },
          {
            "value": "self-hosted:product:license-proxy"
          },
          {
            "value": "self-hosted:product:dgtools"
          },
          {
            "value": "self-hosted:product:billing"
          },
          {
            "value": "self-hosted:product:hotpepper"
          },
          {
            "value": "self-hosted:product:metrics-server"
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchema": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchema",
      "shape": {
        "type": "enum",
        "default": "quay",
        "values": [
          {
            "value": "quay"
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaMember": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaMember",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the member",
            "key": "member_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Email address of the member",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaDistributionCredentials": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaDistributionCredentials",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the distribution credentials",
            "key": "distribution_credentials_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The provider of the distribution service",
            "key": "provider",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Optional comment about the credentials",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of permission scopes for the credentials",
            "key": "scopes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Timestamp when the credentials were created",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "Management API_getSelfHostedCredentials_Response_200": {
      "name": "Management API_getSelfHostedCredentials_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaMember"
            }
          },
          {
            "key": "distribution_credentials",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdGetResponsesSchemaDistributionCredentials"
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaMember": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaMember",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the member",
            "key": "member_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Email address of the member",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          }
        ]
      }
    },
    "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaDistributionCredentials": {
      "name": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaDistributionCredentials",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier for the distribution credentials",
            "key": "distribution_credentials_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The provider of the distribution service",
            "key": "provider",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Optional comment about the credentials",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of permission scopes for the credentials",
            "key": "scopes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Timestamp when the credentials were created",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "Management API_deleteSelfHostedDistCreds_Response_200": {
      "name": "Management API_deleteSelfHostedDistCreds_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "member",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaMember"
            }
          },
          {
            "key": "distribution_credentials",
            "valueType": {
              "type": "id",
              "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsDistributionCredentialsIdDeleteResponsesSchemaDistributionCredentials"
            }
          }
        ]
      }
    },
    "ChannelsSpeakMessagesTextToSpeechRequestType": {
      "description": "Message type indicating a text-to-speech request",
      "name": "ChannelsSpeakMessagesTextToSpeechRequestType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Speak"
          }
        ]
      }
    },
    "speak_textToSpeechRequest": {
      "name": "speak_textToSpeechRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type indicating a text-to-speech request",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesTextToSpeechRequestType"
            }
          },
          {
            "description": "The input text to be converted to speech",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ChannelsSpeakMessagesControlMessagesRequestType": {
      "name": "ChannelsSpeakMessagesControlMessagesRequestType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Flush"
          },
          {
            "value": "Clear"
          },
          {
            "value": "Close"
          }
        ]
      }
    },
    "speak_controlMessagesRequest": {
      "name": "speak_controlMessagesRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesControlMessagesRequestType"
            }
          }
        ]
      }
    },
    "speak_textToSpeechResponse": {
      "description": "Audio data in the format specified by the request parameters",
      "name": "speak_textToSpeechResponse",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "binary"
          }
        }
      }
    },
    "ChannelsSpeakMessagesControlMessagesResponseType": {
      "description": "The type of control message response",
      "name": "ChannelsSpeakMessagesControlMessagesResponseType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "flush"
          },
          {
            "value": "clear"
          },
          {
            "value": "close"
          }
        ]
      }
    },
    "speak_controlMessagesResponse": {
      "name": "speak_controlMessagesResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of control message response",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesControlMessagesResponseType"
            }
          },
          {
            "description": "The sequence ID of the response",
            "key": "sequence_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "speak_metadataResponse": {
      "description": "Text to Speech Metadata information sent immediately after completing the WebSocket handshake",
      "name": "speak_metadataResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "Name of the model being used",
            "key": "model_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Version of the model being used",
            "key": "model_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the model",
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsSpeakMessagesErrorResponseErrorCode": {
      "description": "HTTP status code equivalent",
      "name": "ChannelsSpeakMessagesErrorResponseErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "400"
          },
          {
            "value": "401"
          },
          {
            "value": "402"
          },
          {
            "value": "403"
          },
          {
            "value": "429"
          },
          {
            "value": "503"
          }
        ]
      }
    },
    "speak_errorResponse": {
      "name": "speak_errorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "HTTP status code equivalent",
            "key": "error_code",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesErrorResponseErrorCode"
            }
          },
          {
            "description": "Error message",
            "key": "error_message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "ChannelsSpeakMessagesSuccessResponseSuccessCode": {
      "description": "HTTP status code equivalent",
      "name": "ChannelsSpeakMessagesSuccessResponseSuccessCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "200"
          }
        ]
      }
    },
    "speak_successResponse": {
      "name": "speak_successResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "HTTP status code equivalent",
            "key": "success_code",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesSuccessResponseSuccessCode"
            }
          },
          {
            "description": "Success message",
            "key": "success_message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "ChannelsSpeakMessagesCloseFrameCode": {
      "description": "WebSocket close status code",
      "name": "ChannelsSpeakMessagesCloseFrameCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "1000"
          },
          {
            "value": "1003"
          },
          {
            "value": "1008"
          },
          {
            "value": "1009"
          },
          {
            "value": "1011"
          }
        ]
      }
    },
    "ChannelsSpeakMessagesCloseFramePayload": {
      "description": "Error reason code",
      "name": "ChannelsSpeakMessagesCloseFramePayload",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "None"
          },
          {
            "value": "MESSAGE-0000"
          },
          {
            "value": "DATA-0000"
          },
          {
            "value": "BIG-0000"
          },
          {
            "value": "BIG-0001"
          },
          {
            "value": "NET-0000"
          },
          {
            "value": "NET-0001"
          },
          {
            "value": "NET-0002"
          },
          {
            "value": "NET-0003"
          }
        ]
      }
    },
    "speak_closeFrame": {
      "description": "When Deepgram encounters an error during streaming text to speech, a WebSocket Close frame is sent. The frame contains a status code and UTF-8-encoded payload describing the error reason\n",
      "name": "speak_closeFrame",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "WebSocket close status code",
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesCloseFrameCode"
            }
          },
          {
            "description": "Error reason code",
            "key": "payload",
            "valueType": {
              "type": "id",
              "value": "ChannelsSpeakMessagesCloseFramePayload"
            }
          }
        ]
      }
    },
    "listen_transcriptionRequest": {
      "description": "Raw audio data to be transcribed. Should be sent as a binary WebSocket message without base64 encoding",
      "name": "listen_transcriptionRequest",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "binary"
          }
        }
      }
    },
    "ChannelsListenMessagesControlMessagesRequestOneOf0Type": {
      "description": "Used to handle specific scenarios where you need to force the server to process all unprocessed audio data and immediately return the final results",
      "name": "ChannelsListenMessagesControlMessagesRequestOneOf0Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Finalize"
          }
        ]
      }
    },
    "ListenControlMessagesRequest0": {
      "name": "ListenControlMessagesRequest0",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Used to handle specific scenarios where you need to force the server to process all unprocessed audio data and immediately return the final results",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessagesRequestOneOf0Type"
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesControlMessagesRequestOneOf1Type": {
      "description": "Close the websocket connection",
      "name": "ChannelsListenMessagesControlMessagesRequestOneOf1Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CloseStream"
          }
        ]
      }
    },
    "ListenControlMessagesRequest1": {
      "name": "ListenControlMessagesRequest1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Close the websocket connection",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessagesRequestOneOf1Type"
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesControlMessagesRequestOneOf2Type": {
      "description": "Used to keep the websocket connection alive",
      "name": "ChannelsListenMessagesControlMessagesRequestOneOf2Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "KeepAlive"
          }
        ]
      }
    },
    "ListenControlMessagesRequest2": {
      "name": "ListenControlMessagesRequest2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Used to keep the websocket connection alive",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessagesRequestOneOf2Type"
              }
            }
          }
        ]
      }
    },
    "listen_controlMessagesRequest": {
      "name": "listen_controlMessagesRequest",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ListenControlMessagesRequest0",
            "type": {
              "type": "id",
              "value": "ListenControlMessagesRequest0"
            }
          },
          {
            "typeName": "ListenControlMessagesRequest1",
            "type": {
              "type": "id",
              "value": "ListenControlMessagesRequest1"
            }
          },
          {
            "typeName": "ListenControlMessagesRequest2",
            "type": {
              "type": "id",
              "value": "ListenControlMessagesRequest2"
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItemsWordsItems": {
      "name": "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItemsWordsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "punctuated_word",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItems": {
      "name": "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Complete transcribed text",
            "key": "transcript",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Overall confidence score",
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItemsWordsItems"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesTranscriptionResponseChannel": {
      "name": "ChannelsListenMessagesTranscriptionResponseChannel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "alternatives",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsListenMessagesTranscriptionResponseChannelAlternativesItems"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesTranscriptionResponseMetadataModelInfo": {
      "name": "ChannelsListenMessagesTranscriptionResponseMetadataModelInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "arch",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesTranscriptionResponseMetadata": {
      "name": "ChannelsListenMessagesTranscriptionResponseMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesTranscriptionResponseMetadataModelInfo"
              }
            }
          },
          {
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "listen_transcriptionResponse": {
      "name": "listen_transcriptionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesTranscriptionResponseChannel"
              }
            }
          },
          {
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesTranscriptionResponseMetadata"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "channel_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "is_final",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "from_finalize",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "speech_final",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesControlMessageResponseOneOf0Type": {
      "name": "ChannelsListenMessagesControlMessageResponseOneOf0Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Finalize"
          }
        ]
      }
    },
    "ListenControlMessageResponse0": {
      "description": "The server will process all remaining audio data and return the final results. You may receive a response with the from_finalize attribute set to true, indicating that the finalization process is complete. This response typically occurs when there is a noticeable amount of audio buffered in the server.\n",
      "name": "ListenControlMessageResponse0",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessageResponseOneOf0Type"
              }
            }
          },
          {
            "description": "The channel number being finalized",
            "key": "channel",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesControlMessageResponseOneOf1Type": {
      "name": "ChannelsListenMessagesControlMessageResponseOneOf1Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Metadata"
          }
        ]
      }
    },
    "ListenControlMessageResponse1": {
      "description": "Provides real-time metadata during audio streaming, including audio characteristics\nand processing details. This response is sent periodically during streaming to\nprovide updates about the audio being processed.\n",
      "name": "ListenControlMessageResponse1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessageResponseOneOf1Type"
              }
            }
          },
          {
            "description": "Deprecated field",
            "key": "transaction_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "SHA-256 hash of the audio content",
            "key": "sha256",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[a-fA-F0-9]{64}$"
                }
              }
            }
          },
          {
            "description": "Timestamp when the response was created",
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Duration of the audio in seconds",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Number of audio channels",
            "key": "channels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesControlMessageResponseOneOf2Type": {
      "name": "ChannelsListenMessagesControlMessageResponseOneOf2Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CloseStream"
          }
        ]
      }
    },
    "ListenControlMessageResponse2": {
      "description": "Indicates that the server has closed the WebSocket connection and the server will process all remaining audio data.\n",
      "name": "ListenControlMessageResponse2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsListenMessagesControlMessageResponseOneOf2Type"
              }
            }
          },
          {
            "description": "Deprecated field",
            "key": "transaction_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "SHA-256 hash of the audio content",
            "key": "sha256",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[a-fA-F0-9]{64}$"
                }
              }
            }
          },
          {
            "description": "Timestamp when the response was created",
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Duration of the audio in seconds",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Number of audio channels",
            "key": "channels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "listen_controlMessageResponse": {
      "name": "listen_controlMessageResponse",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ListenControlMessageResponse0",
            "description": "The server will process all remaining audio data and return the final results. You may receive a response with the from_finalize attribute set to true, indicating that the finalization process is complete. This response typically occurs when there is a noticeable amount of audio buffered in the server.\n",
            "type": {
              "type": "id",
              "value": "ListenControlMessageResponse0"
            }
          },
          {
            "typeName": "ListenControlMessageResponse1",
            "description": "Provides real-time metadata during audio streaming, including audio characteristics\nand processing details. This response is sent periodically during streaming to\nprovide updates about the audio being processed.\n",
            "type": {
              "type": "id",
              "value": "ListenControlMessageResponse1"
            }
          },
          {
            "typeName": "ListenControlMessageResponse2",
            "description": "Indicates that the server has closed the WebSocket connection and the server will process all remaining audio data.\n",
            "type": {
              "type": "id",
              "value": "ListenControlMessageResponse2"
            }
          }
        ]
      }
    },
    "listen_metadataResponse": {
      "description": "Sent immediately after completing the WebSocket handshake",
      "name": "listen_metadataResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "Name of the model being used",
            "key": "model_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Version of the model being used",
            "key": "model_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique identifier for the model",
            "key": "model_uuid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesErrorResponseErrorCode": {
      "description": "HTTP status code equivalent",
      "name": "ChannelsListenMessagesErrorResponseErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "400"
          },
          {
            "value": "401"
          },
          {
            "value": "402"
          },
          {
            "value": "403"
          },
          {
            "value": "429"
          },
          {
            "value": "503"
          }
        ]
      }
    },
    "listen_errorResponse": {
      "name": "listen_errorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "HTTP status code equivalent",
            "key": "error_code",
            "valueType": {
              "type": "id",
              "value": "ChannelsListenMessagesErrorResponseErrorCode"
            }
          },
          {
            "description": "Error message",
            "key": "error_message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesSuccessResponseSuccessCode": {
      "description": "HTTP status code equivalent",
      "name": "ChannelsListenMessagesSuccessResponseSuccessCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "200"
          }
        ]
      }
    },
    "listen_successResponse": {
      "name": "listen_successResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "HTTP status code equivalent",
            "key": "success_code",
            "valueType": {
              "type": "id",
              "value": "ChannelsListenMessagesSuccessResponseSuccessCode"
            }
          },
          {
            "description": "Success message",
            "key": "success_message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique identifier for the request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "ChannelsListenMessagesCloseFrameCode": {
      "description": "WebSocket close status code",
      "name": "ChannelsListenMessagesCloseFrameCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "1000"
          },
          {
            "value": "1008"
          },
          {
            "value": "1011"
          }
        ]
      }
    },
    "ChannelsListenMessagesCloseFramePayload": {
      "description": "Error reason code",
      "name": "ChannelsListenMessagesCloseFramePayload",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "None"
          },
          {
            "value": "DATA-0000"
          },
          {
            "value": "NET-0000"
          },
          {
            "value": "NET-0001"
          }
        ]
      }
    },
    "listen_closeFrame": {
      "description": "When Deepgram encounters an error during streaming speech to text, a WebSocket Close frame is sent. The frame contains a status code and UTF-8-encoded payload describing the error reason\n",
      "name": "listen_closeFrame",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "WebSocket close status code",
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "ChannelsListenMessagesCloseFrameCode"
            }
          },
          {
            "description": "Error reason code",
            "key": "payload",
            "valueType": {
              "type": "id",
              "value": "ChannelsListenMessagesCloseFramePayload"
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAudioInput": {
      "description": "Optional audio input configuration settings",
      "name": "ChannelsAgentMessagesSettingsConfigurationAudioInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Audio encoding format",
            "key": "encoding",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "linear16"
                }
              }
            }
          },
          {
            "description": "Sample rate in Hz",
            "key": "sample_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 24000
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAudioOutput": {
      "description": "Audio output configuration settings",
      "name": "ChannelsAgentMessagesSettingsConfigurationAudioOutput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "encoding",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sample rate in Hz",
            "key": "sample_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 24000
                }
              }
            }
          },
          {
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "container",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAudio": {
      "description": "Optional audio configuration settings",
      "name": "ChannelsAgentMessagesSettingsConfigurationAudio",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Optional audio input configuration settings",
            "key": "input",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationAudioInput"
                }
              }
            }
          },
          {
            "description": "Audio output configuration settings",
            "key": "output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationAudioOutput"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentListen": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentListen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Model to use for speech recognition",
            "key": "model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "nova-3"
                }
              }
            }
          },
          {
            "description": "List of keyterms to listen for, only available on nova-3",
            "key": "keyterms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentThinkProvider": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentThinkProvider",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "LLM provider type",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsHeadersItems": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsHeadersItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsParameters": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "properties",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsParameters"
                }
              }
            }
          },
          {
            "key": "required",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItems": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Function name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Description of function purpose and usage",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Function endpoint URL",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "headers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsHeadersItems"
                }
              }
            }
          },
          {
            "description": "HTTP method for function call",
            "key": "method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "post"
                }
              }
            }
          },
          {
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItemsParameters"
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentThink": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentThink",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAgentThinkProvider"
              }
            }
          },
          {
            "description": "LLM model to use",
            "key": "model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "LLM System prompt",
            "key": "instructions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "functions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "ChannelsAgentMessagesSettingsConfigurationAgentThinkFunctionsItems"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentSpeakProvider": {
      "description": "Alternative TTS provider",
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentSpeakProvider",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "eleven_labs"
          },
          {
            "value": "cartesia"
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgentSpeak": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgentSpeak",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Text-to-speech model",
            "key": "model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "aura-asteria-en"
                }
              }
            }
          },
          {
            "description": "Alternative TTS provider",
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAgentSpeakProvider"
              }
            }
          },
          {
            "description": "Unique voice identifier for the selected provider",
            "key": "voice_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationAgent": {
      "name": "ChannelsAgentMessagesSettingsConfigurationAgent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "listen",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAgentListen"
              }
            }
          },
          {
            "key": "think",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAgentThink"
              }
            }
          },
          {
            "key": "speak",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationAgentSpeak"
                }
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationContextMessagesItems": {
      "name": "ChannelsAgentMessagesSettingsConfigurationContextMessagesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ChannelsAgentMessagesSettingsConfigurationContext": {
      "name": "ChannelsAgentMessagesSettingsConfigurationContext",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "LLM message history for conversation restoration",
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationContextMessagesItems"
                }
              }
            }
          },
          {
            "description": "Whether to replay the last assistant message",
            "key": "replay",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "agent_settingsConfiguration": {
      "description": "Configure the voice agent and sets the input and output audio formats",
      "name": "agent_settingsConfiguration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "SettingsConfiguration"
              }
            }
          },
          {
            "description": "Optional audio configuration settings",
            "key": "audio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ChannelsAgentMessagesSettingsConfigurationAudio"
              }
            }
          },
          {
            "key": "agent",
            "valueType": {
              "type": "id",
              "value": "ChannelsAgentMessagesSettingsConfigurationAgent"
            }
          },
          {
            "key": "context",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChannelsAgentMessagesSettingsConfigurationContext"
                }
              }
            }
          }
        ]
      }
    },
    "agent_updateInstructions": {
      "description": "Send a message to give additional instructions to the Think model in the middle of a conversation",
      "name": "agent_updateInstructions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "UpdateInstructions"
              }
            }
          },
          {
            "description": "The new instructions to give to the Think model",
            "key": "instructions",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "agent_updateSpeak": {
      "description": "Send a message to change the Speak model in the middle of a conversation",
      "name": "agent_updateSpeak",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for updating the speak model",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "UpdateSpeak"
              }
            }
          },
          {
            "description": "The new Text-to-Speech model to use",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "agent_injectAgentMessage": {
      "description": "Send a message to change the Speak model in the middle of a conversation",
      "name": "agent_injectAgentMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for injecting an agent message",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "InjectAgentMessage"
              }
            }
          },
          {
            "description": "The statement that the agent should say",
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "agent_injectionRefused": {
      "description": "Receive injection refused message",
      "name": "agent_injectionRefused",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for injection refused",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "InjectionRefused"
              }
            }
          }
        ]
      }
    },
    "agent_functionCallResponse": {
      "description": "Configure the voice agent and configure the function call response",
      "name": "agent_functionCallResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for function call responses",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "FunctionCallResponse"
              }
            }
          },
          {
            "description": "The unique identifier matching the original function call request",
            "key": "function_call_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The result of the function call execution",
            "key": "output",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "agent_agentKeepAlive": {
      "description": "Send messages ensuring uninterrupted communication for your agent",
      "name": "agent_agentKeepAlive",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for agent keep alive signal",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "KeepAlive"
              }
            }
          }
        ]
      }
    },
    "agent_welcomeMessage": {
      "description": "Receive a welcome message from the server to confirm the websocket has opened",
      "name": "agent_welcomeMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for welcome message",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "Welcome"
              }
            }
          },
          {
            "description": "Unique identifier for the websocket session",
            "key": "session_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "agent_settingsApplied": {
      "description": "Confirm the server has successfully received and applied the Settings Configuration message",
      "name": "agent_settingsApplied",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for settings applied confirmation",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "SettingsApplied"
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesConversationTextRole": {
      "description": "Identifies who spoke the statement",
      "name": "ChannelsAgentMessagesConversationTextRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "user"
          },
          {
            "value": "assistant"
          }
        ]
      }
    },
    "agent_ConversationText": {
      "description": "Conversation Text facilitates real-time communication by relaying spoken statements from both the user and the assistant",
      "name": "agent_ConversationText",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for conversation text",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "ConversationText"
              }
            }
          },
          {
            "description": "Identifies who spoke the statement",
            "key": "role",
            "valueType": {
              "type": "id",
              "value": "ChannelsAgentMessagesConversationTextRole"
            }
          },
          {
            "description": "The actual statement that was spoken",
            "key": "content",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "agent_userStartedSpeaking": {
      "description": "User Started Speaking notifies the client that the user has begun speaking",
      "name": "agent_userStartedSpeaking",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier indicating that the user has begun speaking",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "UserStartedSpeaking"
              }
            }
          }
        ]
      }
    },
    "agent_agentThinking": {
      "description": "Agent Thinking informs the client when the agent is processing information",
      "name": "agent_agentThinking",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for agent thinking",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "AgentThinking"
              }
            }
          },
          {
            "description": "The text of the agent's thought process",
            "key": "content",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ChannelsAgentMessagesFunctionCallRequestInput": {
      "description": "Parameters defined for this function in the function definition",
      "name": "ChannelsAgentMessagesFunctionCallRequestInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "agent_functionCallRequest": {
      "description": "Request to call a function by sending a Function Call Request message",
      "name": "agent_functionCallRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for function call requests",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "FunctionCallRequest"
              }
            }
          },
          {
            "description": "The name specified in the function definition",
            "key": "function_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique identifier to correlate the response with this request",
            "key": "function_call_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Parameters defined for this function in the function definition",
            "key": "input",
            "valueType": {
              "type": "id",
              "value": "ChannelsAgentMessagesFunctionCallRequestInput"
            }
          }
        ]
      }
    },
    "agent_functionCalling": {
      "description": "Provides insights into function call workflows to assist in debugging",
      "name": "agent_functionCalling",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for function calling status",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "FunctionCalling"
              }
            }
          }
        ]
      }
    },
    "agent_agentStartedSpeaking": {
      "description": "Get notified when the server begins streaming an agent's audio response for playback",
      "name": "agent_agentStartedSpeaking",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for agent started speaking",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "AgentStartedSpeaking"
              }
            }
          },
          {
            "description": "Seconds from receiving the user's utterance to producing the agent's reply",
            "key": "total_latency",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "The portion of total latency attributable to text-to-speech",
            "key": "tts_latency",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "The portion of total latency attributable to text-to-text (usually an LLM)",
            "key": "ttt_latency",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          }
        ]
      }
    },
    "agent_agentAudioDone": {
      "description": "Get signals that the server has finished sending the final audio segment to the client",
      "name": "agent_agentAudioDone",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier indicating the agent has finished sending audio",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "AgentAudioDone"
              }
            }
          }
        ]
      }
    },
    "agent_agentErrorResponse": {
      "description": "Receive an error message from the server when an error occurs",
      "name": "agent_agentErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier for error responses",
            "key": "type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "Error"
              }
            }
          },
          {
            "description": "A description of what went wrong",
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "encoding": {
      "description": "Specify the expected encoding of your submitted audio",
      "name": "encoding",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "linear16"
          },
          {
            "value": "flac"
          },
          {
            "value": "mulaw"
          },
          {
            "value": "amr-nb"
          },
          {
            "value": "amr-wb"
          },
          {
            "value": "opus"
          },
          {
            "value": "speex"
          },
          {
            "value": "g729"
          }
        ]
      }
    },
    "model": {
      "description": "AI model to use for the transcription",
      "name": "model",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "nova-3"
          },
          {
            "value": "nova-3-general"
          },
          {
            "value": "nova-3-medical"
          },
          {
            "value": "nova-2"
          },
          {
            "value": "nova-2-general"
          },
          {
            "value": "nova-2-meeting"
          },
          {
            "value": "nova-2-finance"
          },
          {
            "value": "nova-2-conversationalai"
          },
          {
            "value": "nova-2-voicemail"
          },
          {
            "value": "nova-2-video"
          },
          {
            "value": "nova-2-medical"
          },
          {
            "value": "nova-2-drivethru"
          },
          {
            "value": "nova-2-automotive"
          },
          {
            "value": "nova"
          },
          {
            "value": "nova-general"
          },
          {
            "value": "nova-phonecall"
          },
          {
            "value": "nova-medical"
          },
          {
            "value": "enhanced"
          },
          {
            "value": "enhanced-general"
          },
          {
            "value": "enhanced-meeting"
          },
          {
            "value": "enhanced-phonecall"
          },
          {
            "value": "enhanced-finance"
          },
          {
            "value": "base"
          },
          {
            "value": "meeting"
          },
          {
            "value": "phonecall"
          },
          {
            "value": "finance"
          },
          {
            "value": "conversationalai"
          },
          {
            "value": "voicemail"
          },
          {
            "value": "video"
          },
          {
            "value": "custom"
          }
        ]
      }
    },
    "sample_rate": {
      "description": "Sample Rate specifies the sample rate for the output audio. Based on encoding 8000 or 24000 are possible defaults. For some encodings sample rate is not configurable.",
      "name": "sample_rate",
      "shape": {
        "type": "enum",
        "default": "24000",
        "values": [
          {
            "value": "8000"
          },
          {
            "value": "16000"
          },
          {
            "value": "24000"
          },
          {
            "value": "44100"
          },
          {
            "value": "48000"
          }
        ]
      }
    },
    "callback_method": {
      "description": "HTTP method by which the callback request will be made",
      "name": "callback_method",
      "shape": {
        "type": "enum",
        "default": "POST",
        "values": [
          {
            "value": "POST"
          },
          {
            "value": "GET"
          },
          {
            "value": "PUT"
          },
          {
            "value": "DELETE"
          }
        ]
      }
    },
    "dictation": {
      "description": "Identify and extract key entities from content in submitted audio",
      "name": "dictation",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "filler_words": {
      "description": "Filler Words can help transcribe interruptions in your audio, like \"uh\" and \"um\"",
      "name": "filler_words",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "interim_results": {
      "description": "Specifies whether the streaming endpoint should provide ongoing transcription updates as more audio is received. When set to true, the endpoint sends continuous updates, meaning transcription results may evolve over time",
      "name": "interim_results",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "language": {
      "description": "The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model you choose only certain languages are available",
      "name": "language",
      "shape": {
        "type": "enum",
        "default": "en",
        "values": [
          {
            "value": "bg"
          },
          {
            "value": "ca"
          },
          {
            "value": "cs"
          },
          {
            "value": "da"
          },
          {
            "value": "da-DK"
          },
          {
            "value": "de"
          },
          {
            "value": "de-CH"
          },
          {
            "value": "el"
          },
          {
            "value": "en"
          },
          {
            "value": "en-AU"
          },
          {
            "value": "en-GB"
          },
          {
            "value": "en-IN"
          },
          {
            "value": "en-NZ"
          },
          {
            "value": "en-US"
          },
          {
            "value": "es"
          },
          {
            "value": "es-419"
          },
          {
            "value": "es-LATAM"
          },
          {
            "value": "et"
          },
          {
            "value": "fi"
          },
          {
            "value": "fr"
          },
          {
            "value": "fr-CA"
          },
          {
            "value": "hi"
          },
          {
            "value": "hi-Latn"
          },
          {
            "value": "hu"
          },
          {
            "value": "id"
          },
          {
            "value": "it"
          },
          {
            "value": "ja"
          },
          {
            "value": "ko"
          },
          {
            "value": "ko-KR"
          },
          {
            "value": "lt"
          },
          {
            "value": "lv"
          },
          {
            "value": "ms"
          },
          {
            "value": "nl"
          },
          {
            "value": "nl-BE"
          },
          {
            "value": "no"
          },
          {
            "value": "pl"
          },
          {
            "value": "pt"
          },
          {
            "value": "pt-BR"
          },
          {
            "value": "pt-PT"
          },
          {
            "value": "ro"
          },
          {
            "value": "ru"
          },
          {
            "value": "sk"
          },
          {
            "value": "sv"
          },
          {
            "value": "sv-SE"
          },
          {
            "value": "taq"
          },
          {
            "value": "th"
          },
          {
            "value": "th-TH"
          },
          {
            "value": "tr"
          },
          {
            "value": "uk"
          },
          {
            "value": "vi"
          },
          {
            "value": "zh"
          },
          {
            "value": "zh-CN"
          },
          {
            "value": "zh-HK"
          },
          {
            "value": "zh-Hans"
          },
          {
            "value": "zh-Hant"
          },
          {
            "value": "zh-TW"
          }
        ]
      }
    },
    "multichannel": {
      "description": "Transcribe each audio channel independently",
      "name": "multichannel",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "numerals": {
      "description": "Convert numbers from written format to numerical format",
      "name": "numerals",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "profanity_filter": {
      "description": "Profanity Filter looks for recognized profanity and converts it to the nearest recognized non-profane word or removes it from the transcript completely",
      "name": "profanity_filter",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "punctuate": {
      "description": "Add punctuation and capitalization to the transcript",
      "name": "punctuate",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "redact": {
      "description": "Redaction removes sensitive information from your transcripts",
      "name": "redact",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          },
          {
            "value": "pci"
          },
          {
            "value": "numbers"
          },
          {
            "value": "aggressive_numbers"
          },
          {
            "value": "ssn"
          }
        ]
      }
    },
    "smart_format": {
      "description": "Apply formatting to transcript output. When set to true, additional formatting will be applied to transcripts to improve readability",
      "name": "smart_format",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "vad_events": {
      "description": "Indicates that speech has started. You'll begin receiving Speech Started messages upon speech starting",
      "name": "vad_events",
      "shape": {
        "type": "enum",
        "default": "false",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_speechToText": {
      "subpackageId": "subpackage_speechToText",
      "name": "speechToText",
      "endpoints": [
        {
          "auth": true,
          "description": "Transcribe audio using Deepgram's speech-to-text API",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listen",
          "originalEndpointId": "Speech to Text.listen",
          "name": "Transcribe and analyze pre-recorded audio",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/listen"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "URL to which we'll make the callback request",
              "key": "callback",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "HTTP method by which the callback request will be made",
              "key": "callback_method",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Custom topics you want the model to detect within your input audio or text if present Submit up to 100",
              "key": "custom_topic",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param",
              "key": "custom_topic_mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Custom intents you want the model to detect within your input audio if present",
              "key": "custom_intent",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Sets how the model will interpret intents submitted to the `custom_intent` param. When `strict`, the model will only return intents submitted using the `custom_intent` param. When `extended`, the model will return its own detected intents in addition those submitted using the `custom_intents` param",
              "key": "custom_intent_mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Identifies and extracts key entities from content in submitted audio",
              "key": "detect_entities",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Identifies the dominant language spoken in submitted audio",
              "key": "detect_language",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Version of the diarization feature to use. Only used when the diarization feature is enabled (`diarize=true` is passed to the API)",
              "key": "diarize_version",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "v2"
                  }
                }
              }
            },
            {
              "description": "Recognize speaker changes. Each word in the transcript will be assigned a speaker number starting at 0",
              "key": "diarize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Identify and extract key entities from content in submitted audio",
              "key": "dictation",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Specify the expected encoding of your submitted audio",
              "key": "encoding",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Arbitrary key-value pairs that are attached to the API response for usage in downstream processing",
              "key": "extra",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Filler Words can help transcribe interruptions in your audio, like \"uh\" and \"um\"",
              "key": "filler_words",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Recognizes speaker intent throughout a transcript or text",
              "key": "intents",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Key term prompting can boost or suppress specialized terminology and brands. Only compatible with Nova-3",
              "key": "keyterm",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Keywords can boost or suppress specialized terminology and brands",
              "key": "keywords",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model you choose only certain languages are available",
              "key": "language",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Spoken measurements will be converted to their corresponding abbreviations",
              "key": "measurements",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "AI model used to process submitted audio",
              "key": "model",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Transcribe each audio channel independently",
              "key": "multichannel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Numerals converts numbers from written format to numerical format",
              "key": "numerals",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Splits audio into paragraphs to improve transcript readability",
              "key": "paragraphs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Profanity Filter looks for recognized profanity and converts it to the nearest recognized non-profane word or removes it from the transcript completely",
              "key": "profanity_filter",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Add punctuation and capitalization to the transcript",
              "key": "punctuate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Redaction removes sensitive information from your transcripts",
              "key": "redact",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Search for terms or phrases in submitted audio and replaces them",
              "key": "replace",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Search for terms or phrases in submitted audio",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Recognizes the sentiment throughout a transcript or text",
              "key": "sentiment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Apply formatting to transcript output. When set to true, additional formatting will be applied to transcripts to improve readability",
              "key": "smart_format",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Summarize content",
              "key": "summarize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Label your requests for the purpose of identification during usage reporting",
              "key": "tag",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            },
            {
              "description": "Detect topics throughout a transcript or text",
              "key": "topics",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Segments speech into meaningful semantic units",
              "key": "utterances",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Seconds to wait before detecting a pause between words in submitted audio",
              "key": "utt_split",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 0.8
                  }
                }
              }
            },
            {
              "description": "Version of an AI model to use",
              "key": "version",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ListenPostParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ListenRequest"
                }
              },
              "description": "Transcribe an audio file"
            },
            "description": "Transcribe an audio file"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "response"
              }
            },
            "statusCode": 200,
            "description": "Successful transcription"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/listen",
              "pathParameters": {},
              "queryParameters": {
                "callback": "https://example.com",
                "callback_method": "PUT",
                "custom_topic": [
                  "unsubscribe",
                  "account%20deletion"
                ],
                "custom_topic_mode": "strict",
                "custom_intent_mode": "strict",
                "detect_entities": true,
                "diarize_version": "v2",
                "diarize": true,
                "encoding": "linear16",
                "extra": [
                  "key:value",
                  "user:1234567890"
                ],
                "filler_words": true,
                "intents": true,
                "keyterm": [
                  "Snuffleupagus",
                  "Sesame Street"
                ],
                "keywords": [
                  "Twilio:2",
                  "Algolia"
                ],
                "measurements": true,
                "multichannel": true,
                "numerals": true,
                "paragraphs": true,
                "profanity_filter": true,
                "punctuate": true,
                "redact": [
                  "pii",
                  "pci"
                ],
                "replace": [
                  "monika:Monica",
                  "jon:John"
                ],
                "search": [
                  "Deepgram",
                  "Text to Speech"
                ],
                "sentiment": true,
                "smart_format": true,
                "summarize": "v2",
                "tag": [
                  "test"
                ],
                "topics": true,
                "utterances": true,
                "utt_split": 1.2
              },
              "headers": {},
              "requestBody": {
                "url": "https://dpgr.am/spacewalk.wav"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "url": "https://dpgr.am/spacewalk.wav"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "metadata": {
                    "transaction_key": "deprecated",
                    "request_id": "a847f427-4ad5-4d67-9b95-db801e58251c",
                    "sha256": "154e291ecfa8be6ab8343560bcc109008fa7853eb5372533e8efdefc9b504c33",
                    "created": "2024-05-12T18:57:13.426Z",
                    "duration": 25.933313,
                    "channels": 1,
                    "models": [
                      "foo"
                    ],
                    "model_info": {},
                    "summary_info": {
                      "model_uuid": "67875a7f-c9c4-48a0-aa55-5bdb8a91c34a",
                      "input_tokens": 95,
                      "output_tokens": 63
                    },
                    "sentiment_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 105
                    },
                    "topics_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 7
                    },
                    "intents_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 4
                    },
                    "tags": [
                      "foo"
                    ]
                  },
                  "results": {
                    "channels": [
                      {
                        "search": [
                          {
                            "query": "foo",
                            "hits": [
                              {
                                "confidence": 42,
                                "start": 42,
                                "end": 42,
                                "snippet": "foo"
                              }
                            ]
                          }
                        ],
                        "alternatives": [
                          {
                            "transcript": "foo",
                            "confidence": 42,
                            "words": [
                              {
                                "word": "foo",
                                "start": 42,
                                "end": 42,
                                "confidence": 42
                              }
                            ],
                            "paragraphs": {
                              "transcript": "foo",
                              "paragraphs": [
                                {
                                  "sentences": [
                                    {
                                      "text": "foo",
                                      "start": 42,
                                      "end": 42
                                    }
                                  ],
                                  "speaker": 42,
                                  "num_words": 42,
                                  "start": 42,
                                  "end": 42
                                }
                              ]
                            },
                            "summaries": [
                              {
                                "summary": "foo",
                                "start_word": 42,
                                "end_word": 42
                              }
                            ],
                            "topics": [
                              {
                                "text": "foo",
                                "start_word": 42,
                                "end_word": 42,
                                "topics": [
                                  "foo"
                                ]
                              }
                            ]
                          }
                        ],
                        "detected_language": "foo"
                      }
                    ],
                    "utterances": [
                      {
                        "start": 42,
                        "end": 42,
                        "confidence": 42,
                        "channel": 42,
                        "transcript": "foo",
                        "words": [
                          {
                            "word": "foo",
                            "start": 42,
                            "end": 42,
                            "confidence": 42,
                            "speaker": 42,
                            "speaker_confidence": 42,
                            "punctuated_word": "foo"
                          }
                        ],
                        "speaker": 42,
                        "id": "foo"
                      }
                    ],
                    "summary": {
                      "result": "success",
                      "short": "Speaker 0 discusses the significance of the first all-female spacewalk with an all-female team, stating that it is a tribute to the skilled and qualified women who were denied opportunities in the past."
                    },
                    "topics": {
                      "results": {
                        "topics": {
                          "segments": [
                            {
                              "text": "And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                              "start_word": 32,
                              "end_word": 69,
                              "topics": [
                                {
                                  "topic": "Spacewalk",
                                  "confidence_score": 0.91581345
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "intents": {
                      "results": {
                        "intents": {
                          "segments": [
                            {
                              "text": "If you found this valuable, you can subscribe to the show on spotify or your favorite podcast app.",
                              "start_word": 354,
                              "end_word": 414,
                              "intents": [
                                {
                                  "intent": "Encourage podcasting",
                                  "confidence_score": 0.0038975573
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "sentiments": {
                      "segments": [
                        {
                          "text": "Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk, um, with an all-female team, I think many of us are looking forward to it just being normal. And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                          "start_word": 0,
                          "end_word": 69,
                          "sentiment": "positive",
                          "sentiment_score": 0.5810546875
                        }
                      ],
                      "average": {
                        "sentiment": "positive",
                        "sentiment_score": 0.5810185185185185
                      }
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "metadata": {
                    "transaction_key": "deprecated",
                    "request_id": "a847f427-4ad5-4d67-9b95-db801e58251c",
                    "sha256": "154e291ecfa8be6ab8343560bcc109008fa7853eb5372533e8efdefc9b504c33",
                    "created": "2024-05-12T18:57:13.426Z",
                    "duration": 25.933313,
                    "channels": 1,
                    "models": [
                      "foo"
                    ],
                    "model_info": {},
                    "summary_info": {
                      "model_uuid": "67875a7f-c9c4-48a0-aa55-5bdb8a91c34a",
                      "input_tokens": 95,
                      "output_tokens": 63
                    },
                    "sentiment_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 105
                    },
                    "topics_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 7
                    },
                    "intents_info": {
                      "model_uuid": "80ab3179-d113-4254-bd6b-4a2f96498695",
                      "input_tokens": 105,
                      "output_tokens": 4
                    },
                    "tags": [
                      "foo"
                    ]
                  },
                  "results": {
                    "channels": [
                      {
                        "search": [
                          {
                            "query": "foo",
                            "hits": [
                              {
                                "confidence": 42,
                                "start": 42,
                                "end": 42,
                                "snippet": "foo"
                              }
                            ]
                          }
                        ],
                        "alternatives": [
                          {
                            "transcript": "foo",
                            "confidence": 42,
                            "words": [
                              {
                                "word": "foo",
                                "start": 42,
                                "end": 42,
                                "confidence": 42
                              }
                            ],
                            "paragraphs": {
                              "transcript": "foo",
                              "paragraphs": [
                                {
                                  "sentences": [
                                    {
                                      "text": "foo",
                                      "start": 42,
                                      "end": 42
                                    }
                                  ],
                                  "speaker": 42,
                                  "num_words": 42,
                                  "start": 42,
                                  "end": 42
                                }
                              ]
                            },
                            "summaries": [
                              {
                                "summary": "foo",
                                "start_word": 42,
                                "end_word": 42
                              }
                            ],
                            "topics": [
                              {
                                "text": "foo",
                                "start_word": 42,
                                "end_word": 42,
                                "topics": [
                                  "foo"
                                ]
                              }
                            ]
                          }
                        ],
                        "detected_language": "foo"
                      }
                    ],
                    "utterances": [
                      {
                        "start": 42,
                        "end": 42,
                        "confidence": 42,
                        "channel": 42,
                        "transcript": "foo",
                        "words": [
                          {
                            "word": "foo",
                            "start": 42,
                            "end": 42,
                            "confidence": 42,
                            "speaker": 42,
                            "speaker_confidence": 42,
                            "punctuated_word": "foo"
                          }
                        ],
                        "speaker": 42,
                        "id": "foo"
                      }
                    ],
                    "summary": {
                      "result": "success",
                      "short": "Speaker 0 discusses the significance of the first all-female spacewalk with an all-female team, stating that it is a tribute to the skilled and qualified women who were denied opportunities in the past."
                    },
                    "topics": {
                      "results": {
                        "topics": {
                          "segments": [
                            {
                              "text": "And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                              "start_word": 32,
                              "end_word": 69,
                              "topics": [
                                {
                                  "topic": "Spacewalk",
                                  "confidence_score": 0.91581345
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "intents": {
                      "results": {
                        "intents": {
                          "segments": [
                            {
                              "text": "If you found this valuable, you can subscribe to the show on spotify or your favorite podcast app.",
                              "start_word": 354,
                              "end_word": 414,
                              "intents": [
                                {
                                  "intent": "Encourage podcasting",
                                  "confidence_score": 0.0038975573
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "sentiments": {
                      "segments": [
                        {
                          "text": "Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk, um, with an all-female team, I think many of us are looking forward to it just being normal. And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                          "start_word": 0,
                          "end_word": 69,
                          "sentiment": "positive",
                          "sentiment_score": 0.5810546875
                        }
                      ],
                      "average": {
                        "sentiment": "positive",
                        "sentiment_score": 0.5810185185185185
                      }
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_textIntelligence": {
      "subpackageId": "subpackage_textIntelligence",
      "name": "textIntelligence",
      "endpoints": [
        {
          "auth": true,
          "description": "Analyze text content using Deepgram's text analysis API",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "TextRead",
          "originalEndpointId": "Text Intelligence.TextRead",
          "name": "Analyze text content",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/read"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "URL to which we'll make the callback request",
              "key": "callback",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "HTTP method by which the callback request will be made",
              "key": "callback_method",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ReadPostParametersSchema"
                }
              }
            },
            {
              "description": "Custom topics you want the model to detect within your input audio or text if present Submit up to 100",
              "key": "custom_topic",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ReadPostParametersSchema"
                }
              }
            },
            {
              "description": "Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param",
              "key": "custom_topic_mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ReadPostParametersSchema"
                }
              }
            },
            {
              "description": "Recognizes speaker intent throughout a transcript or text",
              "key": "intents",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language",
              "key": "read_language",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ReadPostParametersSchema"
                }
              }
            },
            {
              "description": "Recognizes the sentiment throughout a transcript or text",
              "key": "sentiment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Summarize text",
              "key": "read_summarize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Detect topics throughout a transcript or text",
              "key": "topics",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "text_request"
                }
              },
              "description": "Analyze a text file"
            },
            "description": "Analyze a text file"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "text_response"
              }
            },
            "statusCode": 200,
            "description": "Successful text analysis"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/read",
              "pathParameters": {},
              "queryParameters": {
                "callback": "https://example.com",
                "callback_method": "PUT",
                "custom_topic": [
                  "unsubscribe",
                  "account%20deletion"
                ],
                "custom_topic_mode": "strict",
                "intents": true,
                "read_language": "en",
                "sentiment": true,
                "read_summarize": true,
                "topics": true
              },
              "headers": {},
              "requestBody": {
                "url": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "url": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "metadata": {
                    "metadata": {
                      "request_id": "d04af392-db11-4c1d-83e1-20e34f0b8999",
                      "created": "2024-11-18T23:47:44.674Z",
                      "language": "en",
                      "summary_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "sentiment_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "topics_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "intents_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      }
                    }
                  },
                  "results": {
                    "summary": {
                      "results": {
                        "summary": {
                          "text": "The summary of the text submitted."
                        }
                      }
                    },
                    "topics": {
                      "results": {
                        "topics": {
                          "segments": [
                            {
                              "text": "And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                              "start_word": 32,
                              "end_word": 69,
                              "topics": [
                                {
                                  "topic": "Spacewalk",
                                  "confidence_score": 0.91581345
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "intents": {
                      "results": {
                        "intents": {
                          "segments": [
                            {
                              "text": "If you found this valuable, you can subscribe to the show on spotify or your favorite podcast app.",
                              "start_word": 354,
                              "end_word": 414,
                              "intents": [
                                {
                                  "intent": "Encourage podcasting",
                                  "confidence_score": 0.0038975573
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "sentiments": {
                      "segments": [
                        {
                          "text": "Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk, um, with an all-female team, I think many of us are looking forward to it just being normal. And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                          "start_word": 0,
                          "end_word": 69,
                          "sentiment": "positive",
                          "sentiment_score": 0.5810546875
                        }
                      ],
                      "average": {
                        "sentiment": "positive",
                        "sentiment_score": 0.5810185185185185
                      }
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "metadata": {
                    "metadata": {
                      "request_id": "d04af392-db11-4c1d-83e1-20e34f0b8999",
                      "created": "2024-11-18T23:47:44.674Z",
                      "language": "en",
                      "summary_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "sentiment_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "topics_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      },
                      "intents_info": {
                        "model_uuid": "foo",
                        "input_tokens": 42,
                        "output_tokens": 42
                      }
                    }
                  },
                  "results": {
                    "summary": {
                      "results": {
                        "summary": {
                          "text": "The summary of the text submitted."
                        }
                      }
                    },
                    "topics": {
                      "results": {
                        "topics": {
                          "segments": [
                            {
                              "text": "And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                              "start_word": 32,
                              "end_word": 69,
                              "topics": [
                                {
                                  "topic": "Spacewalk",
                                  "confidence_score": 0.91581345
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "intents": {
                      "results": {
                        "intents": {
                          "segments": [
                            {
                              "text": "If you found this valuable, you can subscribe to the show on spotify or your favorite podcast app.",
                              "start_word": 354,
                              "end_word": 414,
                              "intents": [
                                {
                                  "intent": "Encourage podcasting",
                                  "confidence_score": 0.0038975573
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "sentiments": {
                      "segments": [
                        {
                          "text": "Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk, um, with an all-female team, I think many of us are looking forward to it just being normal. And, um, I think if it signifies anything, it is, uh, to honor the the women who came before us who, um, were skilled and qualified, um, and didn't get the the same opportunities that we have today.",
                          "start_word": 0,
                          "end_word": 69,
                          "sentiment": "positive",
                          "sentiment_score": 0.5810546875
                        }
                      ],
                      "average": {
                        "sentiment": "positive",
                        "sentiment_score": 0.5810185185185185
                      }
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_textToSpeech": {
      "subpackageId": "subpackage_textToSpeech",
      "name": "textToSpeech",
      "endpoints": [
        {
          "auth": true,
          "description": "Convert text into natural-sounding speech using Deepgram's TTS API",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "speak",
          "originalEndpointId": "Text to Speech.speak",
          "name": "Text to Speech transformation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/speak"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The bitrate of the audio in bits per second. Choose from predefined ranges or specific values based on the encoding type.",
              "key": "bit_rate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1SpeakPostParametersSchema"
                }
              }
            },
            {
              "description": "URL to which we'll make the callback request",
              "key": "callback",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Container specifies the file format wrapper for the output audio. The available options depend on the encoding type.",
              "key": "container",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1SpeakPostParametersSchema"
                }
              }
            },
            {
              "description": "Encoding allows you to specify the expected encoding of your audio output",
              "key": "speak_encoding",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1SpeakPostParametersSchema"
                }
              }
            },
            {
              "description": "AI model used to process submitted text",
              "key": "speak_model",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1SpeakPostParametersSchema"
                }
              }
            },
            {
              "description": "Sample Rate specifies the sample rate for the output audio. Based on the encoding, different sample rates are supported. For some encodings, the sample rate is not configurable",
              "key": "speak_sample_rate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1SpeakPostParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_request"
                }
              },
              "description": "Transform text to speech"
            },
            "description": "Transform text to speech"
          },
          "response": {
            "type": {
              "type": "fileDownload"
            },
            "statusCode": 200,
            "description": "Successful text to speech"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Insufficient permissions, Model not found",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ContentTooLargeError"
                }
              },
              "statusCode": 413,
              "description": "Payload too large",
              "name": "ContentTooLargeError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "UnsupportedMediaTypeError"
                }
              },
              "statusCode": 415,
              "description": "Unsupported media type",
              "name": "UnsupportedMediaTypeError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/speak",
              "pathParameters": {},
              "queryParameters": {
                "callback": "https://example.com",
                "speak_encoding": "linear16",
                "speak_model": "aura-asteria-en",
                "speak_sample_rate": 24000
              },
              "headers": {},
              "requestBody": {
                "text": "Hello, welcome to Deepgram!"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "text": "Hello, welcome to Deepgram!"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_managementApi": {
      "subpackageId": "subpackage_managementApi",
      "name": "managementApi",
      "endpoints": [
        {
          "auth": true,
          "description": "Retrieves basic information about the projects associated with the API key",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjects",
          "originalEndpointId": "Management API.listProjects",
          "name": "List Projects",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjects_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of projects"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "projects": [
                    {
                      "project_id": "foo",
                      "name": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "projects": [
                    {
                      "project_id": "foo",
                      "name": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves information about the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProject",
          "originalEndpointId": "Management API.getProject",
          "name": "Get a Project",
          "path": {
            "pathParameters": [
              {
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Number of results to return per page. Default 10. Range [1,1000]",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 10
                  }
                }
              }
            },
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "End date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Navigate and return the results to retrieve specific portions of information of the response",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProject_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "foo"
              },
              "queryParameters": {
                "limit": 10,
                "start": "2024-07-01T00:00:00",
                "end": "2024-07-31T00:00:00",
                "page": 10
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "project_id": "foo",
                  "name": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "foo",
                  "name": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the specified project",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteProject",
          "originalEndpointId": "Management API.deleteProject",
          "name": "Delete a Project",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteProject_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "Successfully deleted a project."
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "Successfully deleted a project."
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the name or other properties of an existing project",
          "method": "PATCH",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "updateProject",
          "originalEndpointId": "Management API.updateProject",
          "name": "Update a Project",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "update_projects"
                }
              },
              "description": "The name of the project"
            },
            "description": "The name of the project"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_updateProject_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "My Project"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "My Project"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "Successfully updated project info."
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "Successfully updated project info."
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Generates a list of outstanding balances for the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectBalances",
          "originalEndpointId": "Management API.getProjectBalances",
          "name": "Get Project Balances",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/balances"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectBalances_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of outstanding balances"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "balances": [
                    {
                      "balance_id": "b123456-7890-1234-5678-901234",
                      "amount": 250,
                      "units": "usd",
                      "purchase_order_id": "b123456-7890-1234-5678-901234"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "balances": [
                    {
                      "balance_id": "b123456-7890-1234-5678-901234",
                      "amount": 250,
                      "units": "usd",
                      "purchase_order_id": "b123456-7890-1234-5678-901234"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves details about the specified balance",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectBalance",
          "originalEndpointId": "Management API.getProjectBalance",
          "name": "Get a Project Balance",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the balance",
                "key": "balance_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/balances/"
              },
              {
                "type": "pathParameter",
                "value": "balance_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectBalance_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A specific balance"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "balance_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "balance_id": "b123456-7890-1234-5678-901234",
                  "amount": 250,
                  "units": "usd",
                  "purchase_order_id": "b123456-7890-1234-5678-901234"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "balance_id": "b123456-7890-1234-5678-901234",
                  "amount": 250,
                  "units": "usd",
                  "purchase_order_id": "b123456-7890-1234-5678-901234"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns metadata on all the latest models that a specific project has access to, including non-public models",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectModels",
          "originalEndpointId": "Management API.listProjectModels",
          "name": "Returns metadata on all the latest models",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/models"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "returns non-latest versions of models",
              "key": "include_outdated",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectModels_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of models"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "include_outdated": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "stt": [
                    [
                      {
                        "name": "conversationalai",
                        "canonical_name": "conversationalai",
                        "architecture": "base",
                        "languages": [
                          "foo"
                        ],
                        "version": "2021-11-10.1",
                        "uuid": "6b28e919-8427-4f32-9847-492e2efd7daf",
                        "batch": true,
                        "streaming": true,
                        "formatted_output": true
                      }
                    ]
                  ],
                  "tts": [
                    [
                      {
                        "name": "zeus",
                        "canonical_name": "aura-zeus-en",
                        "architecture": "aura",
                        "languages": [
                          "foo"
                        ],
                        "version": "2024-07-30.0",
                        "uuid": "9c28bce5-f144-4d32-9034-843aa7aed63e",
                        "metadata": {
                          "accent": "American",
                          "color": "#949498",
                          "image": "https://static.deepgram.com/examples/avatars/zeus.jpg",
                          "sample": "https://static.deepgram.com/examples/voices/zeus.wav",
                          "tags": [
                            "foo"
                          ]
                        }
                      }
                    ]
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "stt": [
                    [
                      {
                        "name": "conversationalai",
                        "canonical_name": "conversationalai",
                        "architecture": "base",
                        "languages": [
                          "foo"
                        ],
                        "version": "2021-11-10.1",
                        "uuid": "6b28e919-8427-4f32-9847-492e2efd7daf",
                        "batch": true,
                        "streaming": true,
                        "formatted_output": true
                      }
                    ]
                  ],
                  "tts": [
                    [
                      {
                        "name": "zeus",
                        "canonical_name": "aura-zeus-en",
                        "architecture": "aura",
                        "languages": [
                          "foo"
                        ],
                        "version": "2024-07-30.0",
                        "uuid": "9c28bce5-f144-4d32-9034-843aa7aed63e",
                        "metadata": {
                          "accent": "American",
                          "color": "#949498",
                          "image": "https://static.deepgram.com/examples/avatars/zeus.jpg",
                          "sample": "https://static.deepgram.com/examples/voices/zeus.wav",
                          "tags": [
                            "foo"
                          ]
                        }
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns metadata for a specific model",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectModel",
          "originalEndpointId": "Management API.getProjectModel",
          "name": "Get a Project Model",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/models/"
              },
              {
                "type": "pathParameter",
                "value": "model_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectModel_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A specific model"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "name": "conversationalai",
                    "canonical_name": "conversationalai",
                    "architecture": "base",
                    "languages": [
                      "foo"
                    ],
                    "version": "2021-11-10.1",
                    "uuid": "6b28e919-8427-4f32-9847-492e2efd7daf",
                    "batch": true,
                    "streaming": true,
                    "formatted_output": true
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "name": "conversationalai",
                    "canonical_name": "conversationalai",
                    "architecture": "base",
                    "languages": [
                      "foo"
                    ],
                    "version": "2021-11-10.1",
                    "uuid": "6b28e919-8427-4f32-9847-492e2efd7daf",
                    "batch": true,
                    "streaming": true,
                    "formatted_output": true
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves all API keys associated with the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectKeys",
          "originalEndpointId": "Management API.listProjectKeys",
          "name": "List Project Keys",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/keys"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectKeys_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of API keys"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "api_keys": [
                    [
                      {
                        "member": {
                          "member_id": "1000-2000-3000-4000",
                          "email": "john@test.com"
                        },
                        "api_key": {
                          "api_key_id": "1234567890abcdef1234567890abcdef",
                          "comment": "A comment",
                          "scopes": [
                            "foo"
                          ],
                          "created": "2021-01-01T00:00:00Z"
                        }
                      }
                    ]
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "api_keys": [
                    [
                      {
                        "member": {
                          "member_id": "1000-2000-3000-4000",
                          "email": "john@test.com"
                        },
                        "api_key": {
                          "api_key_id": "1234567890abcdef1234567890abcdef",
                          "comment": "A comment",
                          "scopes": [
                            "foo"
                          ],
                          "created": "2021-01-01T00:00:00Z"
                        }
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new API key with specified settings for the project",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "createProjectKey",
          "originalEndpointId": "Management API.createProjectKey",
          "name": "Create a Project Key",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/keys"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "keys"
                }
              },
              "description": "The API key settings"
            },
            "description": "The API key settings"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "key_created"
              }
            },
            "statusCode": 200,
            "description": "API key created successfully"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": [
                {}
              ],
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {}
                ]
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "api_key_id": "1234567890abcdef1234567890abcdef",
                  "key": "1234567890abcdef1234567890abcdef",
                  "scopes": [
                    "member"
                  ],
                  "tags": [
                    "tag-1"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "api_key_id": "1234567890abcdef1234567890abcdef",
                  "key": "1234567890abcdef1234567890abcdef",
                  "scopes": [
                    "member"
                  ],
                  "tags": [
                    "tag-1"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves information about a specified API key",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectKey",
          "originalEndpointId": "Management API.getProjectKey",
          "name": "Get a Project Key",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the API key",
                "key": "key_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/keys/"
              },
              {
                "type": "pathParameter",
                "value": "key_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectKey_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A specific API key"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "key_id": "123456789012345678901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "item": {
                    "member": {
                      "member_id": "1000-2000-3000-4000",
                      "email": "john@test.com",
                      "first_name": "John",
                      "last_name": "Doe",
                      "api_key": {
                        "api_key_id": "1234567890abcdef1234567890abcdef",
                        "comment": "A comment",
                        "scopes": [
                          "foo"
                        ],
                        "created": "2021-01-01T00:00:00Z"
                      }
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "item": {
                    "member": {
                      "member_id": "1000-2000-3000-4000",
                      "email": "john@test.com",
                      "first_name": "John",
                      "last_name": "Doe",
                      "api_key": {
                        "api_key_id": "1234567890abcdef1234567890abcdef",
                        "comment": "A comment",
                        "scopes": [
                          "foo"
                        ],
                        "created": "2021-01-01T00:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes an API key for a specific project",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteProjectKey",
          "originalEndpointId": "Management API.deleteProjectKey",
          "name": "Deletes an API key for a specific project",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the API key",
                "key": "key_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/keys/"
              },
              {
                "type": "pathParameter",
                "value": "key_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteProjectKey_Response_200"
              }
            },
            "statusCode": 200,
            "description": "API key deleted"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "key_id": "123456789012345678901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "Successfully deleted the API key!"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "Successfully deleted the API key!"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves a list of account objects for a specific project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectMembers",
          "originalEndpointId": "Management API.listProjectMembers",
          "name": "List Project Members",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/members"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectMembers_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of account objects"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "members": [
                    {
                      "member_id": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "members": [
                    {
                      "member_id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Removes a member from the project using their unique member ID",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteProjectMember",
          "originalEndpointId": "Management API.deleteProjectMember",
          "name": "Delete a Project Member",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the Member",
                "key": "member_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/members/"
              },
              {
                "type": "pathParameter",
                "value": "member_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteProjectMember_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Delete the specific member from the project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "member_id": "123456789012345678901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "Successfully removed account from project."
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "Successfully removed account from project."
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves a list of scopes for a specific member",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectMemberScopes",
          "originalEndpointId": "Management API.listProjectMemberScopes",
          "name": "List Project Member Scopes",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the Member",
                "key": "member_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/members/"
              },
              {
                "type": "pathParameter",
                "value": "member_id"
              },
              {
                "type": "literal",
                "value": "/scopes"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectMemberScopes_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of scopes for a specific member"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "member_id": "123456789012345678901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "scopes": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "scopes": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the scopes for a specific member",
          "method": "PUT",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "updateProjectMemberScopes",
          "originalEndpointId": "Management API.updateProjectMemberScopes",
          "name": "Update Project Member Scopes",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the Member",
                "key": "member_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/members/"
              },
              {
                "type": "pathParameter",
                "value": "member_id"
              },
              {
                "type": "literal",
                "value": "/scopes"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "update_member_scope"
                }
              },
              "description": "A scope to update"
            },
            "description": "A scope to update"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_updateProjectMemberScopes_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Updated the scopes for a specific member"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "member_id": "123456789012345678901234"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "scope": "admin"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "scope": "admin"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "Successfully updated the account scopes."
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "Successfully updated the account scopes."
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Generates a list of invites for a specific project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectInvites",
          "originalEndpointId": "Management API.listProjectInvites",
          "name": "List Project Invites",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/invites"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectInvites_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of invites for a specific project"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "invites": [
                    {
                      "email": "foo",
                      "scope": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "invites": [
                    {
                      "email": "foo",
                      "scope": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Generates an invite for a specific project",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "createProjectInvite",
          "originalEndpointId": "Management API.createProjectInvite",
          "name": "Create a Project Invite",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/invites"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "create_project_invite"
                }
              },
              "description": "email to invite to the project"
            },
            "description": "email to invite to the project"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_createProjectInvite_Response_200"
              }
            },
            "statusCode": 200,
            "description": "The invite was successfully generated"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "email": "foo",
                "scope": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "email": "foo",
                  "scope": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes an invite for a specific project",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteProjectInvite",
          "originalEndpointId": "Management API.deleteProjectInvite",
          "name": "Delete a Project Invite",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The email address of the member",
                "key": "email",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/invites/"
              },
              {
                "type": "pathParameter",
                "value": "email"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteProjectInvite_Response_200"
              }
            },
            "statusCode": 200,
            "description": "The invite was successfully deleted"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "email": "john.doe@example.com"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Removes the authenticated account from the specific project",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteProjectLeave",
          "originalEndpointId": "Management API.deleteProjectLeave",
          "name": "Leave a Project",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/leave"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteProjectLeave_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successfully removed account from project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Generates a list of requests for a specific project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectRequests",
          "originalEndpointId": "Management API.listProjectRequests",
          "name": "List Project Requests",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/requests"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "End date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Number of results to return per page. Default 10. Range [1,1000]",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 10
                  }
                }
              }
            },
            {
              "description": "Navigate and return the results to retrieve specific portions of information of the response",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectRequests_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of requests for a specific project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "start": "2024-07-01T00:00:00",
                "end": "2024-07-31T00:00:00",
                "limit": 10,
                "page": 10
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "page": 42,
                  "limit": 42,
                  "requests": [
                    {
                      "request_id": "foo",
                      "project_uuid": "foo",
                      "created": "foo",
                      "path": "foo",
                      "api_key_id": "foo",
                      "response": {},
                      "code": 42,
                      "deployment": "foo",
                      "callback": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "page": 42,
                  "limit": 42,
                  "requests": [
                    {
                      "request_id": "foo",
                      "project_uuid": "foo",
                      "created": "foo",
                      "path": "foo",
                      "api_key_id": "foo",
                      "response": {},
                      "code": 42,
                      "deployment": "foo",
                      "callback": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves a specific request for a specific project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectRequest",
          "originalEndpointId": "Management API.getProjectRequest",
          "name": "Get a Project Request",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The unique identifier of the request",
                "key": "request_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/requests/"
              },
              {
                "type": "pathParameter",
                "value": "request_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectRequest_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A specific request for a specific project"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "request_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request": {
                    "request_id": "foo",
                    "project_uuid": "foo",
                    "created": "foo",
                    "path": "foo",
                    "api_key_id": "foo",
                    "response": {},
                    "code": 42,
                    "deployment": "foo",
                    "callback": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request": {
                    "request_id": "foo",
                    "project_uuid": "foo",
                    "created": "foo",
                    "path": "foo",
                    "api_key_id": "foo",
                    "response": {},
                    "code": 42,
                    "deployment": "foo",
                    "callback": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves the usage for a specific project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectUsage",
          "originalEndpointId": "Management API.getProjectUsage",
          "name": "Get Project Usage",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/usage"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "End date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Common filter parameters",
              "key": "project_filters",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdUsageGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectUsage_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Usage Summary"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "start": "2024-07-01T00:00:00",
                "end": "2024-07-31T00:00:00"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "start": "2024-10-16",
                  "end": "2024-10-23",
                  "resolution": {
                    "units": "day",
                    "amount": 1
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "start": "2024-10-16",
                  "end": "2024-10-23",
                  "resolution": {
                    "units": "day",
                    "amount": 1
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists the features, models, tags, languages, and processing method used for requests in the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectUsageFields",
          "originalEndpointId": "Management API.listProjectUsageFields",
          "name": "List Project Usage Fields",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/usage/fields"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "End date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectUsageFields_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of fields for a specific project"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "start": "2024-07-01T00:00:00",
                "end": "2024-07-31T00:00:00"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "tags": [
                    "foo"
                  ],
                  "models": [
                    {
                      "name": "2-medical-nova",
                      "language": "en-MY",
                      "version": "2024-05-31.13574",
                      "model_id": "1234567890-12345-67890"
                    }
                  ],
                  "processing_methods": [
                    "foo"
                  ],
                  "features": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tags": [
                    "foo"
                  ],
                  "models": [
                    {
                      "name": "2-medical-nova",
                      "language": "en-MY",
                      "version": "2024-05-31.13574",
                      "model_id": "1234567890-12345-67890"
                    }
                  ],
                  "processing_methods": [
                    "foo"
                  ],
                  "features": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns the breakdown of usage for a specific project. Supports the following filter options:\n- &accessor={accessor_id} - The public API key accessor used\n- &deployment={deployment} - The deployment type used\n- &endpoint={endpoint} - The endpoint used\n- &feature_set={feature_set} - The collection of features used\n- &model={model_id} - The model used\n- &method={method} - The processing method used\n- &tags={tag} - Any tags used\n",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getProjectUsageBreakdown",
          "originalEndpointId": "Management API.getProjectUsageBreakdown",
          "name": "Get Project Usage Breakdown",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/usage/breakdown"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "End date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Common filter parameters",
              "key": "project_filters",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdUsageBreakdownGetParametersSchema"
                }
              }
            },
            {
              "description": "Filter options for usage breakdown. Multiple filters can be used with '&' prefix.\nExample: &model={model_id}&tags={tag}&accessor={accessor_id}\n",
              "key": "usage_breakdown_filters",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdUsageBreakdownGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getProjectUsageBreakdown_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Usage breakdown response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "start": "2024-07-01T00:00:00",
                "end": "2024-07-31T00:00:00"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "start": "2025-01-16",
                  "end": "2025-01-23",
                  "resolution": {
                    "units": "day",
                    "amount": 1
                  },
                  "results": [
                    {
                      "hours": 1619.7242069444444,
                      "total_hours": 1621.7395791666668,
                      "agent_hours": 41.33564388888889,
                      "tokens_in": 0,
                      "tokens_out": 0,
                      "tts_characters": 9158866,
                      "requests": 373381,
                      "grouping": {
                        "start": "2025-01-16",
                        "end": "2025-01-16",
                        "accessor": "123456789012345678901234",
                        "endpoint": "listen",
                        "feature_set": "punctuate",
                        "models": "Nova-2",
                        "method": "async",
                        "tags": "tag1",
                        "deployment": "self-hosted"
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "start": "2025-01-16",
                  "end": "2025-01-23",
                  "resolution": {
                    "units": "day",
                    "amount": 1
                  },
                  "results": [
                    {
                      "hours": 1619.7242069444444,
                      "total_hours": 1621.7395791666668,
                      "agent_hours": 41.33564388888889,
                      "tokens_in": 0,
                      "tokens_out": 0,
                      "tts_characters": 9158866,
                      "requests": 373381,
                      "grouping": {
                        "start": "2025-01-16",
                        "end": "2025-01-16",
                        "accessor": "123456789012345678901234",
                        "endpoint": "listen",
                        "feature_set": "punctuate",
                        "models": "Nova-2",
                        "method": "async",
                        "tags": "tag1",
                        "deployment": "self-hosted"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns the original purchased amount on an order transaction",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listProjectPurchases",
          "originalEndpointId": "Management API.listProjectPurchases",
          "name": "List Project Purchases",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/purchases"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start date of the requested date range. Formats accepted are YYYY-MM-DD, YYYY-MM-DDTHH:MM:SS, or YYYY-MM-DDTHH:MM:SS+HH:MM",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Number of results to return per page. Default 10. Range [1,1000]",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 10
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listProjectPurchases_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successful response with orders list"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "start": "2024-07-01T00:00:00",
                "limit": 10
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "orders": [
                    {
                      "order_id": "025e19ba-b6d9-4a04-9f99-4fe715aca5f1",
                      "expiration": "2026-03-04T00:00:00Z",
                      "created": "2023-02-21T21:13:40.014373Z",
                      "amount": 150,
                      "units": "usd",
                      "order_type": "promotional"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "orders": [
                    {
                      "order_id": "025e19ba-b6d9-4a04-9f99-4fe715aca5f1",
                      "expiration": "2026-03-04T00:00:00Z",
                      "created": "2023-02-21T21:13:40.014373Z",
                      "amount": 150,
                      "units": "usd",
                      "order_type": "promotional"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns metadata on all the latest public models",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listModels",
          "originalEndpointId": "Management API.listModels",
          "name": "List Project Models",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/models"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "returns non-latest versions of models",
              "key": "include_outdated",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listModels_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A list of all public models"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/models",
              "pathParameters": {},
              "queryParameters": {
                "include_outdated": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "stt": [
                    {
                      "name": "general",
                      "canonical_name": "enhanced-general",
                      "architecture": "polaris",
                      "languages": [
                        "foo"
                      ],
                      "version": "2022-05-18.1",
                      "uuid": "c7226e9e-ae1c-4057-ae2a-a71a6b0dc588",
                      "batch": true,
                      "streaming": true,
                      "formatted_output": false
                    }
                  ],
                  "tts": [
                    {
                      "name": "angus",
                      "canonical_name": "aura-angus-en",
                      "architecture": "aura",
                      "languages": [
                        "foo"
                      ],
                      "version": "2024-07-30.0",
                      "uuid": "eed36e9e-37aa-40a3-91fa-a2911e73a5da",
                      "metadata": {
                        "accent": "Irish",
                        "color": "#BA80F5",
                        "image": "https://static.deepgram.com/examples/avatars/angus.jpg",
                        "sample": "https://static.deepgram.com/examples/voices/angus.wav",
                        "tags": [
                          "foo"
                        ]
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "stt": [
                    {
                      "name": "general",
                      "canonical_name": "enhanced-general",
                      "architecture": "polaris",
                      "languages": [
                        "foo"
                      ],
                      "version": "2022-05-18.1",
                      "uuid": "c7226e9e-ae1c-4057-ae2a-a71a6b0dc588",
                      "batch": true,
                      "streaming": true,
                      "formatted_output": false
                    }
                  ],
                  "tts": [
                    {
                      "name": "angus",
                      "canonical_name": "aura-angus-en",
                      "architecture": "aura",
                      "languages": [
                        "foo"
                      ],
                      "version": "2024-07-30.0",
                      "uuid": "eed36e9e-37aa-40a3-91fa-a2911e73a5da",
                      "metadata": {
                        "accent": "Irish",
                        "color": "#BA80F5",
                        "image": "https://static.deepgram.com/examples/avatars/angus.jpg",
                        "sample": "https://static.deepgram.com/examples/voices/angus.wav",
                        "tags": [
                          "foo"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns metadata for a specific model",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getModel",
          "originalEndpointId": "Management API.getModel",
          "name": "Returns metadata for a specific model",
          "path": {
            "pathParameters": [
              {
                "description": "The specific UUID of the model",
                "key": "model_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/models/"
              },
              {
                "type": "pathParameter",
                "value": "model_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getModel_Response_200"
              }
            },
            "statusCode": 200,
            "description": "A model object that can be either STT or TTS"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "BadRequestError"
                }
              },
              "statusCode": 400,
              "description": "Project Bad Request",
              "name": "BadRequestError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/models/",
              "pathParameters": {
                "model_id": "af6e9977-99f6-4d8f-b6f5-dfdf6fb6e291"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "general",
                  "canonical_name": "enhanced-general",
                  "architecture": "polaris",
                  "languages": [
                    "foo"
                  ],
                  "version": "2022-05-18.1",
                  "uuid": "c7226e9e-ae1c-4057-ae2a-a71a6b0dc588",
                  "batch": true,
                  "streaming": true,
                  "formatted_output": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "general",
                  "canonical_name": "enhanced-general",
                  "architecture": "polaris",
                  "languages": [
                    "foo"
                  ],
                  "version": "2022-05-18.1",
                  "uuid": "c7226e9e-ae1c-4057-ae2a-a71a6b0dc588",
                  "batch": true,
                  "streaming": true,
                  "formatted_output": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists sets of distribution credentials for the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "listSelfHostedDistCreds",
          "originalEndpointId": "Management API.listSelfHostedDistCreds",
          "name": "List Project Self-Hosted Distribution Credentials",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/self-hosted/distribution/credentials"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_listSelfHostedDistCreds_Response_200"
              }
            },
            "statusCode": 200,
            "description": "List of distribution credentials"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "distribution_credentials": [
                    {
                      "member": {
                        "member_id": "3376abcd-8e5e-49d3-92d4-876d3a4f0363",
                        "email": "email@example.com"
                      },
                      "distribution_credentials": {
                        "distribution_credentials_id": "8b36cfd0-472f-4a21-833f-2d6343c3a2f3",
                        "provider": "quay",
                        "comment": "My Self-Hosted Distribution Credentials",
                        "scopes": [
                          "foo"
                        ],
                        "created": "2023-06-28T15:36:59.609841Z"
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "distribution_credentials": [
                    {
                      "member": {
                        "member_id": "3376abcd-8e5e-49d3-92d4-876d3a4f0363",
                        "email": "email@example.com"
                      },
                      "distribution_credentials": {
                        "distribution_credentials_id": "8b36cfd0-472f-4a21-833f-2d6343c3a2f3",
                        "provider": "quay",
                        "comment": "My Self-Hosted Distribution Credentials",
                        "scopes": [
                          "foo"
                        ],
                        "created": "2023-06-28T15:36:59.609841Z"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a set of distribution credentials for the specified project",
          "method": "POST",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "createSelfHostedDistCreds",
          "originalEndpointId": "Management API.createSelfHostedDistCreds",
          "name": "Create a Project Self-Hosted Distribution Credential",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/self-hosted/distribution/credentials"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Optional comment about the credentials",
              "key": "comment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "List of permission scopes for the credentials",
              "key": "scopes",
              "type": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchemaItems"
                }
              }
            },
            {
              "description": "The provider of the distribution service",
              "key": "provider",
              "type": {
                "type": "id",
                "value": "V1ProjectsProjectIdSelfHostedDistributionCredentialsPostParametersSchema"
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "create_distribution_creds"
                }
              },
              "description": "The set of distribution credentials to create"
            },
            "description": "The set of distribution credentials to create"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234"
              },
              "queryParameters": {
                "comment": "My Self-Hosted Distribution Credentials",
                "scopes": [
                  "self-hosted:products"
                ],
                "provider": "quay"
              },
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns a set of distribution credentials for the specified project",
          "method": "GET",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "getSelfHostedCredentials",
          "originalEndpointId": "Management API.getSelfHostedCredentials",
          "name": "Get a Project Self-Hosted Distribution Credential",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The UUID of the distribution credentials",
                "key": "distribution_credentials_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/self-hosted/distribution/credentials/"
              },
              {
                "type": "pathParameter",
                "value": "distribution_credentials_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_getSelfHostedCredentials_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Single distribution credential"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "distribution_credentials_id": "8b36cfd0-472f-4a21-833f-2d6343c3a2f3"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "member": {
                    "member_id": "c7b9b131-73f3-11d9-8665-0b00d2e44b83",
                    "email": "email@example.com"
                  },
                  "distribution_credentials": {
                    "distribution_credentials_id": "82c32c10-53b2-4d23-993f-864b3d44502a",
                    "provider": "quay",
                    "comment": "My Self-Hosted Distribution Credentials",
                    "scopes": [
                      "foo"
                    ],
                    "created": "2023-06-28T15:36:59.609841Z"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "member": {
                    "member_id": "c7b9b131-73f3-11d9-8665-0b00d2e44b83",
                    "email": "email@example.com"
                  },
                  "distribution_credentials": {
                    "distribution_credentials_id": "82c32c10-53b2-4d23-993f-864b3d44502a",
                    "provider": "quay",
                    "comment": "My Self-Hosted Distribution Credentials",
                    "scopes": [
                      "foo"
                    ],
                    "created": "2023-06-28T15:36:59.609841Z"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a set of distribution credentials for the specified project",
          "method": "DELETE",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "https://api.deepgram.com"
            }
          ],
          "id": "deleteSelfHostedDistCreds",
          "originalEndpointId": "Management API.deleteSelfHostedDistCreds",
          "name": "Delete a Project Self-Hosted Distribution Credential",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of the project",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The UUID of the distribution credentials",
                "key": "distribution_credentials_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/self-hosted/distribution/credentials/"
              },
              {
                "type": "pathParameter",
                "value": "distribution_credentials_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Management API_deleteSelfHostedDistCreds_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Single distribution credential"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "ForbiddenError"
                }
              },
              "statusCode": 403,
              "description": "Authentication failed",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "NotFoundError"
                }
              },
              "statusCode": 404,
              "description": "Project not found",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v1/projects/",
              "pathParameters": {
                "project_id": "123456-7890-1234-5678-901234",
                "distribution_credentials_id": "8b36cfd0-472f-4a21-833f-2d6343c3a2f3"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "member": {
                    "member_id": "c7b9b131-73f3-11d9-8665-0b00d2e44b83",
                    "email": "email@example.com"
                  },
                  "distribution_credentials": {
                    "distribution_credentials_id": "82c32c10-53b2-4d23-993f-864b3d44502a",
                    "provider": "quay",
                    "comment": "My Self-Hosted Distribution Credentials",
                    "scopes": [
                      "foo"
                    ],
                    "created": "2023-06-28T15:36:59.609841Z"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "member": {
                    "member_id": "c7b9b131-73f3-11d9-8665-0b00d2e44b83",
                    "email": "email@example.com"
                  },
                  "distribution_credentials": {
                    "distribution_credentials_id": "82c32c10-53b2-4d23-993f-864b3d44502a",
                    "provider": "quay",
                    "comment": "My Self-Hosted Distribution Credentials",
                    "scopes": [
                      "foo"
                    ],
                    "created": "2023-06-28T15:36:59.609841Z"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "textToSpeech": {
      "subpackageId": "textToSpeech",
      "name": "textToSpeech",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Deepgram Text to Speech WebSocket",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "wss://api.deepgram.com"
            }
          ],
          "id": "speak",
          "name": "speak",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": "/v1/speak"
              }
            ]
          },
          "headers": [
            {
              "key": "Authorization",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "API key for authentication. Format should be token <DEEPGRAM_API_KEY>"
            }
          ],
          "queryParameters": [
            {
              "description": "Encoding allows you to specify the expected encoding of your audio output",
              "key": "encoding",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "encoding"
                }
              }
            },
            {
              "description": "AI model used to process submitted text",
              "key": "model",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "model"
                }
              }
            },
            {
              "description": "Sample Rate specifies the sample rate for the output audio. Based on encoding 8000 or 24000 are possible defaults. For some encodings sample rate is not configurable.",
              "key": "sample_rate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "sample_rate"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "sendText",
              "displayName": "sendText",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_textToSpeechRequest"
                }
              },
              "description": "Send text to Deepgram's Text to Speech API"
            },
            {
              "type": "sendSpeakControlMessage",
              "displayName": "sendSpeakControlMessage",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_controlMessagesRequest"
                }
              },
              "description": "Send control messages to Deepgram's Text to Speech API"
            },
            {
              "type": "receiveAudio",
              "displayName": "receiveAudio",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_textToSpeechResponse"
                }
              },
              "description": "Receive audio from Deepgram's Text to Speech API"
            },
            {
              "type": "receiveSpeakControlResponse",
              "displayName": "receiveSpeakControlResponse",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_controlMessagesResponse"
                }
              },
              "description": "Receive control messages from Deepgram's Text to Speech API"
            },
            {
              "type": "receiveSpeakCloseFrame",
              "displayName": "receiveSpeakCloseFrame",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "speak_closeFrame"
                }
              },
              "description": "Receive close frame from Deepgram's Text to Speech API"
            }
          ],
          "examples": [
            {
              "path": "/v1/speak",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {
                "Authorization": "Authorization"
              },
              "messages": [
                {
                  "type": "sendText",
                  "body": {
                    "type": "Speak",
                    "text": "text"
                  }
                },
                {
                  "type": "receiveAudio",
                  "body": "string"
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "speechToText": {
      "subpackageId": "speechToText",
      "name": "speechToText",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Deepgram Speech to Text WebSocket",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "wss://api.deepgram.com"
            }
          ],
          "id": "listen",
          "name": "listen",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": "/v1/listen"
              }
            ]
          },
          "headers": [
            {
              "key": "Authorization",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "API key for authentication. Format should be token <DEEPGRAM_API_KEY>"
            }
          ],
          "queryParameters": [
            {
              "description": "URL to which we'll make the callback request",
              "key": "callback",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "HTTP method by which the callback request will be made",
              "key": "callback_method",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "callback_method"
                }
              }
            },
            {
              "description": "The number of channels in the submitted audio",
              "key": "channels",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "1"
                  }
                }
              }
            },
            {
              "description": "Recognize speaker changes. Each word in the transcript will be assigned a speaker number starting at 0",
              "key": "diarize",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "optional",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            {
              "description": "Version of the diarization feature to use. Only used when the diarization feature is enabled (`diarize=true` is passed to the API)",
              "key": "diarize_version",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "v2"
                }
              }
            },
            {
              "description": "Identify and extract key entities from content in submitted audio",
              "key": "dictation",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dictation"
                }
              }
            },
            {
              "description": "Specify the expected encoding of your submitted audio",
              "key": "encoding",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "encoding"
                }
              }
            },
            {
              "description": "Indicates how long Deepgram will wait to detect whether a speaker has finished speaking or pauses for a significant period of time. When set to a value, the streaming endpoint immediately finalizes the transcription for the processed time range and returns the transcript with a speech_final parameter set to true. Can also be set to false to disable endpointing",
              "key": "endpointing",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "10"
                  }
                }
              }
            },
            {
              "description": "Arbitrary key-value pairs that are attached to the API response for usage in downstream processing",
              "key": "extra",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Filler Words can help transcribe interruptions in your audio, like \"uh\" and \"um\"",
              "key": "filler_words",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "filler_words"
                }
              }
            },
            {
              "description": "Specifies whether the streaming endpoint should provide ongoing transcription updates as more audio is received. When set to true, the endpoint sends continuous updates, meaning transcription results may evolve over time",
              "key": "interim_results",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "interim_results"
                }
              }
            },
            {
              "description": "Key term prompting can boost or suppress specialized terminology and brands. Only compatible with Nova-3",
              "key": "keyterm",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "optional",
                  "itemType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "description": "Keywords can boost or suppress specialized terminology and brands",
              "key": "keywords",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model you choose only certain languages are available",
              "key": "language",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "language"
                }
              }
            },
            {
              "description": "AI model to use for the transcription",
              "key": "model",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "model"
                }
              }
            },
            {
              "description": "Transcribe each audio channel independently",
              "key": "multichannel",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "multichannel"
                }
              }
            },
            {
              "description": "Convert numbers from written format to numerical format",
              "key": "numerals",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "numerals"
                }
              }
            },
            {
              "description": "Profanity Filter looks for recognized profanity and converts it to the nearest recognized non-profane word or removes it from the transcript completely",
              "key": "profanity_filter",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "profanity_filter"
                }
              }
            },
            {
              "description": "Add punctuation and capitalization to the transcript",
              "key": "punctuate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "punctuate"
                }
              }
            },
            {
              "description": "Redaction removes sensitive information from your transcripts",
              "key": "redact",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "redact"
                }
              }
            },
            {
              "description": "Search for terms or phrases in submitted audio and replaces them",
              "key": "replace",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Sample rate of submitted audio. Required (and only read) when a value is provided for encoding",
              "key": "sample_rate",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Search for terms or phrases in submitted audio",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Apply formatting to transcript output. When set to true, additional formatting will be applied to transcripts to improve readability",
              "key": "smart_format",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "smart_format"
                }
              }
            },
            {
              "description": "Label your requests for the purpose of identification during usage reporting",
              "key": "tag",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Indicates how long Deepgram will wait to send an UtteranceEnd message after a word has been transcribed. Use with interim_results",
              "key": "utterance_end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Indicates that speech has started. You'll begin receiving Speech Started messages upon speech starting",
              "key": "vad_events",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "vad_events"
                }
              }
            },
            {
              "description": "Version of an AI model to use",
              "key": "version",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "latest"
                  }
                }
              }
            }
          ],
          "messages": [
            {
              "type": "sendAudio",
              "displayName": "sendAudio",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "listen_transcriptionRequest"
                }
              },
              "description": "Send audio to Deepgram's Speech to Text API"
            },
            {
              "type": "sendListenControlMessage",
              "displayName": "sendListenControlMessage",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "listen_controlMessagesRequest"
                }
              },
              "description": "Send control messages to Deepgram's Speech to Text API"
            },
            {
              "type": "receiveTranscription",
              "displayName": "receiveTranscription",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "listen_transcriptionResponse"
                }
              },
              "description": "Receive transcription from Deepgram's Speech to Text API"
            },
            {
              "type": "receiveListenControlResponse",
              "displayName": "receiveListenControlResponse",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "listen_controlMessageResponse"
                }
              },
              "description": "Receive control messages from Deepgram's Speech to Text API"
            },
            {
              "type": "receiveListenCloseFrame",
              "displayName": "receiveListenCloseFrame",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "listen_closeFrame"
                }
              },
              "description": "Receive close frame from Deepgram's Speech to Text API"
            }
          ],
          "examples": [
            {
              "path": "/v1/listen",
              "pathParameters": {},
              "queryParameters": {
                "diarize_version": "v2"
              },
              "headers": {
                "Authorization": "Authorization"
              },
              "messages": [
                {
                  "type": "sendAudio",
                  "body": "string"
                },
                {
                  "type": "receiveTranscription",
                  "body": {}
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_agent": {
      "subpackageId": "subpackage_agent",
      "name": "agent",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Deepgram Voice Agent WebSocket",
          "defaultEnvironment": "Deepgram Production API",
          "environments": [
            {
              "id": "Deepgram Production API",
              "baseUrl": "wss://agent.deepgram.com"
            }
          ],
          "id": "agent",
          "name": "agent",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": "/agent"
              }
            ]
          },
          "headers": [
            {
              "key": "Authorization",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "API key for authentication. Format should be token <DEEPGRAM_API_KEY>"
            }
          ],
          "queryParameters": [],
          "messages": [
            {
              "type": "sendSettingsConfiguration",
              "displayName": "sendSettingsConfiguration",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_settingsConfiguration"
                }
              },
              "description": "Send settings configuration to Deepgram's Voice Agent API"
            },
            {
              "type": "sendUpdateInstructions",
              "displayName": "sendUpdateInstructions",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_updateInstructions"
                }
              },
              "description": "Send update instructions to Deepgram's Voice Agent API"
            },
            {
              "type": "sendUpdateSpeak",
              "displayName": "sendUpdateSpeak",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_updateSpeak"
                }
              },
              "description": "Send update speak to Deepgram's Voice Agent API"
            },
            {
              "type": "sendInjectAgentMessage",
              "displayName": "sendInjectAgentMessage",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_injectAgentMessage"
                }
              },
              "description": "Send inject agent message to Deepgram's Voice Agent API"
            },
            {
              "type": "receiveInjectionRefused",
              "displayName": "receiveInjectionRefused",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_injectionRefused"
                }
              },
              "description": "Receive injection refused message from Deepgram's Voice Agent API"
            },
            {
              "type": "sendFunctionCallResponse",
              "displayName": "sendFunctionCallResponse",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_functionCallResponse"
                }
              },
              "description": "Send function call response to Deepgram's Voice Agent API"
            },
            {
              "type": "sendKeepAlive",
              "displayName": "sendKeepAlive",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_agentKeepAlive"
                }
              },
              "description": "Send keep alive to Deepgram's Voice Agent API"
            },
            {
              "type": "receiveWelcome",
              "displayName": "receiveWelcome",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_welcomeMessage"
                }
              },
              "description": "Receive welcome message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveSettingsApplied",
              "displayName": "receiveSettingsApplied",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_settingsApplied"
                }
              },
              "description": "Receive settings applied message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveConversationText",
              "displayName": "receiveConversationText",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_ConversationText"
                }
              },
              "description": "Receive conversation text from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveUserStartedSpeaking",
              "displayName": "receiveUserStartedSpeaking",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_userStartedSpeaking"
                }
              },
              "description": "Receive user started speaking message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveAgentThinking",
              "displayName": "receiveAgentThinking",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_agentThinking"
                }
              },
              "description": "Receive agent thinking message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveFunctionCallRequest",
              "displayName": "receiveFunctionCallRequest",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_functionCallRequest"
                }
              },
              "description": "Receive function call request from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveFunctionCalling",
              "displayName": "receiveFunctionCalling",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_functionCalling"
                }
              },
              "description": "Receive function calling message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveAgentStartedSpeaking",
              "displayName": "receiveAgentStartedSpeaking",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_agentStartedSpeaking"
                }
              },
              "description": "Receive agent started speaking message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveAgentAudioDone",
              "displayName": "receiveAgentAudioDone",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_agentAudioDone"
                }
              },
              "description": "Receive agent audio done message from Deepgram's Voice Agent API"
            },
            {
              "type": "receiveError",
              "displayName": "receiveError",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "agent_agentErrorResponse"
                }
              },
              "description": "Receive error response from Deepgram's Voice Agent API"
            }
          ],
          "examples": [
            {
              "path": "/agent",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {
                "Authorization": "Authorization"
              },
              "messages": [
                {
                  "type": "sendSettingsConfiguration",
                  "body": {
                    "type": "SettingsConfiguration",
                    "agent": {}
                  }
                },
                {
                  "type": "receiveInjectionRefused",
                  "body": {
                    "type": "InjectionRefused"
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "ListenRequest",
      "ListenRequestFile",
      "metadata",
      "channels",
      "utterances",
      "summary",
      "topics",
      "intents",
      "sentiments",
      "results",
      "response",
      "text_request_url",
      "text_request_text",
      "text_request",
      "text_metadata",
      "text_summary",
      "text_results",
      "text_response",
      "speak_request",
      "speak_response",
      "update_projects",
      "stt_models",
      "tts_models",
      "keys",
      "key_created",
      "key",
      "update_member_scope",
      "create_project_invite",
      "request",
      "create_distribution_creds",
      "speak_textToSpeechRequest",
      "speak_controlMessagesRequest",
      "speak_textToSpeechResponse",
      "speak_controlMessagesResponse",
      "speak_metadataResponse",
      "speak_errorResponse",
      "speak_successResponse",
      "speak_closeFrame",
      "listen_transcriptionRequest",
      "listen_controlMessagesRequest",
      "listen_transcriptionResponse",
      "listen_controlMessageResponse",
      "listen_metadataResponse",
      "listen_errorResponse",
      "listen_successResponse",
      "listen_closeFrame",
      "agent_settingsConfiguration",
      "agent_updateInstructions",
      "agent_updateSpeak",
      "agent_injectAgentMessage",
      "agent_injectionRefused",
      "agent_functionCallResponse",
      "agent_agentKeepAlive",
      "agent_welcomeMessage",
      "agent_settingsApplied",
      "agent_ConversationText",
      "agent_userStartedSpeaking",
      "agent_agentThinking",
      "agent_functionCallRequest",
      "agent_functionCalling",
      "agent_agentStartedSpeaking",
      "agent_agentAudioDone",
      "agent_agentErrorResponse"
    ],
    "subpackages": [
      "subpackage_speechToText",
      "subpackage_textIntelligence",
      "subpackage_textToSpeech",
      "subpackage_managementApi",
      "textToSpeech",
      "speechToText",
      "subpackage_agent"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "Authorization",
    "nameOverride": "Authorization"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}